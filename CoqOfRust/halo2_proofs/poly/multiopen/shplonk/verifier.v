(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module multiopen.
    Module shplonk.
      Module verifier.
        (*
        pub fn verify_proof<
            'r,
            'params: 'r,
            I,
            C: MultiMillerLoop,
            E: EncodedChallenge<C::G1Affine>,
            T: TranscriptRead<C::G1Affine, E>,
        >(
            params: &'params ParamsVerifier<C>,
            transcript: &mut T,
            queries: I,
        ) -> Result<PairMSM<C::G1Affine>, Error>
        where
            I: IntoIterator<Item = VerifierQuery<'r, C::G1Affine>> + Clone,
        {
            let intermediate_sets = construct_intermediate_sets(queries);
            let (rotation_sets, super_point_set) = (
                intermediate_sets.rotation_sets,
                intermediate_sets.super_point_set,
            );
        
            let y: ChallengeY<_> = transcript.squeeze_challenge_scalar();
            let v: ChallengeV<_> = transcript.squeeze_challenge_scalar();
        
            let h1 = transcript.read_point().map_err(|_| Error::SamplingError)?;
            let u: ChallengeU<_> = transcript.squeeze_challenge_scalar();
            let h2 = transcript.read_point().map_err(|_| Error::SamplingError)?;
        
            let (mut z_0_diff_inverse, mut z_0) = (C::Scalar::zero(), C::Scalar::zero());
            let (mut outer_msm, mut r_outer_acc) = (PreMSM::<C>::new(), C::Scalar::zero());
            for (i, rotation_set) in rotation_sets.iter().enumerate() {
                let diffs: Vec<C::Scalar> = super_point_set
                    .iter()
                    .filter(|point| !rotation_set.points.contains(point))
                    .copied()
                    .collect();
                let mut z_diff_i = evaluate_vanishing_polynomial(&diffs[..], *u);
        
                // normalize coefficients by the coefficient of the first commitment
                if i == 0 {
                    z_0 = evaluate_vanishing_polynomial(&rotation_set.points[..], *u);
                    z_0_diff_inverse = z_diff_i.invert().unwrap();
                    z_diff_i = C::Scalar::one();
                } else {
                    z_diff_i.mul_assign(z_0_diff_inverse);
                }
        
                let (mut inner_msm, mut r_inner_acc) = (ProjectiveMSM::new(), C::Scalar::zero());
                for commitment_data in rotation_set.commitments.iter() {
                    // calculate low degree equivalent
                    let r_x = lagrange_interpolate(&rotation_set.points[..], &commitment_data.evals()[..]);
                    let r_eval = eval_polynomial(&r_x[..], *u);
                    r_inner_acc = ( *y * r_inner_acc) + r_eval;
        
                    let inner_contrib = match commitment_data.get() {
                        CommitmentReference::Commitment(c) => c.to_curve(),
                        // TODO: we should support one more nested degree to append
                        // folded commitments to the inner_msm
                        CommitmentReference::MSM(msm) => msm.eval().to_curve(),
                    };
                    inner_msm.append_term(C::Scalar::one(), inner_contrib);
                }
                r_outer_acc = ( *v * r_outer_acc) + (r_inner_acc * z_diff_i);
        
                inner_msm.combine_with_base( *y);
                inner_msm.scale(z_diff_i);
                outer_msm.add_msm(inner_msm);
            }
            outer_msm.combine_with_base( *v);
            let mut outer_msm = outer_msm.normalize();
            outer_msm.append_term(-r_outer_acc, params.g1);
            outer_msm.append_term(-z_0, h1);
            outer_msm.append_term( *u, h2);
        
            let mut left = params.empty_msm();
            left.append_term(C::Scalar::one(), h2);
        
            let mut right = params.empty_msm();
            right.add_msm(&outer_msm);
        
            Ok(PairMSM::with(left, right))
        }
        *)
        Definition verify_proof (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ _ as I; C; E; T ], [ params; transcript; queries ] =>
            ltac:(M.monadic
              (let params := M.alloc (| params |) in
              let transcript := M.alloc (| transcript |) in
              let queries := M.alloc (| queries |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let intermediate_sets :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::poly::multiopen::shplonk::construct_intermediate_sets",
                            [
                              Ty.associated;
                              I;
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                [ Ty.associated ]
                            ]
                          |),
                          [ M.read (| queries |) ]
                        |)
                      |) in
                    M.match_operator (|
                      M.alloc (|
                        Value.Tuple
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                intermediate_sets,
                                "halo2_proofs::poly::multiopen::shplonk::IntermediateSets",
                                "rotation_sets"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                intermediate_sets,
                                "halo2_proofs::poly::multiopen::shplonk::IntermediateSets",
                                "super_point_set"
                              |)
                            |)
                          ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let rotation_sets := M.copy (| γ0_0 |) in
                            let super_point_set := M.copy (| γ0_1 |) in
                            let y :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::transcript::Transcript",
                                    T,
                                    [ Ty.associated; E ],
                                    "squeeze_challenge_scalar",
                                    [ Ty.path "halo2_proofs::poly::multiopen::shplonk::Y" ]
                                  |),
                                  [ M.read (| transcript |) ]
                                |)
                              |) in
                            let v :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::transcript::Transcript",
                                    T,
                                    [ Ty.associated; E ],
                                    "squeeze_challenge_scalar",
                                    [ Ty.path "halo2_proofs::poly::multiopen::shplonk::V" ]
                                  |),
                                  [ M.read (| transcript |) ]
                                |)
                              |) in
                            let h1 :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.path "std::io::error::Error" ],
                                            "map_err",
                                            [
                                              Ty.path "halo2_proofs::poly::Error";
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "std::io::error::Error" ] ]
                                                (Ty.path "halo2_proofs::poly::Error")
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "halo2_proofs::transcript::TranscriptRead",
                                                T,
                                                [ Ty.associated; E ],
                                                "read_point",
                                                []
                                              |),
                                              [ M.read (| transcript |) ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (Value.StructTuple
                                                              "halo2_proofs::poly::Error::SamplingError"
                                                              []))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::msm::PairMSM")
                                                          [ Ty.associated ];
                                                        Ty.path "halo2_proofs::poly::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "halo2_proofs::poly::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            let u :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::transcript::Transcript",
                                    T,
                                    [ Ty.associated; E ],
                                    "squeeze_challenge_scalar",
                                    [ Ty.path "halo2_proofs::poly::multiopen::shplonk::U" ]
                                  |),
                                  [ M.read (| transcript |) ]
                                |)
                              |) in
                            let h2 :=
                              M.copy (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.path "std::io::error::Error" ],
                                            "map_err",
                                            [
                                              Ty.path "halo2_proofs::poly::Error";
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "std::io::error::Error" ] ]
                                                (Ty.path "halo2_proofs::poly::Error")
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "halo2_proofs::transcript::TranscriptRead",
                                                T,
                                                [ Ty.associated; E ],
                                                "read_point",
                                                []
                                              |),
                                              [ M.read (| transcript |) ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (Value.StructTuple
                                                              "halo2_proofs::poly::Error::SamplingError"
                                                              []))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::msm::PairMSM")
                                                          [ Ty.associated ];
                                                        Ty.path "halo2_proofs::poly::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "halo2_proofs::poly::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              M.alloc (|
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "ff::Field",
                                        Ty.associated,
                                        [],
                                        "zero",
                                        []
                                      |),
                                      []
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "ff::Field",
                                        Ty.associated,
                                        [],
                                        "zero",
                                        []
                                      |),
                                      []
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let z_0_diff_inverse := M.copy (| γ0_0 |) in
                                    let z_0 := M.copy (| γ0_1 |) in
                                    M.match_operator (|
                                      M.alloc (|
                                        Value.Tuple
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::msm::PreMSM")
                                                  [ C ],
                                                "new",
                                                []
                                              |),
                                              []
                                            |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::Field",
                                                Ty.associated,
                                                [],
                                                "zero",
                                                []
                                              |),
                                              []
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let outer_msm := M.copy (| γ0_0 |) in
                                            let r_outer_acc := M.copy (| γ0_1 |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ]
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ],
                                                            [],
                                                            "enumerate",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                          [ Ty.associated ]
                                                                      ]
                                                                  ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                                          [
                                                                            Ty.associated;
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                              [ Ty.associated ]
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "deref",
                                                                    []
                                                                  |),
                                                                  [ rotation_sets ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                                                [
                                                                                  Ty.associated;
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          0
                                                                        |) in
                                                                      let γ1_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          1
                                                                        |) in
                                                                      let i := M.copy (| γ1_0 |) in
                                                                      let rotation_set :=
                                                                        M.copy (| γ1_1 |) in
                                                                      let diffs :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::copied::Copied")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::filter::Filter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ];
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.path
                                                                                          "bool")
                                                                                    ]
                                                                                ],
                                                                              [],
                                                                              "collect",
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.associated;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::filter::Filter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ];
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.path
                                                                                          "bool")
                                                                                    ],
                                                                                  [],
                                                                                  "copied",
                                                                                  [ Ty.associated ]
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ],
                                                                                      [],
                                                                                      "filter",
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.associated
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.path
                                                                                            "bool")
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                          "iter",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "deref",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              super_point_set
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.closure
                                                                                        (fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            match γ
                                                                                            with
                                                                                            | [ α0
                                                                                                ] =>
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            point :=
                                                                                                        M.copy (|
                                                                                                          γ
                                                                                                        |) in
                                                                                                      UnOp.Pure.not
                                                                                                        (M.call_closure (|
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              [
                                                                                                                Ty.associated
                                                                                                              ],
                                                                                                            "contains",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::deref::Deref",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  [
                                                                                                                    Ty.associated;
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ],
                                                                                                                [],
                                                                                                                "deref",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                  M.read (|
                                                                                                                    rotation_set
                                                                                                                  |),
                                                                                                                  "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                                                                                                                  "points"
                                                                                                                |)
                                                                                                              ]
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              M.read (|
                                                                                                                point
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |))))
                                                                                                ]
                                                                                              |)
                                                                                            | _ =>
                                                                                              M.impossible (||)
                                                                                            end))
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let z_diff_i :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "halo2_proofs::arithmetic::evaluate_vanishing_polynomial",
                                                                              [ Ty.associated ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::ops::range::RangeFull"
                                                                                  ],
                                                                                  "index",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  diffs;
                                                                                  Value.StructTuple
                                                                                    "core::ops::range::RangeFull"
                                                                                    []
                                                                                ]
                                                                              |);
                                                                              M.read (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::transcript::ChallengeScalar")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.path
                                                                                          "halo2_proofs::poly::multiopen::shplonk::U"
                                                                                      ],
                                                                                    [],
                                                                                    "deref",
                                                                                    []
                                                                                  |),
                                                                                  [ u ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      BinOp.Pure.eq
                                                                                        (M.read (|
                                                                                          i
                                                                                        |))
                                                                                        (Value.Integer
                                                                                          0)
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    z_0,
                                                                                    M.call_closure (|
                                                                                      M.get_function (|
                                                                                        "halo2_proofs::arithmetic::evaluate_vanishing_polynomial",
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::index::Index",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::ops::range::RangeFull"
                                                                                            ],
                                                                                            "index",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                rotation_set
                                                                                              |),
                                                                                              "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                                                                                              "points"
                                                                                            |);
                                                                                            Value.StructTuple
                                                                                              "core::ops::range::RangeFull"
                                                                                              []
                                                                                          ]
                                                                                        |);
                                                                                        M.read (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::transcript::ChallengeScalar")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::multiopen::shplonk::U"
                                                                                                ],
                                                                                              [],
                                                                                              "deref",
                                                                                              []
                                                                                            |),
                                                                                            [ u ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    z_0_diff_inverse,
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "subtle::CtOption")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                        "unwrap",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "ff::Field",
                                                                                            Ty.associated,
                                                                                            [],
                                                                                            "invert",
                                                                                            []
                                                                                          |),
                                                                                          [ z_diff_i
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    z_diff_i,
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "ff::Field",
                                                                                        Ty.associated,
                                                                                        [],
                                                                                        "one",
                                                                                        []
                                                                                      |),
                                                                                      []
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let _ :=
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::MulAssign",
                                                                                        Ty.associated,
                                                                                        [
                                                                                          Ty.associated
                                                                                        ],
                                                                                        "mul_assign",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        z_diff_i;
                                                                                        M.read (|
                                                                                          z_0_diff_inverse
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          Value.Tuple
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::msm::ProjectiveMSM")
                                                                                    [ C ],
                                                                                  "new",
                                                                                  []
                                                                                |),
                                                                                []
                                                                              |);
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "ff::Field",
                                                                                  Ty.associated,
                                                                                  [],
                                                                                  "zero",
                                                                                  []
                                                                                |),
                                                                                []
                                                                              |)
                                                                            ]
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_tuple_field (|
                                                                                  γ,
                                                                                  0
                                                                                |) in
                                                                              let γ0_1 :=
                                                                                M.SubPointer.get_tuple_field (|
                                                                                  γ,
                                                                                  1
                                                                                |) in
                                                                              let inner_msm :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let r_inner_acc :=
                                                                                M.copy (| γ0_1 |) in
                                                                              let _ :=
                                                                                M.use
                                                                                  (M.match_operator (|
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::collect::IntoIterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ]
                                                                                                ]
                                                                                            ],
                                                                                          [],
                                                                                          "into_iter",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                                    [
                                                                                                      Ty.associated;
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                                        [
                                                                                                          Ty.associated
                                                                                                        ]
                                                                                                    ]
                                                                                                ],
                                                                                              "iter",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                                        [
                                                                                                          Ty.associated;
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                                            [
                                                                                                              Ty.associated
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      rotation_set
                                                                                                    |),
                                                                                                    "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                                                                                                    "commitments"
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                iter :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.loop (|
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    _ :=
                                                                                                M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                                              [
                                                                                                                Ty.associated;
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                                                  [
                                                                                                                    Ty.associated
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ],
                                                                                                        [],
                                                                                                        "next",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        iter
                                                                                                      ]
                                                                                                    |)
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.alloc (|
                                                                                                          M.never_to_any (|
                                                                                                            M.read (|
                                                                                                              M.break (||)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)));
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              γ0_0 :=
                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                            γ,
                                                                                                            "core::option::Option::Some",
                                                                                                            0
                                                                                                          |) in
                                                                                                        let
                                                                                                              commitment_data :=
                                                                                                          M.copy (|
                                                                                                            γ0_0
                                                                                                          |) in
                                                                                                        let
                                                                                                              r_x :=
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_function (|
                                                                                                                "halo2_proofs::arithmetic::lagrange_interpolate",
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::index::Index",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      [
                                                                                                                        Ty.associated;
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "core::ops::range::RangeFull"
                                                                                                                    ],
                                                                                                                    "index",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                      M.read (|
                                                                                                                        rotation_set
                                                                                                                      |),
                                                                                                                      "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                                                                                                                      "points"
                                                                                                                    |);
                                                                                                                    Value.StructTuple
                                                                                                                      "core::ops::range::RangeFull"
                                                                                                                      []
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::index::Index",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      [
                                                                                                                        Ty.associated;
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "core::ops::range::RangeFull"
                                                                                                                    ],
                                                                                                                    "index",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.alloc (|
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                                                            [
                                                                                                                              Ty.associated;
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                                                                [
                                                                                                                                  Ty.associated
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                          "evals",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            commitment_data
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |);
                                                                                                                    Value.StructTuple
                                                                                                                      "core::ops::range::RangeFull"
                                                                                                                      []
                                                                                                                  ]
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |) in
                                                                                                        let
                                                                                                              r_eval :=
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_function (|
                                                                                                                "halo2_proofs::arithmetic::eval_polynomial",
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::index::Index",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      [
                                                                                                                        Ty.associated;
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "core::ops::range::RangeFull"
                                                                                                                    ],
                                                                                                                    "index",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    r_x;
                                                                                                                    Value.StructTuple
                                                                                                                      "core::ops::range::RangeFull"
                                                                                                                      []
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::deref::Deref",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::transcript::ChallengeScalar")
                                                                                                                        [
                                                                                                                          Ty.associated;
                                                                                                                          Ty.path
                                                                                                                            "halo2_proofs::poly::multiopen::shplonk::U"
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      "deref",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      u
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |) in
                                                                                                        let
                                                                                                              _ :=
                                                                                                          M.write (|
                                                                                                            r_inner_acc,
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::arith::Add",
                                                                                                                Ty.associated,
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ],
                                                                                                                "add",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Mul",
                                                                                                                    Ty.associated,
                                                                                                                    [
                                                                                                                      Ty.associated
                                                                                                                    ],
                                                                                                                    "mul",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::deref::Deref",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::transcript::ChallengeScalar")
                                                                                                                            [
                                                                                                                              Ty.associated;
                                                                                                                              Ty.path
                                                                                                                                "halo2_proofs::poly::multiopen::shplonk::Y"
                                                                                                                            ],
                                                                                                                          [],
                                                                                                                          "deref",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          y
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      r_inner_acc
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  r_eval
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |) in
                                                                                                        let
                                                                                                              inner_contrib :=
                                                                                                          M.copy (|
                                                                                                            M.match_operator (|
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                                                      [
                                                                                                                        Ty.associated;
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::poly::multiopen::CommitmentReference")
                                                                                                                          [
                                                                                                                            Ty.associated
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    "get",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      commitment_data
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |),
                                                                                                              [
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          γ0_0 :=
                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                        γ,
                                                                                                                        "halo2_proofs::poly::multiopen::CommitmentReference::Commitment",
                                                                                                                        0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          c :=
                                                                                                                      M.copy (|
                                                                                                                        γ0_0
                                                                                                                      |) in
                                                                                                                    M.alloc (|
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "group::prime::PrimeCurveAffine",
                                                                                                                          Ty.associated,
                                                                                                                          [],
                                                                                                                          "to_curve",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            c
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)));
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          γ0_0 :=
                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                        γ,
                                                                                                                        "halo2_proofs::poly::multiopen::CommitmentReference::MSM",
                                                                                                                        0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          msm :=
                                                                                                                      M.copy (|
                                                                                                                        γ0_0
                                                                                                                      |) in
                                                                                                                    M.alloc (|
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "group::prime::PrimeCurveAffine",
                                                                                                                          Ty.associated,
                                                                                                                          [],
                                                                                                                          "to_curve",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.alloc (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_associated_function (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::poly::msm::MSM")
                                                                                                                                  [
                                                                                                                                    Ty.associated
                                                                                                                                  ],
                                                                                                                                "eval",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  msm
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)))
                                                                                                              ]
                                                                                                            |)
                                                                                                          |) in
                                                                                                        let
                                                                                                              _ :=
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::poly::msm::ProjectiveMSM")
                                                                                                                  [
                                                                                                                    C
                                                                                                                  ],
                                                                                                                "append_term",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                inner_msm;
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "ff::Field",
                                                                                                                    Ty.associated,
                                                                                                                    [],
                                                                                                                    "one",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  []
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  inner_contrib
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)))
                                                                                                  ]
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |)))
                                                                                          |)))
                                                                                    ]
                                                                                  |)) in
                                                                              let _ :=
                                                                                M.write (|
                                                                                  r_outer_acc,
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::Add",
                                                                                      Ty.associated,
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                      "add",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::arith::Mul",
                                                                                          Ty.associated,
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                          "mul",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::deref::Deref",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::transcript::ChallengeScalar")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::poly::multiopen::shplonk::V"
                                                                                                  ],
                                                                                                [],
                                                                                                "deref",
                                                                                                []
                                                                                              |),
                                                                                              [ v ]
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            r_outer_acc
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::arith::Mul",
                                                                                          Ty.associated,
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                          "mul",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            r_inner_acc
                                                                                          |);
                                                                                          M.read (|
                                                                                            z_diff_i
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::poly::msm::ProjectiveMSM")
                                                                                        [ C ],
                                                                                      "combine_with_base",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      inner_msm;
                                                                                      M.read (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::deref::Deref",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::shplonk::Y"
                                                                                              ],
                                                                                            [],
                                                                                            "deref",
                                                                                            []
                                                                                          |),
                                                                                          [ y ]
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::poly::msm::ProjectiveMSM")
                                                                                        [ C ],
                                                                                      "scale",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      inner_msm;
                                                                                      M.read (|
                                                                                        z_diff_i
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::poly::msm::PreMSM")
                                                                                        [ C ],
                                                                                      "add_msm",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      outer_msm;
                                                                                      M.read (|
                                                                                        inner_msm
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::PreMSM")
                                                      [ C ],
                                                    "combine_with_base",
                                                    []
                                                  |),
                                                  [
                                                    outer_msm;
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::transcript::ChallengeScalar")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::multiopen::shplonk::V"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ v ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let outer_msm :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::PreMSM")
                                                      [ C ],
                                                    "normalize",
                                                    []
                                                  |),
                                                  [ M.read (| outer_msm |) ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::MSM")
                                                      [ Ty.associated ],
                                                    "append_term",
                                                    []
                                                  |),
                                                  [
                                                    outer_msm;
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Neg",
                                                        Ty.associated,
                                                        [],
                                                        "neg",
                                                        []
                                                      |),
                                                      [ M.read (| r_outer_acc |) ]
                                                    |);
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| params |),
                                                        "halo2_proofs::poly::commitment::ParamsVerifier",
                                                        "g1"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::MSM")
                                                      [ Ty.associated ],
                                                    "append_term",
                                                    []
                                                  |),
                                                  [
                                                    outer_msm;
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Neg",
                                                        Ty.associated,
                                                        [],
                                                        "neg",
                                                        []
                                                      |),
                                                      [ M.read (| z_0 |) ]
                                                    |);
                                                    M.read (| h1 |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::MSM")
                                                      [ Ty.associated ],
                                                    "append_term",
                                                    []
                                                  |),
                                                  [
                                                    outer_msm;
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::transcript::ChallengeScalar")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::multiopen::shplonk::U"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ u ]
                                                      |)
                                                    |);
                                                    M.read (| h2 |)
                                                  ]
                                                |)
                                              |) in
                                            let left :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::commitment::ParamsVerifier")
                                                      [ C ],
                                                    "empty_msm",
                                                    []
                                                  |),
                                                  [ M.read (| params |) ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::MSM")
                                                      [ Ty.associated ],
                                                    "append_term",
                                                    []
                                                  |),
                                                  [
                                                    left;
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "ff::Field",
                                                        Ty.associated,
                                                        [],
                                                        "one",
                                                        []
                                                      |),
                                                      []
                                                    |);
                                                    M.read (| h2 |)
                                                  ]
                                                |)
                                              |) in
                                            let right :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::commitment::ParamsVerifier")
                                                      [ C ],
                                                    "empty_msm",
                                                    []
                                                  |),
                                                  [ M.read (| params |) ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::msm::MSM")
                                                      [ Ty.associated ],
                                                    "add_msm",
                                                    []
                                                  |),
                                                  [ right; outer_msm ]
                                                |)
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "core::result::Result::Ok"
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                                        [ Ty.associated ],
                                                      "with",
                                                      []
                                                    |),
                                                    [ M.read (| left |); M.read (| right |) ]
                                                  |)
                                                ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
      End verifier.
    End shplonk.
  End multiopen.
End poly.
