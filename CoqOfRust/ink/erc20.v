(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Require CoqOfRust.ink.ink_storage.
Require CoqOfRust.ink.ink_env.
Require CoqOfRust.ink.ink.

Module erc20.
  Ltac AccountId :=
    refine
      (ink_env.types.Environment.AccountId
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac Balance :=
    refine
      (ink_env.types.Environment.Balance
        (Self := ink_env.types.DefaultEnvironment)).
  
  Module  Erc20.
  Section Erc20.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      total_supply :
        ink_storage_traits.storage.AutoStorableHint.Type_
          (Self := ltac:(erc20.erc20.Balance))
          (Trait := ltac:(refine _));
      balances :
        ink_storage_traits.storage.AutoStorableHint.Type_
          (Self := ink_storage.lazy.mapping.Mapping
            ltac:(erc20.erc20.AccountId)
            ltac:(erc20.erc20.Balance)
            ink_storage.lazy.mapping.Mapping.Default.KeyType)
          (Trait := ltac:(refine _));
      allowances :
        ink_storage_traits.storage.AutoStorableHint.Type_
          (Self := ink_storage.lazy.mapping.Mapping
            (M.Val
              (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId)))
            ltac:(erc20.erc20.Balance)
            ink_storage.lazy.mapping.Mapping.Default.KeyType)
          (Trait := ltac:(refine _));
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_total_supply : Notation.Dot "total_supply" := {
      Notation.dot x := let* x := M.read x in M.pure x.(total_supply) : M _;
    }.
    Global Instance Get_AF_total_supply :
      Notation.DoubleColon t "total_supply" := {
      Notation.double_colon x :=
        let* x := M.read x in M.pure x.(total_supply) : M _;
    }.
    Global Instance Get_balances : Notation.Dot "balances" := {
      Notation.dot x := let* x := M.read x in M.pure x.(balances) : M _;
    }.
    Global Instance Get_AF_balances : Notation.DoubleColon t "balances" := {
      Notation.double_colon x :=
        let* x := M.read x in M.pure x.(balances) : M _;
    }.
    Global Instance Get_allowances : Notation.Dot "allowances" := {
      Notation.dot x := let* x := M.read x in M.pure x.(allowances) : M _;
    }.
    Global Instance Get_AF_allowances : Notation.DoubleColon t "allowances" := {
      Notation.double_colon x :=
        let* x := M.read x in M.pure x.(allowances) : M _;
    }.
  End Erc20.
  End Erc20.
  Definition Erc20 `{ℋ : State.Trait} : Set := M.Val Erc20.t.
  
  Module  Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Env : Set := ink_env.types.DefaultEnvironment.
    
    Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
      ink_env.contract.ContractEnv.Env := Env;
    }.
  End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  
  Ltac Environment :=
    refine (ink_env.types.DefaultEnvironment).
  
  Ltac Hash :=
    refine
      (ink_env.types.Environment.Hash
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac Timestamp :=
    refine
      (ink_env.types.Environment.Timestamp
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac BlockNumber :=
    refine
      (ink_env.types.Environment.BlockNumber
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac ChainExtension :=
    refine
      (ink_env.types.Environment.ChainExtension
        (Self := ink_env.types.DefaultEnvironment)).
  
  Definition MAX_EVENT_TOPICS `{ℋ : State.Trait} : usize :=
    M.run
      (M.pure
        (ink_env.types.Environment.MAX_EVENT_TOPICS
          (Self := ink_env.types.DefaultEnvironment)
          (Trait := ltac:(refine _)))).
  
  Module  Impl_core_default_Default_for_erc20_erc20_Erc20.
  Section Impl_core_default_Default_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition default : M erc20.erc20.Erc20 :=
      M.function_body
        (let* α0 : ltac:(refine u128) :=
          core.default.Default.default
            (Self := u128)
            (Trait := ltac:(refine _)) in
        let*
            α1 :
            ltac:(refine
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) :=
          core.default.Default.default
            (Self :=
              ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
            (Trait := ltac:(refine _)) in
        let*
            α2 :
            ltac:(refine
              (ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) :=
          core.default.Default.default
            (Self :=
              ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
            (Trait := ltac:(refine _)) in
        M.alloc
          {|
            erc20.erc20.Erc20.total_supply := α0;
            erc20.erc20.Erc20.balances := α1;
            erc20.erc20.Erc20.allowances := α2;
          |}).
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance ℐ : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End Impl_core_default_Default_for_erc20_erc20_Erc20.
  End Impl_core_default_Default_for_erc20_erc20_Erc20.
  
  Module  Transfer.
  Section Transfer.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      from : core.option.Option ltac:(erc20.erc20.AccountId);
      to : core.option.Option ltac:(erc20.erc20.AccountId);
      value : ltac:(erc20.erc20.Balance);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_from : Notation.Dot "from" := {
      Notation.dot x := let* x := M.read x in M.pure x.(from) : M _;
    }.
    Global Instance Get_AF_from : Notation.DoubleColon t "from" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(from) : M _;
    }.
    Global Instance Get_to : Notation.Dot "to" := {
      Notation.dot x := let* x := M.read x in M.pure x.(to) : M _;
    }.
    Global Instance Get_AF_to : Notation.DoubleColon t "to" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(to) : M _;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in M.pure x.(value) : M _;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(value) : M _;
    }.
  End Transfer.
  End Transfer.
  Definition Transfer `{ℋ : State.Trait} : Set := M.Val Transfer.t.
  
  Module  Approval.
  Section Approval.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      owner : ltac:(erc20.erc20.AccountId);
      spender : ltac:(erc20.erc20.AccountId);
      value : ltac:(erc20.erc20.Balance);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_owner : Notation.Dot "owner" := {
      Notation.dot x := let* x := M.read x in M.pure x.(owner) : M _;
    }.
    Global Instance Get_AF_owner : Notation.DoubleColon t "owner" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(owner) : M _;
    }.
    Global Instance Get_spender : Notation.Dot "spender" := {
      Notation.dot x := let* x := M.read x in M.pure x.(spender) : M _;
    }.
    Global Instance Get_AF_spender : Notation.DoubleColon t "spender" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(spender) : M _;
    }.
    Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in M.pure x.(value) : M _;
    }.
    Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(value) : M _;
    }.
  End Approval.
  End Approval.
  Definition Approval `{ℋ : State.Trait} : Set := M.Val Approval.t.
  
  Module __ink_EventBase.
    Inductive t `{ℋ : State.Trait} : Set :=
    | Transfer (_ : erc20.erc20.Transfer)
    | Approval (_ : erc20.erc20.Approval).
  End __ink_EventBase.
  Definition __ink_EventBase `{ℋ : State.Trait} : Set :=
    M.Val __ink_EventBase.t.
  
  Module  Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  Section Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Transfer.
    
    Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
    
    Global Instance ℐ : ink.codegen.event.topics.EventLenTopics.Trait Self := {
      ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
    }.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  
  Module  Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  Section Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Approval.
    
    Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
    
    Global Instance ℐ : ink.codegen.event.topics.EventLenTopics.Trait Self := {
      ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
    }.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  
  Module  Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set := ltac:(erc20.erc20.Balance).
    
    Definition Output : Set := Self.
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition Error : Set :=
      ink.reflect.dispatch.ConstructorOutput.Error
        (Self := ink.reflect.dispatch.ConstructorOutputValue Self).
    
    Definition IS_RESULT : CoqOfRust.core.primitive.bool :=
      M.run
        (M.pure
          (ink.reflect.dispatch.ConstructorOutput.IS_RESULT
            (Self :=
              ink.reflect.dispatch.ConstructorOutputValue erc20.erc20.Erc20)
            (Trait := ltac:(refine _)))).
    
    Global Instance AssociatedFunction_IS_RESULT :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition CALLABLE : Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (erc20.erc20.Erc20::["new"] __ink_binding_0)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 155 in
        let* α1 : ltac:(refine u8) := M.alloc 174 in
        let* α2 : ltac:(refine u8) := M.alloc 157 in
        let* α3 : ltac:(refine u8) := M.alloc 94 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "new")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableConstructorInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableConstructorInfo.Input := Input;
      ink.reflect.dispatch.DispatchableConstructorInfo.Output := Output;
      ink.reflect.dispatch.DispatchableConstructorInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableConstructorInfo.Error := Error;
      ink.reflect.dispatch.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
      ink.reflect.dispatch.DispatchableConstructorInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableConstructorInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableConstructorInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  
  Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set := unit.
    
    Definition Output : Set := ltac:(erc20.erc20.Balance).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
          let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
          erc20.erc20.Erc20::["total_supply"] α1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 219 in
        let* α1 : ltac:(refine u8) := M.alloc 99 in
        let* α2 : ltac:(refine u8) := M.alloc 117 in
        let* α3 : ltac:(refine u8) := M.alloc 168 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "total_supply")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set := ltac:(erc20.erc20.AccountId).
    
    Definition Output : Set := ltac:(erc20.erc20.Balance).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
          let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
          erc20.erc20.Erc20::["balance_of"] α1 __ink_binding_0)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 15 in
        let* α1 : ltac:(refine u8) := M.alloc 117 in
        let* α2 : ltac:(refine u8) := M.alloc 90 in
        let* α3 : ltac:(refine u8) := M.alloc 86 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "balance_of")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId)).
    
    Definition Output : Set := ltac:(erc20.erc20.Balance).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
          let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
          erc20.erc20.Erc20::["allowance"] α1 __ink_binding_0 __ink_binding_1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 106 in
        let* α1 : ltac:(refine u8) := M.alloc 0 in
        let* α2 : ltac:(refine u8) := M.alloc 22 in
        let* α3 : ltac:(refine u8) := M.alloc 94 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "allowance")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance)).
    
    Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
          let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
            borrow_mut α0 in
          erc20.erc20.Erc20::["transfer"] α1 __ink_binding_0 __ink_binding_1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 132 in
        let* α1 : ltac:(refine u8) := M.alloc 161 in
        let* α2 : ltac:(refine u8) := M.alloc 93 in
        let* α3 : ltac:(refine u8) := M.alloc 161 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "transfer")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance)).
    
    Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
          let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
            borrow_mut α0 in
          erc20.erc20.Erc20::["approve"] α1 __ink_binding_0 __ink_binding_1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 104 in
        let* α1 : ltac:(refine u8) := M.alloc 18 in
        let* α2 : ltac:(refine u8) := M.alloc 102 in
        let* α3 : ltac:(refine u8) := M.alloc 160 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "approve")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      M.Val
        (ltac:(erc20.erc20.AccountId) *
          ltac:(erc20.erc20.AccountId) *
          ltac:(erc20.erc20.Balance)).
    
    Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
          let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
            borrow_mut α0 in
          erc20.erc20.Erc20::["transfer_from"]
            α1
            __ink_binding_0
            __ink_binding_1
            __ink_binding_2)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 : ltac:(refine u8) := M.alloc 11 in
        let* α1 : ltac:(refine u8) := M.alloc 57 in
        let* α2 : ltac:(refine u8) := M.alloc 111 in
        let* α3 : ltac:(refine u8) := M.alloc 24 in
        M.alloc [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (M.pure (mk_str "transfer_from")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module  Erc20Ref.
  Section Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      inner :
        ink.codegen.dispatch.info.ContractCallBuilder.Type_
          (Self := erc20.erc20.Erc20)
          (Trait := ltac:(refine _));
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_inner : Notation.Dot "inner" := {
      Notation.dot x := let* x := M.read x in M.pure x.(inner) : M _;
    }.
    Global Instance Get_AF_inner : Notation.DoubleColon t "inner" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(inner) : M _;
    }.
  End Erc20Ref.
  End Erc20Ref.
  Definition Erc20Ref `{ℋ : State.Trait} : Set := M.Val Erc20Ref.t.
  
  Module  Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  Section Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M ltac:(core.fmt.Result) :=
      M.function_body
        (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
        let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
        let* α2 : ltac:(refine str) := deref (mk_str "Erc20Ref") in
        let* α3 : ltac:(refine (ref str)) := borrow α2 in
        let* α4 : ltac:(refine str) := deref (mk_str "inner") in
        let* α5 : ltac:(refine (ref str)) := borrow α4 in
        let* α6 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α7 : ltac:(refine erc20.erc20._.CallBuilder) := α6.["inner"] in
        let* α8 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α7 in
        let* α9 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
          borrow α8 in
        let* α10 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := deref α9 in
        let* α11 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
          borrow α10 in
        let* α12 : ltac:(refine (ref type not implemented)) :=
          pointer_coercion "Unsize" α11 in
        core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  Section Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition hash
        {__H : Set}
        {ℋ_0 : core.hash.Hasher.Trait __H}
        (self : ref Self)
        (state : mut_ref __H)
        : M unit :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        let* α5 : ltac:(refine __H) := deref state in
        let* α6 : ltac:(refine (mut_ref __H)) := borrow_mut α5 in
        (core.hash.Hash.hash
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α4
          α6).
    
    Global Instance AssociatedFunction_hash
        {__H : Set}
        {ℋ_0 : core.hash.Hasher.Trait __H} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash (__H := __H);
    }.
    
    Global Instance ℐ : core.hash.Hash.Required.Trait Self := {
      core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
        hash (__H := __H);
      core.hash.Hash.hash_slice := Datatypes.None;
    }.
  End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
    }.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition eq
        (self : ref Self)
        (other : ref erc20.erc20.Erc20Ref)
        : M bool :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
        let* α3 : ltac:(refine erc20.erc20.Erc20Ref) := deref other in
        let* α4 : ltac:(refine erc20.erc20._.CallBuilder) := α3.["inner"] in
        let* α5 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α4 in
        (core.cmp.PartialEq.eq
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2
          α5).
    
    Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
      Notation.double_colon := eq;
    }.
    
    Global Instance ℐ :
      core.cmp.PartialEq.Required.Trait Self
        (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
      core.cmp.PartialEq.eq := eq;
      core.cmp.PartialEq.ne := Datatypes.None;
    }.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
    }.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      M.function_body
        (let* _ : ltac:(refine unit) := M.alloc tt in
        M.alloc tt).
    
    Global Instance AssociatedFunction_assert_receiver_is_total_eq :
      Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
      Notation.double_colon := assert_receiver_is_total_eq;
    }.
    
    Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
      core.cmp.Eq.assert_receiver_is_total_eq :=
        Datatypes.Some assert_receiver_is_total_eq;
    }.
  End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  Section Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition clone (self : ref Self) : M erc20.erc20.Erc20Ref :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        let* α5 : ltac:(refine erc20.erc20._.CallBuilder) :=
          (core.clone.Clone.clone
              (Self := erc20.erc20._.CallBuilder)
              (Trait := ltac:(refine _)))
            α4 in
        M.alloc {| erc20.erc20.Erc20Ref.inner := α5; |}).
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_erc20_erc20_Erc20Ref.
  Section Impl_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition new
        (__ink_binding_0 : ltac:(erc20.erc20.Balance))
        :
          M
            (ink_env.call.create_builder.CreateBuilder
              ltac:(erc20.erc20.Environment)
              Self
              (ink_env.call.common.Unset_ ltac:(erc20.erc20.Hash))
              (ink_env.call.common.Unset_ u64)
              (ink_env.call.common.Unset_ ltac:(erc20.erc20.Balance))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.Balance))
                    ltac:(ink_env.call.execution_input.EmptyArgumentList))))
              (ink_env.call.common.Unset_
                ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType Self))) :=
      M.function_body
        (let*
            α0 :
            ltac:(refine
              (ink_env.call.create_builder.CreateBuilder
                ink_env.types.DefaultEnvironment
                erc20.erc20.Erc20Ref
                (ink_env.call.common.Unset_ ink_primitives.types.Hash)
                (ink_env.call.common.Unset_ u64)
                (ink_env.call.common.Unset_ u128)
                (ink_env.call.common.Unset_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))
                (ink_env.call.common.Unset_
                  ink_env.call.create_builder.state.Salt)
                (ink_env.call.common.Unset_
                  (ink_env.call.common.ReturnType unit)))) :=
          ink_env.call.create_builder.build_create in
        let* α1 : ltac:(refine u8) := M.alloc 155 in
        let* α2 : ltac:(refine u8) := M.alloc 174 in
        let* α3 : ltac:(refine u8) := M.alloc 157 in
        let* α4 : ltac:(refine u8) := M.alloc 94 in
        let* α5 : ltac:(refine (array u8)) := M.alloc [ α1; α2; α3; α4 ] in
        let* α6 : ltac:(refine ink_env.call.selector.Selector) :=
          ink_env.call.selector.Selector::["new"] α5 in
        let*
            α7 :
            ltac:(refine
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd))) :=
          (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd))::["new"]
            α6 in
        let*
            α8 :
            ltac:(refine
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument u128)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))) :=
          (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
            α7
            __ink_binding_0 in
        let*
            α9 :
            ltac:(refine
              (ink_env.call.create_builder.CreateBuilder
                ink_env.types.DefaultEnvironment
                erc20.erc20.Erc20Ref
                (ink_env.call.common.Unset_ ink_primitives.types.Hash)
                (ink_env.call.common.Unset_ u64)
                (ink_env.call.common.Unset_ u128)
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd))))
                (ink_env.call.common.Unset_
                  ink_env.call.create_builder.state.Salt)
                (ink_env.call.common.Unset_
                  (ink_env.call.common.ReturnType unit)))) :=
          (ink_env.call.create_builder.CreateBuilder
                ink_env.types.DefaultEnvironment
                erc20.erc20.Erc20Ref
                (ink_env.call.common.Unset_ ink_primitives.types.Hash)
                (ink_env.call.common.Unset_ u64)
                (ink_env.call.common.Unset_ u128)
                (ink_env.call.common.Unset_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))
                (ink_env.call.common.Unset_
                  ink_env.call.create_builder.state.Salt)
                (ink_env.call.common.Unset_
                  (ink_env.call.common.ReturnType unit)))::["exec_input"]
            α0
            α8 in
        (ink_env.call.create_builder.CreateBuilder
              ink_env.types.DefaultEnvironment
              erc20.erc20.Erc20Ref
              (ink_env.call.common.Unset_ ink_primitives.types.Hash)
              (ink_env.call.common.Unset_ u64)
              (ink_env.call.common.Unset_ u128)
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd))))
              (ink_env.call.common.Unset_
                ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["returns"]
          α9).
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition total_supply (self : ref Self) : M ltac:(erc20.erc20.Balance) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
        let*
            α2 :
            ltac:(refine (core.result.Result u128 ink_primitives.LangError)) :=
          erc20.erc20.Erc20Ref::["try_total_supply"] α1 in
        (core.result.Result u128 ink_primitives.LangError)::["unwrap_or_else"]
          α2
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::total_supply: "
              ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
            borrow error in
          let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
          let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_total_supply :
      Notation.DoubleColon Self "total_supply" := {
      Notation.double_colon := total_supply;
    }.
    
    Definition try_total_supply
        (self : ref Self)
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Balance))) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
              (Self := erc20.erc20.Erc20Ref)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        let*
            α5 :
            ltac:(refine
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType u128)))) :=
          erc20.erc20._.CallBuilder::["total_supply"] α4 in
        let*
            α6 :
            ltac:(refine
              (core.result.Result
                (core.result.Result u128 ink_primitives.LangError)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType u128)))::["try_invoke"]
            α5 in
        (core.result.Result
              (core.result.Result u128 ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
          α6
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::total_supply: "
              ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow error in
          let*
              α6 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_try_total_supply :
      Notation.DoubleColon Self "try_total_supply" := {
      Notation.double_colon := try_total_supply;
    }.
    
    Definition balance_of
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
        let*
            α2 :
            ltac:(refine (core.result.Result u128 ink_primitives.LangError)) :=
          erc20.erc20.Erc20Ref::["try_balance_of"] α1 owner in
        (core.result.Result u128 ink_primitives.LangError)::["unwrap_or_else"]
          α2
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::balance_of: "
              ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
            borrow error in
          let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
          let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_balance_of :
      Notation.DoubleColon Self "balance_of" := {
      Notation.double_colon := balance_of;
    }.
    
    Definition try_balance_of
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Balance))) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
              (Self := erc20.erc20.Erc20Ref)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        let*
            α5 :
            ltac:(refine
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType u128)))) :=
          erc20.erc20._.CallBuilder::["balance_of"] α4 owner in
        let*
            α6 :
            ltac:(refine
              (core.result.Result
                (core.result.Result u128 ink_primitives.LangError)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType u128)))::["try_invoke"]
            α5 in
        (core.result.Result
              (core.result.Result u128 ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
          α6
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::balance_of: "
              ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow error in
          let*
              α6 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_try_balance_of :
      Notation.DoubleColon Self "try_balance_of" := {
      Notation.double_colon := try_balance_of;
    }.
    
    Definition allowance
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        (spender : ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
        let*
            α2 :
            ltac:(refine (core.result.Result u128 ink_primitives.LangError)) :=
          erc20.erc20.Erc20Ref::["try_allowance"] α1 owner spender in
        (core.result.Result u128 ink_primitives.LangError)::["unwrap_or_else"]
          α2
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::allowance: " ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
            borrow error in
          let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
          let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_allowance :
      Notation.DoubleColon Self "allowance" := {
      Notation.double_colon := allowance;
    }.
    
    Definition try_allowance
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        (spender : ltac:(erc20.erc20.AccountId))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Balance))) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
              (Self := erc20.erc20.Erc20Ref)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        let*
            α5 :
            ltac:(refine
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd)))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType u128)))) :=
          erc20.erc20._.CallBuilder::["allowance"] α4 owner spender in
        let*
            α6 :
            ltac:(refine
              (core.result.Result
                (core.result.Result u128 ink_primitives.LangError)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd)))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType u128)))::["try_invoke"]
            α5 in
        (core.result.Result
              (core.result.Result u128 ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
          α6
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::allowance: " ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow error in
          let*
              α6 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_try_allowance :
      Notation.DoubleColon Self "try_allowance" := {
      Notation.double_colon := try_allowance;
    }.
    
    Definition transfer
        (self : mut_ref Self)
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) :=
          borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)) :=
          erc20.erc20.Erc20Ref::["try_transfer"] α1 to value in
        (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)::["unwrap_or_else"]
          α2
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::transfer: " ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
            borrow error in
          let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
          let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_transfer :
      Notation.DoubleColon Self "transfer" := {
      Notation.double_colon := transfer;
    }.
    
    Definition try_transfer
        (self : mut_ref Self)
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
              (Self := erc20.erc20.Erc20Ref)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          borrow_mut α3 in
        let*
            α5 :
            ltac:(refine
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd)))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType
                    (core.result.Result unit erc20.erc20.Error))))) :=
          erc20.erc20._.CallBuilder::["transfer"] α4 to value in
        let*
            α6 :
            ltac:(refine
              (core.result.Result
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd)))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType
                    (core.result.Result
                      unit
                      erc20.erc20.Error))))::["try_invoke"]
            α5 in
        (core.result.Result
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
          α6
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::transfer: " ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow error in
          let*
              α6 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_try_transfer :
      Notation.DoubleColon Self "try_transfer" := {
      Notation.double_colon := try_transfer;
    }.
    
    Definition approve
        (self : mut_ref Self)
        (spender : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) :=
          borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)) :=
          erc20.erc20.Erc20Ref::["try_approve"] α1 spender value in
        (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)::["unwrap_or_else"]
          α2
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::approve: " ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
            borrow error in
          let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
          let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_approve :
      Notation.DoubleColon Self "approve" := {
      Notation.double_colon := approve;
    }.
    
    Definition try_approve
        (self : mut_ref Self)
        (spender : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
              (Self := erc20.erc20.Erc20Ref)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          borrow_mut α3 in
        let*
            α5 :
            ltac:(refine
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd)))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType
                    (core.result.Result unit erc20.erc20.Error))))) :=
          erc20.erc20._.CallBuilder::["approve"] α4 spender value in
        let*
            α6 :
            ltac:(refine
              (core.result.Result
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd)))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType
                    (core.result.Result
                      unit
                      erc20.erc20.Error))))::["try_invoke"]
            α5 in
        (core.result.Result
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
          α6
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::approve: " ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow error in
          let*
              α6 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_try_approve :
      Notation.DoubleColon Self "try_approve" := {
      Notation.double_colon := try_approve;
    }.
    
    Definition transfer_from
        (self : mut_ref Self)
        (from : ltac:(erc20.erc20.AccountId))
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) :=
          borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)) :=
          erc20.erc20.Erc20Ref::["try_transfer_from"] α1 from to value in
        (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)::["unwrap_or_else"]
          α2
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::transfer_from: "
              ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
            borrow error in
          let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
          let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_transfer_from :
      Notation.DoubleColon Self "transfer_from" := {
      Notation.double_colon := transfer_from;
    }.
    
    Definition try_transfer_from
        (self : mut_ref Self)
        (from : ltac:(erc20.erc20.AccountId))
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) :=
          borrow_mut α0 in
        let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
              (Self := erc20.erc20.Erc20Ref)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          borrow_mut α3 in
        let*
            α5 :
            ltac:(refine
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          (ink_env.call.execution_input.Argument
                            ink_primitives.types.AccountId)
                          (ink_env.call.execution_input.ArgumentList
                            ink_env.call.execution_input.ArgumentListEnd
                            ink_env.call.execution_input.ArgumentListEnd))))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType
                    (core.result.Result unit erc20.erc20.Error))))) :=
          erc20.erc20._.CallBuilder::["transfer_from"] α4 from to value in
        let*
            α6 :
            ltac:(refine
              (core.result.Result
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                ink_env.types.DefaultEnvironment
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    ink_env.types.DefaultEnvironment))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument u128)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          (ink_env.call.execution_input.Argument
                            ink_primitives.types.AccountId)
                          (ink_env.call.execution_input.ArgumentList
                            ink_env.call.execution_input.ArgumentListEnd
                            ink_env.call.execution_input.ArgumentListEnd))))))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType
                    (core.result.Result
                      unit
                      erc20.erc20.Error))))::["try_invoke"]
            α5 in
        (core.result.Result
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
          α6
          (let* α0 : ltac:(refine (array (ref str))) :=
            M.alloc
              [ mk_str "encountered error while calling Erc20::transfer_from: "
              ] in
          let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
          let* α2 : ltac:(refine (array (ref str))) := deref α1 in
          let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
          let* α4 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow error in
          let*
              α6 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
            borrow α6 in
          let* α8 : ltac:(refine core.fmt.rt.Argument) :=
            core.fmt.rt.Argument::["new_debug"] α7 in
          let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
            M.alloc [ α8 ] in
          let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α9 in
          let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
          let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
            borrow α11 in
          let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
            pointer_coercion "Unsize" α12 in
          let* α14 : ltac:(refine core.fmt.Arguments) :=
            core.fmt.Arguments::["new_v1"] α4 α13 in
          let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
          never_to_any α15)).
    
    Global Instance AssociatedFunction_try_transfer_from :
      Notation.DoubleColon Self "try_transfer_from" := {
      Notation.double_colon := try_transfer_from;
    }.
  End Impl_erc20_erc20_Erc20Ref.
  End Impl_erc20_erc20_Erc20Ref.
  
  Module  Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  Section Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition from_account_id
        (account_id : ltac:(erc20.erc20.AccountId))
        : M Self :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) :=
          (ink_env.call.create_builder.FromAccountId.from_account_id
              (Self := erc20.erc20._.CallBuilder)
              (Trait := ltac:(refine _)))
            account_id in
        M.alloc {| erc20.erc20.Erc20Ref.inner := α0; |}).
    
    Global Instance AssociatedFunction_from_account_id :
      Notation.DoubleColon Self "from_account_id" := {
      Notation.double_colon := from_account_id;
    }.
    
    Global Instance ℐ :
      ink_env.call.create_builder.FromAccountId.Trait Self
        (T := ltac:(erc20.erc20.Environment)) := {
      ink_env.call.create_builder.FromAccountId.from_account_id :=
        from_account_id;
    }.
  End Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  End Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  Section Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition to_account_id
        (self : ref Self)
        : M ltac:(erc20.erc20.AccountId) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α4).
    
    Global Instance AssociatedFunction_to_account_id :
      Notation.DoubleColon Self "to_account_id" := {
      Notation.double_colon := to_account_id;
    }.
    
    Global Instance ℐ :
      ink.contract_ref.ToAccountId.Trait Self
        (T := ltac:(erc20.erc20.Environment)) := {
      ink.contract_ref.ToAccountId.to_account_id := to_account_id;
    }.
  End Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  End Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  Section Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition as_ref
        (self : ref Self)
        : M (ref ltac:(erc20.erc20.AccountId)) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
        let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
        let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          (core.convert.AsRef.as_ref
              (Self := erc20.erc20._.CallBuilder)
              (Trait := ltac:(refine _)))
            α4 in
        let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
        borrow α6).
    
    Global Instance AssociatedFunction_as_ref :
      Notation.DoubleColon Self "as_ref" := {
      Notation.double_colon := as_ref;
    }.
    
    Global Instance ℐ :
      core.convert.AsRef.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
      core.convert.AsRef.as_ref := as_ref;
    }.
  End Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  End Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  
  Module  Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  Section Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition as_mut
        (self : mut_ref Self)
        : M (mut_ref ltac:(erc20.erc20.AccountId)) :=
      M.function_body
        (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
        let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
        let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
        let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
          borrow_mut α3 in
        let* α5 : ltac:(refine (mut_ref ink_primitives.types.AccountId)) :=
          (core.convert.AsMut.as_mut
              (Self := erc20.erc20._.CallBuilder)
              (Trait := ltac:(refine _)))
            α4 in
        let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
        let* α0 : ltac:(refine (mut_ref ink_primitives.types.AccountId)) :=
          borrow_mut α6 in
        let* α1 : ltac:(refine ink_primitives.types.AccountId) := deref α0 in
        borrow_mut α1).
    
    Global Instance AssociatedFunction_as_mut :
      Notation.DoubleColon Self "as_mut" := {
      Notation.double_colon := as_mut;
    }.
    
    Global Instance ℐ :
      core.convert.AsMut.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
      core.convert.AsMut.as_mut := as_mut;
    }.
  End Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  End Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  
  Module Error.
    Inductive t `{ℋ : State.Trait} : Set :=
    | InsufficientBalance
    | InsufficientAllowance.
  End Error.
  Definition Error `{ℋ : State.Trait} : Set := M.Val Error.t.
  
  Module  Impl_core_fmt_Debug_for_erc20_erc20_Error.
  Section Impl_core_fmt_Debug_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M ltac:(core.fmt.Result) :=
      M.function_body
        (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
        let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
        let* α2 := M.read self in
        let* α3 : ltac:(refine (ref str)) :=
          match α2 with
          | erc20.erc20.Error.InsufficientBalance  =>
            let* α0 : ltac:(refine str) :=
              deref (mk_str "InsufficientBalance") in
            borrow α0
          | erc20.erc20.Error.InsufficientAllowance  =>
            let* α0 : ltac:(refine str) :=
              deref (mk_str "InsufficientAllowance") in
            borrow α0
          end in
        core.fmt.Formatter::["write_str"] α1 α3).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_erc20_erc20_Error.
  End Impl_core_fmt_Debug_for_erc20_erc20_Error.
  
  Module  Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
    }.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  
  Module  Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  Section Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition eq (self : ref Self) (other : ref erc20.erc20.Error) : M bool :=
      M.function_body
        (let* __self_tag : ltac:(refine isize) :=
          let* α0 : ltac:(refine erc20.erc20.Error) := deref self in
          let* α1 : ltac:(refine (ref erc20.erc20.Error)) := borrow α0 in
          "unimplemented parent_kind" α1 in
        let* __arg1_tag : ltac:(refine isize) :=
          let* α0 : ltac:(refine erc20.erc20.Error) := deref other in
          let* α1 : ltac:(refine (ref erc20.erc20.Error)) := borrow α0 in
          "unimplemented parent_kind" α1 in
        BinOp.eq __self_tag __arg1_tag).
    
    Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
      Notation.double_colon := eq;
    }.
    
    Global Instance ℐ :
      core.cmp.PartialEq.Required.Trait Self
        (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
      core.cmp.PartialEq.eq := eq;
      core.cmp.PartialEq.ne := Datatypes.None;
    }.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  
  Module  Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  Section Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
    }.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  
  Module  Impl_core_cmp_Eq_for_erc20_erc20_Error.
  Section Impl_core_cmp_Eq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      M.function_body (M.alloc tt).
    
    Global Instance AssociatedFunction_assert_receiver_is_total_eq :
      Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
      Notation.double_colon := assert_receiver_is_total_eq;
    }.
    
    Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
      core.cmp.Eq.assert_receiver_is_total_eq :=
        Datatypes.Some assert_receiver_is_total_eq;
    }.
  End Impl_core_cmp_Eq_for_erc20_erc20_Error.
  End Impl_core_cmp_Eq_for_erc20_erc20_Error.
  
  Ltac Result T := refine (core.result.Result T erc20.erc20.Error).
End erc20.

Module  Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Env : Set := ink_env.types.DefaultEnvironment.
  
  Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
    ink_env.contract.ContractEnv.Env := Env;
  }.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.

Ltac Environment :=
  refine (ink_env.types.DefaultEnvironment).

Ltac AccountId :=
  refine
    (ink_env.types.Environment.AccountId
      (Self := ink_env.types.DefaultEnvironment)).

Ltac Balance :=
  refine
    (ink_env.types.Environment.Balance
      (Self := ink_env.types.DefaultEnvironment)).

Ltac Hash :=
  refine
    (ink_env.types.Environment.Hash
      (Self := ink_env.types.DefaultEnvironment)).

Ltac Timestamp :=
  refine
    (ink_env.types.Environment.Timestamp
      (Self := ink_env.types.DefaultEnvironment)).

Ltac BlockNumber :=
  refine
    (ink_env.types.Environment.BlockNumber
      (Self := ink_env.types.DefaultEnvironment)).

Ltac ChainExtension :=
  refine
    (ink_env.types.Environment.ChainExtension
      (Self := ink_env.types.DefaultEnvironment)).

Definition MAX_EVENT_TOPICS `{ℋ : State.Trait} : usize :=
  M.run
    (M.pure
      (ink_env.types.Environment.MAX_EVENT_TOPICS
        (Self := ink_env.types.DefaultEnvironment)
        (Trait := ltac:(refine _)))).

Module  Check.
Section Check.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    salt : unit;
    field_0 : ltac:(erc20.erc20.Balance);
    field_1 :
      ink_storage.lazy.mapping.Mapping
        ltac:(erc20.erc20.AccountId)
        ltac:(erc20.erc20.Balance)
        ink_storage.lazy.mapping.Mapping.Default.KeyType;
    field_2 :
      ink_storage.lazy.mapping.Mapping
        (M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId)))
        ltac:(erc20.erc20.Balance)
        ink_storage.lazy.mapping.Mapping.Default.KeyType;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_salt : Notation.Dot "salt" := {
    Notation.dot x := let* x := M.read x in M.pure x.(salt) : M _;
  }.
  Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(salt) : M _;
  }.
  Global Instance Get_field_0 : Notation.Dot "field_0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(field_0) : M _;
  }.
  Global Instance Get_AF_field_0 : Notation.DoubleColon t "field_0" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(field_0) : M _;
  }.
  Global Instance Get_field_1 : Notation.Dot "field_1" := {
    Notation.dot x := let* x := M.read x in M.pure x.(field_1) : M _;
  }.
  Global Instance Get_AF_field_1 : Notation.DoubleColon t "field_1" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(field_1) : M _;
  }.
  Global Instance Get_field_2 : Notation.Dot "field_2" := {
    Notation.dot x := let* x := M.read x in M.pure x.(field_2) : M _;
  }.
  Global Instance Get_AF_field_2 : Notation.DoubleColon t "field_2" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(field_2) : M _;
  }.
End Check.
End Check.
Definition Check `{ℋ : State.Trait} : Set := M.Val Check.t.

Module  Erc20.
Section Erc20.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    total_supply :
      ink_storage_traits.storage.AutoStorableHint.Type_
        (Self := ltac:(erc20.erc20.Balance))
        (Trait := ltac:(refine _));
    balances :
      ink_storage_traits.storage.AutoStorableHint.Type_
        (Self := ink_storage.lazy.mapping.Mapping
          ltac:(erc20.erc20.AccountId)
          ltac:(erc20.erc20.Balance)
          ink_storage.lazy.mapping.Mapping.Default.KeyType)
        (Trait := ltac:(refine _));
    allowances :
      ink_storage_traits.storage.AutoStorableHint.Type_
        (Self := ink_storage.lazy.mapping.Mapping
          (M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId)))
          ltac:(erc20.erc20.Balance)
          ink_storage.lazy.mapping.Mapping.Default.KeyType)
        (Trait := ltac:(refine _));
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_total_supply : Notation.Dot "total_supply" := {
    Notation.dot x := let* x := M.read x in M.pure x.(total_supply) : M _;
  }.
  Global Instance Get_AF_total_supply :
    Notation.DoubleColon t "total_supply" := {
    Notation.double_colon x :=
      let* x := M.read x in M.pure x.(total_supply) : M _;
  }.
  Global Instance Get_balances : Notation.Dot "balances" := {
    Notation.dot x := let* x := M.read x in M.pure x.(balances) : M _;
  }.
  Global Instance Get_AF_balances : Notation.DoubleColon t "balances" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(balances) : M _;
  }.
  Global Instance Get_allowances : Notation.Dot "allowances" := {
    Notation.dot x := let* x := M.read x in M.pure x.(allowances) : M _;
  }.
  Global Instance Get_AF_allowances : Notation.DoubleColon t "allowances" := {
    Notation.double_colon x :=
      let* x := M.read x in M.pure x.(allowances) : M _;
  }.
End Erc20.
End Erc20.
Definition Erc20 `{ℋ : State.Trait} : Set := M.Val Erc20.t.

Module  Impl_ink_storage_traits_storage_StorableHint___ink_generic_salt_for_erc20_erc20_Erc20.
Section Impl_ink_storage_traits_storage_StorableHint___ink_generic_salt_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Context {__ink_generic_salt : Set}.
  
  Context
    {ℋ_0 : ink_storage_traits.storage.StorageKey.Trait __ink_generic_salt}.
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Type_ : Set := erc20.erc20.Erc20.
  
  Definition PreferredKey : Set := ink_storage_traits.impls.AutoKey.
  
  Global Instance ℐ :
    ink_storage_traits.storage.StorableHint.Trait Self
      (Key := __ink_generic_salt) := {
    ink_storage_traits.storage.StorableHint.Type_ := Type_;
    ink_storage_traits.storage.StorableHint.PreferredKey := PreferredKey;
  }.
End Impl_ink_storage_traits_storage_StorableHint___ink_generic_salt_for_erc20_erc20_Erc20.
End Impl_ink_storage_traits_storage_StorableHint___ink_generic_salt_for_erc20_erc20_Erc20.

Module  Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.
Section Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition KEY : ltac:(ink_primitives.key.Key) :=
    M.run
      (M.pure
        (ink_storage_traits.storage.StorageKey.KEY
          (Self := unit)
          (Trait := ltac:(refine _)))).
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance ℐ :
    ink_storage_traits.storage.StorageKey.Required.Trait Self := {
    ink_storage_traits.storage.StorageKey.KEY := KEY;
    ink_storage_traits.storage.StorageKey.key := Datatypes.None;
  }.
End Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.
End Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.

Module  Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.
Section Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition decode
      {__ink_I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __ink_I}
      (__input : mut_ref __ink_I)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let* α0 : ltac:(refine __ink_I) := deref __input in
      let* α1 : ltac:(refine (mut_ref __ink_I)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result u128 parity_scale_codec.error.Error)) :=
        (ink_storage_traits.storage.Storable.decode
            (Self := u128)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                parity_scale_codec.error.Error)
              u128)) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result u128 parity_scale_codec.error.Error)
            (Trait := ltac:(refine _)))
          α2 in
      let* α4 := M.read α3 in
      let* α5 : ltac:(refine u128) :=
        match α4 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Erc20
                  parity_scale_codec.error.Error)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20.Erc20
                    parity_scale_codec.error.Error)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α6 : ltac:(refine __ink_I) := deref __input in
      let* α7 : ltac:(refine (mut_ref __ink_I)) := borrow_mut α6 in
      let*
          α8 :
          ltac:(refine
            (core.result.Result
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
              parity_scale_codec.error.Error)) :=
        (ink_storage_traits.storage.Storable.decode
            (Self :=
              ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
            (Trait := ltac:(refine _)))
          α7 in
      let*
          α9 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                parity_scale_codec.error.Error)
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit))))) :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.result.Result
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))
                parity_scale_codec.error.Error)
            (Trait := ltac:(refine _)))
          α8 in
      let* α10 := M.read α9 in
      let*
          α11 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        match α10 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Erc20
                  parity_scale_codec.error.Error)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20.Erc20
                    parity_scale_codec.error.Error)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α12 : ltac:(refine __ink_I) := deref __input in
      let* α13 : ltac:(refine (mut_ref __ink_I)) := borrow_mut α12 in
      let*
          α14 :
          ltac:(refine
            (core.result.Result
              (ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
              parity_scale_codec.error.Error)) :=
        (ink_storage_traits.storage.Storable.decode
            (Self :=
              ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
            (Trait := ltac:(refine _)))
          α13 in
      let*
          α15 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                parity_scale_codec.error.Error)
              (ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit))))) :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.result.Result
                (ink_storage.lazy.mapping.Mapping
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId))
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))
                parity_scale_codec.error.Error)
            (Trait := ltac:(refine _)))
          α14 in
      let* α16 := M.read α15 in
      let*
          α17 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        match α16 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Erc20
                  parity_scale_codec.error.Error)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20.Erc20
                    parity_scale_codec.error.Error)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α18 : ltac:(refine erc20.erc20.Erc20) :=
        M.alloc
          {|
            erc20.erc20.Erc20.total_supply := α5;
            erc20.erc20.Erc20.balances := α11;
            erc20.erc20.Erc20.allowances := α17;
          |} in
      M.alloc (core.result.Result.Ok α18)).
  
  Global Instance AssociatedFunction_decode
      {__ink_I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __ink_I} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__ink_I := __ink_I);
  }.
  
  Definition encode
      {__ink_O : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __ink_O}
      (self : ref Self)
      (__dest : mut_ref __ink_O)
      : M unit :=
    M.function_body
      (let* α0 := M.read self in
      match α0 with
      |
          {|
            erc20.erc20.Erc20.total_supply := __binding_0;
            erc20.erc20.Erc20.balances := __binding_1;
            erc20.erc20.Erc20.allowances := __binding_2;
          |}
          =>
        let* _ : ltac:(refine unit) :=
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine u128) := deref __binding_0 in
            let* α1 : ltac:(refine (ref u128)) := borrow α0 in
            let* α2 : ltac:(refine __ink_O) := deref __dest in
            let* α3 : ltac:(refine (mut_ref __ink_O)) := borrow_mut α2 in
            (ink_storage_traits.storage.Storable.encode
                (Self := u128)
                (Trait := ltac:(refine _)))
              α1
              α3 in
          M.alloc tt in
        let* _ : ltac:(refine unit) :=
          let* _ : ltac:(refine unit) :=
            let*
                α0 :
                ltac:(refine
                  (ink_storage.lazy.mapping.Mapping
                    ink_primitives.types.AccountId
                    u128
                    (ink_storage_traits.impls.ResolverKey
                      ink_storage_traits.impls.AutoKey
                      (ink_storage_traits.impls.ManualKey unit)))) :=
              deref __binding_1 in
            let*
                α1 :
                ltac:(refine
                  (ref
                    (ink_storage.lazy.mapping.Mapping
                      ink_primitives.types.AccountId
                      u128
                      (ink_storage_traits.impls.ResolverKey
                        ink_storage_traits.impls.AutoKey
                        (ink_storage_traits.impls.ManualKey unit))))) :=
              borrow α0 in
            let* α2 : ltac:(refine __ink_O) := deref __dest in
            let* α3 : ltac:(refine (mut_ref __ink_O)) := borrow_mut α2 in
            (ink_storage_traits.storage.Storable.encode
                (Self :=
                  ink_storage.lazy.mapping.Mapping
                    ink_primitives.types.AccountId
                    u128
                    (ink_storage_traits.impls.ResolverKey
                      ink_storage_traits.impls.AutoKey
                      (ink_storage_traits.impls.ManualKey unit)))
                (Trait := ltac:(refine _)))
              α1
              α3 in
          M.alloc tt in
        let* _ : ltac:(refine unit) :=
          let*
              α0 :
              ltac:(refine
                (ink_storage.lazy.mapping.Mapping
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId))
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))) :=
            deref __binding_2 in
          let*
              α1 :
              ltac:(refine
                (ref
                  (ink_storage.lazy.mapping.Mapping
                    (M.Val
                      (ink_primitives.types.AccountId *
                        ink_primitives.types.AccountId))
                    u128
                    (ink_storage_traits.impls.ResolverKey
                      ink_storage_traits.impls.AutoKey
                      (ink_storage_traits.impls.ManualKey unit))))) :=
            borrow α0 in
          let* α2 : ltac:(refine __ink_O) := deref __dest in
          let* α3 : ltac:(refine (mut_ref __ink_O)) := borrow_mut α2 in
          (ink_storage_traits.storage.Storable.encode
              (Self :=
                ink_storage.lazy.mapping.Mapping
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId))
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))
              (Trait := ltac:(refine _)))
            α1
            α3 in
        M.alloc tt
      end).
  
  Global Instance AssociatedFunction_encode
      {__ink_O : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __ink_O} :
    Notation.DoubleColon Self "encode" := {
    Notation.double_colon := encode (__ink_O := __ink_O);
  }.
  
  Global Instance ℐ : ink_storage_traits.storage.Storable.Trait Self := {
    ink_storage_traits.storage.Storable.decode
      {__ink_I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __ink_I} :=
      decode (__ink_I := __ink_I);
    ink_storage_traits.storage.Storable.encode
      {__ink_O : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __ink_O} :=
      encode (__ink_O := __ink_O);
  }.
End Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.
End Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.

Module  Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.
Section Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Identity : Set := Self.
  
  Definition type_info
      : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)) :=
        (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let*
          α1 :
          ltac:(refine (scale_info.ty.path.Path scale_info.form.MetaForm)) :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "Erc20")
          (mk_str "erc20::erc20") in
      let*
          α2 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let*
          α3 :
          ltac:(refine
            (alloc.vec.Vec
              (scale_info.ty.TypeParameter scale_info.form.MetaForm)
              alloc.alloc.Global)) :=
        (alloc.vec.Vec
            (scale_info.ty.TypeParameter scale_info.form.MetaForm)
            alloc.alloc.Global)::["new"] in
      let*
          α4 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["type_params"]
          α2
          α3 in
      let* α5 : ltac:(refine (array (ref str))) :=
        M.alloc [ mk_str "A simple ERC-20 contract." ] in
      let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
      let* α7 : ltac:(refine (array (ref str))) := deref α6 in
      let* α8 : ltac:(refine (ref (array (ref str)))) := borrow α7 in
      let* α9 : ltac:(refine (ref (slice (ref str)))) :=
        pointer_coercion "Unsize" α8 in
      let*
          α10 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["docs"]
          α4
          α9 in
      let*
          α11 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.Fields scale_info.form.MetaForm)::["named"] in
      let*
          α12 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α11
          (let*
              α0 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let*
              α1 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)::["name"]
              α0
              (mk_str "total_supply") in
          let*
              α2 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)::["type_name"]
              α1
              (mk_str
                "<Balance as::ink::storage::traits::AutoStorableHint<::ink::
storage::traits::ManualKey<375105693u32, ()>,>>::Type") in
          let* α3 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Total token supply." ] in
          let* α4 : ltac:(refine (ref (array (ref str)))) := borrow α3 in
          let* α5 : ltac:(refine (array (ref str))) := deref α4 in
          let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
          let* α7 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α6 in
          (scale_info.build.FieldBuilder
                scale_info.form.MetaForm
                scale_info.build.field_state.NameAssigned
                scale_info.build.field_state.TypeAssigned)::["docs"]
            α2
            α7) in
      let*
          α13 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α12
          (let*
              α0 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let*
              α1 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)::["name"]
              α0
              (mk_str "balances") in
          let*
              α2 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)::["type_name"]
              α1
              (mk_str
                "<Mapping<AccountId, Balance> as::ink::storage::traits::
AutoStorableHint<::ink::storage::traits::ManualKey<639884519u32, ()
>,>>::Type") in
          let* α3 : ltac:(refine (array (ref str))) :=
            M.alloc [ mk_str "Mapping from owner to number of owned token." ] in
          let* α4 : ltac:(refine (ref (array (ref str)))) := borrow α3 in
          let* α5 : ltac:(refine (array (ref str))) := deref α4 in
          let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
          let* α7 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α6 in
          (scale_info.build.FieldBuilder
                scale_info.form.MetaForm
                scale_info.build.field_state.NameAssigned
                scale_info.build.field_state.TypeAssigned)::["docs"]
            α2
            α7) in
      let*
          α14 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α13
          (let*
              α0 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let*
              α1 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)::["name"]
              α0
              (mk_str "allowances") in
          let*
              α2 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)::["type_name"]
              α1
              (mk_str
                "<Mapping<(AccountId, AccountId), Balance> as::ink::storage::traits
::AutoStorableHint<::ink::storage::traits::ManualKey<
3969917367u32, ()>,>>::Type") in
          let* α3 : ltac:(refine (array (ref str))) :=
            M.alloc
              [
                mk_str
                  "Mapping of the token amount which an account is allowed to withdraw";
                mk_str "from another account."
              ] in
          let* α4 : ltac:(refine (ref (array (ref str)))) := borrow α3 in
          let* α5 : ltac:(refine (array (ref str))) := deref α4 in
          let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
          let* α7 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α6 in
          (scale_info.build.FieldBuilder
                scale_info.form.MetaForm
                scale_info.build.field_state.NameAssigned
                scale_info.build.field_state.TypeAssigned)::["docs"]
            α2
            α7) in
      (scale_info.build.TypeBuilder
            scale_info.form.MetaForm
            scale_info.build.state.PathAssigned)::["composite"]
        α10
        α14).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.
Section Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition layout
      (__key : ref ltac:(ink_primitives.key.Key))
      : M (ink_metadata.layout.Layout ink_metadata.layout.Layout.Default.F) :=
    M.function_body
      (let* α0 : ltac:(refine u32) := deref __key in
      let* α1 : ltac:(refine (ref u32)) := borrow α0 in
      let*
          α2 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self := u128)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)::["new"]
          (mk_str "total_supply")
          α2 in
      let* α4 : ltac:(refine u32) := deref __key in
      let* α5 : ltac:(refine (ref u32)) := borrow α4 in
      let*
          α6 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self :=
              ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
            (Trait := ltac:(refine _)))
          α5 in
      let*
          α7 :
          ltac:(refine
            (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)::["new"]
          (mk_str "balances")
          α6 in
      let* α8 : ltac:(refine u32) := deref __key in
      let* α9 : ltac:(refine (ref u32)) := borrow α8 in
      let*
          α10 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self :=
              ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))
            (Trait := ltac:(refine _)))
          α9 in
      let*
          α11 :
          ltac:(refine
            (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)::["new"]
          (mk_str "allowances")
          α10 in
      let*
          α12 :
          ltac:(refine
            (array
              (ink_metadata.layout.FieldLayout scale_info.form.MetaForm))) :=
        M.alloc [ α3; α7; α11 ] in
      let*
          α13 :
          ltac:(refine
            (ink_metadata.layout.StructLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.StructLayout scale_info.form.MetaForm)::["new"]
          (mk_str "Erc20")
          α12 in
      M.alloc (ink_metadata.layout.Layout.Struct α13)).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance ℐ : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout := layout;
  }.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.

Module  Impl_core_default_Default_for_erc20_erc20_Erc20.
Section Impl_core_default_Default_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition default : M erc20.erc20.Erc20 :=
    M.function_body
      (let* α0 : ltac:(refine u128) :=
        core.default.Default.default
          (Self := u128)
          (Trait := ltac:(refine _)) in
      let*
          α1 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        core.default.Default.default
          (Self :=
            ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))
          (Trait := ltac:(refine _)) in
      let*
          α2 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        core.default.Default.default
          (Self :=
            ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))
          (Trait := ltac:(refine _)) in
      M.alloc
        {|
          erc20.erc20.Erc20.total_supply := α0;
          erc20.erc20.Erc20.balances := α1;
          erc20.erc20.Erc20.allowances := α2;
        |}).
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_erc20_erc20_Erc20.
End Impl_core_default_Default_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition NAME : ref str := M.run (M.pure (mk_str "Erc20")).
  
  Global Instance AssociatedFunction_NAME :
    Notation.DoubleColon Self "NAME" := {
    Notation.double_colon := NAME;
  }.
  
  Global Instance ℐ : ink.reflect.contract.ContractName.Trait Self := {
    ink.reflect.contract.ContractName.NAME := NAME;
  }.
End Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.
End Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.

Module  Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.
Section Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ref erc20.erc20.Erc20.
  
  Definition EnvAccess : Set :=
    ink.env_access.EnvAccess
      (ink_env.types.DefaultEnvironment).
  
  Definition env (self : Self) : M EnvAccess :=
    M.function_body
      (core.default.Default.default
        (Self := ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)
        (Trait := ltac:(refine _))).
  
  Global Instance AssociatedFunction_env : Notation.DoubleColon Self "env" := {
    Notation.double_colon := env;
  }.
  
  Global Instance ℐ : ink.codegen.env.Env.Trait Self := {
    ink.codegen.env.Env.EnvAccess := EnvAccess;
    ink.codegen.env.Env.env := env;
  }.
End Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.
End Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.

Module  Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.
Section Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition EnvAccess : Set :=
    ink.env_access.EnvAccess
      (ink_env.types.DefaultEnvironment).
  
  Definition env : M EnvAccess :=
    M.function_body
      (core.default.Default.default
        (Self := ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)
        (Trait := ltac:(refine _))).
  
  Global Instance AssociatedFunction_env : Notation.DoubleColon Self "env" := {
    Notation.double_colon := env;
  }.
  
  Global Instance ℐ : ink.codegen.env.StaticEnv.Trait Self := {
    ink.codegen.env.StaticEnv.EnvAccess := EnvAccess;
    ink.codegen.env.StaticEnv.env := env;
  }.
End Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.
End Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.

Module  Impl_ink_codegen_event_emit_EmitEvent_erc20_erc20_Erc20_for_ink_env_access_EnvAccess_erc20_erc20_Environment.
Section Impl_ink_codegen_event_emit_EmitEvent_erc20_erc20_Erc20_for_ink_env_access_EnvAccess_erc20_erc20_Environment.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set :=
    ink.env_access.EnvAccess ltac:(erc20.erc20.Environment).
  
  Definition emit_event
      {E : Set}
      {ℋ_0 :
        core.convert.Into.Trait E
          (T := ink.reflect.event.ContractEventBase.Type_
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _)))}
      (self : Self)
      (event : E)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.__ink_EventBase) :=
          (core.convert.Into.into (Self := E) (Trait := ltac:(refine _)))
            event in
        ink_env.api.emit_event α0 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_emit_event
      {E : Set}
      {ℋ_0 :
        core.convert.Into.Trait E
          (T := ink.reflect.event.ContractEventBase.Type_
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _)))} :
    Notation.DoubleColon Self "emit_event" := {
    Notation.double_colon := emit_event (E := E);
  }.
  
  Global Instance ℐ :
    ink.codegen.event.emit.EmitEvent.Trait Self (C := erc20.erc20.Erc20) := {
    ink.codegen.event.emit.EmitEvent.emit_event
      {E : Set}
      {ℋ_0 :
        core.convert.Into.Trait E
          (T := ink.reflect.event.ContractEventBase.Type_
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _)))} :=
      emit_event (E := E);
  }.
End Impl_ink_codegen_event_emit_EmitEvent_erc20_erc20_Erc20_for_ink_env_access_EnvAccess_erc20_erc20_Environment.
End Impl_ink_codegen_event_emit_EmitEvent_erc20_erc20_Erc20_for_ink_env_access_EnvAccess_erc20_erc20_Environment.

Module __ink_EventBase.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Transfer (_ : erc20.erc20.Transfer)
  | Approval (_ : erc20.erc20.Approval).
End __ink_EventBase.
Definition __ink_EventBase `{ℋ : State.Trait} : Set := M.Val __ink_EventBase.t.

Module  Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.
Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.__ink_EventBase.
  
  Definition encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M unit :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.__ink_EventBase) := deref self in
      let* α1 := M.read α0 in
      match α1 with
      | erc20.erc20.__ink_EventBase.Transfer aa =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine __CodecOutputEdqy) :=
            deref __codec_dest_edqy in
          let* α1 : ltac:(refine (mut_ref __CodecOutputEdqy)) :=
            borrow_mut α0 in
          let* α2 : ltac:(refine usize) := M.alloc 0 in
          let* α3 : ltac:(refine u8) := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine erc20.erc20.Transfer) := deref aa in
          let* α1 : ltac:(refine (ref erc20.erc20.Transfer)) := borrow α0 in
          let* α2 : ltac:(refine __CodecOutputEdqy) :=
            deref __codec_dest_edqy in
          let* α3 : ltac:(refine (mut_ref __CodecOutputEdqy)) :=
            borrow_mut α2 in
          (parity_scale_codec.codec.Encode.encode_to
              (Self := erc20.erc20.Transfer)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        M.alloc tt
      | erc20.erc20.__ink_EventBase.Approval aa =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine __CodecOutputEdqy) :=
            deref __codec_dest_edqy in
          let* α1 : ltac:(refine (mut_ref __CodecOutputEdqy)) :=
            borrow_mut α0 in
          let* α2 : ltac:(refine usize) := M.alloc 1 in
          let* α3 : ltac:(refine u8) := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine erc20.erc20.Approval) := deref aa in
          let* α1 : ltac:(refine (ref erc20.erc20.Approval)) := borrow α0 in
          let* α2 : ltac:(refine __CodecOutputEdqy) :=
            deref __codec_dest_edqy in
          let* α3 : ltac:(refine (mut_ref __CodecOutputEdqy)) :=
            borrow_mut α2 in
          (parity_scale_codec.codec.Encode.encode_to
              (Self := erc20.erc20.Approval)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        M.alloc tt
      | _ => M.alloc tt
      end).
  
  Global Instance AssociatedFunction_encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :
    Notation.DoubleColon Self "encode_to" := {
    Notation.double_colon := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Encode.Required.Trait Self := {
    parity_scale_codec.codec.Encode.encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :=
      Datatypes.Some (encode_to (__CodecOutputEdqy := __CodecOutputEdqy));
    parity_scale_codec.codec.Encode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Encode.size_hint := Datatypes.None;
    parity_scale_codec.codec.Encode.encode := Datatypes.None;
    parity_scale_codec.codec.Encode.using_encoded := Datatypes.None;
    parity_scale_codec.codec.Encode.encoded_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.

Module  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.
Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.__ink_EventBase.
  
  Global Instance ℐ :
    parity_scale_codec.encode_like.EncodeLike.Trait Self
      (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
  }.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.__ink_EventBase.
  
  Definition decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
      let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result u8 parity_scale_codec.error.Error)) :=
        (parity_scale_codec.codec.Input.read_byte
            (Self := __CodecInputEdqy)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (core.result.Result u8 parity_scale_codec.error.Error)) :=
        (core.result.Result u8 parity_scale_codec.error.Error)::["map_err"]
          α2
          (parity_scale_codec.error.Error::["chain"]
            e
            (mk_str
              "Could not decode `__ink_EventBase`, failed to read variant byte")) in
      let*
          α4 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                parity_scale_codec.error.Error)
              u8)) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result u8 parity_scale_codec.error.Error)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      let* α6 : ltac:(refine u8) :=
        match α5 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.__ink_EventBase
                  parity_scale_codec.error.Error)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20.__ink_EventBase
                    parity_scale_codec.error.Error)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α7 := M.read α6 in
      match α7 with
      | __codec_x_edqy =>
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine (mut_ref type not implemented)) :=
            borrow_mut
              (let*
                  __codec_res_edqy :
                  ltac:(refine
                    (core.result.Result
                      erc20.erc20.Transfer
                      parity_scale_codec.error.Error)) :=
                let* α0 : ltac:(refine __CodecInputEdqy) :=
                  deref __codec_input_edqy in
                let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) :=
                  borrow_mut α0 in
                (parity_scale_codec.codec.Decode.decode
                    (Self := erc20.erc20.Transfer)
                    (Trait := ltac:(refine _)))
                  α1 in
              let* α0 := M.read __codec_res_edqy in
              let* α0 : ltac:(refine erc20.erc20.Transfer) :=
                match α0 with
                | core.result.Result.Err e =>
                  let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
                    parity_scale_codec.error.Error::["chain"]
                      e
                      (mk_str
                        "Could not decode `__ink_EventBase::Transfer.0`") in
                  let*
                      α1 :
                      ltac:(refine
                        (core.result.Result
                          erc20.erc20.__ink_EventBase
                          parity_scale_codec.error.Error)) :=
                    M.alloc (core.result.Result.Err α0) in
                  let* α2 : ltac:(refine never) := M.return_ α1 in
                  never_to_any α2
                | core.result.Result.Ok __codec_res_edqy =>
                  M.pure __codec_res_edqy
                end in
              let* α1 : ltac:(refine erc20.erc20.__ink_EventBase) :=
                M.alloc (erc20.erc20.__ink_EventBase.Transfer α0) in
              M.alloc (core.result.Result.Ok α1)) in
          let* α1 : ltac:(refine unit) := M.alloc tt in
          let*
              α2 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.__ink_EventBase
                  parity_scale_codec.error.Error)) :=
            (core.ops.function.FnMut.call_mut
                (Self := type not implemented)
                (Trait := ltac:(refine _)))
              α0
              α1 in
          M.return_ α2 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      | __codec_x_edqy =>
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine (mut_ref type not implemented)) :=
            borrow_mut
              (let*
                  __codec_res_edqy :
                  ltac:(refine
                    (core.result.Result
                      erc20.erc20.Approval
                      parity_scale_codec.error.Error)) :=
                let* α0 : ltac:(refine __CodecInputEdqy) :=
                  deref __codec_input_edqy in
                let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) :=
                  borrow_mut α0 in
                (parity_scale_codec.codec.Decode.decode
                    (Self := erc20.erc20.Approval)
                    (Trait := ltac:(refine _)))
                  α1 in
              let* α0 := M.read __codec_res_edqy in
              let* α0 : ltac:(refine erc20.erc20.Approval) :=
                match α0 with
                | core.result.Result.Err e =>
                  let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
                    parity_scale_codec.error.Error::["chain"]
                      e
                      (mk_str
                        "Could not decode `__ink_EventBase::Approval.0`") in
                  let*
                      α1 :
                      ltac:(refine
                        (core.result.Result
                          erc20.erc20.__ink_EventBase
                          parity_scale_codec.error.Error)) :=
                    M.alloc (core.result.Result.Err α0) in
                  let* α2 : ltac:(refine never) := M.return_ α1 in
                  never_to_any α2
                | core.result.Result.Ok __codec_res_edqy =>
                  M.pure __codec_res_edqy
                end in
              let* α1 : ltac:(refine erc20.erc20.__ink_EventBase) :=
                M.alloc (erc20.erc20.__ink_EventBase.Approval α0) in
              M.alloc (core.result.Result.Ok α1)) in
          let* α1 : ltac:(refine unit) := M.alloc tt in
          let*
              α2 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.__ink_EventBase
                  parity_scale_codec.error.Error)) :=
            (core.ops.function.FnMut.call_mut
                (Self := type not implemented)
                (Trait := ltac:(refine _)))
              α0
              α1 in
          M.return_ α2 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      | _ =>
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine (ref type not implemented)) :=
            borrow
              (let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
                (core.convert.Into.into
                    (Self := ref str)
                    (Trait := ltac:(refine _)))
                  (mk_str
                    "Could not decode `__ink_EventBase`, variant doesn't exist") in
              M.alloc (core.result.Result.Err α0)) in
          let* α1 : ltac:(refine unit) := M.alloc tt in
          let*
              α2 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.__ink_EventBase
                  parity_scale_codec.error.Error)) :=
            (core.ops.function.Fn.call
                (Self := type not implemented)
                (Trait := ltac:(refine _)))
              α0
              α1 in
          M.return_ α2 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      end).
  
  Global Instance AssociatedFunction_decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.

Module  Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Type_ : Set := erc20.erc20.__ink_EventBase.
  
  Global Instance ℐ : ink.reflect.event.ContractEventBase.Trait Self := {
    ink.reflect.event.ContractEventBase.Type_ := Type_;
  }.
End Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.
End Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.

Module  Impl_core_convert_From_erc20_erc20_Transfer_for_erc20_erc20___ink_EventBase.
Section Impl_core_convert_From_erc20_erc20_Transfer_for_erc20_erc20___ink_EventBase.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.__ink_EventBase.
  
  Definition from (event : erc20.erc20.Transfer) : M Self :=
    M.function_body ("unimplemented parent_kind" event).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := erc20.erc20.Transfer) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_erc20_erc20_Transfer_for_erc20_erc20___ink_EventBase.
End Impl_core_convert_From_erc20_erc20_Transfer_for_erc20_erc20___ink_EventBase.

Module  Impl_core_convert_From_erc20_erc20_Approval_for_erc20_erc20___ink_EventBase.
Section Impl_core_convert_From_erc20_erc20_Approval_for_erc20_erc20___ink_EventBase.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.__ink_EventBase.
  
  Definition from (event : erc20.erc20.Approval) : M Self :=
    M.function_body ("unimplemented parent_kind" event).
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := erc20.erc20.Approval) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_erc20_erc20_Approval_for_erc20_erc20___ink_EventBase.
End Impl_core_convert_From_erc20_erc20_Approval_for_erc20_erc20___ink_EventBase.

Module __ink_UndefinedAmountOfTopics.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End __ink_UndefinedAmountOfTopics.
Definition __ink_UndefinedAmountOfTopics `{ℋ : State.Trait} : Set :=
  M.Val __ink_UndefinedAmountOfTopics.t.

Module  Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.
Section Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_UndefinedAmountOfTopics.
  
  Definition AMOUNT : usize := M.run (M.alloc 0).
  
  Global Instance AssociatedFunction_AMOUNT :
    Notation.DoubleColon Self "AMOUNT" := {
    Notation.double_colon := AMOUNT;
  }.
  
  Global Instance ℐ : ink_env.topics.EventTopicsAmount.Trait Self := {
    ink_env.topics.EventTopicsAmount.AMOUNT := AMOUNT;
  }.
End Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.
End Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.

Module  Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.
Section Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.__ink_EventBase.
  
  Definition RemainingTopics : Set :=
    erc20.erc20._.__ink_UndefinedAmountOfTopics.
  
  Definition topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
      (self : ref Self)
      (builder : ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B)
      :
        M
          (ink_env.topics.TopicsBuilderBackend.Output
            (Self := B)
            (Trait := ltac:(refine _))) :=
    M.function_body
      (let* α0 := M.read self in
      match α0 with
      | erc20.erc20.__ink_EventBase.Transfer event =>
        let* α0 : ltac:(refine erc20.erc20.Transfer) := deref event in
        let* α1 : ltac:(refine (ref erc20.erc20.Transfer)) := borrow α0 in
        (ink_env.topics.Topics.topics
            (Self := erc20.erc20.Transfer)
            (Trait := ltac:(refine _)))
          α1
          builder
      | erc20.erc20.__ink_EventBase.Approval event =>
        let* α0 : ltac:(refine erc20.erc20.Approval) := deref event in
        let* α1 : ltac:(refine (ref erc20.erc20.Approval)) := borrow α0 in
        (ink_env.topics.Topics.topics
            (Self := erc20.erc20.Approval)
            (Trait := ltac:(refine _)))
          α1
          builder
      | _ =>
        let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "Event does not exist!" ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_const"] α4 in
        let* α6 : ltac:(refine never) := core.panicking.panic_fmt α5 in
        never_to_any α6
      end).
  
  Global Instance AssociatedFunction_topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
    Notation.DoubleColon Self "topics" := {
    Notation.double_colon := topics (E := E) (B := B);
  }.
  
  Global Instance ℐ : ink_env.topics.Topics.Trait Self := {
    ink_env.topics.Topics.RemainingTopics := RemainingTopics;
    ink_env.topics.Topics.topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :=
      topics (E := E) (B := B);
  }.
End Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.
End Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.

Module  Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
Section Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Transfer.
  
  Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
  
  Global Instance ℐ : ink.codegen.event.topics.EventLenTopics.Trait Self := {
    ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
  }.
End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.

Module  Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
Section Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Approval.
  
  Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
  
  Global Instance ℐ : ink.codegen.event.topics.EventLenTopics.Trait Self := {
    ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
  }.
End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.

Module  Transfer.
Section Transfer.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    from : core.option.Option ltac:(erc20.erc20.AccountId);
    to : core.option.Option ltac:(erc20.erc20.AccountId);
    value : ltac:(erc20.erc20.Balance);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_from : Notation.Dot "from" := {
    Notation.dot x := let* x := M.read x in M.pure x.(from) : M _;
  }.
  Global Instance Get_AF_from : Notation.DoubleColon t "from" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(from) : M _;
  }.
  Global Instance Get_to : Notation.Dot "to" := {
    Notation.dot x := let* x := M.read x in M.pure x.(to) : M _;
  }.
  Global Instance Get_AF_to : Notation.DoubleColon t "to" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(to) : M _;
  }.
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in M.pure x.(value) : M _;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(value) : M _;
  }.
End Transfer.
End Transfer.
Definition Transfer `{ℋ : State.Trait} : Set := M.Val Transfer.t.

Module  Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.
Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Transfer.
  
  Definition encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Transfer) := deref self in
        let*
            α1 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          α0.["from"] in
        let*
            α2 :
            ltac:(refine
              (ref (core.option.Option ink_primitives.types.AccountId))) :=
          borrow α1 in
        let*
            α3 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          deref α2 in
        let*
            α4 :
            ltac:(refine
              (ref (core.option.Option ink_primitives.types.AccountId))) :=
          borrow α3 in
        let* α5 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
        let* α6 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α5 in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := core.option.Option ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α4
          α6 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Transfer) := deref self in
        let*
            α1 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          α0.["to"] in
        let*
            α2 :
            ltac:(refine
              (ref (core.option.Option ink_primitives.types.AccountId))) :=
          borrow α1 in
        let*
            α3 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          deref α2 in
        let*
            α4 :
            ltac:(refine
              (ref (core.option.Option ink_primitives.types.AccountId))) :=
          borrow α3 in
        let* α5 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
        let* α6 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α5 in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := core.option.Option ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α4
          α6 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Transfer) := deref self in
        let* α1 : ltac:(refine u128) := α0.["value"] in
        let* α2 : ltac:(refine (ref u128)) := borrow α1 in
        let* α3 : ltac:(refine u128) := deref α2 in
        let* α4 : ltac:(refine (ref u128)) := borrow α3 in
        let* α5 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
        let* α6 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α5 in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := u128)
            (Trait := ltac:(refine _)))
          α4
          α6 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :
    Notation.DoubleColon Self "encode_to" := {
    Notation.double_colon := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Encode.Required.Trait Self := {
    parity_scale_codec.codec.Encode.encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :=
      Datatypes.Some (encode_to (__CodecOutputEdqy := __CodecOutputEdqy));
    parity_scale_codec.codec.Encode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Encode.size_hint := Datatypes.None;
    parity_scale_codec.codec.Encode.encode := Datatypes.None;
    parity_scale_codec.codec.Encode.using_encoded := Datatypes.None;
    parity_scale_codec.codec.Encode.encoded_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.

Module  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.
Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Transfer.
  
  Global Instance ℐ :
    parity_scale_codec.encode_like.EncodeLike.Trait Self
      (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
  }.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Transfer.
  
  Definition decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result
              (core.option.Option ink_primitives.types.AccountId)
              parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := core.option.Option ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let*
          α0 :
          ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Transfer::from`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Transfer
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result
              (core.option.Option ink_primitives.types.AccountId)
              parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := core.option.Option ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let*
          α1 :
          ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Transfer::to`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Transfer
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result u128 parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := u128)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let* α2 : ltac:(refine u128) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Transfer::value`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Transfer
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let* α3 : ltac:(refine erc20.erc20.Transfer) :=
        M.alloc
          {|
            erc20.erc20.Transfer.from := α0;
            erc20.erc20.Transfer.to := α1;
            erc20.erc20.Transfer.value := α2;
          |} in
      M.alloc (core.result.Result.Ok α3)).
  
  Global Instance AssociatedFunction_decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.

Module  Approval.
Section Approval.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    owner : ltac:(erc20.erc20.AccountId);
    spender : ltac:(erc20.erc20.AccountId);
    value : ltac:(erc20.erc20.Balance);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_owner : Notation.Dot "owner" := {
    Notation.dot x := let* x := M.read x in M.pure x.(owner) : M _;
  }.
  Global Instance Get_AF_owner : Notation.DoubleColon t "owner" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(owner) : M _;
  }.
  Global Instance Get_spender : Notation.Dot "spender" := {
    Notation.dot x := let* x := M.read x in M.pure x.(spender) : M _;
  }.
  Global Instance Get_AF_spender : Notation.DoubleColon t "spender" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(spender) : M _;
  }.
  Global Instance Get_value : Notation.Dot "value" := {
    Notation.dot x := let* x := M.read x in M.pure x.(value) : M _;
  }.
  Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(value) : M _;
  }.
End Approval.
End Approval.
Definition Approval `{ℋ : State.Trait} : Set := M.Val Approval.t.

Module  Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.
Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Approval.
  
  Definition encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Approval) := deref self in
        let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
          α0.["owner"] in
        let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α1 in
        let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
        let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α3 in
        let* α5 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
        let* α6 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α5 in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α4
          α6 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Approval) := deref self in
        let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
          α0.["spender"] in
        let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α1 in
        let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
        let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α3 in
        let* α5 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
        let* α6 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α5 in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α4
          α6 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Approval) := deref self in
        let* α1 : ltac:(refine u128) := α0.["value"] in
        let* α2 : ltac:(refine (ref u128)) := borrow α1 in
        let* α3 : ltac:(refine u128) := deref α2 in
        let* α4 : ltac:(refine (ref u128)) := borrow α3 in
        let* α5 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
        let* α6 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α5 in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := u128)
            (Trait := ltac:(refine _)))
          α4
          α6 in
      M.alloc tt).
  
  Global Instance AssociatedFunction_encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :
    Notation.DoubleColon Self "encode_to" := {
    Notation.double_colon := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Encode.Required.Trait Self := {
    parity_scale_codec.codec.Encode.encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :=
      Datatypes.Some (encode_to (__CodecOutputEdqy := __CodecOutputEdqy));
    parity_scale_codec.codec.Encode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Encode.size_hint := Datatypes.None;
    parity_scale_codec.codec.Encode.encode := Datatypes.None;
    parity_scale_codec.codec.Encode.using_encoded := Datatypes.None;
    parity_scale_codec.codec.Encode.encoded_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.

Module  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.
Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Approval.
  
  Global Instance ℐ :
    parity_scale_codec.encode_like.EncodeLike.Trait Self
      (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
  }.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Approval.
  
  Definition decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result
              ink_primitives.types.AccountId
              parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let* α0 : ltac:(refine ink_primitives.types.AccountId) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Approval::owner`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Approval
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result
              ink_primitives.types.AccountId
              parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Approval::spender`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Approval
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result u128 parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := u128)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let* α2 : ltac:(refine u128) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Approval::value`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Approval
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let* α3 : ltac:(refine erc20.erc20.Approval) :=
        M.alloc
          {|
            erc20.erc20.Approval.owner := α0;
            erc20.erc20.Approval.spender := α1;
            erc20.erc20.Approval.value := α2;
          |} in
      M.alloc (core.result.Result.Ok α3)).
  
  Global Instance AssociatedFunction_decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.

Module  Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.
Section Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Transfer.
  
  Definition RemainingTopics : Set :=
    array ink_env.topics.state.HasRemainingTopics.
  
  Definition topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
      (self : ref Self)
      (builder : ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B)
      :
        M
          (ink_env.topics.TopicsBuilderBackend.Output
            (Self := B)
            (Trait := ltac:(refine _))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              ink_env.topics.state.Uninit
              E
              B)::["build"]
          builder in
      let* α1 : ltac:(refine (ref (array u8))) :=
        [69, 114, 99, 50, 48, 58, 58, 84, 114, 97, 110, 115, 102, 101, 114] in
      let* α2 : ltac:(refine (array u8)) := deref α1 in
      let* α3 : ltac:(refine (ref (array u8))) := borrow α2 in
      let* α4 : ltac:(refine (ref (array u8))) := [] in
      let* α5 : ltac:(refine (array u8)) := deref α4 in
      let* α6 : ltac:(refine (ref (array u8))) := borrow α5 in
      let* α7 : ltac:(refine (ref (slice u8))) :=
        pointer_coercion "Unsize" α6 in
      let* α8 : ltac:(refine (ink_env.topics.PrefixedValue (array u8))) :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α3;
            ink_env.topics.PrefixedValue.prefix := α7;
          |} in
      let* α9 : ltac:(refine (ref (ink_env.topics.PrefixedValue (array u8)))) :=
        borrow α8 in
      let* α10 : ltac:(refine (ink_env.topics.PrefixedValue (array u8))) :=
        deref α9 in
      let*
          α11 :
          ltac:(refine (ref (ink_env.topics.PrefixedValue (array u8)))) :=
        borrow α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)::["push_topic"]
          α0
          α11 in
      let* α13 : ltac:(refine erc20.erc20.Transfer) := deref self in
      let*
          α14 :
          ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
        α13.["from"] in
      let*
          α15 :
          ltac:(refine
            (ref (core.option.Option ink_primitives.types.AccountId))) :=
        borrow α14 in
      let*
          α16 :
          ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
        deref α15 in
      let*
          α17 :
          ltac:(refine
            (ref (core.option.Option ink_primitives.types.AccountId))) :=
        borrow α16 in
      let* α18 : ltac:(refine (ref (array u8))) :=
        [69, 114, 99, 50, 48, 58, 58, 84, 114, 97, 110, 115, 102, 101, 114, 58, 58, 102, 114, 111, 109] in
      let* α19 : ltac:(refine (array u8)) := deref α18 in
      let* α20 : ltac:(refine (ref (array u8))) := borrow α19 in
      let* α21 : ltac:(refine (ref (slice u8))) :=
        pointer_coercion "Unsize" α20 in
      let*
          α22 :
          ltac:(refine
            (ink_env.topics.PrefixedValue
              (core.option.Option ink_primitives.types.AccountId))) :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α17;
            ink_env.topics.PrefixedValue.prefix := α21;
          |} in
      let*
          α23 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue
                (core.option.Option ink_primitives.types.AccountId)))) :=
        borrow α22 in
      let*
          α24 :
          ltac:(refine
            (ink_env.topics.PrefixedValue
              (core.option.Option ink_primitives.types.AccountId))) :=
        deref α23 in
      let*
          α25 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue
                (core.option.Option ink_primitives.types.AccountId)))) :=
        borrow α24 in
      let*
          α26 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)::["push_topic"]
          α12
          α25 in
      let* α27 : ltac:(refine erc20.erc20.Transfer) := deref self in
      let*
          α28 :
          ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
        α27.["to"] in
      let*
          α29 :
          ltac:(refine
            (ref (core.option.Option ink_primitives.types.AccountId))) :=
        borrow α28 in
      let*
          α30 :
          ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
        deref α29 in
      let*
          α31 :
          ltac:(refine
            (ref (core.option.Option ink_primitives.types.AccountId))) :=
        borrow α30 in
      let* α32 : ltac:(refine (ref (array u8))) :=
        [69, 114, 99, 50, 48, 58, 58, 84, 114, 97, 110, 115, 102, 101, 114, 58, 58, 116, 111] in
      let* α33 : ltac:(refine (array u8)) := deref α32 in
      let* α34 : ltac:(refine (ref (array u8))) := borrow α33 in
      let* α35 : ltac:(refine (ref (slice u8))) :=
        pointer_coercion "Unsize" α34 in
      let*
          α36 :
          ltac:(refine
            (ink_env.topics.PrefixedValue
              (core.option.Option ink_primitives.types.AccountId))) :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α31;
            ink_env.topics.PrefixedValue.prefix := α35;
          |} in
      let*
          α37 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue
                (core.option.Option ink_primitives.types.AccountId)))) :=
        borrow α36 in
      let*
          α38 :
          ltac:(refine
            (ink_env.topics.PrefixedValue
              (core.option.Option ink_primitives.types.AccountId))) :=
        deref α37 in
      let*
          α39 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue
                (core.option.Option ink_primitives.types.AccountId)))) :=
        borrow α38 in
      let*
          α40 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              ink_env.topics.state.NoRemainingTopics
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)::["push_topic"]
          α26
          α39 in
      (ink_env.topics.TopicsBuilder
            ink_env.topics.state.NoRemainingTopics
            E
            B)::["finish"]
        α40).
  
  Global Instance AssociatedFunction_topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
    Notation.DoubleColon Self "topics" := {
    Notation.double_colon := topics (E := E) (B := B);
  }.
  
  Global Instance ℐ : ink_env.topics.Topics.Trait Self := {
    ink_env.topics.Topics.RemainingTopics := RemainingTopics;
    ink_env.topics.Topics.topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :=
      topics (E := E) (B := B);
  }.
End Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.
End Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.

Module  Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.
Section Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Approval.
  
  Definition RemainingTopics : Set :=
    array ink_env.topics.state.HasRemainingTopics.
  
  Definition topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
      (self : ref Self)
      (builder : ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B)
      :
        M
          (ink_env.topics.TopicsBuilderBackend.Output
            (Self := B)
            (Trait := ltac:(refine _))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              ink_env.topics.state.Uninit
              E
              B)::["build"]
          builder in
      let* α1 : ltac:(refine (ref (array u8))) :=
        [69, 114, 99, 50, 48, 58, 58, 65, 112, 112, 114, 111, 118, 97, 108] in
      let* α2 : ltac:(refine (array u8)) := deref α1 in
      let* α3 : ltac:(refine (ref (array u8))) := borrow α2 in
      let* α4 : ltac:(refine (ref (array u8))) := [] in
      let* α5 : ltac:(refine (array u8)) := deref α4 in
      let* α6 : ltac:(refine (ref (array u8))) := borrow α5 in
      let* α7 : ltac:(refine (ref (slice u8))) :=
        pointer_coercion "Unsize" α6 in
      let* α8 : ltac:(refine (ink_env.topics.PrefixedValue (array u8))) :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α3;
            ink_env.topics.PrefixedValue.prefix := α7;
          |} in
      let* α9 : ltac:(refine (ref (ink_env.topics.PrefixedValue (array u8)))) :=
        borrow α8 in
      let* α10 : ltac:(refine (ink_env.topics.PrefixedValue (array u8))) :=
        deref α9 in
      let*
          α11 :
          ltac:(refine (ref (ink_env.topics.PrefixedValue (array u8)))) :=
        borrow α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)::["push_topic"]
          α0
          α11 in
      let* α13 : ltac:(refine erc20.erc20.Approval) := deref self in
      let* α14 : ltac:(refine ink_primitives.types.AccountId) :=
        α13.["owner"] in
      let* α15 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α14 in
      let* α16 : ltac:(refine ink_primitives.types.AccountId) := deref α15 in
      let* α17 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α16 in
      let* α18 : ltac:(refine (ref (array u8))) :=
        [69, 114, 99, 50, 48, 58, 58, 65, 112, 112, 114, 111, 118, 97, 108, 58, 58, 111, 119, 110, 101, 114] in
      let* α19 : ltac:(refine (array u8)) := deref α18 in
      let* α20 : ltac:(refine (ref (array u8))) := borrow α19 in
      let* α21 : ltac:(refine (ref (slice u8))) :=
        pointer_coercion "Unsize" α20 in
      let*
          α22 :
          ltac:(refine
            (ink_env.topics.PrefixedValue ink_primitives.types.AccountId)) :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α17;
            ink_env.topics.PrefixedValue.prefix := α21;
          |} in
      let*
          α23 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue ink_primitives.types.AccountId))) :=
        borrow α22 in
      let*
          α24 :
          ltac:(refine
            (ink_env.topics.PrefixedValue ink_primitives.types.AccountId)) :=
        deref α23 in
      let*
          α25 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue ink_primitives.types.AccountId))) :=
        borrow α24 in
      let*
          α26 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)::["push_topic"]
          α12
          α25 in
      let* α27 : ltac:(refine erc20.erc20.Approval) := deref self in
      let* α28 : ltac:(refine ink_primitives.types.AccountId) :=
        α27.["spender"] in
      let* α29 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α28 in
      let* α30 : ltac:(refine ink_primitives.types.AccountId) := deref α29 in
      let* α31 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α30 in
      let* α32 : ltac:(refine (ref (array u8))) :=
        [69, 114, 99, 50, 48, 58, 58, 65, 112, 112, 114, 111, 118, 97, 108, 58, 58, 115, 112, 101, 110, 100, 101, 114] in
      let* α33 : ltac:(refine (array u8)) := deref α32 in
      let* α34 : ltac:(refine (ref (array u8))) := borrow α33 in
      let* α35 : ltac:(refine (ref (slice u8))) :=
        pointer_coercion "Unsize" α34 in
      let*
          α36 :
          ltac:(refine
            (ink_env.topics.PrefixedValue ink_primitives.types.AccountId)) :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α31;
            ink_env.topics.PrefixedValue.prefix := α35;
          |} in
      let*
          α37 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue ink_primitives.types.AccountId))) :=
        borrow α36 in
      let*
          α38 :
          ltac:(refine
            (ink_env.topics.PrefixedValue ink_primitives.types.AccountId)) :=
        deref α37 in
      let*
          α39 :
          ltac:(refine
            (ref
              (ink_env.topics.PrefixedValue ink_primitives.types.AccountId))) :=
        borrow α38 in
      let*
          α40 :
          ltac:(refine
            (ink_env.topics.TopicsBuilder
              ink_env.topics.state.NoRemainingTopics
              E
              B)) :=
        (ink_env.topics.TopicsBuilder
              (array ink_env.topics.state.HasRemainingTopics)
              E
              B)::["push_topic"]
          α26
          α39 in
      (ink_env.topics.TopicsBuilder
            ink_env.topics.state.NoRemainingTopics
            E
            B)::["finish"]
        α40).
  
  Global Instance AssociatedFunction_topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
    Notation.DoubleColon Self "topics" := {
    Notation.double_colon := topics (E := E) (B := B);
  }.
  
  Global Instance ℐ : ink_env.topics.Topics.Trait Self := {
    ink_env.topics.Topics.RemainingTopics := RemainingTopics;
    ink_env.topics.Topics.topics
      {E B : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E}
      {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :=
      topics (E := E) (B := B);
  }.
End Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.
End Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.

Module  Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set := ltac:(erc20.erc20.Balance).
  
  Definition Output : Set := Self.
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition Error : Set :=
    ink.reflect.dispatch.ConstructorOutput.Error
      (Self := ink.reflect.dispatch.ConstructorOutputValue Self).
  
  Definition IS_RESULT : CoqOfRust.core.primitive.bool :=
    M.run
      (M.pure
        (ink.reflect.dispatch.ConstructorOutput.IS_RESULT
          (Self :=
            ink.reflect.dispatch.ConstructorOutputValue erc20.erc20.Erc20)
          (Trait := ltac:(refine _)))).
  
  Global Instance AssociatedFunction_IS_RESULT :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition CALLABLE : Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (erc20.erc20.Erc20::["new"] __ink_binding_0)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 155 in
      let* α1 : ltac:(refine u8) := M.alloc 174 in
      let* α2 : ltac:(refine u8) := M.alloc 157 in
      let* α3 : ltac:(refine u8) := M.alloc 94 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "new")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableConstructorInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableConstructorInfo.Input := Input;
    ink.reflect.dispatch.DispatchableConstructorInfo.Output := Output;
    ink.reflect.dispatch.DispatchableConstructorInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableConstructorInfo.Error := Error;
    ink.reflect.dispatch.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
    ink.reflect.dispatch.DispatchableConstructorInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableConstructorInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableConstructorInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set := unit.
  
  Definition Output : Set := ltac:(erc20.erc20.Balance).
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        erc20.erc20.Erc20::["total_supply"] α1)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 219 in
      let* α1 : ltac:(refine u8) := M.alloc 99 in
      let* α2 : ltac:(refine u8) := M.alloc 117 in
      let* α3 : ltac:(refine u8) := M.alloc 168 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "total_supply")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
    ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
    ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
    ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set := ltac:(erc20.erc20.AccountId).
  
  Definition Output : Set := ltac:(erc20.erc20.Balance).
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        erc20.erc20.Erc20::["balance_of"] α1 __ink_binding_0)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 15 in
      let* α1 : ltac:(refine u8) := M.alloc 117 in
      let* α2 : ltac:(refine u8) := M.alloc 90 in
      let* α3 : ltac:(refine u8) := M.alloc 86 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "balance_of")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
    ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
    ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
    ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set :=
    M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId)).
  
  Definition Output : Set := ltac:(erc20.erc20.Balance).
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        erc20.erc20.Erc20::["allowance"] α1 __ink_binding_0 __ink_binding_1)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 106 in
      let* α1 : ltac:(refine u8) := M.alloc 0 in
      let* α2 : ltac:(refine u8) := M.alloc 22 in
      let* α3 : ltac:(refine u8) := M.alloc 94 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "allowance")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
    ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
    ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
    ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set :=
    M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance)).
  
  Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) := borrow_mut α0 in
        erc20.erc20.Erc20::["transfer"] α1 __ink_binding_0 __ink_binding_1)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 132 in
      let* α1 : ltac:(refine u8) := M.alloc 161 in
      let* α2 : ltac:(refine u8) := M.alloc 93 in
      let* α3 : ltac:(refine u8) := M.alloc 161 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "transfer")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
    ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
    ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
    ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set :=
    M.Val (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance)).
  
  Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) := borrow_mut α0 in
        erc20.erc20.Erc20::["approve"] α1 __ink_binding_0 __ink_binding_1)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 104 in
      let* α1 : ltac:(refine u8) := M.alloc 18 in
      let* α2 : ltac:(refine u8) := M.alloc 102 in
      let* α3 : ltac:(refine u8) := M.alloc 160 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "approve")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
    ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
    ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
    ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module  Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Input : Set :=
    M.Val
      (ltac:(erc20.erc20.AccountId) *
        ltac:(erc20.erc20.AccountId) *
        ltac:(erc20.erc20.Balance)).
  
  Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
  
  Definition Storage : Set := erc20.erc20.Erc20.
  
  Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
    M.run
      (pointer_coercion
        "ClosureFnPointer(Normal)"
        (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref storage in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) := borrow_mut α0 in
        erc20.erc20.Erc20::["transfer_from"]
          α1
          __ink_binding_0
          __ink_binding_1
          __ink_binding_2)).
  
  Global Instance AssociatedFunction_CALLABLE :
    Notation.DoubleColon Self "CALLABLE" := {
    Notation.double_colon := CALLABLE;
  }.
  
  Definition SELECTOR : array CoqOfRust.core.primitive.u8 :=
    M.run
      (let* α0 : ltac:(refine u8) := M.alloc 11 in
      let* α1 : ltac:(refine u8) := M.alloc 57 in
      let* α2 : ltac:(refine u8) := M.alloc 111 in
      let* α3 : ltac:(refine u8) := M.alloc 24 in
      M.alloc [ α0; α1; α2; α3 ]).
  
  Global Instance AssociatedFunction_SELECTOR :
    Notation.DoubleColon Self "SELECTOR" := {
    Notation.double_colon := SELECTOR;
  }.
  
  Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
  
  Global Instance AssociatedFunction_PAYABLE :
    Notation.DoubleColon Self "PAYABLE" := {
    Notation.double_colon := PAYABLE;
  }.
  
  Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
  
  Global Instance AssociatedFunction_MUTATES :
    Notation.DoubleColon Self "MUTATES" := {
    Notation.double_colon := MUTATES;
  }.
  
  Definition LABEL : ref CoqOfRust.core.primitive.str :=
    M.run (M.pure (mk_str "transfer_from")).
  
  Global Instance AssociatedFunction_LABEL :
    Notation.DoubleColon Self "LABEL" := {
    Notation.double_colon := LABEL;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
    ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
    ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
    ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
    ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
    ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
    ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
    ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
  }.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module __ink_ConstructorDecoder.
  Inductive t `{ℋ : State.Trait} : Set :=
  |
    Constructor0
    (_
      :
      ink.reflect.dispatch.DispatchableConstructorInfo.Input
        (Self := erc20.erc20.Erc20)).
End __ink_ConstructorDecoder.
Definition __ink_ConstructorDecoder `{ℋ : State.Trait} : Set :=
  M.Val __ink_ConstructorDecoder.t.

Module  Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.
Section Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_ConstructorDecoder.
  
  Definition decode_dispatch
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
      (input : mut_ref I)
      : M (core.result.Result Self ink.reflect.dispatch.DispatchError) :=
    M.function_body
      (let* α0 : ltac:(refine I) := deref input in
      let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result (array u8) parity_scale_codec.error.Error)) :=
        (parity_scale_codec.codec.Decode.decode
            (Self := array u8)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (core.result.Result
              (array u8)
              ink.reflect.dispatch.DispatchError)) :=
        (core.result.Result
              (array u8)
              parity_scale_codec.error.Error)::["map_err"]
          α2
          (M.alloc ink.reflect.dispatch.DispatchError.InvalidSelector) in
      let*
          α4 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                ink.reflect.dispatch.DispatchError)
              (array u8))) :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.result.Result (array u8) ink.reflect.dispatch.DispatchError)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      let* α6 : ltac:(refine (array u8)) :=
        match α5 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20._.__ink_ConstructorDecoder
                  ink.reflect.dispatch.DispatchError)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20._.__ink_ConstructorDecoder
                    ink.reflect.dispatch.DispatchError)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α7 := M.read α6 in
      match α7 with
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result u128 parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self := u128)
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result u128 ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result u128 parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                u128)) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result u128 ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let* α6 : ltac:(refine u128) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_ConstructorDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_ConstructorDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_ConstructorDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | _invalid =>
        let* α0 : ltac:(refine ink.reflect.dispatch.DispatchError) :=
          M.alloc ink.reflect.dispatch.DispatchError.UnknownSelector in
        M.alloc (core.result.Result.Err α0)
      end).
  
  Global Instance AssociatedFunction_decode_dispatch
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
    Notation.DoubleColon Self "decode_dispatch" := {
    Notation.double_colon := decode_dispatch (I := I);
  }.
  
  Global Instance ℐ : ink.reflect.dispatch.DecodeDispatch.Trait Self := {
    ink.reflect.dispatch.DecodeDispatch.decode_dispatch
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
      decode_dispatch (I := I);
  }.
End Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.
End Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.

Definition CONSTRUCTOR_0
    `{ℋ : State.Trait}
    : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableConstructorInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_ConstructorDecoder.
  
  Definition decode
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
      (input : mut_ref I)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let* α0 : ltac:(refine I) := deref input in
      let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result
              erc20.erc20._.__ink_ConstructorDecoder
              ink.reflect.dispatch.DispatchError)) :=
        (ink.reflect.dispatch.DecodeDispatch.decode_dispatch
            (Self := erc20.erc20._.__ink_ConstructorDecoder)
            (Trait := ltac:(refine _)))
          α1 in
      (core.result.Result
            erc20.erc20._.__ink_ConstructorDecoder
            ink.reflect.dispatch.DispatchError)::["map_err"]
        α2
        (core.convert.Into.into
          (Self := ink.reflect.dispatch.DispatchError)
          (Trait := ltac:(refine _)))).
  
  Global Instance AssociatedFunction_decode
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (I := I);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
      decode (I := I);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.

Module  Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.
Section Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_ConstructorDecoder.
  
  Definition execute_dispatchable
      (self : Self)
      : M (core.result.Result unit ink.reflect.dispatch.DispatchError) :=
    M.function_body
      (let* α0 := M.read self in
      match α0 with
      | erc20.erc20._.__ink_ConstructorDecoder.Constructor0 input =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine bool) := M.alloc false in
          let* constructor_0 : ltac:(refine bool) := M.alloc false in
          let constructor_0 :=
            ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE
              (Self := erc20.erc20.Erc20)
              (Trait := ltac:(refine _)) in
          let* α0 : ltac:(refine bool) := BinOp.or α0 constructor_0 in
          let* α1 : ltac:(refine bool) :=
            UnOp.not
              (ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _))) in
          let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
          let* α3 : ltac:(refine bool) := use α2 in
          if (α3 : bool) then
            let* _ : ltac:(refine unit) :=
              let*
                  α0 :
                  ltac:(refine
                    (core.result.Result
                      unit
                      ink.reflect.dispatch.DispatchError)) :=
                ink.codegen.dispatch.execution.deny_payment in
              let*
                  α1 :
                  ltac:(refine
                    (core.ops.control_flow.ControlFlow
                      (core.result.Result
                        core.convert.Infallible
                        ink.reflect.dispatch.DispatchError)
                      unit)) :=
                (core.ops.try_trait.Try.branch
                    (Self :=
                      core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)
                    (Trait := ltac:(refine _)))
                  α0 in
              let* α2 := M.read α1 in
              match α2 with
              | core.ops.control_flow.ControlFlow.Break residual =>
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  (core.ops.try_trait.FromResidual.from_residual
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    residual in
                let* α1 : ltac:(refine never) := M.return_ α0 in
                never_to_any α1
              | core.ops.control_flow.ControlFlow.Continue val => M.pure val
              end in
            M.alloc tt
          else
            M.alloc tt in
        let* result : ltac:(refine erc20.erc20.Erc20) :=
          (ink.reflect.dispatch.DispatchableConstructorInfo.CALLABLE
              (Self := erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            input in
        let*
            output_value :
            ltac:(refine
              (ink.reflect.dispatch.ConstructorOutputValue
                erc20.erc20.Erc20)) :=
          (ink.reflect.dispatch.ConstructorOutputValue
                erc20.erc20.Erc20)::["new"]
            result in
        let*
            output_result :
            ltac:(refine
              (core.result.Result (ref erc20.erc20.Erc20) (ref (ref unit)))) :=
          let*
              α0 :
              ltac:(refine
                (ref
                  (ink.reflect.dispatch.ConstructorOutputValue
                    erc20.erc20.Erc20))) :=
            borrow output_value in
          let*
              α1 :
              ltac:(refine
                (ink.reflect.dispatch.ConstructorOutputValue
                  erc20.erc20.Erc20)) :=
            deref α0 in
          let*
              α2 :
              ltac:(refine
                (ref
                  (ink.reflect.dispatch.ConstructorOutputValue
                    erc20.erc20.Erc20))) :=
            borrow α1 in
          (ink.reflect.dispatch.ConstructorOutput.as_result
              (Self :=
                ink.reflect.dispatch.ConstructorOutputValue erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α2 in
        let* _ : ltac:(refine unit) :=
          let*
              α0 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (ref erc20.erc20.Erc20)
                    (ref (ref unit))))) :=
            borrow output_result in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  (ref (ref erc20.erc20.Erc20))
                  (ref (ref (ref unit))))) :=
            (core.result.Result
                  (ref erc20.erc20.Erc20)
                  (ref (ref unit)))::["as_ref"]
              α0 in
          let* α2 : ltac:(refine bool) :=
            let_if core.result.Result.Ok contract := α1 in
          if (α2 : bool) then
            let* _ : ltac:(refine (core.option.Option u32)) :=
              let* α0 : ltac:(refine (ref u32)) :=
                borrow
                  (ink_storage_traits.storage.StorageKey.KEY
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              let* α1 : ltac:(refine u32) := deref α0 in
              let* α2 : ltac:(refine (ref u32)) := borrow α1 in
              let* α3 : ltac:(refine (ref erc20.erc20.Erc20)) :=
                deref contract in
              let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
              let* α5 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α4 in
              ink_env.api.set_contract_storage α2 α5 in
            M.alloc tt
          else
            M.alloc tt in
        let* _ : ltac:(refine never) :=
          let*
              α0 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (ref erc20.erc20.Erc20)
                    (ref (ref unit))))) :=
            borrow output_result in
          let* α1 : ltac:(refine bool) :=
            (core.result.Result
                  (ref erc20.erc20.Erc20)
                  (ref (ref unit)))::["is_err"]
              α0 in
          let*
              α2 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              α1 in
          let* α3 : ltac:(refine (core.result.Result unit (ref (ref unit)))) :=
            (core.result.Result
                  (ref erc20.erc20.Erc20)
                  (ref (ref unit)))::["map"]
              output_result
              (M.alloc tt) in
          let*
              α4 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit (ref (ref unit)))
                  ink_primitives.LangError)) :=
            "unimplemented parent_kind" α3 in
          let*
              α5 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit (ref (ref unit)))
                    ink_primitives.LangError))) :=
            borrow α4 in
          let*
              α6 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit (ref (ref unit)))
                  ink_primitives.LangError)) :=
            deref α5 in
          let*
              α7 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit (ref (ref unit)))
                    ink_primitives.LangError))) :=
            borrow α6 in
          ink_env.api.return_value α2 α7 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      end).
  
  Global Instance AssociatedFunction_execute_dispatchable :
    Notation.DoubleColon Self "execute_dispatchable" := {
    Notation.double_colon := execute_dispatchable;
  }.
  
  Global Instance ℐ : ink.reflect.dispatch.ExecuteDispatchable.Trait Self := {
    ink.reflect.dispatch.ExecuteDispatchable.execute_dispatchable :=
      execute_dispatchable;
  }.
End Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.
End Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.

Module  Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Type_ : Set := erc20.erc20._.__ink_ConstructorDecoder.
  
  Global Instance ℐ :
    ink.reflect.dispatch.ContractConstructorDecoder.Trait Self := {
    ink.reflect.dispatch.ContractConstructorDecoder.Type_ := Type_;
  }.
End Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.

Module __ink_MessageDecoder.
  Inductive t `{ℋ : State.Trait} : Set :=
  |
    Message0
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message1
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message2
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message3
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message4
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message5
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20)).
End __ink_MessageDecoder.
Definition __ink_MessageDecoder `{ℋ : State.Trait} : Set :=
  M.Val __ink_MessageDecoder.t.

Module  Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.
Section Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_MessageDecoder.
  
  Definition decode_dispatch
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
      (input : mut_ref I)
      : M (core.result.Result Self ink.reflect.dispatch.DispatchError) :=
    M.function_body
      (let* α0 : ltac:(refine I) := deref input in
      let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result (array u8) parity_scale_codec.error.Error)) :=
        (parity_scale_codec.codec.Decode.decode
            (Self := array u8)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (core.result.Result
              (array u8)
              ink.reflect.dispatch.DispatchError)) :=
        (core.result.Result
              (array u8)
              parity_scale_codec.error.Error)::["map_err"]
          α2
          (M.alloc ink.reflect.dispatch.DispatchError.InvalidSelector) in
      let*
          α4 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                ink.reflect.dispatch.DispatchError)
              (array u8))) :=
        (core.ops.try_trait.Try.branch
            (Self :=
              core.result.Result (array u8) ink.reflect.dispatch.DispatchError)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      let* α6 : ltac:(refine (array u8)) :=
        match α5 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20._.__ink_MessageDecoder
                  ink.reflect.dispatch.DispatchError)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α7 := M.read α6 in
      match α7 with
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result unit parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self := unit)
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result unit ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result unit parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                unit)) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result unit ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let* α6 : ltac:(refine unit) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_MessageDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                ink_primitives.types.AccountId
                parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self := ink_primitives.types.AccountId)
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result
                ink_primitives.types.AccountId
                ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result
                ink_primitives.types.AccountId
                parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                ink_primitives.types.AccountId)) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result
                  ink_primitives.types.AccountId
                  ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let* α6 : ltac:(refine ink_primitives.types.AccountId) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_MessageDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self :=
                M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId)))) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId))
                  ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let*
            α6 :
            ltac:(refine
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_MessageDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (M.Val (ink_primitives.types.AccountId * u128))
                parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self := M.Val (ink_primitives.types.AccountId * u128))
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result
                (M.Val (ink_primitives.types.AccountId * u128))
                ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result
                (M.Val (ink_primitives.types.AccountId * u128))
                parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                (M.Val (ink_primitives.types.AccountId * u128)))) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result
                  (M.Val (ink_primitives.types.AccountId * u128))
                  ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let*
            α6 :
            ltac:(refine (M.Val (ink_primitives.types.AccountId * u128))) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_MessageDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (M.Val (ink_primitives.types.AccountId * u128))
                parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self := M.Val (ink_primitives.types.AccountId * u128))
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result
                (M.Val (ink_primitives.types.AccountId * u128))
                ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result
                (M.Val (ink_primitives.types.AccountId * u128))
                parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                (M.Val (ink_primitives.types.AccountId * u128)))) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result
                  (M.Val (ink_primitives.types.AccountId * u128))
                  ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let*
            α6 :
            ltac:(refine (M.Val (ink_primitives.types.AccountId * u128))) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_MessageDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | [_; _; _; _] =>
        let* α0 : ltac:(refine I) := deref input in
        let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
        let*
            α2 :
            ltac:(refine
              (core.result.Result
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId *
                    u128))
                parity_scale_codec.error.Error)) :=
          (parity_scale_codec.codec.Decode.decode
              (Self :=
                M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId *
                    u128))
              (Trait := ltac:(refine _)))
            α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId *
                    u128))
                ink.reflect.dispatch.DispatchError)) :=
          (core.result.Result
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId *
                    u128))
                parity_scale_codec.error.Error)::["map_err"]
            α2
            (M.alloc ink.reflect.dispatch.DispatchError.InvalidParameters) in
        let*
            α4 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result
                  core.convert.Infallible
                  ink.reflect.dispatch.DispatchError)
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId *
                    u128)))) :=
          (core.ops.try_trait.Try.branch
              (Self :=
                core.result.Result
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId *
                      u128))
                  ink.reflect.dispatch.DispatchError)
              (Trait := ltac:(refine _)))
            α3 in
        let* α5 := M.read α4 in
        let*
            α6 :
            ltac:(refine
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId *
                  u128))) :=
          match α5 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        let* α7 : ltac:(refine erc20.erc20._.__ink_MessageDecoder) :=
          "unimplemented parent_kind" α6 in
        M.alloc (core.result.Result.Ok α7)
      | _invalid =>
        let* α0 : ltac:(refine ink.reflect.dispatch.DispatchError) :=
          M.alloc ink.reflect.dispatch.DispatchError.UnknownSelector in
        M.alloc (core.result.Result.Err α0)
      end).
  
  Global Instance AssociatedFunction_decode_dispatch
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
    Notation.DoubleColon Self "decode_dispatch" := {
    Notation.double_colon := decode_dispatch (I := I);
  }.
  
  Global Instance ℐ : ink.reflect.dispatch.DecodeDispatch.Trait Self := {
    ink.reflect.dispatch.DecodeDispatch.decode_dispatch
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
      decode_dispatch (I := I);
  }.
End Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.
End Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.

Definition MESSAGE_0 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Definition MESSAGE_1 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Definition MESSAGE_2 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Definition MESSAGE_3 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Definition MESSAGE_4 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Definition MESSAGE_5 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (M.pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _)))).

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_MessageDecoder.
  
  Definition decode
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
      (input : mut_ref I)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let* α0 : ltac:(refine I) := deref input in
      let* α1 : ltac:(refine (mut_ref I)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result
              erc20.erc20._.__ink_MessageDecoder
              ink.reflect.dispatch.DispatchError)) :=
        (ink.reflect.dispatch.DecodeDispatch.decode_dispatch
            (Self := erc20.erc20._.__ink_MessageDecoder)
            (Trait := ltac:(refine _)))
          α1 in
      (core.result.Result
            erc20.erc20._.__ink_MessageDecoder
            ink.reflect.dispatch.DispatchError)::["map_err"]
        α2
        (core.convert.Into.into
          (Self := ink.reflect.dispatch.DispatchError)
          (Trait := ltac:(refine _)))).
  
  Global Instance AssociatedFunction_decode
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (I := I);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {I : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
      decode (I := I);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.

Definition push_contract
    `{ℋ : State.Trait}
    (contract : core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
    (mutates : bool)
    : M unit :=
  M.function_body
    (let* α0 : ltac:(refine bool) := use mutates in
    if (α0 : bool) then
      let* _ : ltac:(refine (core.option.Option u32)) :=
        let* α0 : ltac:(refine (ref u32)) :=
          borrow
            (ink_storage_traits.storage.StorageKey.KEY
              (Self := erc20.erc20.Erc20)
              (Trait := ltac:(refine _))) in
        let* α1 : ltac:(refine u32) := deref α0 in
        let* α2 : ltac:(refine (ref u32)) := borrow α1 in
        let*
            α3 :
            ltac:(refine
              (ref (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
          borrow contract in
        let*
            α4 :
            ltac:(refine
              (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
          deref α3 in
        let*
            α5 :
            ltac:(refine
              (ref (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
          borrow α4 in
        let* α6 : ltac:(refine (ref erc20.erc20.Erc20)) :=
          (core.ops.deref.Deref.deref
              (Self := core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α5 in
        let* α7 : ltac:(refine erc20.erc20.Erc20) := deref α6 in
        let* α8 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α7 in
        ink_env.api.set_contract_storage α2 α8 in
      M.alloc tt
    else
      M.alloc tt).

Module  Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.
Section Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.__ink_MessageDecoder.
  
  Definition execute_dispatchable
      (self : Self)
      : M (core.result.Result unit ink.reflect.dispatch.DispatchError) :=
    M.function_body
      (let key :=
        ink_storage_traits.storage.StorageKey.KEY
          (Self := erc20.erc20.Erc20)
          (Trait := ltac:(refine _)) in
      let*
          contract :
          ltac:(refine
            (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
        let* α0 : ltac:(refine (ref u32)) := borrow key in
        let* α1 : ltac:(refine u32) := deref α0 in
        let* α2 : ltac:(refine (ref u32)) := borrow α1 in
        let*
            α3 :
            ltac:(refine
              (core.result.Result
                (core.option.Option erc20.erc20.Erc20)
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          ink_env.api.get_contract_storage α2 in
        let* α4 := M.read α3 in
        let* α5 : ltac:(refine erc20.erc20.Erc20) :=
          match α4 with
          | core.result.Result.Ok core.option.Option.Some value => M.pure value
          | core.result.Result.Ok core.option.Option.None  =>
            let* α0 : ltac:(refine (array (ref str))) :=
              M.alloc [ mk_str "storage entry was empty" ] in
            let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
            let* α2 : ltac:(refine (array (ref str))) := deref α1 in
            let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
            let* α4 : ltac:(refine (ref (slice (ref str)))) :=
              pointer_coercion "Unsize" α3 in
            let* α5 : ltac:(refine core.fmt.Arguments) :=
              core.fmt.Arguments::["new_const"] α4 in
            let* α6 : ltac:(refine never) := core.panicking.panic_fmt α5 in
            never_to_any α6
          | core.result.Result.Err _ =>
            let* α0 : ltac:(refine (array (ref str))) :=
              M.alloc [ mk_str "could not properly decode storage entry" ] in
            let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
            let* α2 : ltac:(refine (array (ref str))) := deref α1 in
            let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
            let* α4 : ltac:(refine (ref (slice (ref str)))) :=
              pointer_coercion "Unsize" α3 in
            let* α5 : ltac:(refine core.fmt.Arguments) :=
              core.fmt.Arguments::["new_const"] α4 in
            let* α6 : ltac:(refine never) := core.panicking.panic_fmt α5 in
            never_to_any α6
          end in
        (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)::["new"] α5 in
      let* _ : ltac:(refine unit) :=
        let* α0 := M.read self in
        match α0 with
        | erc20.erc20._.__ink_MessageDecoder.Message0 input =>
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := M.alloc false in
            let* message_0 : ltac:(refine bool) := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α1 : ltac:(refine bool) := BinOp.or α0 message_0 in
            let* message_1 : ltac:(refine bool) := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α2 : ltac:(refine bool) := BinOp.or α1 message_1 in
            let* message_2 : ltac:(refine bool) := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α3 : ltac:(refine bool) := BinOp.or α2 message_2 in
            let* message_3 : ltac:(refine bool) := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α4 : ltac:(refine bool) := BinOp.or α3 message_3 in
            let* message_4 : ltac:(refine bool) := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α5 : ltac:(refine bool) := BinOp.or α4 message_4 in
            let* message_5 : ltac:(refine bool) := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α0 : ltac:(refine bool) := BinOp.or α5 message_5 in
            let* α1 : ltac:(refine bool) :=
              UnOp.not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)
                  (Trait := ltac:(refine _))) in
            let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
            let* α3 : ltac:(refine bool) := use α2 in
            if (α3 : bool) then
              let* _ : ltac:(refine unit) :=
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  ink.codegen.dispatch.execution.deny_payment in
                let*
                    α1 :
                    ltac:(refine
                      (core.ops.control_flow.ControlFlow
                        (core.result.Result
                          core.convert.Infallible
                          ink.reflect.dispatch.DispatchError)
                        unit)) :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.ops.control_flow.ControlFlow.Break residual =>
                  let*
                      α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)) :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)
                        (Trait := ltac:(refine _)))
                      residual in
                  let* α1 : ltac:(refine never) := M.return_ α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow.Continue val => M.pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result : ltac:(refine u128) :=
            let*
                α0 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut contract in
            let*
                α1 :
                ltac:(refine
                  (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut α1 in
            let* α3 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
            let* α5 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              borrow_mut α4 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)))
              α5
              input in
          let* is_reverted : ltac:(refine bool) :=
            let* α0 : ltac:(refine (ref u128)) := borrow result in
            let* α1 : ltac:(refine u128) := deref α0 in
            let* α2 : ltac:(refine (ref u128)) := borrow α1 in
            let* α3 : ltac:(refine (ink.result_info.IsResultErr u128)) :=
              M.alloc (ink.result_info.IsResultErr.Build_t α2) in
            let* α4 : ltac:(refine (ref (ink.result_info.IsResultErr u128))) :=
              borrow α3 in
            let* α0 : ltac:(refine bool) :=
              (ink.result_info.IsResultErrFallback.value
                  (Self := ink.result_info.IsResultErr u128)
                  (Trait := ltac:(refine _)))
                α4 in
            BinOp.and
              (ink.result_info.IsResultTypeFallback.VALUE
                (Self := ink.result_info.IsResultType u128)
                (Trait := ltac:(refine _)))
              α0 in
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := UnOp.not is_reverted in
            let* α1 : ltac:(refine bool) := use α0 in
            if (α1 : bool) then
              let* _ : ltac:(refine unit) :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              M.alloc tt
            else
              M.alloc tt in
          let*
              α0 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let*
              α1 :
              ltac:(refine
                (core.result.Result u128 ink_primitives.LangError)) :=
            "unimplemented parent_kind" result in
          let*
              α2 :
              ltac:(refine
                (ref (core.result.Result u128 ink_primitives.LangError))) :=
            borrow α1 in
          let*
              α3 :
              ltac:(refine
                (core.result.Result u128 ink_primitives.LangError)) :=
            deref α2 in
          let*
              α4 :
              ltac:(refine
                (ref (core.result.Result u128 ink_primitives.LangError))) :=
            borrow α3 in
          let* α5 : ltac:(refine never) := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder.Message1 input =>
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := M.alloc false in
            let* message_0 : ltac:(refine bool) := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α1 : ltac:(refine bool) := BinOp.or α0 message_0 in
            let* message_1 : ltac:(refine bool) := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α2 : ltac:(refine bool) := BinOp.or α1 message_1 in
            let* message_2 : ltac:(refine bool) := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α3 : ltac:(refine bool) := BinOp.or α2 message_2 in
            let* message_3 : ltac:(refine bool) := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α4 : ltac:(refine bool) := BinOp.or α3 message_3 in
            let* message_4 : ltac:(refine bool) := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α5 : ltac:(refine bool) := BinOp.or α4 message_4 in
            let* message_5 : ltac:(refine bool) := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α0 : ltac:(refine bool) := BinOp.or α5 message_5 in
            let* α1 : ltac:(refine bool) :=
              UnOp.not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)
                  (Trait := ltac:(refine _))) in
            let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
            let* α3 : ltac:(refine bool) := use α2 in
            if (α3 : bool) then
              let* _ : ltac:(refine unit) :=
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  ink.codegen.dispatch.execution.deny_payment in
                let*
                    α1 :
                    ltac:(refine
                      (core.ops.control_flow.ControlFlow
                        (core.result.Result
                          core.convert.Infallible
                          ink.reflect.dispatch.DispatchError)
                        unit)) :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.ops.control_flow.ControlFlow.Break residual =>
                  let*
                      α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)) :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)
                        (Trait := ltac:(refine _)))
                      residual in
                  let* α1 : ltac:(refine never) := M.return_ α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow.Continue val => M.pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result : ltac:(refine u128) :=
            let*
                α0 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut contract in
            let*
                α1 :
                ltac:(refine
                  (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut α1 in
            let* α3 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
            let* α5 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              borrow_mut α4 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)))
              α5
              input in
          let* is_reverted : ltac:(refine bool) :=
            let* α0 : ltac:(refine (ref u128)) := borrow result in
            let* α1 : ltac:(refine u128) := deref α0 in
            let* α2 : ltac:(refine (ref u128)) := borrow α1 in
            let* α3 : ltac:(refine (ink.result_info.IsResultErr u128)) :=
              M.alloc (ink.result_info.IsResultErr.Build_t α2) in
            let* α4 : ltac:(refine (ref (ink.result_info.IsResultErr u128))) :=
              borrow α3 in
            let* α0 : ltac:(refine bool) :=
              (ink.result_info.IsResultErrFallback.value
                  (Self := ink.result_info.IsResultErr u128)
                  (Trait := ltac:(refine _)))
                α4 in
            BinOp.and
              (ink.result_info.IsResultTypeFallback.VALUE
                (Self := ink.result_info.IsResultType u128)
                (Trait := ltac:(refine _)))
              α0 in
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := UnOp.not is_reverted in
            let* α1 : ltac:(refine bool) := use α0 in
            if (α1 : bool) then
              let* _ : ltac:(refine unit) :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              M.alloc tt
            else
              M.alloc tt in
          let*
              α0 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let*
              α1 :
              ltac:(refine
                (core.result.Result u128 ink_primitives.LangError)) :=
            "unimplemented parent_kind" result in
          let*
              α2 :
              ltac:(refine
                (ref (core.result.Result u128 ink_primitives.LangError))) :=
            borrow α1 in
          let*
              α3 :
              ltac:(refine
                (core.result.Result u128 ink_primitives.LangError)) :=
            deref α2 in
          let*
              α4 :
              ltac:(refine
                (ref (core.result.Result u128 ink_primitives.LangError))) :=
            borrow α3 in
          let* α5 : ltac:(refine never) := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder.Message2 input =>
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := M.alloc false in
            let* message_0 : ltac:(refine bool) := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α1 : ltac:(refine bool) := BinOp.or α0 message_0 in
            let* message_1 : ltac:(refine bool) := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α2 : ltac:(refine bool) := BinOp.or α1 message_1 in
            let* message_2 : ltac:(refine bool) := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α3 : ltac:(refine bool) := BinOp.or α2 message_2 in
            let* message_3 : ltac:(refine bool) := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α4 : ltac:(refine bool) := BinOp.or α3 message_3 in
            let* message_4 : ltac:(refine bool) := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α5 : ltac:(refine bool) := BinOp.or α4 message_4 in
            let* message_5 : ltac:(refine bool) := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α0 : ltac:(refine bool) := BinOp.or α5 message_5 in
            let* α1 : ltac:(refine bool) :=
              UnOp.not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)
                  (Trait := ltac:(refine _))) in
            let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
            let* α3 : ltac:(refine bool) := use α2 in
            if (α3 : bool) then
              let* _ : ltac:(refine unit) :=
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  ink.codegen.dispatch.execution.deny_payment in
                let*
                    α1 :
                    ltac:(refine
                      (core.ops.control_flow.ControlFlow
                        (core.result.Result
                          core.convert.Infallible
                          ink.reflect.dispatch.DispatchError)
                        unit)) :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.ops.control_flow.ControlFlow.Break residual =>
                  let*
                      α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)) :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)
                        (Trait := ltac:(refine _)))
                      residual in
                  let* α1 : ltac:(refine never) := M.return_ α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow.Continue val => M.pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result : ltac:(refine u128) :=
            let*
                α0 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut contract in
            let*
                α1 :
                ltac:(refine
                  (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut α1 in
            let* α3 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
            let* α5 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              borrow_mut α4 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)))
              α5
              input in
          let* is_reverted : ltac:(refine bool) :=
            let* α0 : ltac:(refine (ref u128)) := borrow result in
            let* α1 : ltac:(refine u128) := deref α0 in
            let* α2 : ltac:(refine (ref u128)) := borrow α1 in
            let* α3 : ltac:(refine (ink.result_info.IsResultErr u128)) :=
              M.alloc (ink.result_info.IsResultErr.Build_t α2) in
            let* α4 : ltac:(refine (ref (ink.result_info.IsResultErr u128))) :=
              borrow α3 in
            let* α0 : ltac:(refine bool) :=
              (ink.result_info.IsResultErrFallback.value
                  (Self := ink.result_info.IsResultErr u128)
                  (Trait := ltac:(refine _)))
                α4 in
            BinOp.and
              (ink.result_info.IsResultTypeFallback.VALUE
                (Self := ink.result_info.IsResultType u128)
                (Trait := ltac:(refine _)))
              α0 in
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := UnOp.not is_reverted in
            let* α1 : ltac:(refine bool) := use α0 in
            if (α1 : bool) then
              let* _ : ltac:(refine unit) :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              M.alloc tt
            else
              M.alloc tt in
          let*
              α0 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let*
              α1 :
              ltac:(refine
                (core.result.Result u128 ink_primitives.LangError)) :=
            "unimplemented parent_kind" result in
          let*
              α2 :
              ltac:(refine
                (ref (core.result.Result u128 ink_primitives.LangError))) :=
            borrow α1 in
          let*
              α3 :
              ltac:(refine
                (core.result.Result u128 ink_primitives.LangError)) :=
            deref α2 in
          let*
              α4 :
              ltac:(refine
                (ref (core.result.Result u128 ink_primitives.LangError))) :=
            borrow α3 in
          let* α5 : ltac:(refine never) := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder.Message3 input =>
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := M.alloc false in
            let* message_0 : ltac:(refine bool) := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α1 : ltac:(refine bool) := BinOp.or α0 message_0 in
            let* message_1 : ltac:(refine bool) := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α2 : ltac:(refine bool) := BinOp.or α1 message_1 in
            let* message_2 : ltac:(refine bool) := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α3 : ltac:(refine bool) := BinOp.or α2 message_2 in
            let* message_3 : ltac:(refine bool) := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α4 : ltac:(refine bool) := BinOp.or α3 message_3 in
            let* message_4 : ltac:(refine bool) := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α5 : ltac:(refine bool) := BinOp.or α4 message_4 in
            let* message_5 : ltac:(refine bool) := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α0 : ltac:(refine bool) := BinOp.or α5 message_5 in
            let* α1 : ltac:(refine bool) :=
              UnOp.not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)
                  (Trait := ltac:(refine _))) in
            let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
            let* α3 : ltac:(refine bool) := use α2 in
            if (α3 : bool) then
              let* _ : ltac:(refine unit) :=
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  ink.codegen.dispatch.execution.deny_payment in
                let*
                    α1 :
                    ltac:(refine
                      (core.ops.control_flow.ControlFlow
                        (core.result.Result
                          core.convert.Infallible
                          ink.reflect.dispatch.DispatchError)
                        unit)) :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.ops.control_flow.ControlFlow.Break residual =>
                  let*
                      α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)) :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)
                        (Trait := ltac:(refine _)))
                      residual in
                  let* α1 : ltac:(refine never) := M.return_ α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow.Continue val => M.pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let*
              result :
              ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
            let*
                α0 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut contract in
            let*
                α1 :
                ltac:(refine
                  (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut α1 in
            let* α3 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
            let* α5 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              borrow_mut α4 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)))
              α5
              input in
          let* is_reverted : ltac:(refine bool) :=
            let*
                α0 :
                ltac:(refine
                  (ref (core.result.Result unit erc20.erc20.Error))) :=
              borrow result in
            let*
                α1 :
                ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (ref (core.result.Result unit erc20.erc20.Error))) :=
              borrow α1 in
            let*
                α3 :
                ltac:(refine
                  (ink.result_info.IsResultErr
                    (core.result.Result unit erc20.erc20.Error))) :=
              M.alloc (ink.result_info.IsResultErr.Build_t α2) in
            let*
                α4 :
                ltac:(refine
                  (ref
                    (ink.result_info.IsResultErr
                      (core.result.Result unit erc20.erc20.Error)))) :=
              borrow α3 in
            let* α0 : ltac:(refine bool) :=
              (ink.result_info.IsResultErr
                    (core.result.Result unit erc20.erc20.Error))::["value"]
                α4 in
            BinOp.and
              (ink.result_info.VALUE (Self := unit) (Trait := ltac:(refine _)))
              α0 in
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := UnOp.not is_reverted in
            let* α1 : ltac:(refine bool) := use α0 in
            if (α1 : bool) then
              let* _ : ltac:(refine unit) :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              M.alloc tt
            else
              M.alloc tt in
          let*
              α0 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)) :=
            "unimplemented parent_kind" result in
          let*
              α2 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit erc20.erc20.Error)
                    ink_primitives.LangError))) :=
            borrow α1 in
          let*
              α3 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)) :=
            deref α2 in
          let*
              α4 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit erc20.erc20.Error)
                    ink_primitives.LangError))) :=
            borrow α3 in
          let* α5 : ltac:(refine never) := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder.Message4 input =>
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := M.alloc false in
            let* message_0 : ltac:(refine bool) := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α1 : ltac:(refine bool) := BinOp.or α0 message_0 in
            let* message_1 : ltac:(refine bool) := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α2 : ltac:(refine bool) := BinOp.or α1 message_1 in
            let* message_2 : ltac:(refine bool) := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α3 : ltac:(refine bool) := BinOp.or α2 message_2 in
            let* message_3 : ltac:(refine bool) := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α4 : ltac:(refine bool) := BinOp.or α3 message_3 in
            let* message_4 : ltac:(refine bool) := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α5 : ltac:(refine bool) := BinOp.or α4 message_4 in
            let* message_5 : ltac:(refine bool) := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α0 : ltac:(refine bool) := BinOp.or α5 message_5 in
            let* α1 : ltac:(refine bool) :=
              UnOp.not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)
                  (Trait := ltac:(refine _))) in
            let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
            let* α3 : ltac:(refine bool) := use α2 in
            if (α3 : bool) then
              let* _ : ltac:(refine unit) :=
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  ink.codegen.dispatch.execution.deny_payment in
                let*
                    α1 :
                    ltac:(refine
                      (core.ops.control_flow.ControlFlow
                        (core.result.Result
                          core.convert.Infallible
                          ink.reflect.dispatch.DispatchError)
                        unit)) :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.ops.control_flow.ControlFlow.Break residual =>
                  let*
                      α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)) :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)
                        (Trait := ltac:(refine _)))
                      residual in
                  let* α1 : ltac:(refine never) := M.return_ α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow.Continue val => M.pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let*
              result :
              ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
            let*
                α0 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut contract in
            let*
                α1 :
                ltac:(refine
                  (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut α1 in
            let* α3 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
            let* α5 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              borrow_mut α4 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)))
              α5
              input in
          let* is_reverted : ltac:(refine bool) :=
            let*
                α0 :
                ltac:(refine
                  (ref (core.result.Result unit erc20.erc20.Error))) :=
              borrow result in
            let*
                α1 :
                ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (ref (core.result.Result unit erc20.erc20.Error))) :=
              borrow α1 in
            let*
                α3 :
                ltac:(refine
                  (ink.result_info.IsResultErr
                    (core.result.Result unit erc20.erc20.Error))) :=
              M.alloc (ink.result_info.IsResultErr.Build_t α2) in
            let*
                α4 :
                ltac:(refine
                  (ref
                    (ink.result_info.IsResultErr
                      (core.result.Result unit erc20.erc20.Error)))) :=
              borrow α3 in
            let* α0 : ltac:(refine bool) :=
              (ink.result_info.IsResultErr
                    (core.result.Result unit erc20.erc20.Error))::["value"]
                α4 in
            BinOp.and
              (ink.result_info.VALUE (Self := unit) (Trait := ltac:(refine _)))
              α0 in
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := UnOp.not is_reverted in
            let* α1 : ltac:(refine bool) := use α0 in
            if (α1 : bool) then
              let* _ : ltac:(refine unit) :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              M.alloc tt
            else
              M.alloc tt in
          let*
              α0 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)) :=
            "unimplemented parent_kind" result in
          let*
              α2 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit erc20.erc20.Error)
                    ink_primitives.LangError))) :=
            borrow α1 in
          let*
              α3 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)) :=
            deref α2 in
          let*
              α4 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit erc20.erc20.Error)
                    ink_primitives.LangError))) :=
            borrow α3 in
          let* α5 : ltac:(refine never) := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder.Message5 input =>
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := M.alloc false in
            let* message_0 : ltac:(refine bool) := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α1 : ltac:(refine bool) := BinOp.or α0 message_0 in
            let* message_1 : ltac:(refine bool) := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α2 : ltac:(refine bool) := BinOp.or α1 message_1 in
            let* message_2 : ltac:(refine bool) := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α3 : ltac:(refine bool) := BinOp.or α2 message_2 in
            let* message_3 : ltac:(refine bool) := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α4 : ltac:(refine bool) := BinOp.or α3 message_3 in
            let* message_4 : ltac:(refine bool) := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α5 : ltac:(refine bool) := BinOp.or α4 message_4 in
            let* message_5 : ltac:(refine bool) := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)) in
            let* α0 : ltac:(refine bool) := BinOp.or α5 message_5 in
            let* α1 : ltac:(refine bool) :=
              UnOp.not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)
                  (Trait := ltac:(refine _))) in
            let* α2 : ltac:(refine bool) := BinOp.and α0 α1 in
            let* α3 : ltac:(refine bool) := use α2 in
            if (α3 : bool) then
              let* _ : ltac:(refine unit) :=
                let*
                    α0 :
                    ltac:(refine
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)) :=
                  ink.codegen.dispatch.execution.deny_payment in
                let*
                    α1 :
                    ltac:(refine
                      (core.ops.control_flow.ControlFlow
                        (core.result.Result
                          core.convert.Infallible
                          ink.reflect.dispatch.DispatchError)
                        unit)) :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)
                      (Trait := ltac:(refine _)))
                    α0 in
                let* α2 := M.read α1 in
                match α2 with
                | core.ops.control_flow.ControlFlow.Break residual =>
                  let*
                      α0 :
                      ltac:(refine
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)) :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)
                        (Trait := ltac:(refine _)))
                      residual in
                  let* α1 : ltac:(refine never) := M.return_ α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow.Continue val => M.pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let*
              result :
              ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
            let*
                α0 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut contract in
            let*
                α1 :
                ltac:(refine
                  (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (mut_ref
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20))) :=
              borrow_mut α1 in
            let* α3 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
                  (Trait := ltac:(refine _)))
                α2 in
            let* α4 : ltac:(refine erc20.erc20.Erc20) := deref α3 in
            let* α5 : ltac:(refine (mut_ref erc20.erc20.Erc20)) :=
              borrow_mut α4 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20)
                (Trait := ltac:(refine _)))
              α5
              input in
          let* is_reverted : ltac:(refine bool) :=
            let*
                α0 :
                ltac:(refine
                  (ref (core.result.Result unit erc20.erc20.Error))) :=
              borrow result in
            let*
                α1 :
                ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
              deref α0 in
            let*
                α2 :
                ltac:(refine
                  (ref (core.result.Result unit erc20.erc20.Error))) :=
              borrow α1 in
            let*
                α3 :
                ltac:(refine
                  (ink.result_info.IsResultErr
                    (core.result.Result unit erc20.erc20.Error))) :=
              M.alloc (ink.result_info.IsResultErr.Build_t α2) in
            let*
                α4 :
                ltac:(refine
                  (ref
                    (ink.result_info.IsResultErr
                      (core.result.Result unit erc20.erc20.Error)))) :=
              borrow α3 in
            let* α0 : ltac:(refine bool) :=
              (ink.result_info.IsResultErr
                    (core.result.Result unit erc20.erc20.Error))::["value"]
                α4 in
            BinOp.and
              (ink.result_info.VALUE (Self := unit) (Trait := ltac:(refine _)))
              α0 in
          let* _ : ltac:(refine unit) :=
            let* α0 : ltac:(refine bool) := UnOp.not is_reverted in
            let* α1 : ltac:(refine bool) := use α0 in
            if (α1 : bool) then
              let* _ : ltac:(refine unit) :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)
                    (Trait := ltac:(refine _))) in
              M.alloc tt
            else
              M.alloc tt in
          let*
              α0 :
              ltac:(refine
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags) :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)) :=
            "unimplemented parent_kind" result in
          let*
              α2 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit erc20.erc20.Error)
                    ink_primitives.LangError))) :=
            borrow α1 in
          let*
              α3 :
              ltac:(refine
                (core.result.Result
                  (core.result.Result unit erc20.erc20.Error)
                  ink_primitives.LangError)) :=
            deref α2 in
          let*
              α4 :
              ltac:(refine
                (ref
                  (core.result.Result
                    (core.result.Result unit erc20.erc20.Error)
                    ink_primitives.LangError))) :=
            borrow α3 in
          let* α5 : ltac:(refine never) := ink_env.api.return_value α0 α4 in
          never_to_any α5
        end in
      let* α0 : ltac:(refine unit) := M.alloc tt in
      never_to_any α0).
  
  Global Instance AssociatedFunction_execute_dispatchable :
    Notation.DoubleColon Self "execute_dispatchable" := {
    Notation.double_colon := execute_dispatchable;
  }.
  
  Global Instance ℐ : ink.reflect.dispatch.ExecuteDispatchable.Trait Self := {
    ink.reflect.dispatch.ExecuteDispatchable.execute_dispatchable :=
      execute_dispatchable;
  }.
End Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.
End Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.

Module  Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.
Section Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Type_ : Set := erc20.erc20._.__ink_MessageDecoder.
  
  Global Instance ℐ :
    ink.reflect.dispatch.ContractMessageDecoder.Trait Self := {
    ink.reflect.dispatch.ContractMessageDecoder.Type_ := Type_;
  }.
End Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.
End Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.

Definition _
    `{ℋ : State.Trait}
    : ink.codegen.utils.same_type.IsSameType erc20.erc20.Erc20 :=
  M.run (ink.codegen.utils.same_type.IsSameType erc20.erc20.Erc20)::["new"].

Module  Impl_erc20_erc20_Erc20.
Section Impl_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition new (total_supply : ltac:(erc20.erc20.Balance)) : M Self :=
    M.function_body
      (let*
          balances :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        core.default.Default.default
          (Self :=
            ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))
          (Trait := ltac:(refine _)) in
      let* caller : ltac:(refine ink_primitives.types.AccountId) :=
        let*
            α0 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          ink.codegen.env.StaticEnv.env
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _)) in
        (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)::["caller"]
          α0 in
      let* _ : ltac:(refine (core.option.Option u32)) :=
        let*
            α0 :
            ltac:(refine
              (mut_ref
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))))) :=
          borrow_mut balances in
        let* α1 : ltac:(refine (ref u128)) := borrow total_supply in
        let* α2 : ltac:(refine u128) := deref α1 in
        let* α3 : ltac:(refine (ref u128)) := borrow α2 in
        (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["insert"]
          α0
          caller
          α3 in
      let* _ : ltac:(refine unit) :=
        let*
            α0 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          ink.codegen.env.StaticEnv.env
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _)) in
        let*
            α1 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          M.alloc core.option.Option.None in
        let*
            α2 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          M.alloc (core.option.Option.Some caller) in
        let* α3 : ltac:(refine erc20.erc20.Transfer) :=
          M.alloc
            {|
              erc20.erc20.Transfer.from := α1;
              erc20.erc20.Transfer.to := α2;
              erc20.erc20.Transfer.value := total_supply;
            |} in
        (ink.codegen.event.emit.EmitEvent.emit_event
            (Self := ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)
            (Trait := ltac:(refine _)))
          α0
          α3 in
      let*
          α0 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        core.default.Default.default
          (Self :=
            ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))
          (Trait := ltac:(refine _)) in
      M.alloc
        {|
          erc20.erc20.Erc20.total_supply := total_supply;
          erc20.erc20.Erc20.balances := balances;
          erc20.erc20.Erc20.allowances := α0;
        |}).
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition total_supply (self : ref Self) : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
      α0.["total_supply"]).
  
  Global Instance AssociatedFunction_total_supply :
    Notation.DoubleColon Self "total_supply" := {
    Notation.double_colon := total_supply;
  }.
  
  Definition balance_of
      (self : ref Self)
      (owner : ltac:(erc20.erc20.AccountId))
      : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow owner in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α3 in
      erc20.erc20.Erc20::["balance_of_impl"] α1 α4).
  
  Global Instance AssociatedFunction_balance_of :
    Notation.DoubleColon Self "balance_of" := {
    Notation.double_colon := balance_of;
  }.
  
  Definition allowance
      (self : ref Self)
      (owner : ltac:(erc20.erc20.AccountId))
      (spender : ltac:(erc20.erc20.AccountId))
      : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow owner in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α3 in
      let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow spender in
      let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
      let* α7 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α6 in
      erc20.erc20.Erc20::["allowance_impl"] α1 α4 α7).
  
  Global Instance AssociatedFunction_allowance :
    Notation.DoubleColon Self "allowance" := {
    Notation.double_colon := allowance;
  }.
  
  Definition transfer
      (self : mut_ref Self)
      (to : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* from : ltac:(refine ink_primitives.types.AccountId) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let*
            α2 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          (ink.codegen.env.Env.env
              (Self := ref erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α1 in
        (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)::["caller"]
          α2 in
      let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) := borrow_mut α0 in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow from in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α3 in
      let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow to in
      let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
      let* α7 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α6 in
      erc20.erc20.Erc20::["transfer_from_to"] α1 α4 α7 value).
  
  Global Instance AssociatedFunction_transfer :
    Notation.DoubleColon Self "transfer" := {
    Notation.double_colon := transfer;
  }.
  
  Definition approve
      (self : mut_ref Self)
      (spender : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* owner : ltac:(refine ink_primitives.types.AccountId) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let*
            α2 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          (ink.codegen.env.Env.env
              (Self := ref erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α1 in
        (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)::["caller"]
          α2 in
      let* _ : ltac:(refine (core.option.Option u32)) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let*
            α1 :
            ltac:(refine
              (ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) :=
          α0.["allowances"] in
        let*
            α2 :
            ltac:(refine
              (mut_ref
                (ink_storage.lazy.mapping.Mapping
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId))
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))))) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow owner in
        let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow spender in
        let*
            α5 :
            ltac:(refine
              (M.Val
                ((ref ink_primitives.types.AccountId) *
                  (ref ink_primitives.types.AccountId)))) :=
          M.alloc (α3, α4) in
        let* α6 : ltac:(refine (ref u128)) := borrow value in
        let* α7 : ltac:(refine u128) := deref α6 in
        let* α8 : ltac:(refine (ref u128)) := borrow α7 in
        (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["insert"]
          α2
          α5
          α8 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let*
            α2 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          (ink.codegen.env.Env.env
              (Self := ref erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine erc20.erc20.Approval) :=
          M.alloc
            {|
              erc20.erc20.Approval.owner := owner;
              erc20.erc20.Approval.spender := spender;
              erc20.erc20.Approval.value := value;
            |} in
        (ink.codegen.event.emit.EmitEvent.emit_event
            (Self := ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)
            (Trait := ltac:(refine _)))
          α2
          α3 in
      let* α0 : ltac:(refine unit) := M.alloc tt in
      M.alloc (core.result.Result.Ok α0)).
  
  Global Instance AssociatedFunction_approve :
    Notation.DoubleColon Self "approve" := {
    Notation.double_colon := approve;
  }.
  
  Definition transfer_from
      (self : mut_ref Self)
      (from : ltac:(erc20.erc20.AccountId))
      (to : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* caller : ltac:(refine ink_primitives.types.AccountId) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let*
            α2 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          (ink.codegen.env.Env.env
              (Self := ref erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α1 in
        (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)::["caller"]
          α2 in
      let* allowance : ltac:(refine u128) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow from in
        let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
        let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α3 in
        let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow caller in
        let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α6 in
        erc20.erc20.Erc20::["allowance_impl"] α1 α4 α7 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine bool) := BinOp.lt allowance value in
        let* α1 : ltac:(refine bool) := use α0 in
        if (α1 : bool) then
          let* α0 : ltac:(refine erc20.erc20.Error) :=
            M.alloc erc20.erc20.Error.InsufficientAllowance in
          let* α1 : ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        else
          M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20)) := borrow_mut α0 in
        let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow from in
        let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
        let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α3 in
        let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow to in
        let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α6 in
        let* α8 : ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
          erc20.erc20.Erc20::["transfer_from_to"] α1 α4 α7 value in
        let*
            α9 :
            ltac:(refine
              (core.ops.control_flow.ControlFlow
                (core.result.Result core.convert.Infallible erc20.erc20.Error)
                unit)) :=
          (core.ops.try_trait.Try.branch
              (Self := core.result.Result unit erc20.erc20.Error)
              (Trait := ltac:(refine _)))
            α8 in
        let* α10 := M.read α9 in
        match α10 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let* α0 : ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := core.result.Result unit erc20.erc20.Error)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* _ : ltac:(refine (core.option.Option u32)) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let*
            α1 :
            ltac:(refine
              (ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) :=
          α0.["allowances"] in
        let*
            α2 :
            ltac:(refine
              (mut_ref
                (ink_storage.lazy.mapping.Mapping
                  (M.Val
                    (ink_primitives.types.AccountId *
                      ink_primitives.types.AccountId))
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))))) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow from in
        let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow caller in
        let*
            α5 :
            ltac:(refine
              (M.Val
                ((ref ink_primitives.types.AccountId) *
                  (ref ink_primitives.types.AccountId)))) :=
          M.alloc (α3, α4) in
        let* α6 : ltac:(refine u128) := BinOp.sub allowance value in
        let* α7 : ltac:(refine (ref u128)) := borrow α6 in
        let* α8 : ltac:(refine u128) := deref α7 in
        let* α9 : ltac:(refine (ref u128)) := borrow α8 in
        (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["insert"]
          α2
          α5
          α9 in
      let* α0 : ltac:(refine unit) := M.alloc tt in
      M.alloc (core.result.Result.Ok α0)).
  
  Global Instance AssociatedFunction_transfer_from :
    Notation.DoubleColon Self "transfer_from" := {
    Notation.double_colon := transfer_from;
  }.
  
  Definition balance_of_impl
      (self : ref Self)
      (owner : ref ltac:(erc20.erc20.AccountId))
      : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
      let*
          α1 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        α0.["balances"] in
      let*
          α2 :
          ltac:(refine
            (ref
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit))))) :=
        borrow α1 in
      let* α3 : ltac:(refine (core.option.Option u128)) :=
        (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["get"]
          α2
          owner in
      (core.option.Option u128)::["unwrap_or_default"] α3).
  
  Global Instance AssociatedFunction_balance_of_impl :
    Notation.DoubleColon Self "balance_of_impl" := {
    Notation.double_colon := balance_of_impl;
  }.
  
  Definition allowance_impl
      (self : ref Self)
      (owner : ref ltac:(erc20.erc20.AccountId))
      (spender : ref ltac:(erc20.erc20.AccountId))
      : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
      let*
          α1 :
          ltac:(refine
            (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) :=
        α0.["allowances"] in
      let*
          α2 :
          ltac:(refine
            (ref
              (ink_storage.lazy.mapping.Mapping
                (M.Val
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId))
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit))))) :=
        borrow α1 in
      let*
          α3 :
          ltac:(refine
            (M.Val
              ((ref ink_primitives.types.AccountId) *
                (ref ink_primitives.types.AccountId)))) :=
        M.alloc (owner, spender) in
      let* α4 : ltac:(refine (core.option.Option u128)) :=
        (ink_storage.lazy.mapping.Mapping
              (M.Val
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId))
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["get"]
          α2
          α3 in
      (core.option.Option u128)::["unwrap_or_default"] α4).
  
  Global Instance AssociatedFunction_allowance_impl :
    Notation.DoubleColon Self "allowance_impl" := {
    Notation.double_colon := allowance_impl;
  }.
  
  Definition transfer_from_to
      (self : mut_ref Self)
      (from : ref ltac:(erc20.erc20.AccountId))
      (to : ref ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* from_balance : ltac:(refine u128) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let* α2 : ltac:(refine ink_primitives.types.AccountId) := deref from in
        let* α3 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α2 in
        erc20.erc20.Erc20::["balance_of_impl"] α1 α3 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine bool) := BinOp.lt from_balance value in
        let* α1 : ltac:(refine bool) := use α0 in
        if (α1 : bool) then
          let* α0 : ltac:(refine erc20.erc20.Error) :=
            M.alloc erc20.erc20.Error.InsufficientBalance in
          let* α1 : ltac:(refine (core.result.Result unit erc20.erc20.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        else
          M.alloc tt in
      let* _ : ltac:(refine (core.option.Option u32)) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let*
            α1 :
            ltac:(refine
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) :=
          α0.["balances"] in
        let*
            α2 :
            ltac:(refine
              (mut_ref
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))))) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine u128) := BinOp.sub from_balance value in
        let* α4 : ltac:(refine (ref u128)) := borrow α3 in
        let* α5 : ltac:(refine u128) := deref α4 in
        let* α6 : ltac:(refine (ref u128)) := borrow α5 in
        (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["insert"]
          α2
          from
          α6 in
      let* to_balance : ltac:(refine u128) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let* α2 : ltac:(refine ink_primitives.types.AccountId) := deref to in
        let* α3 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
          borrow α2 in
        erc20.erc20.Erc20::["balance_of_impl"] α1 α3 in
      let* _ : ltac:(refine (core.option.Option u32)) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let*
            α1 :
            ltac:(refine
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) :=
          α0.["balances"] in
        let*
            α2 :
            ltac:(refine
              (mut_ref
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))))) :=
          borrow_mut α1 in
        let* α3 : ltac:(refine u128) := BinOp.add to_balance value in
        let* α4 : ltac:(refine (ref u128)) := borrow α3 in
        let* α5 : ltac:(refine u128) := deref α4 in
        let* α6 : ltac:(refine (ref u128)) := borrow α5 in
        (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))::["insert"]
          α2
          to
          α6 in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine erc20.erc20.Erc20) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Erc20)) := borrow α0 in
        let*
            α2 :
            ltac:(refine
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)) :=
          (ink.codegen.env.Env.env
              (Self := ref erc20.erc20.Erc20)
              (Trait := ltac:(refine _)))
            α1 in
        let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref from in
        let*
            α4 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          M.alloc (core.option.Option.Some α3) in
        let* α5 : ltac:(refine ink_primitives.types.AccountId) := deref to in
        let*
            α6 :
            ltac:(refine (core.option.Option ink_primitives.types.AccountId)) :=
          M.alloc (core.option.Option.Some α5) in
        let* α7 : ltac:(refine erc20.erc20.Transfer) :=
          M.alloc
            {|
              erc20.erc20.Transfer.from := α4;
              erc20.erc20.Transfer.to := α6;
              erc20.erc20.Transfer.value := value;
            |} in
        (ink.codegen.event.emit.EmitEvent.emit_event
            (Self := ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)
            (Trait := ltac:(refine _)))
          α2
          α7 in
      let* α0 : ltac:(refine unit) := M.alloc tt in
      M.alloc (core.result.Result.Ok α0)).
  
  Global Instance AssociatedFunction_transfer_from_to :
    Notation.DoubleColon Self "transfer_from_to" := {
    Notation.double_colon := transfer_from_to;
  }.
End Impl_erc20_erc20_Erc20.
End Impl_erc20_erc20_Erc20.

Module  CallBuilder.
Section CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    account_id : ltac:(erc20.erc20.AccountId);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_account_id : Notation.Dot "account_id" := {
    Notation.dot x := let* x := M.read x in M.pure x.(account_id) : M _;
  }.
  Global Instance Get_AF_account_id : Notation.DoubleColon t "account_id" := {
    Notation.double_colon x :=
      let* x := M.read x in M.pure x.(account_id) : M _;
  }.
End CallBuilder.
End CallBuilder.
Definition CallBuilder `{ℋ : State.Trait} : Set := M.Val CallBuilder.t.

Module  Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.
Section Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "CallBuilder") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "account_id") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α7 : ltac:(refine ink_primitives.types.AccountId) :=
        α6.["account_id"] in
      let* α8 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α7 in
      let* α9 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α8 in
      let* α10 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        deref α9 in
      let* α11 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α10 in
      let* α12 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.
End Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.

Module  Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.
Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M unit :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        deref α3 in
      let* α5 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α4 in
      let* α6 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
      let* α7 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α6 in
      (parity_scale_codec.codec.Encode.encode_to
          (Self := ref ink_primitives.types.AccountId)
          (Trait := ltac:(refine _)))
        α5
        α7).
  
  Global Instance AssociatedFunction_encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :
    Notation.DoubleColon Self "encode_to" := {
    Notation.double_colon := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Definition encode
      (self : ref Self)
      : M (alloc.vec.Vec CoqOfRust.core.primitive.u8 alloc.vec.Vec.Default.A) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        deref α3 in
      let* α5 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α4 in
      (parity_scale_codec.codec.Encode.encode
          (Self := ref ink_primitives.types.AccountId)
          (Trait := ltac:(refine _)))
        α5).
  
  Global Instance AssociatedFunction_encode :
    Notation.DoubleColon Self "encode" := {
    Notation.double_colon := encode;
  }.
  
  Definition using_encoded
      {R F : Set}
      {ℋ_0 :
        core.ops.function.FnOnce.Trait F
          (Args := M.Val (ref (slice CoqOfRust.core.primitive.u8)))}
      (self : ref Self)
      (f : F)
      : M R :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        deref α3 in
      let* α5 : ltac:(refine (ref (ref ink_primitives.types.AccountId))) :=
        borrow α4 in
      (parity_scale_codec.codec.Encode.using_encoded
          (Self := ref ink_primitives.types.AccountId)
          (Trait := ltac:(refine _)))
        α5
        f).
  
  Global Instance AssociatedFunction_using_encoded
      {R F : Set}
      {ℋ_0 :
        core.ops.function.FnOnce.Trait F
          (Args := M.Val (ref (slice CoqOfRust.core.primitive.u8)))} :
    Notation.DoubleColon Self "using_encoded" := {
    Notation.double_colon := using_encoded (R := R) (F := F);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Encode.Required.Trait Self := {
    parity_scale_codec.codec.Encode.encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :=
      Datatypes.Some (encode_to (__CodecOutputEdqy := __CodecOutputEdqy));
    parity_scale_codec.codec.Encode.encode := Datatypes.Some encode;
    parity_scale_codec.codec.Encode.using_encoded
      {R F : Set}
      {ℋ_0 :
        core.ops.function.FnOnce.Trait F
          (Args := M.Val (ref (slice CoqOfRust.core.primitive.u8)))} :=
      Datatypes.Some (using_encoded (R := R) (F := F));
    parity_scale_codec.codec.Encode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Encode.size_hint := Datatypes.None;
    parity_scale_codec.codec.Encode.encoded_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.

Module  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.
Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Global Instance ℐ :
    parity_scale_codec.encode_like.EncodeLike.Trait Self
      (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
  }.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result
              ink_primitives.types.AccountId
              parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let* α0 : ltac:(refine ink_primitives.types.AccountId) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `CallBuilder::account_id`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20._.CallBuilder
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) :=
        M.alloc {| erc20.erc20._.CallBuilder.account_id := α0; |} in
      M.alloc (core.result.Result.Ok α1)).
  
  Global Instance AssociatedFunction_decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Definition decode_into
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      (dst_ : mut_ref (core.mem.maybe_uninit.MaybeUninit Self))
      :
        M
          (core.result.Result
            parity_scale_codec.decode_finished.DecodeFinished
            parity_scale_codec.error.Error) :=
    M.function_body
      (let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine usize) := core.mem.size_of in
        let* α1 : ltac:(refine (ref usize)) := borrow α0 in
        let* α2 : ltac:(refine usize) := core.mem.size_of in
        let* α3 : ltac:(refine (ref usize)) := borrow α2 in
        let* α4 : ltac:(refine (M.Val ((ref usize) * (ref usize)))) :=
          M.alloc (α1, α3) in
        let* α5 := M.read α4 in
        match α5 with
        | (left_val, right_val) =>
          let* α0 : ltac:(refine usize) := deref left_val in
          let* α1 : ltac:(refine usize) := deref right_val in
          let* α2 : ltac:(refine bool) := BinOp.eq α0 α1 in
          let* α3 : ltac:(refine bool) := UnOp.not α2 in
          let* α4 : ltac:(refine bool) := use α3 in
          if (α4 : bool) then
            let* kind : ltac:(refine core.panicking.AssertKind) :=
              M.alloc core.panicking.AssertKind.Eq in
            let* _ : ltac:(refine never) :=
              let* α0 : ltac:(refine usize) := deref left_val in
              let* α1 : ltac:(refine (ref usize)) := borrow α0 in
              let* α2 : ltac:(refine usize) := deref α1 in
              let* α3 : ltac:(refine (ref usize)) := borrow α2 in
              let* α4 : ltac:(refine usize) := deref right_val in
              let* α5 : ltac:(refine (ref usize)) := borrow α4 in
              let* α6 : ltac:(refine usize) := deref α5 in
              let* α7 : ltac:(refine (ref usize)) := borrow α6 in
              let* α8 : ltac:(refine (core.option.Option core.fmt.Arguments)) :=
                M.alloc core.option.Option.None in
              core.panicking.assert_failed kind α3 α7 α8 in
            let* α0 : ltac:(refine unit) := M.alloc tt in
            never_to_any α0
          else
            M.alloc tt
        end in
      let* _ : ltac:(refine unit) :=
        let* α0 : ltac:(refine usize) := core.mem.size_of in
        let* α1 : ltac:(refine usize) := M.alloc 0 in
        let* α2 : ltac:(refine bool) := BinOp.gt α0 α1 in
        let* α3 : ltac:(refine bool) := use α2 in
        let* α4 : ltac:(refine i32) :=
          if (α3 : bool) then
            M.alloc 1
          else
            M.alloc 0 in
        let* α5 : ltac:(refine i32) := M.alloc 1 in
        let* α6 : ltac:(refine bool) := BinOp.le α4 α5 in
        let* α7 : ltac:(refine bool) := UnOp.not α6 in
        let* α8 : ltac:(refine bool) := use α7 in
        if (α8 : bool) then
          let* α0 : ltac:(refine never) :=
            core.panicking.panic
              (mk_str
                "assertion failed: if ::core::mem::size_of::<AccountId>() > 0 { 1 } else { 0 } <= 1") in
          never_to_any α0
        else
          M.alloc tt in
      let* _ : ltac:(refine unit) :=
        let*
            dst_ :
            ltac:(refine
              (mut_ref
                (core.mem.maybe_uninit.MaybeUninit
                  erc20.erc20._.CallBuilder))) :=
          let*
              α0 :
              ltac:(refine
                (core.mem.maybe_uninit.MaybeUninit
                  erc20.erc20._.CallBuilder)) :=
            deref dst_ in
          borrow_mut α0 in
        let*
            dst_ :
            ltac:(refine
              (mut_ref
                (core.mem.maybe_uninit.MaybeUninit
                  ink_primitives.types.AccountId))) :=
          let*
              α0 :
              ltac:(refine
                (core.mem.maybe_uninit.MaybeUninit
                  erc20.erc20._.CallBuilder)) :=
            deref dst_ in
          let*
              α1 :
              ltac:(refine
                (mut_ref
                  (core.mem.maybe_uninit.MaybeUninit
                    erc20.erc20._.CallBuilder))) :=
            borrow_mut α0 in
          let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
            (core.mem.maybe_uninit.MaybeUninit
                  erc20.erc20._.CallBuilder)::["as_mut_ptr"]
              α1 in
          let*
              α3 :
              ltac:(refine
                (mut_ref
                  (core.mem.maybe_uninit.MaybeUninit
                    ink_primitives.types.AccountId))) :=
            (mut_ref erc20.erc20._.CallBuilder)::["cast"] α2 in
          let*
              α4 :
              ltac:(refine
                (core.mem.maybe_uninit.MaybeUninit
                  ink_primitives.types.AccountId)) :=
            deref α3 in
          let*
              α5 :
              ltac:(refine
                (mut_ref
                  (core.mem.maybe_uninit.MaybeUninit
                    ink_primitives.types.AccountId))) :=
            borrow_mut α4 in
          let*
              α6 :
              ltac:(refine
                (core.mem.maybe_uninit.MaybeUninit
                  ink_primitives.types.AccountId)) :=
            deref α5 in
          let*
              α0 :
              ltac:(refine
                (mut_ref
                  (core.mem.maybe_uninit.MaybeUninit
                    ink_primitives.types.AccountId))) :=
            borrow_mut α6 in
          let*
              α1 :
              ltac:(refine
                (core.mem.maybe_uninit.MaybeUninit
                  ink_primitives.types.AccountId)) :=
            deref α0 in
          borrow_mut α1 in
        let*
            _ :
            ltac:(refine parity_scale_codec.decode_finished.DecodeFinished) :=
          let* α0 : ltac:(refine __CodecInputEdqy) :=
            deref __codec_input_edqy in
          let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
          let*
              α2 :
              ltac:(refine
                (core.mem.maybe_uninit.MaybeUninit
                  ink_primitives.types.AccountId)) :=
            deref dst_ in
          let*
              α3 :
              ltac:(refine
                (mut_ref
                  (core.mem.maybe_uninit.MaybeUninit
                    ink_primitives.types.AccountId))) :=
            borrow_mut α2 in
          let*
              α4 :
              ltac:(refine
                (core.result.Result
                  parity_scale_codec.decode_finished.DecodeFinished
                  parity_scale_codec.error.Error)) :=
            (parity_scale_codec.codec.Decode.decode_into
                (Self := ink_primitives.types.AccountId)
                (Trait := ltac:(refine _)))
              α1
              α3 in
          let*
              α5 :
              ltac:(refine
                (core.ops.control_flow.ControlFlow
                  (core.result.Result
                    core.convert.Infallible
                    parity_scale_codec.error.Error)
                  parity_scale_codec.decode_finished.DecodeFinished)) :=
            (core.ops.try_trait.Try.branch
                (Self :=
                  core.result.Result
                    parity_scale_codec.decode_finished.DecodeFinished
                    parity_scale_codec.error.Error)
                (Trait := ltac:(refine _)))
              α4 in
          let* α6 := M.read α5 in
          match α6 with
          | core.ops.control_flow.ControlFlow.Break residual =>
            let*
                α0 :
                ltac:(refine
                  (core.result.Result
                    parity_scale_codec.decode_finished.DecodeFinished
                    parity_scale_codec.error.Error)) :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    core.result.Result
                      parity_scale_codec.decode_finished.DecodeFinished
                      parity_scale_codec.error.Error)
                  (Trait := ltac:(refine _)))
                residual in
            let* α1 : ltac:(refine never) := M.return_ α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow.Continue val => M.pure val
          end in
        M.alloc tt in
      let*
          α0 :
          ltac:(refine parity_scale_codec.decode_finished.DecodeFinished) :=
        parity_scale_codec.decode_finished.DecodeFinished::["assert_decoding_finished"] in
      M.alloc (core.result.Result.Ok α0)).
  
  Global Instance AssociatedFunction_decode_into
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode_into" := {
    Notation.double_colon := decode_into (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
    parity_scale_codec.codec.Decode.decode_into
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      Datatypes.Some (decode_into (__CodecInputEdqy := __CodecInputEdqy));
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.

Module  Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.
Section Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition hash
      {__H : Set}
      {ℋ_0 : core.hash.Hasher.Trait __H}
      (self : ref Self)
      (state : mut_ref __H)
      : M unit :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α3 in
      let* α5 : ltac:(refine __H) := deref state in
      let* α6 : ltac:(refine (mut_ref __H)) := borrow_mut α5 in
      (core.hash.Hash.hash
          (Self := ink_primitives.types.AccountId)
          (Trait := ltac:(refine _)))
        α4
        α6).
  
  Global Instance AssociatedFunction_hash
      {__H : Set}
      {ℋ_0 : core.hash.Hasher.Trait __H} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash (__H := __H);
  }.
  
  Global Instance ℐ : core.hash.Hash.Required.Trait Self := {
    core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
      hash (__H := __H);
    core.hash.Hash.hash_slice := Datatypes.None;
  }.
End Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.
End Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.

Module  Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.
Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.

Module  Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.
Section Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition eq
      (self : ref Self)
      (other : ref erc20.erc20._.CallBuilder)
      : M bool :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref other in
      let* α4 : ltac:(refine ink_primitives.types.AccountId) :=
        α3.["account_id"] in
      let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α4 in
      (core.cmp.PartialEq.eq
          (Self := ink_primitives.types.AccountId)
          (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
    Notation.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.
End Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.

Module  Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.
Section Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.
End Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.

Module  Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.
Section Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) := M.alloc tt in
      M.alloc tt).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notation.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.
End Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.

Module  Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.
Section Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition clone (self : ref Self) : M erc20.erc20._.CallBuilder :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α3 in
      let* α5 : ltac:(refine ink_primitives.types.AccountId) :=
        (core.clone.Clone.clone
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α4 in
      M.alloc {| erc20.erc20._.CallBuilder.account_id := α5; |}).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.
End Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.

Module  Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.
Section Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition Identity : Set := Self.
  
  Definition type_info
      : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)) :=
        (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let*
          α1 :
          ltac:(refine (scale_info.ty.path.Path scale_info.form.MetaForm)) :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "CallBuilder")
          (mk_str "erc20::erc20") in
      let*
          α2 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let*
          α3 :
          ltac:(refine
            (alloc.vec.Vec
              (scale_info.ty.TypeParameter scale_info.form.MetaForm)
              alloc.alloc.Global)) :=
        (alloc.vec.Vec
            (scale_info.ty.TypeParameter scale_info.form.MetaForm)
            alloc.alloc.Global)::["new"] in
      let*
          α4 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["type_params"]
          α2
          α3 in
      let* α5 : ltac:(refine (array (ref str))) :=
        M.alloc
          [
            mk_str "The ink! smart contract's call builder.";
            mk_str "";
            mk_str
              "Implements the underlying on-chain calling of the ink! smart contract";
            mk_str "messages and trait implementations in a type safe way."
          ] in
      let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
      let* α7 : ltac:(refine (array (ref str))) := deref α6 in
      let* α8 : ltac:(refine (ref (array (ref str)))) := borrow α7 in
      let* α9 : ltac:(refine (ref (slice (ref str)))) :=
        pointer_coercion "Unsize" α8 in
      let*
          α10 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["docs"]
          α4
          α9 in
      let*
          α11 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.Fields scale_info.form.MetaForm)::["named"] in
      let*
          α12 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α11
          (let*
              α0 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let*
              α1 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)::["name"]
              α0
              (mk_str "account_id") in
          (scale_info.build.FieldBuilder
                scale_info.form.MetaForm
                scale_info.build.field_state.NameAssigned
                scale_info.build.field_state.TypeAssigned)::["type_name"]
            α1
            (mk_str "AccountId")) in
      (scale_info.build.TypeBuilder
            scale_info.form.MetaForm
            scale_info.build.state.PathAssigned)::["composite"]
        α10
        α12).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.
End Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.

Module  Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.
Section Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition layout
      (__key : ref ltac:(ink_primitives.key.Key))
      : M (ink_metadata.layout.Layout ink_metadata.layout.Layout.Default.F) :=
    M.function_body
      (let* α0 : ltac:(refine u32) := deref __key in
      let* α1 : ltac:(refine (ref u32)) := borrow α0 in
      let*
          α2 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self := ink_primitives.types.AccountId)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)::["new"]
          (mk_str "account_id")
          α2 in
      let*
          α4 :
          ltac:(refine
            (array
              (ink_metadata.layout.FieldLayout scale_info.form.MetaForm))) :=
        M.alloc [ α3 ] in
      let*
          α5 :
          ltac:(refine
            (ink_metadata.layout.StructLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.StructLayout scale_info.form.MetaForm)::["new"]
          (mk_str "CallBuilder")
          α4 in
      M.alloc (ink_metadata.layout.Layout.Struct α5)).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance ℐ : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout := layout;
  }.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.

Module  Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.
Section Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Type_ : Set := erc20.erc20._.CallBuilder.
  
  Global Instance ℐ :
    ink.codegen.dispatch.info.ContractCallBuilder.Trait Self := {
    ink.codegen.dispatch.info.ContractCallBuilder.Type_ := Type_;
  }.
End Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.
End Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.

Module  Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.
Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition Env : Set :=
    ink_env.types.DefaultEnvironment.
  
  Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
    ink_env.contract.ContractEnv.Env := Env;
  }.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.

Module  Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.
Section Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition from_account_id
      (account_id : ltac:(erc20.erc20.AccountId))
      : M Self :=
    M.function_body
      (M.alloc {| erc20.erc20._.CallBuilder.account_id := account_id; |}).
  
  Global Instance AssociatedFunction_from_account_id :
    Notation.DoubleColon Self "from_account_id" := {
    Notation.double_colon := from_account_id;
  }.
  
  Global Instance ℐ :
    ink_env.call.create_builder.FromAccountId.Trait Self
      (T := ltac:(erc20.erc20.Environment)) := {
    ink_env.call.create_builder.FromAccountId.from_account_id :=
      from_account_id;
  }.
End Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.
End Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.

Module  Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.
Section Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition to_account_id (self : ref Self) : M ltac:(erc20.erc20.AccountId) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α4 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α3 in
      (core.clone.Clone.clone
          (Self := ink_primitives.types.AccountId)
          (Trait := ltac:(refine _)))
        α4).
  
  Global Instance AssociatedFunction_to_account_id :
    Notation.DoubleColon Self "to_account_id" := {
    Notation.double_colon := to_account_id;
  }.
  
  Global Instance ℐ :
    ink.contract_ref.ToAccountId.Trait Self
      (T := ltac:(erc20.erc20.Environment)) := {
    ink.contract_ref.ToAccountId.to_account_id := to_account_id;
  }.
End Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.
End Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20___CallBuilder.

Module  Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.
Section Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition as_ref (self : ref Self) : M (ref ltac:(erc20.erc20.AccountId)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      borrow α3).
  
  Global Instance AssociatedFunction_as_ref :
    Notation.DoubleColon Self "as_ref" := {
    Notation.double_colon := as_ref;
  }.
  
  Global Instance ℐ :
    core.convert.AsRef.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
    core.convert.AsRef.as_ref := as_ref;
  }.
End Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.
End Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.

Module  Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.
Section Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition as_mut
      (self : mut_ref Self)
      : M (mut_ref ltac:(erc20.erc20.AccountId)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) :=
        α0.["account_id"] in
      let* α2 : ltac:(refine (mut_ref ink_primitives.types.AccountId)) :=
        borrow_mut α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) := deref α2 in
      let* α0 : ltac:(refine (mut_ref ink_primitives.types.AccountId)) :=
        borrow_mut α3 in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) := deref α0 in
      borrow_mut α1).
  
  Global Instance AssociatedFunction_as_mut :
    Notation.DoubleColon Self "as_mut" := {
    Notation.double_colon := as_mut;
  }.
  
  Global Instance ℐ :
    core.convert.AsMut.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
    core.convert.AsMut.as_mut := as_mut;
  }.
End Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.
End Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20___CallBuilder.

Module  Impl_erc20_erc20___CallBuilder.
Section Impl_erc20_erc20___CallBuilder.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20._.CallBuilder.
  
  Definition total_supply
      (self : ref Self)
      :
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ltac:(erc20.erc20.Environment)
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ltac:(erc20.erc20.Environment)))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                ltac:(ink_env.call.execution_input.EmptyArgumentList)))
            (ink_env.call.common.Set_
              (ink_env.call.common.ReturnType ltac:(erc20.erc20.Balance)))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2 in
      let*
          α4 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["call"]
          α0
          α3 in
      let* α5 : ltac:(refine u8) := M.alloc 219 in
      let* α6 : ltac:(refine u8) := M.alloc 99 in
      let* α7 : ltac:(refine u8) := M.alloc 117 in
      let* α8 : ltac:(refine u8) := M.alloc 168 in
      let* α9 : ltac:(refine (array u8)) := M.alloc [ α5; α6; α7; α8 ] in
      let* α10 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α9 in
      let*
          α11 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α4
          α11 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ink_env.types.DefaultEnvironment
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ink_env.types.DefaultEnvironment))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α12).
  
  Global Instance AssociatedFunction_total_supply :
    Notation.DoubleColon Self "total_supply" := {
    Notation.double_colon := total_supply;
  }.
  
  Definition balance_of
      (self : ref Self)
      (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
      :
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ltac:(erc20.erc20.Environment)
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ltac:(erc20.erc20.Environment)))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ltac:(erc20.erc20.AccountId))
                  ltac:(ink_env.call.execution_input.EmptyArgumentList))))
            (ink_env.call.common.Set_
              (ink_env.call.common.ReturnType ltac:(erc20.erc20.Balance)))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2 in
      let*
          α4 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["call"]
          α0
          α3 in
      let* α5 : ltac:(refine u8) := M.alloc 15 in
      let* α6 : ltac:(refine u8) := M.alloc 117 in
      let* α7 : ltac:(refine u8) := M.alloc 90 in
      let* α8 : ltac:(refine u8) := M.alloc 86 in
      let* α9 : ltac:(refine (array u8)) := M.alloc [ α5; α6; α7; α8 ] in
      let* α10 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α9 in
      let*
          α11 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α11
          __ink_binding_0 in
      let*
          α13 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd))))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α4
          α12 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ink_env.types.DefaultEnvironment
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ink_env.types.DefaultEnvironment))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α13).
  
  Global Instance AssociatedFunction_balance_of :
    Notation.DoubleColon Self "balance_of" := {
    Notation.double_colon := balance_of;
  }.
  
  Definition allowance
      (self : ref Self)
      (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
      (__ink_binding_1 : ltac:(erc20.erc20.AccountId))
      :
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ltac:(erc20.erc20.Environment)
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ltac:(erc20.erc20.Environment)))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ltac:(erc20.erc20.AccountId))
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.AccountId))
                    ltac:(ink_env.call.execution_input.EmptyArgumentList)))))
            (ink_env.call.common.Set_
              (ink_env.call.common.ReturnType ltac:(erc20.erc20.Balance)))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2 in
      let*
          α4 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["call"]
          α0
          α3 in
      let* α5 : ltac:(refine u8) := M.alloc 106 in
      let* α6 : ltac:(refine u8) := M.alloc 0 in
      let* α7 : ltac:(refine u8) := M.alloc 22 in
      let* α8 : ltac:(refine u8) := M.alloc 94 in
      let* α9 : ltac:(refine (array u8)) := M.alloc [ α5; α6; α7; α8 ] in
      let* α10 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α9 in
      let*
          α11 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α11
          __ink_binding_0 in
      let*
          α13 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))::["push_arg"]
          α12
          __ink_binding_1 in
      let*
          α14 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α4
          α13 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ink_env.types.DefaultEnvironment
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ink_env.types.DefaultEnvironment))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))))
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α14).
  
  Global Instance AssociatedFunction_allowance :
    Notation.DoubleColon Self "allowance" := {
    Notation.double_colon := allowance;
  }.
  
  Definition transfer
      (self : mut_ref Self)
      (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
      (__ink_binding_1 : ltac:(erc20.erc20.Balance))
      :
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ltac:(erc20.erc20.Environment)
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ltac:(erc20.erc20.Environment)))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ltac:(erc20.erc20.Balance))
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.AccountId))
                    ltac:(ink_env.call.execution_input.EmptyArgumentList)))))
            (ink_env.call.common.Set_
              (ink_env.call.common.ReturnType
                ltac:(erc20.erc20.Result constr:(unit))))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2 in
      let*
          α4 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["call"]
          α0
          α3 in
      let* α5 : ltac:(refine u8) := M.alloc 132 in
      let* α6 : ltac:(refine u8) := M.alloc 161 in
      let* α7 : ltac:(refine u8) := M.alloc 93 in
      let* α8 : ltac:(refine u8) := M.alloc 161 in
      let* α9 : ltac:(refine (array u8)) := M.alloc [ α5; α6; α7; α8 ] in
      let* α10 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α9 in
      let*
          α11 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α11
          __ink_binding_0 in
      let*
          α13 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument u128)
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))::["push_arg"]
          α12
          __ink_binding_1 in
      let*
          α14 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α4
          α13 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ink_env.types.DefaultEnvironment
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ink_env.types.DefaultEnvironment))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument u128)
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))))
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α14).
  
  Global Instance AssociatedFunction_transfer :
    Notation.DoubleColon Self "transfer" := {
    Notation.double_colon := transfer;
  }.
  
  Definition approve
      (self : mut_ref Self)
      (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
      (__ink_binding_1 : ltac:(erc20.erc20.Balance))
      :
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ltac:(erc20.erc20.Environment)
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ltac:(erc20.erc20.Environment)))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ltac:(erc20.erc20.Balance))
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.AccountId))
                    ltac:(ink_env.call.execution_input.EmptyArgumentList)))))
            (ink_env.call.common.Set_
              (ink_env.call.common.ReturnType
                ltac:(erc20.erc20.Result constr:(unit))))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2 in
      let*
          α4 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["call"]
          α0
          α3 in
      let* α5 : ltac:(refine u8) := M.alloc 104 in
      let* α6 : ltac:(refine u8) := M.alloc 18 in
      let* α7 : ltac:(refine u8) := M.alloc 102 in
      let* α8 : ltac:(refine u8) := M.alloc 160 in
      let* α9 : ltac:(refine (array u8)) := M.alloc [ α5; α6; α7; α8 ] in
      let* α10 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α9 in
      let*
          α11 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α11
          __ink_binding_0 in
      let*
          α13 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument u128)
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))::["push_arg"]
          α12
          __ink_binding_1 in
      let*
          α14 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α4
          α13 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ink_env.types.DefaultEnvironment
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ink_env.types.DefaultEnvironment))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument u128)
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))))
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α14).
  
  Global Instance AssociatedFunction_approve :
    Notation.DoubleColon Self "approve" := {
    Notation.double_colon := approve;
  }.
  
  Definition transfer_from
      (self : mut_ref Self)
      (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
      (__ink_binding_1 : ltac:(erc20.erc20.AccountId))
      (__ink_binding_2 : ltac:(erc20.erc20.Balance))
      :
        M
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ltac:(erc20.erc20.Environment)
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ltac:(erc20.erc20.Environment)))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ltac:(erc20.erc20.Balance))
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.AccountId))
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ltac:(erc20.erc20.AccountId))
                      ltac:(ink_env.call.execution_input.EmptyArgumentList))))))
            (ink_env.call.common.Set_
              (ink_env.call.common.ReturnType
                ltac:(erc20.erc20.Result constr:(unit))))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref self in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine ink_primitives.types.AccountId) :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α2 in
      let*
          α4 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Unset_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["call"]
          α0
          α3 in
      let* α5 : ltac:(refine u8) := M.alloc 11 in
      let* α6 : ltac:(refine u8) := M.alloc 57 in
      let* α7 : ltac:(refine u8) := M.alloc 111 in
      let* α8 : ltac:(refine u8) := M.alloc 24 in
      let* α9 : ltac:(refine (array u8)) := M.alloc [ α5; α6; α7; α8 ] in
      let* α10 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α9 in
      let*
          α11 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α10 in
      let*
          α12 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α11
          __ink_binding_0 in
      let*
          α13 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))::["push_arg"]
          α12
          __ink_binding_1 in
      let*
          α14 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument u128)
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument
                  ink_primitives.types.AccountId)
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ink_primitives.types.AccountId)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))::["push_arg"]
          α13
          __ink_binding_2 in
      let*
          α15 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd))))))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α4
          α14 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            ink_env.types.DefaultEnvironment
            (ink_env.call.common.Set_
              (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                ink_env.types.DefaultEnvironment))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument u128)
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd))))))
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α15).
  
  Global Instance AssociatedFunction_transfer_from :
    Notation.DoubleColon Self "transfer_from" := {
    Notation.double_colon := transfer_from;
  }.
End Impl_erc20_erc20___CallBuilder.
End Impl_erc20_erc20___CallBuilder.

Module  Erc20Ref.
Section Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Record t : Set := {
    inner :
      ink.codegen.dispatch.info.ContractCallBuilder.Type_
        (Self := erc20.erc20.Erc20)
        (Trait := ltac:(refine _));
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_inner : Notation.Dot "inner" := {
    Notation.dot x := let* x := M.read x in M.pure x.(inner) : M _;
  }.
  Global Instance Get_AF_inner : Notation.DoubleColon t "inner" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(inner) : M _;
  }.
End Erc20Ref.
End Erc20Ref.
Definition Erc20Ref `{ℋ : State.Trait} : Set := M.Val Erc20Ref.t.

Module  Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
Section Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 : ltac:(refine str) := deref (mk_str "Erc20Ref") in
      let* α3 : ltac:(refine (ref str)) := borrow α2 in
      let* α4 : ltac:(refine str) := deref (mk_str "inner") in
      let* α5 : ltac:(refine (ref str)) := borrow α4 in
      let* α6 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α7 : ltac:(refine erc20.erc20._.CallBuilder) := α6.["inner"] in
      let* α8 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α7 in
      let* α9 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α8 in
      let* α10 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := deref α9 in
      let* α11 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α10 in
      let* α12 : ltac:(refine (ref type not implemented)) :=
        pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.

Module  Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.
Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M unit :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := deref α3 in
      let* α5 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α4 in
      let* α6 : ltac:(refine __CodecOutputEdqy) := deref __codec_dest_edqy in
      let* α7 : ltac:(refine (mut_ref __CodecOutputEdqy)) := borrow_mut α6 in
      (parity_scale_codec.codec.Encode.encode_to
          (Self := ref erc20.erc20._.CallBuilder)
          (Trait := ltac:(refine _)))
        α5
        α7).
  
  Global Instance AssociatedFunction_encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :
    Notation.DoubleColon Self "encode_to" := {
    Notation.double_colon := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Definition encode
      (self : ref Self)
      : M (alloc.vec.Vec CoqOfRust.core.primitive.u8 alloc.vec.Vec.Default.A) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := deref α3 in
      let* α5 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α4 in
      (parity_scale_codec.codec.Encode.encode
          (Self := ref erc20.erc20._.CallBuilder)
          (Trait := ltac:(refine _)))
        α5).
  
  Global Instance AssociatedFunction_encode :
    Notation.DoubleColon Self "encode" := {
    Notation.double_colon := encode;
  }.
  
  Definition using_encoded
      {R F : Set}
      {ℋ_0 :
        core.ops.function.FnOnce.Trait F
          (Args := M.Val (ref (slice CoqOfRust.core.primitive.u8)))}
      (self : ref Self)
      (f : F)
      : M R :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := deref α3 in
      let* α5 : ltac:(refine (ref (ref erc20.erc20._.CallBuilder))) :=
        borrow α4 in
      (parity_scale_codec.codec.Encode.using_encoded
          (Self := ref erc20.erc20._.CallBuilder)
          (Trait := ltac:(refine _)))
        α5
        f).
  
  Global Instance AssociatedFunction_using_encoded
      {R F : Set}
      {ℋ_0 :
        core.ops.function.FnOnce.Trait F
          (Args := M.Val (ref (slice CoqOfRust.core.primitive.u8)))} :
    Notation.DoubleColon Self "using_encoded" := {
    Notation.double_colon := using_encoded (R := R) (F := F);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Encode.Required.Trait Self := {
    parity_scale_codec.codec.Encode.encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :=
      Datatypes.Some (encode_to (__CodecOutputEdqy := __CodecOutputEdqy));
    parity_scale_codec.codec.Encode.encode := Datatypes.Some encode;
    parity_scale_codec.codec.Encode.using_encoded
      {R F : Set}
      {ℋ_0 :
        core.ops.function.FnOnce.Trait F
          (Args := M.Val (ref (slice CoqOfRust.core.primitive.u8)))} :=
      Datatypes.Some (using_encoded (R := R) (F := F));
    parity_scale_codec.codec.Encode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Encode.size_hint := Datatypes.None;
    parity_scale_codec.codec.Encode.encoded_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.

Module  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.
Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Global Instance ℐ :
    parity_scale_codec.encode_like.EncodeLike.Trait Self
      (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
  }.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let*
          __codec_res_edqy :
          ltac:(refine
            (core.result.Result
              erc20.erc20._.CallBuilder
              parity_scale_codec.error.Error)) :=
        let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
        let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
        (parity_scale_codec.codec.Decode.decode
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α1 in
      let* α0 := M.read __codec_res_edqy in
      let* α0 : ltac:(refine erc20.erc20._.CallBuilder) :=
        match α0 with
        | core.result.Result.Err e =>
          let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Erc20Ref::inner`") in
          let*
              α1 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Erc20Ref
                  parity_scale_codec.error.Error)) :=
            M.alloc (core.result.Result.Err α0) in
          let* α2 : ltac:(refine never) := M.return_ α1 in
          never_to_any α2
        | core.result.Result.Ok __codec_res_edqy => M.pure __codec_res_edqy
        end in
      let* α1 : ltac:(refine erc20.erc20.Erc20Ref) :=
        M.alloc {| erc20.erc20.Erc20Ref.inner := α0; |} in
      M.alloc (core.result.Result.Ok α1)).
  
  Global Instance AssociatedFunction_decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.

Module  Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
Section Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition hash
      {__H : Set}
      {ℋ_0 : core.hash.Hasher.Trait __H}
      (self : ref Self)
      (state : mut_ref __H)
      : M unit :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      let* α5 : ltac:(refine __H) := deref state in
      let* α6 : ltac:(refine (mut_ref __H)) := borrow_mut α5 in
      (core.hash.Hash.hash
          (Self := erc20.erc20._.CallBuilder)
          (Trait := ltac:(refine _)))
        α4
        α6).
  
  Global Instance AssociatedFunction_hash
      {__H : Set}
      {ℋ_0 : core.hash.Hasher.Trait __H} :
    Notation.DoubleColon Self "hash" := {
    Notation.double_colon := hash (__H := __H);
  }.
  
  Global Instance ℐ : core.hash.Hash.Required.Trait Self := {
    core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
      hash (__H := __H);
    core.hash.Hash.hash_slice := Datatypes.None;
  }.
End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.

Module  Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.

Module  Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
Section Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition eq (self : ref Self) (other : ref erc20.erc20.Erc20Ref) : M bool :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine erc20.erc20.Erc20Ref) := deref other in
      let* α4 : ltac:(refine erc20.erc20._.CallBuilder) := α3.["inner"] in
      let* α5 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α4 in
      (core.cmp.PartialEq.eq
          (Self := erc20.erc20._.CallBuilder)
          (Trait := ltac:(refine _)))
        α2
        α5).
  
  Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
    Notation.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.

Module  Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
Section Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.

Module  Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
Section Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    M.function_body
      (let* _ : ltac:(refine unit) := M.alloc tt in
      M.alloc tt).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notation.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.

Module  Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
Section Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition clone (self : ref Self) : M erc20.erc20.Erc20Ref :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      let* α5 : ltac:(refine erc20.erc20._.CallBuilder) :=
        (core.clone.Clone.clone
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α4 in
      M.alloc {| erc20.erc20.Erc20Ref.inner := α5; |}).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.

Module  Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.
Section Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition Identity : Set := Self.
  
  Definition type_info
      : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)) :=
        (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let*
          α1 :
          ltac:(refine (scale_info.ty.path.Path scale_info.form.MetaForm)) :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "Erc20Ref")
          (mk_str "erc20::erc20") in
      let*
          α2 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let*
          α3 :
          ltac:(refine
            (alloc.vec.Vec
              (scale_info.ty.TypeParameter scale_info.form.MetaForm)
              alloc.alloc.Global)) :=
        (alloc.vec.Vec
            (scale_info.ty.TypeParameter scale_info.form.MetaForm)
            alloc.alloc.Global)::["new"] in
      let*
          α4 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["type_params"]
          α2
          α3 in
      let* α5 : ltac:(refine (array (ref str))) :=
        M.alloc [ mk_str "A simple ERC-20 contract." ] in
      let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
      let* α7 : ltac:(refine (array (ref str))) := deref α6 in
      let* α8 : ltac:(refine (ref (array (ref str)))) := borrow α7 in
      let* α9 : ltac:(refine (ref (slice (ref str)))) :=
        pointer_coercion "Unsize" α8 in
      let*
          α10 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["docs"]
          α4
          α9 in
      let*
          α11 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.Fields scale_info.form.MetaForm)::["named"] in
      let*
          α12 :
          ltac:(refine
            (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)) :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α11
          (let*
              α0 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let*
              α1 :
              ltac:(refine
                (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameAssigned
                  scale_info.build.field_state.TypeAssigned)) :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  scale_info.build.field_state.NameNotAssigned
                  scale_info.build.field_state.TypeAssigned)::["name"]
              α0
              (mk_str "inner") in
          (scale_info.build.FieldBuilder
                scale_info.form.MetaForm
                scale_info.build.field_state.NameAssigned
                scale_info.build.field_state.TypeAssigned)::["type_name"]
            α1
            (mk_str "<Erc20 as::ink::codegen::ContractCallBuilder>::Type")) in
      (scale_info.build.TypeBuilder
            scale_info.form.MetaForm
            scale_info.build.state.PathAssigned)::["composite"]
        α10
        α12).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.

Module  Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.
Section Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition layout
      (__key : ref ltac:(ink_primitives.key.Key))
      : M (ink_metadata.layout.Layout ink_metadata.layout.Layout.Default.F) :=
    M.function_body
      (let* α0 : ltac:(refine u32) := deref __key in
      let* α1 : ltac:(refine (ref u32)) := borrow α0 in
      let*
          α2 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.FieldLayout scale_info.form.MetaForm)::["new"]
          (mk_str "inner")
          α2 in
      let*
          α4 :
          ltac:(refine
            (array
              (ink_metadata.layout.FieldLayout scale_info.form.MetaForm))) :=
        M.alloc [ α3 ] in
      let*
          α5 :
          ltac:(refine
            (ink_metadata.layout.StructLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.StructLayout scale_info.form.MetaForm)::["new"]
          (mk_str "Erc20Ref")
          α4 in
      M.alloc (ink_metadata.layout.Layout.Struct α5)).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance ℐ : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout := layout;
  }.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.

Module  Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.
Section Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Type_ : Set := erc20.erc20.Erc20Ref.
  
  Global Instance ℐ : ink_env.contract.ContractReference.Trait Self := {
    ink_env.contract.ContractReference.Type_ := Type_;
  }.
End Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.
End Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.

Module  Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_erc20_erc20_Erc20.
Section Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_erc20_erc20_Erc20.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20.
  
  Definition Output : Set := erc20.erc20.Erc20Ref.
  
  Definition Error : Set := unit.
  
  Definition ok (value : erc20.erc20.Erc20Ref) : M Output :=
    M.function_body (M.pure value).
  
  Global Instance AssociatedFunction_ok : Notation.DoubleColon Self "ok" := {
    Notation.double_colon := ok;
  }.
  
  Global Instance ℐ :
    ink_env.call.create_builder.ConstructorReturnType.Required.Trait Self
      (C := erc20.erc20.Erc20Ref) := {
    ink_env.call.create_builder.ConstructorReturnType.Output := Output;
    ink_env.call.create_builder.ConstructorReturnType.Error := Error;
    ink_env.call.create_builder.ConstructorReturnType.ok := ok;
    ink_env.call.create_builder.ConstructorReturnType.IS_RESULT :=
      Datatypes.None;
    ink_env.call.create_builder.ConstructorReturnType.err := Datatypes.None;
  }.
End Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_erc20_erc20_Erc20.
End Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_erc20_erc20_Erc20.

Module  Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_core_result_Result_erc20_erc20_Erc20_E.
Section Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_core_result_Result_erc20_erc20_Erc20_E.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Context {ℋ_0 : parity_scale_codec.codec.Decode.Trait E}.
  Definition Self : Set := core.result.Result erc20.erc20.Erc20 E.
  
  Definition IS_RESULT : bool := M.run (M.alloc true).
  
  Global Instance AssociatedFunction_IS_RESULT :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition Output : Set := core.result.Result erc20.erc20.Erc20Ref E.
  
  Definition Error : Set := E.
  
  Definition ok (value : erc20.erc20.Erc20Ref) : M Output :=
    M.function_body (M.alloc (core.result.Result.Ok value)).
  
  Global Instance AssociatedFunction_ok : Notation.DoubleColon Self "ok" := {
    Notation.double_colon := ok;
  }.
  
  Definition err (err : Error) : M (core.option.Option Output) :=
    M.function_body
      (let* α0 : ltac:(refine (core.result.Result erc20.erc20.Erc20Ref E)) :=
        M.alloc (core.result.Result.Err err) in
      M.alloc (core.option.Option.Some α0)).
  
  Global Instance AssociatedFunction_err : Notation.DoubleColon Self "err" := {
    Notation.double_colon := err;
  }.
  
  Global Instance ℐ :
    ink_env.call.create_builder.ConstructorReturnType.Required.Trait Self
      (C := erc20.erc20.Erc20Ref) := {
    ink_env.call.create_builder.ConstructorReturnType.IS_RESULT :=
      Datatypes.Some IS_RESULT;
    ink_env.call.create_builder.ConstructorReturnType.Output := Output;
    ink_env.call.create_builder.ConstructorReturnType.Error := Error;
    ink_env.call.create_builder.ConstructorReturnType.ok := ok;
    ink_env.call.create_builder.ConstructorReturnType.err := Datatypes.Some err;
  }.
End Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_core_result_Result_erc20_erc20_Erc20_E.
End Impl_ink_env_call_create_builder_ConstructorReturnType_erc20_erc20_Erc20Ref_for_core_result_Result_erc20_erc20_Erc20_E.

Module  Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.
Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition Env : Set :=
    ink_env.types.DefaultEnvironment.
  
  Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
    ink_env.contract.ContractEnv.Env := Env;
  }.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.

Module  Impl_erc20_erc20_Erc20Ref_2.
Section Impl_erc20_erc20_Erc20Ref_2.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition new
      (__ink_binding_0 : ltac:(erc20.erc20.Balance))
      :
        M
          (ink_env.call.create_builder.CreateBuilder
            ltac:(erc20.erc20.Environment)
            Self
            (ink_env.call.common.Unset_ ltac:(erc20.erc20.Hash))
            (ink_env.call.common.Unset_ u64)
            (ink_env.call.common.Unset_ ltac:(erc20.erc20.Balance))
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument
                    ltac:(erc20.erc20.Balance))
                  ltac:(ink_env.call.execution_input.EmptyArgumentList))))
            (ink_env.call.common.Unset_ ink_env.call.create_builder.state.Salt)
            (ink_env.call.common.Set_ (ink_env.call.common.ReturnType Self))) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (ink_env.call.create_builder.CreateBuilder
              ink_env.types.DefaultEnvironment
              erc20.erc20.Erc20Ref
              (ink_env.call.common.Unset_ ink_primitives.types.Hash)
              (ink_env.call.common.Unset_ u64)
              (ink_env.call.common.Unset_ u128)
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        ink_env.call.create_builder.build_create in
      let* α1 : ltac:(refine u8) := M.alloc 155 in
      let* α2 : ltac:(refine u8) := M.alloc 174 in
      let* α3 : ltac:(refine u8) := M.alloc 157 in
      let* α4 : ltac:(refine u8) := M.alloc 94 in
      let* α5 : ltac:(refine (array u8)) := M.alloc [ α1; α2; α3; α4 ] in
      let* α6 : ltac:(refine ink_env.call.selector.Selector) :=
        ink_env.call.selector.Selector::["new"] α5 in
      let*
          α7 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α6 in
      let*
          α8 :
          ltac:(refine
            (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument u128)
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd)))) :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α7
          __ink_binding_0 in
      let*
          α9 :
          ltac:(refine
            (ink_env.call.create_builder.CreateBuilder
              ink_env.types.DefaultEnvironment
              erc20.erc20.Erc20Ref
              (ink_env.call.common.Unset_ ink_primitives.types.Hash)
              (ink_env.call.common.Unset_ u64)
              (ink_env.call.common.Unset_ u128)
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd))))
              (ink_env.call.common.Unset_
                ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))) :=
        (ink_env.call.create_builder.CreateBuilder
              ink_env.types.DefaultEnvironment
              erc20.erc20.Erc20Ref
              (ink_env.call.common.Unset_ ink_primitives.types.Hash)
              (ink_env.call.common.Unset_ u64)
              (ink_env.call.common.Unset_ u128)
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Unset_
                ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["exec_input"]
          α0
          α8 in
      (ink_env.call.create_builder.CreateBuilder
            ink_env.types.DefaultEnvironment
            erc20.erc20.Erc20Ref
            (ink_env.call.common.Unset_ ink_primitives.types.Hash)
            (ink_env.call.common.Unset_ u64)
            (ink_env.call.common.Unset_ u128)
            (ink_env.call.common.Set_
              (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  (ink_env.call.execution_input.Argument u128)
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd))))
            (ink_env.call.common.Unset_ ink_env.call.create_builder.state.Salt)
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α9).
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Definition total_supply (self : ref Self) : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
      let*
          α2 :
          ltac:(refine (core.result.Result u128 ink_primitives.LangError)) :=
        erc20.erc20.Erc20Ref::["try_total_supply"] α1 in
      (core.result.Result u128 ink_primitives.LangError)::["unwrap_or_else"]
        α2
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::total_supply: "
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_total_supply :
    Notation.DoubleColon Self "total_supply" := {
    Notation.double_colon := total_supply;
  }.
  
  Definition try_total_supply
      (self : ref Self)
      :
        M
          ltac:(ink_primitives.MessageResult
            constr:(ltac:(erc20.erc20.Balance))) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
            (Self := erc20.erc20.Erc20Ref)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      let*
          α5 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType u128)))) :=
        erc20.erc20._.CallBuilder::["total_supply"] α4 in
      let*
          α6 :
          ltac:(refine
            (core.result.Result
              (core.result.Result u128 ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType u128)))::["try_invoke"]
          α5 in
      (core.result.Result
            (core.result.Result u128 ink_primitives.LangError)
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
        α6
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::total_supply: "
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow error in
        let*
            α6 :
            ltac:(refine
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_try_total_supply :
    Notation.DoubleColon Self "try_total_supply" := {
    Notation.double_colon := try_total_supply;
  }.
  
  Definition balance_of
      (self : ref Self)
      (owner : ltac:(erc20.erc20.AccountId))
      : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
      let*
          α2 :
          ltac:(refine (core.result.Result u128 ink_primitives.LangError)) :=
        erc20.erc20.Erc20Ref::["try_balance_of"] α1 owner in
      (core.result.Result u128 ink_primitives.LangError)::["unwrap_or_else"]
        α2
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::balance_of: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_balance_of :
    Notation.DoubleColon Self "balance_of" := {
    Notation.double_colon := balance_of;
  }.
  
  Definition try_balance_of
      (self : ref Self)
      (owner : ltac:(erc20.erc20.AccountId))
      :
        M
          ltac:(ink_primitives.MessageResult
            constr:(ltac:(erc20.erc20.Balance))) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
            (Self := erc20.erc20.Erc20Ref)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      let*
          α5 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType u128)))) :=
        erc20.erc20._.CallBuilder::["balance_of"] α4 owner in
      let*
          α6 :
          ltac:(refine
            (core.result.Result
              (core.result.Result u128 ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType u128)))::["try_invoke"]
          α5 in
      (core.result.Result
            (core.result.Result u128 ink_primitives.LangError)
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
        α6
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::balance_of: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow error in
        let*
            α6 :
            ltac:(refine
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_try_balance_of :
    Notation.DoubleColon Self "try_balance_of" := {
    Notation.double_colon := try_balance_of;
  }.
  
  Definition allowance
      (self : ref Self)
      (owner : ltac:(erc20.erc20.AccountId))
      (spender : ltac:(erc20.erc20.AccountId))
      : M ltac:(erc20.erc20.Balance) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
      let*
          α2 :
          ltac:(refine (core.result.Result u128 ink_primitives.LangError)) :=
        erc20.erc20.Erc20Ref::["try_allowance"] α1 owner spender in
      (core.result.Result u128 ink_primitives.LangError)::["unwrap_or_else"]
        α2
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::allowance: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_allowance :
    Notation.DoubleColon Self "allowance" := {
    Notation.double_colon := allowance;
  }.
  
  Definition try_allowance
      (self : ref Self)
      (owner : ltac:(erc20.erc20.AccountId))
      (spender : ltac:(erc20.erc20.AccountId))
      :
        M
          ltac:(ink_primitives.MessageResult
            constr:(ltac:(erc20.erc20.Balance))) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (ref erc20.erc20.Erc20Ref)) := borrow α0 in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
            (Self := erc20.erc20.Erc20Ref)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      let*
          α5 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType u128)))) :=
        erc20.erc20._.CallBuilder::["allowance"] α4 owner spender in
      let*
          α6 :
          ltac:(refine
            (core.result.Result
              (core.result.Result u128 ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ink_primitives.types.AccountId)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType u128)))::["try_invoke"]
          α5 in
      (core.result.Result
            (core.result.Result u128 ink_primitives.LangError)
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
        α6
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::allowance: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow error in
        let*
            α6 :
            ltac:(refine
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_try_allowance :
    Notation.DoubleColon Self "try_allowance" := {
    Notation.double_colon := try_allowance;
  }.
  
  Definition transfer
      (self : mut_ref Self)
      (to : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)) :=
        erc20.erc20.Erc20Ref::["try_transfer"] α1 to value in
      (core.result.Result
            (core.result.Result unit erc20.erc20.Error)
            ink_primitives.LangError)::["unwrap_or_else"]
        α2
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::transfer: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_transfer :
    Notation.DoubleColon Self "transfer" := {
    Notation.double_colon := transfer;
  }.
  
  Definition try_transfer
      (self : mut_ref Self)
      (to : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      :
        M
          ltac:(ink_primitives.MessageResult
            constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) := borrow_mut α0 in
      let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
            (Self := erc20.erc20.Erc20Ref)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α3 in
      let*
          α5 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  (core.result.Result unit erc20.erc20.Error))))) :=
        erc20.erc20._.CallBuilder::["transfer"] α4 to value in
      let*
          α6 :
          ltac:(refine
            (core.result.Result
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  (core.result.Result unit erc20.erc20.Error))))::["try_invoke"]
          α5 in
      (core.result.Result
            (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
        α6
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::transfer: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow error in
        let*
            α6 :
            ltac:(refine
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_try_transfer :
    Notation.DoubleColon Self "try_transfer" := {
    Notation.double_colon := try_transfer;
  }.
  
  Definition approve
      (self : mut_ref Self)
      (spender : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)) :=
        erc20.erc20.Erc20Ref::["try_approve"] α1 spender value in
      (core.result.Result
            (core.result.Result unit erc20.erc20.Error)
            ink_primitives.LangError)::["unwrap_or_else"]
        α2
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::approve: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_approve :
    Notation.DoubleColon Self "approve" := {
    Notation.double_colon := approve;
  }.
  
  Definition try_approve
      (self : mut_ref Self)
      (spender : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      :
        M
          ltac:(ink_primitives.MessageResult
            constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) := borrow_mut α0 in
      let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
            (Self := erc20.erc20.Erc20Ref)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α3 in
      let*
          α5 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  (core.result.Result unit erc20.erc20.Error))))) :=
        erc20.erc20._.CallBuilder::["approve"] α4 spender value in
      let*
          α6 :
          ltac:(refine
            (core.result.Result
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        ink_env.call.execution_input.ArgumentListEnd
                        ink_env.call.execution_input.ArgumentListEnd)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  (core.result.Result unit erc20.erc20.Error))))::["try_invoke"]
          α5 in
      (core.result.Result
            (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
        α6
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::approve: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow error in
        let*
            α6 :
            ltac:(refine
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_try_approve :
    Notation.DoubleColon Self "try_approve" := {
    Notation.double_colon := try_approve;
  }.
  
  Definition transfer_from
      (self : mut_ref Self)
      (from : ltac:(erc20.erc20.AccountId))
      (to : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      : M ltac:(erc20.erc20.Result constr:(unit)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)) :=
        erc20.erc20.Erc20Ref::["try_transfer_from"] α1 from to value in
      (core.result.Result
            (core.result.Result unit erc20.erc20.Error)
            ink_primitives.LangError)::["unwrap_or_else"]
        α2
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::transfer_from: "
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_primitives.LangError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_primitives.LangError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_primitives.LangError)) := borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_transfer_from :
    Notation.DoubleColon Self "transfer_from" := {
    Notation.double_colon := transfer_from;
  }.
  
  Definition try_transfer_from
      (self : mut_ref Self)
      (from : ltac:(erc20.erc20.AccountId))
      (to : ltac:(erc20.erc20.AccountId))
      (value : ltac:(erc20.erc20.Balance))
      :
        M
          ltac:(ink_primitives.MessageResult
            constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine (mut_ref erc20.erc20.Erc20Ref)) := borrow_mut α0 in
      let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
            (Self := erc20.erc20.Erc20Ref)
            (Trait := ltac:(refine _)))
          α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α3 in
      let*
          α5 :
          ltac:(refine
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd))))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  (core.result.Result unit erc20.erc20.Error))))) :=
        erc20.erc20._.CallBuilder::["transfer_from"] α4 from to value in
      let*
          α6 :
          ltac:(refine
            (core.result.Result
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError)
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ink_env.types.DefaultEnvironment
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ink_env.types.DefaultEnvironment))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument u128)
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ink_primitives.types.AccountId)
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ink_primitives.types.AccountId)
                        (ink_env.call.execution_input.ArgumentList
                          ink_env.call.execution_input.ArgumentListEnd
                          ink_env.call.execution_input.ArgumentListEnd))))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  (core.result.Result unit erc20.erc20.Error))))::["try_invoke"]
          α5 in
      (core.result.Result
            (core.result.Result
              (core.result.Result unit erc20.erc20.Error)
              ink_primitives.LangError)
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)::["unwrap_or_else"]
        α6
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc
            [ mk_str "encountered error while calling Erc20::transfer_from: "
            ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let*
            α5 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow error in
        let*
            α6 :
            ltac:(refine
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error) :=
          deref α5 in
        let*
            α7 :
            ltac:(refine
              (ref
                ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_debug"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15)).
  
  Global Instance AssociatedFunction_try_transfer_from :
    Notation.DoubleColon Self "try_transfer_from" := {
    Notation.double_colon := try_transfer_from;
  }.
End Impl_erc20_erc20_Erc20Ref_2.
End Impl_erc20_erc20_Erc20Ref_2.

Module  Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.
Section Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition Builder : Set :=
    ink.codegen.dispatch.info.ContractCallBuilder.Type_
      (Self := erc20.erc20.Erc20).
  
  Definition call (self : ref Self) : M (ref Builder) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      borrow α3).
  
  Global Instance AssociatedFunction_call :
    Notation.DoubleColon Self "call" := {
    Notation.double_colon := call;
  }.
  
  Definition call_mut (self : mut_ref Self) : M (mut_ref Builder) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α0 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α3 in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := deref α0 in
      borrow_mut α1).
  
  Global Instance AssociatedFunction_call_mut :
    Notation.DoubleColon Self "call_mut" := {
    Notation.double_colon := call_mut;
  }.
  
  Global Instance ℐ :
    ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Self := {
    ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder := Builder;
    ink.codegen.trait_def.call_builder.TraitCallBuilder.call := call;
    ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut := call_mut;
  }.
End Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.
End Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.

Module  Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
Section Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition from_account_id
      (account_id : ltac:(erc20.erc20.AccountId))
      : M Self :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20._.CallBuilder) :=
        (ink_env.call.create_builder.FromAccountId.from_account_id
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          account_id in
      M.alloc {| erc20.erc20.Erc20Ref.inner := α0; |}).
  
  Global Instance AssociatedFunction_from_account_id :
    Notation.DoubleColon Self "from_account_id" := {
    Notation.double_colon := from_account_id;
  }.
  
  Global Instance ℐ :
    ink_env.call.create_builder.FromAccountId.Trait Self
      (T := ltac:(erc20.erc20.Environment)) := {
    ink_env.call.create_builder.FromAccountId.from_account_id :=
      from_account_id;
  }.
End Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
End Impl_ink_env_call_create_builder_FromAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.

Module  Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
Section Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition to_account_id (self : ref Self) : M ltac:(erc20.erc20.AccountId) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      (ink.contract_ref.ToAccountId.to_account_id
          (Self := erc20.erc20._.CallBuilder)
          (Trait := ltac:(refine _)))
        α4).
  
  Global Instance AssociatedFunction_to_account_id :
    Notation.DoubleColon Self "to_account_id" := {
    Notation.double_colon := to_account_id;
  }.
  
  Global Instance ℐ :
    ink.contract_ref.ToAccountId.Trait Self
      (T := ltac:(erc20.erc20.Environment)) := {
    ink.contract_ref.ToAccountId.to_account_id := to_account_id;
  }.
End Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.
End Impl_ink_contract_ref_ToAccountId_erc20_erc20_Environment_for_erc20_erc20_Erc20Ref.

Module  Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
Section Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition as_ref (self : ref Self) : M (ref ltac:(erc20.erc20.AccountId)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (ref erc20.erc20._.CallBuilder)) := borrow α3 in
      let* α5 : ltac:(refine (ref ink_primitives.types.AccountId)) :=
        (core.convert.AsRef.as_ref
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
      borrow α6).
  
  Global Instance AssociatedFunction_as_ref :
    Notation.DoubleColon Self "as_ref" := {
    Notation.double_colon := as_ref;
  }.
  
  Global Instance ℐ :
    core.convert.AsRef.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
    core.convert.AsRef.as_ref := as_ref;
  }.
End Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
End Impl_core_convert_AsRef_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.

Module  Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
Section Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Erc20Ref.
  
  Definition as_mut
      (self : mut_ref Self)
      : M (mut_ref ltac:(erc20.erc20.AccountId)) :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Erc20Ref) := deref self in
      let* α1 : ltac:(refine erc20.erc20._.CallBuilder) := α0.["inner"] in
      let* α2 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α1 in
      let* α3 : ltac:(refine erc20.erc20._.CallBuilder) := deref α2 in
      let* α4 : ltac:(refine (mut_ref erc20.erc20._.CallBuilder)) :=
        borrow_mut α3 in
      let* α5 : ltac:(refine (mut_ref ink_primitives.types.AccountId)) :=
        (core.convert.AsMut.as_mut
            (Self := erc20.erc20._.CallBuilder)
            (Trait := ltac:(refine _)))
          α4 in
      let* α6 : ltac:(refine ink_primitives.types.AccountId) := deref α5 in
      let* α0 : ltac:(refine (mut_ref ink_primitives.types.AccountId)) :=
        borrow_mut α6 in
      let* α1 : ltac:(refine ink_primitives.types.AccountId) := deref α0 in
      borrow_mut α1).
  
  Global Instance AssociatedFunction_as_mut :
    Notation.DoubleColon Self "as_mut" := {
    Notation.double_colon := as_mut;
  }.
  
  Global Instance ℐ :
    core.convert.AsMut.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
    core.convert.AsMut.as_mut := as_mut;
  }.
End Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.
End Impl_core_convert_AsMut_erc20_erc20_AccountId_for_erc20_erc20_Erc20Ref.

Definition __ink_generate_metadata
    `{ℋ : State.Trait}
    : M ink_metadata.InkProject :=
  M.function_body
    (let*
        layout :
        ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
      let* α0 : ltac:(refine ink_metadata.layout.LayoutKey) :=
        (core.convert.From.from
            (Self := ink_metadata.layout.LayoutKey)
            (Trait := ltac:(refine _)))
          (ink_storage_traits.storage.StorageKey.KEY
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _))) in
      let* α1 : ltac:(refine (ref u32)) :=
        borrow
          (ink_storage_traits.storage.StorageKey.KEY
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _))) in
      let* α2 : ltac:(refine u32) := deref α1 in
      let* α3 : ltac:(refine (ref u32)) := borrow α2 in
      let*
          α4 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(refine _)))
          α3 in
      let*
          α5 :
          ltac:(refine
            (ink_metadata.layout.RootLayout scale_info.form.MetaForm)) :=
        (ink_metadata.layout.RootLayout scale_info.form.MetaForm)::["new"]
          α0
          α4 in
      M.alloc (ink_metadata.layout.Layout.Root α5) in
    let* _ : ltac:(refine unit) :=
      let*
          α0 :
          ltac:(refine
            (ref (ink_metadata.layout.Layout scale_info.form.MetaForm))) :=
        borrow layout in
      let*
          α1 :
          ltac:(refine (ink_metadata.layout.Layout scale_info.form.MetaForm)) :=
        deref α0 in
      let*
          α2 :
          ltac:(refine
            (ref (ink_metadata.layout.Layout scale_info.form.MetaForm))) :=
        borrow α1 in
      let*
          α3 :
          ltac:(refine
            (core.result.Result unit ink_metadata.layout.MetadataError)) :=
        ink_metadata.layout.validate.ValidateLayout::["validate"] α2 in
      (core.result.Result
            unit
            ink_metadata.layout.MetadataError)::["unwrap_or_else"]
        α3
        (let* α0 : ltac:(refine (array (ref str))) :=
          M.alloc [ mk_str "metadata ink! generation failed: " ] in
        let* α1 : ltac:(refine (ref (array (ref str)))) := borrow α0 in
        let* α2 : ltac:(refine (array (ref str))) := deref α1 in
        let* α3 : ltac:(refine (ref (array (ref str)))) := borrow α2 in
        let* α4 : ltac:(refine (ref (slice (ref str)))) :=
          pointer_coercion "Unsize" α3 in
        let* α5 : ltac:(refine (ref ink_metadata.layout.MetadataError)) :=
          borrow error in
        let* α6 : ltac:(refine ink_metadata.layout.MetadataError) := deref α5 in
        let* α7 : ltac:(refine (ref ink_metadata.layout.MetadataError)) :=
          borrow α6 in
        let* α8 : ltac:(refine core.fmt.rt.Argument) :=
          core.fmt.rt.Argument::["new_display"] α7 in
        let* α9 : ltac:(refine (array core.fmt.rt.Argument)) :=
          M.alloc [ α8 ] in
        let* α10 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α9 in
        let* α11 : ltac:(refine (array core.fmt.rt.Argument)) := deref α10 in
        let* α12 : ltac:(refine (ref (array core.fmt.rt.Argument))) :=
          borrow α11 in
        let* α13 : ltac:(refine (ref (slice core.fmt.rt.Argument))) :=
          pointer_coercion "Unsize" α12 in
        let* α14 : ltac:(refine core.fmt.Arguments) :=
          core.fmt.Arguments::["new_v1"] α4 α13 in
        let* α15 : ltac:(refine never) := core.panicking.panic_fmt α14 in
        never_to_any α15) in
    let*
        α0 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Invalid)) :=
      (ink_metadata.specs.ContractSpec scale_info.form.MetaForm)::["new"] in
    let*
        α1 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.ConstructorSpec
            scale_info.form.MetaForm)::["from_label"]
        (mk_str "new") in
    let* α2 : ltac:(refine u8) := M.alloc 155 in
    let* α3 : ltac:(refine u8) := M.alloc 174 in
    let* α4 : ltac:(refine u8) := M.alloc 157 in
    let* α5 : ltac:(refine u8) := M.alloc 94 in
    let* α6 : ltac:(refine (array u8)) := M.alloc [ α2; α3; α4; α5 ] in
    let*
        α7 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α1
        α6 in
    let*
        α8 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "total_supply") in
    let* α9 : ltac:(refine (array (ref str))) := M.alloc [ mk_str "Balance" ] in
    let* α10 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α9 in
    let*
        α11 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α10
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α12 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α11 in
    let*
        α13 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α8
        α12 in
    let*
        α14 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α13 in
    let*
        α15 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α14 ] in
    let*
        α16 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α7
        α15 in
    let* α17 : ltac:(refine bool) := M.alloc false in
    let*
        α18 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["payable"]
        α16
        α17 in
    let* α19 : ltac:(refine bool) := M.alloc false in
    let*
        α20 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["default"]
        α18
        α19 in
    let* α21 : ltac:(refine bool) :=
      use
        (ink.reflect.dispatch.DispatchableConstructorInfo.IS_RESULT
          (Self := erc20.erc20.Erc20)
          (Trait := ltac:(refine _))) in
    let*
        α22 :
        ltac:(refine
          (core.option.Option
            (ink_metadata.specs.TypeSpec scale_info.form.MetaForm))) :=
      if (α21 : bool) then
        let*
            α0 :
            ltac:(refine
              (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
          (ink_metadata.specs.TypeSpec
                scale_info.form.MetaForm)::["with_name_str"]
            (mk_str "ink_primitives::ConstructorResult") in
        M.alloc (core.option.Option.Some α0)
      else
        let*
            α0 :
            ltac:(refine
              (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
          (ink_metadata.specs.TypeSpec
                scale_info.form.MetaForm)::["with_name_str"]
            (mk_str "ink_primitives::ConstructorResult") in
        M.alloc (core.option.Option.Some α0) in
    let*
        α23 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α22 in
    let*
        α24 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α20
        α23 in
    let* α25 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str
            " Creates a new ERC-20 contract with the specified initial supply."
        ] in
    let*
        α26 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α24
        α25 in
    let*
        α27 :
        ltac:(refine
          (ink_metadata.specs.ConstructorSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ConstructorSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α26 in
    let*
        α28 :
        ltac:(refine
          (array
            (ink_metadata.specs.ConstructorSpec scale_info.form.MetaForm))) :=
      M.alloc [ α27 ] in
    let*
        α29 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Invalid)::["constructors"]
        α0
        α28 in
    let*
        α30 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)::["from_label"]
        (mk_str "total_supply") in
    let* α31 : ltac:(refine u8) := M.alloc 219 in
    let* α32 : ltac:(refine u8) := M.alloc 99 in
    let* α33 : ltac:(refine u8) := M.alloc 117 in
    let* α34 : ltac:(refine u8) := M.alloc 168 in
    let* α35 : ltac:(refine (array u8)) := M.alloc [ α31; α32; α33; α34 ] in
    let*
        α36 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α30
        α35 in
    let*
        α37 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ ] in
    let*
        α38 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α36
        α37 in
    let* α39 : ltac:(refine str) := deref (mk_str "MessageResult") in
    let* α40 : ltac:(refine (ref str)) := borrow α39 in
    let* α41 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α40 ] in
    let* α42 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α41 in
    let*
        α43 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α42
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α44 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α43 in
    let*
        α45 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α44 in
    let*
        α46 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α38
        α45 in
    let* α47 : ltac:(refine bool) := M.alloc false in
    let*
        α48 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["mutates"]
        α46
        α47 in
    let* α49 : ltac:(refine bool) := M.alloc false in
    let*
        α50 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["payable"]
        α48
        α49 in
    let* α51 : ltac:(refine bool) := M.alloc false in
    let*
        α52 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["default"]
        α50
        α51 in
    let* α53 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str " Returns the total token supply." ] in
    let*
        α54 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α52
        α53 in
    let*
        α55 :
        ltac:(refine
          (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α54 in
    let*
        α56 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)::["from_label"]
        (mk_str "balance_of") in
    let* α57 : ltac:(refine u8) := M.alloc 15 in
    let* α58 : ltac:(refine u8) := M.alloc 117 in
    let* α59 : ltac:(refine u8) := M.alloc 90 in
    let* α60 : ltac:(refine u8) := M.alloc 86 in
    let* α61 : ltac:(refine (array u8)) := M.alloc [ α57; α58; α59; α60 ] in
    let*
        α62 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α56
        α61 in
    let*
        α63 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "owner") in
    let* α64 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α65 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α64 in
    let*
        α66 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α65
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α67 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α66 in
    let*
        α68 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α63
        α67 in
    let*
        α69 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α68 in
    let*
        α70 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α69 ] in
    let*
        α71 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α62
        α70 in
    let* α72 : ltac:(refine str) := deref (mk_str "MessageResult") in
    let* α73 : ltac:(refine (ref str)) := borrow α72 in
    let* α74 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α73 ] in
    let* α75 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α74 in
    let*
        α76 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α75
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α77 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α76 in
    let*
        α78 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α77 in
    let*
        α79 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α71
        α78 in
    let* α80 : ltac:(refine bool) := M.alloc false in
    let*
        α81 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["mutates"]
        α79
        α80 in
    let* α82 : ltac:(refine bool) := M.alloc false in
    let*
        α83 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["payable"]
        α81
        α82 in
    let* α84 : ltac:(refine bool) := M.alloc false in
    let*
        α85 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["default"]
        α83
        α84 in
    let* α86 : ltac:(refine str) := deref (mk_str "") in
    let* α87 : ltac:(refine (ref str)) := borrow α86 in
    let* α88 : ltac:(refine str) :=
      deref (mk_str " Returns `0` if the account is non-existent.") in
    let* α89 : ltac:(refine (ref str)) := borrow α88 in
    let* α90 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str " Returns the account balance for the specified `owner`.";
          α87;
          α89
        ] in
    let*
        α91 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α85
        α90 in
    let*
        α92 :
        ltac:(refine
          (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α91 in
    let*
        α93 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)::["from_label"]
        (mk_str "allowance") in
    let* α94 : ltac:(refine u8) := M.alloc 106 in
    let* α95 : ltac:(refine u8) := M.alloc 0 in
    let* α96 : ltac:(refine u8) := M.alloc 22 in
    let* α97 : ltac:(refine u8) := M.alloc 94 in
    let* α98 : ltac:(refine (array u8)) := M.alloc [ α94; α95; α96; α97 ] in
    let*
        α99 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α93
        α98 in
    let*
        α100 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "owner") in
    let* α101 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α102 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α101 in
    let*
        α103 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α102
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α104 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α103 in
    let*
        α105 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α100
        α104 in
    let*
        α106 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α105 in
    let*
        α107 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "spender") in
    let* α108 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α109 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α108 in
    let*
        α110 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α109
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α111 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α110 in
    let*
        α112 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α107
        α111 in
    let*
        α113 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α112 in
    let*
        α114 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α106; α113 ] in
    let*
        α115 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α99
        α114 in
    let* α116 : ltac:(refine str) := deref (mk_str "MessageResult") in
    let* α117 : ltac:(refine (ref str)) := borrow α116 in
    let* α118 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α117 ] in
    let* α119 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α118 in
    let*
        α120 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α119
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α121 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α120 in
    let*
        α122 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α121 in
    let*
        α123 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α115
        α122 in
    let* α124 : ltac:(refine bool) := M.alloc false in
    let*
        α125 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["mutates"]
        α123
        α124 in
    let* α126 : ltac:(refine bool) := M.alloc false in
    let*
        α127 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["payable"]
        α125
        α126 in
    let* α128 : ltac:(refine bool) := M.alloc false in
    let*
        α129 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["default"]
        α127
        α128 in
    let* α130 : ltac:(refine str) := deref (mk_str "") in
    let* α131 : ltac:(refine (ref str)) := borrow α130 in
    let* α132 : ltac:(refine str) :=
      deref (mk_str " Returns `0` if no allowance has been set.") in
    let* α133 : ltac:(refine (ref str)) := borrow α132 in
    let* α134 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str
            " Returns the amount which `spender` is still allowed to withdraw from `owner`.";
          α131;
          α133
        ] in
    let*
        α135 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α129
        α134 in
    let*
        α136 :
        ltac:(refine
          (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α135 in
    let*
        α137 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)::["from_label"]
        (mk_str "transfer") in
    let* α138 : ltac:(refine u8) := M.alloc 132 in
    let* α139 : ltac:(refine u8) := M.alloc 161 in
    let* α140 : ltac:(refine u8) := M.alloc 93 in
    let* α141 : ltac:(refine u8) := M.alloc 161 in
    let* α142 : ltac:(refine (array u8)) :=
      M.alloc [ α138; α139; α140; α141 ] in
    let*
        α143 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α137
        α142 in
    let*
        α144 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "to") in
    let* α145 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α146 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α145 in
    let*
        α147 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α146
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α148 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α147 in
    let*
        α149 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α144
        α148 in
    let*
        α150 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α149 in
    let*
        α151 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "value") in
    let* α152 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Balance" ] in
    let* α153 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α152 in
    let*
        α154 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α153
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α155 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α154 in
    let*
        α156 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α151
        α155 in
    let*
        α157 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α156 in
    let*
        α158 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α150; α157 ] in
    let*
        α159 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α143
        α158 in
    let* α160 : ltac:(refine str) := deref (mk_str "MessageResult") in
    let* α161 : ltac:(refine (ref str)) := borrow α160 in
    let* α162 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α161 ] in
    let* α163 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α162 in
    let*
        α164 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α163
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α165 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α164 in
    let*
        α166 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α165 in
    let*
        α167 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α159
        α166 in
    let* α168 : ltac:(refine bool) := M.alloc true in
    let*
        α169 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["mutates"]
        α167
        α168 in
    let* α170 : ltac:(refine bool) := M.alloc false in
    let*
        α171 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["payable"]
        α169
        α170 in
    let* α172 : ltac:(refine bool) := M.alloc false in
    let*
        α173 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["default"]
        α171
        α172 in
    let* α174 : ltac:(refine str) := deref (mk_str "") in
    let* α175 : ltac:(refine (ref str)) := borrow α174 in
    let* α176 : ltac:(refine str) :=
      deref (mk_str " On success a `Transfer` event is emitted.") in
    let* α177 : ltac:(refine (ref str)) := borrow α176 in
    let* α178 : ltac:(refine str) := deref (mk_str "") in
    let* α179 : ltac:(refine (ref str)) := borrow α178 in
    let* α180 : ltac:(refine str) := deref (mk_str " # Errors") in
    let* α181 : ltac:(refine (ref str)) := borrow α180 in
    let* α182 : ltac:(refine str) := deref (mk_str "") in
    let* α183 : ltac:(refine (ref str)) := borrow α182 in
    let* α184 : ltac:(refine str) :=
      deref
        (mk_str
          " Returns `InsufficientBalance` error if there are not enough tokens on") in
    let* α185 : ltac:(refine (ref str)) := borrow α184 in
    let* α186 : ltac:(refine str) :=
      deref (mk_str " the caller's account balance.") in
    let* α187 : ltac:(refine (ref str)) := borrow α186 in
    let* α188 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str
            " Transfers `value` amount of tokens from the caller's account to account `to`.";
          α175;
          α177;
          α179;
          α181;
          α183;
          α185;
          α187
        ] in
    let*
        α189 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α173
        α188 in
    let*
        α190 :
        ltac:(refine
          (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α189 in
    let*
        α191 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)::["from_label"]
        (mk_str "approve") in
    let* α192 : ltac:(refine u8) := M.alloc 104 in
    let* α193 : ltac:(refine u8) := M.alloc 18 in
    let* α194 : ltac:(refine u8) := M.alloc 102 in
    let* α195 : ltac:(refine u8) := M.alloc 160 in
    let* α196 : ltac:(refine (array u8)) :=
      M.alloc [ α192; α193; α194; α195 ] in
    let*
        α197 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α191
        α196 in
    let*
        α198 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "spender") in
    let* α199 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α200 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α199 in
    let*
        α201 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α200
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α202 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α201 in
    let*
        α203 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α198
        α202 in
    let*
        α204 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α203 in
    let*
        α205 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "value") in
    let* α206 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Balance" ] in
    let* α207 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α206 in
    let*
        α208 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α207
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α209 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α208 in
    let*
        α210 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α205
        α209 in
    let*
        α211 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α210 in
    let*
        α212 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α204; α211 ] in
    let*
        α213 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α197
        α212 in
    let* α214 : ltac:(refine str) := deref (mk_str "MessageResult") in
    let* α215 : ltac:(refine (ref str)) := borrow α214 in
    let* α216 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α215 ] in
    let* α217 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α216 in
    let*
        α218 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α217
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α219 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α218 in
    let*
        α220 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α219 in
    let*
        α221 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α213
        α220 in
    let* α222 : ltac:(refine bool) := M.alloc true in
    let*
        α223 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["mutates"]
        α221
        α222 in
    let* α224 : ltac:(refine bool) := M.alloc false in
    let*
        α225 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["payable"]
        α223
        α224 in
    let* α226 : ltac:(refine bool) := M.alloc false in
    let*
        α227 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["default"]
        α225
        α226 in
    let* α228 : ltac:(refine str) := deref (mk_str " the `value` amount.") in
    let* α229 : ltac:(refine (ref str)) := borrow α228 in
    let* α230 : ltac:(refine str) := deref (mk_str "") in
    let* α231 : ltac:(refine (ref str)) := borrow α230 in
    let* α232 : ltac:(refine str) :=
      deref
        (mk_str
          " If this function is called again it overwrites the current allowance with") in
    let* α233 : ltac:(refine (ref str)) := borrow α232 in
    let* α234 : ltac:(refine str) := deref (mk_str " `value`.") in
    let* α235 : ltac:(refine (ref str)) := borrow α234 in
    let* α236 : ltac:(refine str) := deref (mk_str "") in
    let* α237 : ltac:(refine (ref str)) := borrow α236 in
    let* α238 : ltac:(refine str) :=
      deref (mk_str " An `Approval` event is emitted.") in
    let* α239 : ltac:(refine (ref str)) := borrow α238 in
    let* α240 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str
            " Allows `spender` to withdraw from the caller's account multiple times, up to";
          α229;
          α231;
          α233;
          α235;
          α237;
          α239
        ] in
    let*
        α241 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α227
        α240 in
    let*
        α242 :
        ltac:(refine
          (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α241 in
    let*
        α243 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)::["from_label"]
        (mk_str "transfer_from") in
    let* α244 : ltac:(refine u8) := M.alloc 11 in
    let* α245 : ltac:(refine u8) := M.alloc 57 in
    let* α246 : ltac:(refine u8) := M.alloc 111 in
    let* α247 : ltac:(refine u8) := M.alloc 24 in
    let* α248 : ltac:(refine (array u8)) :=
      M.alloc [ α244; α245; α246; α247 ] in
    let*
        α249 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["selector"]
        α243
        α248 in
    let*
        α250 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "from") in
    let* α251 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α252 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α251 in
    let*
        α253 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α252
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α254 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α253 in
    let*
        α255 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α250
        α254 in
    let*
        α256 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α255 in
    let*
        α257 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "to") in
    let* α258 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α259 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α258 in
    let*
        α260 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α259
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α261 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α260 in
    let*
        α262 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α257
        α261 in
    let*
        α263 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α262 in
    let*
        α264 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "value") in
    let* α265 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Balance" ] in
    let* α266 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α265 in
    let*
        α267 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α266
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α268 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α267 in
    let*
        α269 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α264
        α268 in
    let*
        α270 :
        ltac:(refine
          (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α269 in
    let*
        α271 :
        ltac:(refine
          (array
            (ink_metadata.specs.MessageParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α256; α263; α270 ] in
    let*
        α272 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Returns))) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["args"]
        α249
        α271 in
    let* α273 : ltac:(refine str) := deref (mk_str "MessageResult") in
    let* α274 : ltac:(refine (ref str)) := borrow α273 in
    let* α275 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α274 ] in
    let* α276 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α275 in
    let*
        α277 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α276
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α278 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α277 in
    let*
        α279 :
        ltac:(refine
          (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ReturnTypeSpec scale_info.form.MetaForm)::["new"]
        α278 in
    let*
        α280 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.Returns))::["returns"]
        α272
        α279 in
    let* α281 : ltac:(refine bool) := M.alloc true in
    let*
        α282 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["mutates"]
        α280
        α281 in
    let* α283 : ltac:(refine bool) := M.alloc false in
    let*
        α284 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
            ink_metadata.specs.state.Returns)::["payable"]
        α282
        α283 in
    let* α285 : ltac:(refine bool) := M.alloc false in
    let*
        α286 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["default"]
        α284
        α285 in
    let* α287 : ltac:(refine str) := deref (mk_str "") in
    let* α288 : ltac:(refine (ref str)) := borrow α287 in
    let* α289 : ltac:(refine str) :=
      deref
        (mk_str
          " This can be used to allow a contract to transfer tokens on ones behalf and/or") in
    let* α290 : ltac:(refine (ref str)) := borrow α289 in
    let* α291 : ltac:(refine str) :=
      deref (mk_str " to charge fees in sub-currencies, for example.") in
    let* α292 : ltac:(refine (ref str)) := borrow α291 in
    let* α293 : ltac:(refine str) := deref (mk_str "") in
    let* α294 : ltac:(refine (ref str)) := borrow α293 in
    let* α295 : ltac:(refine str) :=
      deref (mk_str " On success a `Transfer` event is emitted.") in
    let* α296 : ltac:(refine (ref str)) := borrow α295 in
    let* α297 : ltac:(refine str) := deref (mk_str "") in
    let* α298 : ltac:(refine (ref str)) := borrow α297 in
    let* α299 : ltac:(refine str) := deref (mk_str " # Errors") in
    let* α300 : ltac:(refine (ref str)) := borrow α299 in
    let* α301 : ltac:(refine str) := deref (mk_str "") in
    let* α302 : ltac:(refine (ref str)) := borrow α301 in
    let* α303 : ltac:(refine str) :=
      deref
        (mk_str
          " Returns `InsufficientAllowance` error if there are not enough tokens allowed") in
    let* α304 : ltac:(refine (ref str)) := borrow α303 in
    let* α305 : ltac:(refine str) :=
      deref (mk_str " for the caller to withdraw from `from`.") in
    let* α306 : ltac:(refine (ref str)) := borrow α305 in
    let* α307 : ltac:(refine str) := deref (mk_str "") in
    let* α308 : ltac:(refine (ref str)) := borrow α307 in
    let* α309 : ltac:(refine str) :=
      deref
        (mk_str
          " Returns `InsufficientBalance` error if there are not enough tokens on") in
    let* α310 : ltac:(refine (ref str)) := borrow α309 in
    let* α311 : ltac:(refine str) :=
      deref (mk_str " the account balance of `from`.") in
    let* α312 : ltac:(refine (ref str)) := borrow α311 in
    let* α313 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str
            " Transfers `value` tokens on the behalf of `from` to the account `to`.";
          α288;
          α290;
          α292;
          α294;
          α296;
          α298;
          α300;
          α302;
          α304;
          α306;
          α308;
          α310;
          α312
        ] in
    let*
        α314 :
        ltac:(refine
          (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["docs"]
        α286
        α313 in
    let*
        α315 :
        ltac:(refine
          (ink_metadata.specs.MessageSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.MessageSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.Selector
            ink_metadata.specs.state.Mutates
            ink_metadata.specs.state.IsPayable
            ink_metadata.specs.state.Returns)::["done"]
        α314 in
    let*
        α316 :
        ltac:(refine
          (array (ink_metadata.specs.MessageSpec scale_info.form.MetaForm))) :=
      M.alloc [ α55; α92; α136; α190; α242; α315 ] in
    let*
        α317 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)::["messages"]
        α29
        α316 in
    let*
        α318 :
        ltac:(refine
          (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpec scale_info.form.MetaForm)::["new"]
        (mk_str "Transfer") in
    let*
        α319 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "from") in
    let* α320 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Option" ] in
    let* α321 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α320 in
    let*
        α322 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α321
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α323 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α322 in
    let*
        α324 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α319
        α323 in
    let* α325 : ltac:(refine bool) := M.alloc true in
    let*
        α326 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["indexed"]
        α324
        α325 in
    let* α327 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α328 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["docs"]
        α326
        α327 in
    let*
        α329 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α328 in
    let*
        α330 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "to") in
    let* α331 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Option" ] in
    let* α332 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α331 in
    let*
        α333 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α332
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α334 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α333 in
    let*
        α335 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α330
        α334 in
    let* α336 : ltac:(refine bool) := M.alloc true in
    let*
        α337 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["indexed"]
        α335
        α336 in
    let* α338 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α339 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["docs"]
        α337
        α338 in
    let*
        α340 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α339 in
    let*
        α341 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "value") in
    let* α342 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Balance" ] in
    let* α343 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α342 in
    let*
        α344 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α343
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α345 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α344 in
    let*
        α346 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α341
        α345 in
    let* α347 : ltac:(refine bool) := M.alloc false in
    let*
        α348 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["indexed"]
        α346
        α347 in
    let* α349 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α350 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["docs"]
        α348
        α349 in
    let*
        α351 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α350 in
    let*
        α352 :
        ltac:(refine
          (array
            (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α329; α340; α351 ] in
    let*
        α353 :
        ltac:(refine
          (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)::["args"]
        α318
        α352 in
    let* α354 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str " Event emitted when a token transfer occurs." ] in
    let*
        α355 :
        ltac:(refine
          (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)::["docs"]
        α353
        α354 in
    let*
        α356 :
        ltac:(refine (ink_metadata.specs.EventSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)::["done"]
        α355 in
    let*
        α357 :
        ltac:(refine
          (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpec scale_info.form.MetaForm)::["new"]
        (mk_str "Approval") in
    let*
        α358 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "owner") in
    let* α359 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α360 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α359 in
    let*
        α361 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α360
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α362 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α361 in
    let*
        α363 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α358
        α362 in
    let* α364 : ltac:(refine bool) := M.alloc true in
    let*
        α365 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["indexed"]
        α363
        α364 in
    let* α366 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α367 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["docs"]
        α365
        α366 in
    let*
        α368 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α367 in
    let*
        α369 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "spender") in
    let* α370 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α371 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α370 in
    let*
        α372 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α371
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α373 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α372 in
    let*
        α374 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α369
        α373 in
    let* α375 : ltac:(refine bool) := M.alloc true in
    let*
        α376 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["indexed"]
        α374
        α375 in
    let* α377 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α378 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["docs"]
        α376
        α377 in
    let*
        α379 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α378 in
    let*
        α380 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)::["new"]
        (mk_str "value") in
    let* α381 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Balance" ] in
    let* α382 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α381 in
    let*
        α383 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α382
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α384 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α383 in
    let*
        α385 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["of_type"]
        α380
        α384 in
    let* α386 : ltac:(refine bool) := M.alloc false in
    let*
        α387 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["indexed"]
        α385
        α386 in
    let* α388 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α389 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["docs"]
        α387
        α388 in
    let*
        α390 :
        ltac:(refine
          (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventParamSpecBuilder
            scale_info.form.MetaForm)::["done"]
        α389 in
    let*
        α391 :
        ltac:(refine
          (array
            (ink_metadata.specs.EventParamSpec scale_info.form.MetaForm))) :=
      M.alloc [ α368; α379; α390 ] in
    let*
        α392 :
        ltac:(refine
          (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)::["args"]
        α357
        α391 in
    let* α393 : ltac:(refine str) :=
      deref (mk_str " up to the amount of `value` tokens from `owner`.") in
    let* α394 : ltac:(refine (ref str)) := borrow α393 in
    let* α395 : ltac:(refine (array (ref str))) :=
      M.alloc
        [
          mk_str
            " Event emitted when an approval occurs that `spender` is allowed to withdraw";
          α394
        ] in
    let*
        α396 :
        ltac:(refine
          (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)::["docs"]
        α392
        α395 in
    let*
        α397 :
        ltac:(refine (ink_metadata.specs.EventSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EventSpecBuilder scale_info.form.MetaForm)::["done"]
        α396 in
    let*
        α398 :
        ltac:(refine
          (array (ink_metadata.specs.EventSpec scale_info.form.MetaForm))) :=
      M.alloc [ α356; α397 ] in
    let*
        α399 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)::["events"]
        α317
        α398 in
    let* α400 : ltac:(refine (array (ref str))) := M.alloc [ ] in
    let*
        α401 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)::["docs"]
        α399
        α400 in
    let* α402 : ltac:(refine str) := deref (mk_str "LangError") in
    let* α403 : ltac:(refine (ref str)) := borrow α402 in
    let* α404 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ink"; α403 ] in
    let* α405 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α404 in
    let*
        α406 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α405
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α407 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α406 in
    let*
        α408 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)::["lang_error"]
        α401
        α407 in
    let*
        α409 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.AccountId)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Balance)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpec scale_info.form.MetaForm)::["new"] in
    let* α410 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "AccountId" ] in
    let* α411 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α410 in
    let*
        α412 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α411
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α413 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α412 in
    let*
        α414 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            (ink_metadata.specs.Missing ink_metadata.specs.state.Balance)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            (ink_metadata.specs.Missing ink_metadata.specs.state.AccountId)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Balance)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["account_id"]
        α409
        α413 in
    let* α415 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Balance" ] in
    let* α416 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α415 in
    let*
        α417 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α416
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α418 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α417 in
    let*
        α419 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            (ink_metadata.specs.Missing ink_metadata.specs.state.Balance)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["balance"]
        α414
        α418 in
    let* α420 : ltac:(refine (array (ref str))) := M.alloc [ mk_str "Hash" ] in
    let* α421 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α420 in
    let*
        α422 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α421
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α423 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α422 in
    let*
        α424 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["hash"]
        α419
        α423 in
    let* α425 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "Timestamp" ] in
    let* α426 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α425 in
    let*
        α427 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α426
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α428 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α427 in
    let*
        α429 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["timestamp"]
        α424
        α428 in
    let* α430 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "BlockNumber" ] in
    let* α431 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α430 in
    let*
        α432 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α431
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α433 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α432 in
    let*
        α434 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            ink_metadata.specs.state.BlockNumber
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["block_number"]
        α429
        α433 in
    let* α435 : ltac:(refine (array (ref str))) :=
      M.alloc [ mk_str "ChainExtension" ] in
    let* α436 : ltac:(refine (core.array.iter.IntoIter (ref str))) :=
      (core.iter.traits.collect.IntoIterator.into_iter
          (Self := array (ref str))
          (Trait := ltac:(refine _)))
        α435 in
    let*
        α437 :
        ltac:(refine
          (core.iter.adapters.map.Map
            (core.array.iter.IntoIter (ref str))
            _)) :=
      (core.iter.traits.iterator.Iterator.map
          (Self := core.array.iter.IntoIter (ref str))
          (Trait := ltac:(refine _)))
        α436
        (core.convert.AsRef.as_ref (Self := str) (Trait := ltac:(refine _))) in
    let*
        α438 :
        ltac:(refine (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
        α437 in
    let*
        α439 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            ink_metadata.specs.state.BlockNumber
            ink_metadata.specs.state.ChainExtension
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            ink_metadata.specs.state.BlockNumber
            (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["chain_extension"]
        α434
        α438 in
    let*
        α440 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            ink_metadata.specs.state.BlockNumber
            ink_metadata.specs.state.ChainExtension
            ink_metadata.specs.state.MaxEventTopics)) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            ink_metadata.specs.state.BlockNumber
            ink_metadata.specs.state.ChainExtension
            (ink_metadata.specs.Missing
              ink_metadata.specs.state.MaxEventTopics))::["max_event_topics"]
        α439
        erc20.erc20.MAX_EVENT_TOPICS in
    let*
        α441 :
        ltac:(refine
          (ink_metadata.specs.EnvironmentSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.EnvironmentSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.state.AccountId
            ink_metadata.specs.state.Balance
            ink_metadata.specs.state.Hash
            ink_metadata.specs.state.Timestamp
            ink_metadata.specs.state.BlockNumber
            ink_metadata.specs.state.ChainExtension
            ink_metadata.specs.state.MaxEventTopics)::["done"]
        α440 in
    let*
        α442 :
        ltac:(refine
          (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)::["environment"]
        α408
        α441 in
    let*
        α443 :
        ltac:(refine
          (ink_metadata.specs.ContractSpec scale_info.form.MetaForm)) :=
      (ink_metadata.specs.ContractSpecBuilder
            scale_info.form.MetaForm
            ink_metadata.specs.Valid)::["done"]
        α442 in
    ink_metadata.InkProject::["new"] layout α443).

Module Error.
  Inductive t `{ℋ : State.Trait} : Set :=
  | InsufficientBalance
  | InsufficientAllowance.
End Error.
Definition Error `{ℋ : State.Trait} : Set := M.Val Error.t.

Module  Impl_scale_info_TypeInfo_for_erc20_erc20_Error.
Section Impl_scale_info_TypeInfo_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Definition Identity : Set := Self.
  
  Definition type_info
      : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
    M.function_body
      (let*
          α0 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)) :=
        (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let*
          α1 :
          ltac:(refine (scale_info.ty.path.Path scale_info.form.MetaForm)) :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "Error")
          (mk_str "erc20::erc20") in
      let*
          α2 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let*
          α3 :
          ltac:(refine
            (alloc.vec.Vec
              (scale_info.ty.TypeParameter scale_info.form.MetaForm)
              alloc.alloc.Global)) :=
        (alloc.vec.Vec
            (scale_info.ty.TypeParameter scale_info.form.MetaForm)
            alloc.alloc.Global)::["new"] in
      let*
          α4 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["type_params"]
          α2
          α3 in
      let* α5 : ltac:(refine (array (ref str))) :=
        M.alloc [ mk_str "The ERC-20 error types." ] in
      let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
      let* α7 : ltac:(refine (array (ref str))) := deref α6 in
      let* α8 : ltac:(refine (ref (array (ref str)))) := borrow α7 in
      let* α9 : ltac:(refine (ref (slice (ref str)))) :=
        pointer_coercion "Unsize" α8 in
      let*
          α10 :
          ltac:(refine
            (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)) :=
        (scale_info.build.TypeBuilder
              scale_info.form.MetaForm
              scale_info.build.state.PathAssigned)::["docs"]
          α4
          α9 in
      let*
          α11 :
          ltac:(refine (scale_info.build.Variants scale_info.form.MetaForm)) :=
        (scale_info.build.Variants scale_info.form.MetaForm)::["new"] in
      let*
          α12 :
          ltac:(refine (scale_info.build.Variants scale_info.form.MetaForm)) :=
        (scale_info.build.Variants scale_info.form.MetaForm)::["variant"]
          α11
          (mk_str "InsufficientBalance")
          (let* α0 : ltac:(refine usize) := M.alloc 0 in
          let* α1 : ltac:(refine u8) := cast α0 in
          let*
              α2 :
              ltac:(refine
                (scale_info.build.VariantBuilder
                  scale_info.form.MetaForm
                  scale_info.build.variant_state.IndexAssigned)) :=
            (scale_info.build.VariantBuilder
                  scale_info.form.MetaForm
                  scale_info.build.variant_state.IndexNotAssigned)::["index"]
              v
              α1 in
          let* α3 : ltac:(refine (array (ref str))) :=
            M.alloc
              [
                mk_str
                  "Returned if not enough balance to fulfill a request is available."
              ] in
          let* α4 : ltac:(refine (ref (array (ref str)))) := borrow α3 in
          let* α5 : ltac:(refine (array (ref str))) := deref α4 in
          let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
          let* α7 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α6 in
          (scale_info.build.VariantBuilder
                scale_info.form.MetaForm
                scale_info.build.variant_state.IndexAssigned)::["docs"]
            α2
            α7) in
      let*
          α13 :
          ltac:(refine (scale_info.build.Variants scale_info.form.MetaForm)) :=
        (scale_info.build.Variants scale_info.form.MetaForm)::["variant"]
          α12
          (mk_str "InsufficientAllowance")
          (let* α0 : ltac:(refine usize) := M.alloc 1 in
          let* α1 : ltac:(refine u8) := cast α0 in
          let*
              α2 :
              ltac:(refine
                (scale_info.build.VariantBuilder
                  scale_info.form.MetaForm
                  scale_info.build.variant_state.IndexAssigned)) :=
            (scale_info.build.VariantBuilder
                  scale_info.form.MetaForm
                  scale_info.build.variant_state.IndexNotAssigned)::["index"]
              v
              α1 in
          let* α3 : ltac:(refine (array (ref str))) :=
            M.alloc
              [
                mk_str
                  "Returned if not enough allowance to fulfill a request is available."
              ] in
          let* α4 : ltac:(refine (ref (array (ref str)))) := borrow α3 in
          let* α5 : ltac:(refine (array (ref str))) := deref α4 in
          let* α6 : ltac:(refine (ref (array (ref str)))) := borrow α5 in
          let* α7 : ltac:(refine (ref (slice (ref str)))) :=
            pointer_coercion "Unsize" α6 in
          (scale_info.build.VariantBuilder
                scale_info.form.MetaForm
                scale_info.build.variant_state.IndexAssigned)::["docs"]
            α2
            α7) in
      (scale_info.build.TypeBuilder
            scale_info.form.MetaForm
            scale_info.build.state.PathAssigned)::["variant"]
        α10
        α13).
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.Identity := Identity;
    scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Error.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Error.

Module  Impl_core_fmt_Debug_for_erc20_erc20_Error.
Section Impl_core_fmt_Debug_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M ltac:(core.fmt.Result) :=
    M.function_body
      (let* α0 : ltac:(refine core.fmt.Formatter) := deref f in
      let* α1 : ltac:(refine (mut_ref core.fmt.Formatter)) := borrow_mut α0 in
      let* α2 := M.read self in
      let* α3 : ltac:(refine (ref str)) :=
        match α2 with
        | erc20.erc20.Error.InsufficientBalance  =>
          let* α0 : ltac:(refine str) := deref (mk_str "InsufficientBalance") in
          borrow α0
        | erc20.erc20.Error.InsufficientAllowance  =>
          let* α0 : ltac:(refine str) :=
            deref (mk_str "InsufficientAllowance") in
          borrow α0
        end in
      core.fmt.Formatter::["write_str"] α1 α3).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_erc20_erc20_Error.
End Impl_core_fmt_Debug_for_erc20_erc20_Error.

Module  Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.

Module  Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
Section Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Definition eq (self : ref Self) (other : ref erc20.erc20.Error) : M bool :=
    M.function_body
      (let* __self_tag : ltac:(refine isize) :=
        let* α0 : ltac:(refine erc20.erc20.Error) := deref self in
        let* α1 : ltac:(refine (ref erc20.erc20.Error)) := borrow α0 in
        "unimplemented parent_kind" α1 in
      let* __arg1_tag : ltac:(refine isize) :=
        let* α0 : ltac:(refine erc20.erc20.Error) := deref other in
        let* α1 : ltac:(refine (ref erc20.erc20.Error)) := borrow α0 in
        "unimplemented parent_kind" α1 in
      BinOp.eq __self_tag __arg1_tag).
  
  Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
    Notation.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.

Module  Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
Section Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.

Module  Impl_core_cmp_Eq_for_erc20_erc20_Error.
Section Impl_core_cmp_Eq_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
    M.function_body (M.alloc tt).
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notation.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_erc20_erc20_Error.
End Impl_core_cmp_Eq_for_erc20_erc20_Error.

Module  Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.
Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Definition encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
      (self : ref Self)
      (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
      : M unit :=
    M.function_body
      (let* α0 : ltac:(refine erc20.erc20.Error) := deref self in
      let* α1 := M.read α0 in
      match α1 with
      | erc20.erc20.Error.InsufficientBalance  =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine __CodecOutputEdqy) :=
            deref __codec_dest_edqy in
          let* α1 : ltac:(refine (mut_ref __CodecOutputEdqy)) :=
            borrow_mut α0 in
          let* α2 : ltac:(refine usize) := M.alloc 0 in
          let* α3 : ltac:(refine u8) := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        M.alloc tt
      | erc20.erc20.Error.InsufficientAllowance  =>
        let* _ : ltac:(refine unit) :=
          let* α0 : ltac:(refine __CodecOutputEdqy) :=
            deref __codec_dest_edqy in
          let* α1 : ltac:(refine (mut_ref __CodecOutputEdqy)) :=
            borrow_mut α0 in
          let* α2 : ltac:(refine usize) := M.alloc 1 in
          let* α3 : ltac:(refine u8) := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy)
              (Trait := ltac:(refine _)))
            α1
            α3 in
        M.alloc tt
      | _ => M.alloc tt
      end).
  
  Global Instance AssociatedFunction_encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :
    Notation.DoubleColon Self "encode_to" := {
    Notation.double_colon := encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Encode.Required.Trait Self := {
    parity_scale_codec.codec.Encode.encode_to
      {__CodecOutputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy} :=
      Datatypes.Some (encode_to (__CodecOutputEdqy := __CodecOutputEdqy));
    parity_scale_codec.codec.Encode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Encode.size_hint := Datatypes.None;
    parity_scale_codec.codec.Encode.encode := Datatypes.None;
    parity_scale_codec.codec.Encode.using_encoded := Datatypes.None;
    parity_scale_codec.codec.Encode.encoded_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.

Module  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.
Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Global Instance ℐ :
    parity_scale_codec.encode_like.EncodeLike.Trait Self
      (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
  }.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.

Module  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.
Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := erc20.erc20.Error.
  
  Definition decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
      (__codec_input_edqy : mut_ref __CodecInputEdqy)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    M.function_body
      (let* α0 : ltac:(refine __CodecInputEdqy) := deref __codec_input_edqy in
      let* α1 : ltac:(refine (mut_ref __CodecInputEdqy)) := borrow_mut α0 in
      let*
          α2 :
          ltac:(refine
            (core.result.Result u8 parity_scale_codec.error.Error)) :=
        (parity_scale_codec.codec.Input.read_byte
            (Self := __CodecInputEdqy)
            (Trait := ltac:(refine _)))
          α1 in
      let*
          α3 :
          ltac:(refine
            (core.result.Result u8 parity_scale_codec.error.Error)) :=
        (core.result.Result u8 parity_scale_codec.error.Error)::["map_err"]
          α2
          (parity_scale_codec.error.Error::["chain"]
            e
            (mk_str "Could not decode `Error`, failed to read variant byte")) in
      let*
          α4 :
          ltac:(refine
            (core.ops.control_flow.ControlFlow
              (core.result.Result
                core.convert.Infallible
                parity_scale_codec.error.Error)
              u8)) :=
        (core.ops.try_trait.Try.branch
            (Self := core.result.Result u8 parity_scale_codec.error.Error)
            (Trait := ltac:(refine _)))
          α3 in
      let* α5 := M.read α4 in
      let* α6 : ltac:(refine u8) :=
        match α5 with
        | core.ops.control_flow.ControlFlow.Break residual =>
          let*
              α0 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Error
                  parity_scale_codec.error.Error)) :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  core.result.Result
                    erc20.erc20.Error
                    parity_scale_codec.error.Error)
                (Trait := ltac:(refine _)))
              residual in
          let* α1 : ltac:(refine never) := M.return_ α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow.Continue val => M.pure val
        end in
      let* α7 := M.read α6 in
      match α7 with
      | __codec_x_edqy =>
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine (ref type not implemented)) :=
            borrow
              (let* α0 : ltac:(refine erc20.erc20.Error) :=
                M.alloc erc20.erc20.Error.InsufficientBalance in
              M.alloc (core.result.Result.Ok α0)) in
          let* α1 : ltac:(refine unit) := M.alloc tt in
          let*
              α2 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Error
                  parity_scale_codec.error.Error)) :=
            (core.ops.function.Fn.call
                (Self := type not implemented)
                (Trait := ltac:(refine _)))
              α0
              α1 in
          M.return_ α2 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      | __codec_x_edqy =>
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine (ref type not implemented)) :=
            borrow
              (let* α0 : ltac:(refine erc20.erc20.Error) :=
                M.alloc erc20.erc20.Error.InsufficientAllowance in
              M.alloc (core.result.Result.Ok α0)) in
          let* α1 : ltac:(refine unit) := M.alloc tt in
          let*
              α2 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Error
                  parity_scale_codec.error.Error)) :=
            (core.ops.function.Fn.call
                (Self := type not implemented)
                (Trait := ltac:(refine _)))
              α0
              α1 in
          M.return_ α2 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      | _ =>
        let* _ : ltac:(refine never) :=
          let* α0 : ltac:(refine (ref type not implemented)) :=
            borrow
              (let* α0 : ltac:(refine parity_scale_codec.error.Error) :=
                (core.convert.Into.into
                    (Self := ref str)
                    (Trait := ltac:(refine _)))
                  (mk_str "Could not decode `Error`, variant doesn't exist") in
              M.alloc (core.result.Result.Err α0)) in
          let* α1 : ltac:(refine unit) := M.alloc tt in
          let*
              α2 :
              ltac:(refine
                (core.result.Result
                  erc20.erc20.Error
                  parity_scale_codec.error.Error)) :=
            (core.ops.function.Fn.call
                (Self := type not implemented)
                (Trait := ltac:(refine _)))
              α0
              α1 in
          M.return_ α2 in
        let* α0 : ltac:(refine unit) := M.alloc tt in
        never_to_any α0
      end).
  
  Global Instance AssociatedFunction_decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
  }.
  
  Global Instance ℐ : parity_scale_codec.codec.Decode.Required.Trait Self := {
    parity_scale_codec.codec.Decode.decode
      {__CodecInputEdqy : Set}
      {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
      decode (__CodecInputEdqy := __CodecInputEdqy);
    parity_scale_codec.codec.Decode.TYPE_INFO := Datatypes.None;
    parity_scale_codec.codec.Decode.decode_into := Datatypes.None;
    parity_scale_codec.codec.Decode.skip := Datatypes.None;
    parity_scale_codec.codec.Decode.encoded_fixed_size := Datatypes.None;
  }.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.

Ltac Result T := refine (core.result.Result T erc20.erc20.Error).
