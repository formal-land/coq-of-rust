(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Require CoqOfRust.ink.ink_storage.
Require CoqOfRust.ink.ink_env.
Require CoqOfRust.ink.ink.

Module erc20.
  Ltac AccountId :=
    refine
      (ink_env.types.Environment.AccountId
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac Balance :=
    refine
      (ink_env.types.Environment.Balance
        (Self := ink_env.types.DefaultEnvironment)).
  
  Module Erc20.
    Section Erc20.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        total_supply :
          ink_storage_traits.storage.AutoStorableHint.Type_
            (Self := ltac:(erc20.erc20.Balance))
            (Trait := ltac:(try clear Trait; hauto l: on));
        balances :
          ink_storage_traits.storage.AutoStorableHint.Type_
            (Self := ink_storage.lazy.mapping.Mapping
              ltac:(erc20.erc20.AccountId)
              ltac:(erc20.erc20.Balance)
              ink_storage.lazy.mapping.Mapping.Default.KeyType)
            (Trait := ltac:(try clear Trait; hauto l: on));
        allowances :
          ink_storage_traits.storage.AutoStorableHint.Type_
            (Self := ink_storage.lazy.mapping.Mapping
              (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId))
              ltac:(erc20.erc20.Balance)
              ink_storage.lazy.mapping.Mapping.Default.KeyType)
            (Trait := ltac:(try clear Trait; hauto l: on));
      }.
      Global Set Primitive Projections.
      
      #[refine] Global Instance Get_total_supply :
        Notation.Dot "total_supply" := {
        Notation.dot x := let* x := M.read x in Pure x.(total_supply) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_total_supply :
        Notation.DoubleColon t "total_supply" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(total_supply) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_balances : Notation.Dot "balances" := {
        Notation.dot x := let* x := M.read x in Pure x.(balances) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_balances :
        Notation.DoubleColon t "balances" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(balances) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_allowances : Notation.Dot "allowances" := {
        Notation.dot x := let* x := M.read x in Pure x.(allowances) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_allowances :
        Notation.DoubleColon t "allowances" := {
        Notation.double_colon x :=
          let* x := M.read x in Pure x.(allowances) : M _;
      }.
      Admitted.
    End Erc20.
  End Erc20.
  Definition Erc20 `{ℋ : State.Trait} : Set := M.val Erc20.t.
  
  Module Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
    Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Env : Set := ink_env.types.DefaultEnvironment.
      
      #[refine] Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
        ink_env.contract.ContractEnv.Env := Env;
      }.
      Admitted.
    End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  
  Ltac Environment :=
    refine (ink_env.types.DefaultEnvironment).
  
  Ltac Hash :=
    refine
      (ink_env.types.Environment.Hash
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac Timestamp :=
    refine
      (ink_env.types.Environment.Timestamp
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac BlockNumber :=
    refine
      (ink_env.types.Environment.BlockNumber
        (Self := ink_env.types.DefaultEnvironment)).
  
  Ltac ChainExtension :=
    refine
      (ink_env.types.Environment.ChainExtension
        (Self := ink_env.types.DefaultEnvironment)).
  
  Definition MAX_EVENT_TOPICS `{ℋ : State.Trait} : usize :=
    M.run
      (Pure
        (ink_env.types.Environment.MAX_EVENT_TOPICS
          (Self :=
            (ink_env.types.DefaultEnvironment)))).
  
  Module Impl_core_default_Default_for_erc20_erc20_Erc20.
    Section Impl_core_default_Default_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition default : M erc20.erc20.Erc20 :=
        let* α0 := core.default.Default.default (Self := u128) in
        let* α1 :=
          core.default.Default.default
            (Self :=
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) in
        let* α2 :=
          core.default.Default.default
            (Self :=
              (ink_storage.lazy.mapping.Mapping
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId)
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))) in
        M.alloc
          {|
            erc20.erc20.Erc20.total_supply := α0;
            erc20.erc20.Erc20.balances := α1;
            erc20.erc20.Erc20.allowances := α2;
          |}.
      
      Global Instance AssociatedFunction_default :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      #[refine] Global Instance ℐ : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
      Admitted.
    End Impl_core_default_Default_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_core_default_Default_for_erc20_erc20_Erc20.
  
  Module Transfer.
    Section Transfer.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        from : core.option.Option ltac:(erc20.erc20.AccountId);
        to : core.option.Option ltac:(erc20.erc20.AccountId);
        value : ltac:(erc20.erc20.Balance);
      }.
      Global Set Primitive Projections.
      
      #[refine] Global Instance Get_from : Notation.Dot "from" := {
        Notation.dot x := let* x := M.read x in Pure x.(from) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_from : Notation.DoubleColon t "from" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(from) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_to : Notation.Dot "to" := {
        Notation.dot x := let* x := M.read x in Pure x.(to) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_to : Notation.DoubleColon t "to" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(to) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_value :
        Notation.DoubleColon t "value" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
      }.
      Admitted.
    End Transfer.
  End Transfer.
  Definition Transfer `{ℋ : State.Trait} : Set := M.val Transfer.t.
  
  Module Approval.
    Section Approval.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        owner : ltac:(erc20.erc20.AccountId);
        spender : ltac:(erc20.erc20.AccountId);
        value : ltac:(erc20.erc20.Balance);
      }.
      Global Set Primitive Projections.
      
      #[refine] Global Instance Get_owner : Notation.Dot "owner" := {
        Notation.dot x := let* x := M.read x in Pure x.(owner) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_owner :
        Notation.DoubleColon t "owner" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(owner) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_spender : Notation.Dot "spender" := {
        Notation.dot x := let* x := M.read x in Pure x.(spender) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_spender :
        Notation.DoubleColon t "spender" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(spender) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_value : Notation.Dot "value" := {
        Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_value :
        Notation.DoubleColon t "value" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
      }.
      Admitted.
    End Approval.
  End Approval.
  Definition Approval `{ℋ : State.Trait} : Set := M.val Approval.t.
  
  Module __ink_EventBase.
    Inductive t `{ℋ : State.Trait} : Set :=
    | Transfer (_ : erc20.erc20.Transfer)
    | Approval (_ : erc20.erc20.Approval).
  End __ink_EventBase.
  Definition __ink_EventBase `{ℋ : State.Trait} : Set := __ink_EventBase.t.
  
  Module Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
    Section
      Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Transfer.
      
      Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
      
      #[refine] Global Instance ℐ :
        ink.codegen.event.topics.EventLenTopics.Trait Self := {
        ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
      }.
      Admitted.
    End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
    Global Hint Resolve ℐ : core.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  
  Module Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
    Section
      Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Approval.
      
      Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
      
      #[refine] Global Instance ℐ :
        ink.codegen.event.topics.EventLenTopics.Trait Self := {
        ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
      }.
      Admitted.
    End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
    Global Hint Resolve ℐ : core.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set := ltac:(erc20.erc20.Balance).
      
      Definition Output : Set := Self.
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition Error : Set :=
        ink.reflect.dispatch.ConstructorOutput.Error
          (Self := ink.reflect.dispatch.ConstructorOutputValue Self).
      
      Definition IS_RESULT : CoqOfRust.core.primitive.bool :=
        M.run
          (Pure
            (ink.reflect.dispatch.ConstructorOutput.IS_RESULT
              (Self :=
                (ink.reflect.dispatch.ConstructorOutputValue
                  erc20.erc20.Erc20)))).
      
      Global Instance AssociatedFunction_IS_RESULT :
        Notation.DoubleColon Self "IS_RESULT" := {
        Notation.double_colon := IS_RESULT;
      }.
      
      Definition CALLABLE : Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (erc20.erc20.Erc20::["new"] __ink_binding_0)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 155 in
          let* α1 := M.alloc 174 in
          let* α2 := M.alloc 157 in
          let* α3 := M.alloc 94 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "new")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableConstructorInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableConstructorInfo.Input := Input;
        ink.reflect.dispatch.DispatchableConstructorInfo.Output := Output;
        ink.reflect.dispatch.DispatchableConstructorInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableConstructorInfo.Error := Error;
        ink.reflect.dispatch.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
        ink.reflect.dispatch.DispatchableConstructorInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableConstructorInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableConstructorInfo.LABEL := LABEL;
      }.
      Admitted.
    End
      Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End
    Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set := unit.
      
      Definition Output : Set := ltac:(erc20.erc20.Balance).
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (let* α0 := deref storage erc20.erc20.Erc20 in
            let* α1 := borrow α0 erc20.erc20.Erc20 in
            erc20.erc20.Erc20::["total_supply"] α1)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 219 in
          let* α1 := M.alloc 99 in
          let* α2 := M.alloc 117 in
          let* α3 := M.alloc 168 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition MUTATES : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_MUTATES :
        Notation.DoubleColon Self "MUTATES" := {
        Notation.double_colon := MUTATES;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "total_supply")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
        ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
        ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
        ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
      }.
      Admitted.
    End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set := ltac:(erc20.erc20.AccountId).
      
      Definition Output : Set := ltac:(erc20.erc20.Balance).
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (let* α0 := deref storage erc20.erc20.Erc20 in
            let* α1 := borrow α0 erc20.erc20.Erc20 in
            erc20.erc20.Erc20::["balance_of"] α1 __ink_binding_0)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 15 in
          let* α1 := M.alloc 117 in
          let* α2 := M.alloc 90 in
          let* α3 := M.alloc 86 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition MUTATES : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_MUTATES :
        Notation.DoubleColon Self "MUTATES" := {
        Notation.double_colon := MUTATES;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "balance_of")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
        ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
        ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
        ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
      }.
      Admitted.
    End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set :=
        ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId).
      
      Definition Output : Set := ltac:(erc20.erc20.Balance).
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (let* α0 := deref storage erc20.erc20.Erc20 in
            let* α1 := borrow α0 erc20.erc20.Erc20 in
            erc20.erc20.Erc20::["allowance"]
              α1
              __ink_binding_0
              __ink_binding_1)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 106 in
          let* α1 := M.alloc 0 in
          let* α2 := M.alloc 22 in
          let* α3 := M.alloc 94 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition MUTATES : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_MUTATES :
        Notation.DoubleColon Self "MUTATES" := {
        Notation.double_colon := MUTATES;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "allowance")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
        ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
        ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
        ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
      }.
      Admitted.
    End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set :=
        ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance).
      
      Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (let* α0 := deref storage erc20.erc20.Erc20 in
            let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
            erc20.erc20.Erc20::["transfer"]
              α1
              __ink_binding_0
              __ink_binding_1)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 132 in
          let* α1 := M.alloc 161 in
          let* α2 := M.alloc 93 in
          let* α3 := M.alloc 161 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition MUTATES : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc true).
      
      Global Instance AssociatedFunction_MUTATES :
        Notation.DoubleColon Self "MUTATES" := {
        Notation.double_colon := MUTATES;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "transfer")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
        ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
        ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
        ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
      }.
      Admitted.
    End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set :=
        ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance).
      
      Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (let* α0 := deref storage erc20.erc20.Erc20 in
            let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
            erc20.erc20.Erc20::["approve"] α1 __ink_binding_0 __ink_binding_1)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 104 in
          let* α1 := M.alloc 18 in
          let* α2 := M.alloc 102 in
          let* α3 := M.alloc 160 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition MUTATES : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc true).
      
      Global Instance AssociatedFunction_MUTATES :
        Notation.DoubleColon Self "MUTATES" := {
        Notation.double_colon := MUTATES;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "approve")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
        ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
        ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
        ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
      }.
      Admitted.
    End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Section
      Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20.
      
      Definition Input : Set :=
        ltac:(erc20.erc20.AccountId) *
          ltac:(erc20.erc20.AccountId) *
          ltac:(erc20.erc20.Balance).
      
      Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
      
      Definition Storage : Set := erc20.erc20.Erc20.
      
      Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
        M.run
          (pointer_coercion
            "ClosureFnPointer(Normal)"
            (let* α0 := deref storage erc20.erc20.Erc20 in
            let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
            erc20.erc20.Erc20::["transfer_from"]
              α1
              __ink_binding_0
              __ink_binding_1
              __ink_binding_2)).
      
      Global Instance AssociatedFunction_CALLABLE :
        Notation.DoubleColon Self "CALLABLE" := {
        Notation.double_colon := CALLABLE;
      }.
      
      Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
        M.run
          (let* α0 := M.alloc 11 in
          let* α1 := M.alloc 57 in
          let* α2 := M.alloc 111 in
          let* α3 := M.alloc 24 in
          Pure [ α0; α1; α2; α3 ]).
      
      Global Instance AssociatedFunction_SELECTOR :
        Notation.DoubleColon Self "SELECTOR" := {
        Notation.double_colon := SELECTOR;
      }.
      
      Definition PAYABLE : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc false).
      
      Global Instance AssociatedFunction_PAYABLE :
        Notation.DoubleColon Self "PAYABLE" := {
        Notation.double_colon := PAYABLE;
      }.
      
      Definition MUTATES : CoqOfRust.core.primitive.bool :=
        M.run (M.alloc true).
      
      Global Instance AssociatedFunction_MUTATES :
        Notation.DoubleColon Self "MUTATES" := {
        Notation.double_colon := MUTATES;
      }.
      
      Definition LABEL : ref CoqOfRust.core.primitive.str :=
        M.run (Pure (mk_str "transfer_from")).
      
      Global Instance AssociatedFunction_LABEL :
        Notation.DoubleColon Self "LABEL" := {
        Notation.double_colon := LABEL;
      }.
      
      #[refine] Global Instance ℐ :
        ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
        ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
        ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
        ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
        ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
        ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
        ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
        ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
      }.
      Admitted.
    End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Global Hint Resolve ℐ : core.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  
  Module Erc20Ref.
    Section Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Record t : Set := {
        inner :
          ink.codegen.dispatch.info.ContractCallBuilder.Type_
            (Self := erc20.erc20.Erc20)
            (Trait := ltac:(try clear Trait; hauto l: on));
      }.
      Global Set Primitive Projections.
      
      #[refine] Global Instance Get_inner : Notation.Dot "inner" := {
        Notation.dot x := let* x := M.read x in Pure x.(inner) : M _;
      }.
      Admitted.
      #[refine] Global Instance Get_AF_inner :
        Notation.DoubleColon t "inner" := {
        Notation.double_colon x := let* x := M.read x in Pure x.(inner) : M _;
      }.
      Admitted.
    End Erc20Ref.
  End Erc20Ref.
  Definition Erc20Ref `{ℋ : State.Trait} : Set := M.val Erc20Ref.t.
  
  Module Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
    Section Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M ltac:(core.fmt.Result) :=
        let* α0 := deref f core.fmt.Formatter in
        let* α1 := borrow_mut α0 core.fmt.Formatter in
        let* α2 := deref (mk_str "Erc20Ref") str in
        let* α3 := borrow α2 str in
        let* α4 := deref (mk_str "inner") str in
        let* α5 := borrow α4 str in
        let* α6 := deref self erc20.erc20.Erc20Ref in
        let* α7 := α6.["inner"] in
        let* α8 := borrow α7 erc20.erc20._.CallBuilder in
        let* α9 := borrow α8 (ref erc20.erc20._.CallBuilder) in
        let* α10 := deref α9 (ref erc20.erc20._.CallBuilder) in
        let* α11 := borrow α10 (ref erc20.erc20._.CallBuilder) in
        let* α12 := pointer_coercion "Unsize" α11 in
        core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12.
      
      Global Instance AssociatedFunction_fmt :
        Notation.DoubleColon Self "fmt" := {
        Notation.double_colon := fmt;
      }.
      
      #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
      Admitted.
    End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
    Section Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition hash
          {__H : Set}
          {ℋ_0 : core.hash.Hasher.Trait __H}
          (self : ref Self)
          (state : mut_ref __H)
          : M unit :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := α0.["inner"] in
        let* α2 := borrow α1 erc20.erc20._.CallBuilder in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        let* α5 := deref state __H in
        let* α6 := borrow_mut α5 __H in
        (core.hash.Hash.hash (Self := erc20.erc20._.CallBuilder)) α4 α6.
      
      Global Instance AssociatedFunction_hash
          {__H : Set}
          {ℋ_0 : core.hash.Hasher.Trait __H} :
        Notation.DoubleColon Self "hash" := {
        Notation.double_colon := hash (__H := __H);
      }.
      
      #[refine] Global Instance ℐ : core.hash.Hash.Trait Self := {
        core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
          hash (__H := __H);
      }.
      Admitted.
    End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
    Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      #[refine] Global Instance ℐ :
        core.marker.StructuralPartialEq.Trait Self := {
      }.
      Admitted.
    End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
    Section Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition eq
          (self : ref Self)
          (other : ref erc20.erc20.Erc20Ref)
          : M bool :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := α0.["inner"] in
        let* α2 := borrow α1 erc20.erc20._.CallBuilder in
        let* α3 := deref other erc20.erc20.Erc20Ref in
        let* α4 := α3.["inner"] in
        let* α5 := borrow α4 erc20.erc20._.CallBuilder in
        (core.cmp.PartialEq.eq (Self := erc20.erc20._.CallBuilder)) α2 α5.
      
      Global Instance AssociatedFunction_eq :
        Notation.DoubleColon Self "eq" := {
        Notation.double_colon := eq;
      }.
      
      #[refine] Global Instance ℐ :
        core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
        core.cmp.PartialEq.eq := eq;
      }.
      Admitted.
    End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
    Section Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      #[refine] Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
      }.
      Admitted.
    End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
    Section Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
        let* _ := M.alloc tt in
        M.alloc tt.
      
      Global Instance AssociatedFunction_assert_receiver_is_total_eq :
        Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
        Notation.double_colon := assert_receiver_is_total_eq;
      }.
      
      #[refine] Global Instance ℐ : core.cmp.Eq.Trait Self := {
      }.
      Admitted.
    End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
    Section Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition clone (self : ref Self) : M erc20.erc20.Erc20Ref :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := α0.["inner"] in
        let* α2 := borrow α1 erc20.erc20._.CallBuilder in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        let* α5 :=
          (core.clone.Clone.clone (Self := erc20.erc20._.CallBuilder)) α4 in
        M.alloc {| erc20.erc20.Erc20Ref.inner := α5; |}.
      
      Global Instance AssociatedFunction_clone :
        Notation.DoubleColon Self "clone" := {
        Notation.double_colon := clone;
      }.
      
      #[refine] Global Instance ℐ : core.clone.Clone.Trait Self := {
        core.clone.Clone.clone := clone;
      }.
      Admitted.
    End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  
  Module Impl_erc20_erc20_Erc20Ref_8.
    Section Impl_erc20_erc20_Erc20Ref_8.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition new
          (__ink_binding_0 : ltac:(erc20.erc20.Balance))
          :
            M
              (ink_env.call.create_builder.CreateBuilder
                ltac:(erc20.erc20.Environment)
                Self
                (ink_env.call.common.Unset_ ltac:(erc20.erc20.Hash))
                (ink_env.call.common.Unset_ u64)
                (ink_env.call.common.Unset_ ltac:(erc20.erc20.Balance))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ltac:(erc20.erc20.Balance))
                      ltac:(ink_env.call.execution_input.EmptyArgumentList))))
                (ink_env.call.common.Unset_
                  ink_env.call.create_builder.state.Salt)
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType Self))) :=
        let* α0 := ink_env.call.create_builder.build_create in
        let* α1 := M.alloc 155 in
        let* α2 := M.alloc 174 in
        let* α3 := M.alloc 157 in
        let* α4 := M.alloc 94 in
        let* α5 := ink_env.call.selector.Selector::["new"] [ α1; α2; α3; α4 ] in
        let* α6 :=
          (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd))::["new"]
            α5 in
        let* α7 :=
          (ink_env.call.execution_input.ExecutionInput
                (ink_env.call.execution_input.ArgumentList
                  ink_env.call.execution_input.ArgumentListEnd
                  ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
            α6
            __ink_binding_0 in
        let* α8 :=
          (ink_env.call.create_builder.CreateBuilder
                E
                ContractRef
                CodeHash
                GasLimit
                Endowment
                (ink_env.call.common.Unset_
                  (ink_env.call.execution_input.ExecutionInput
                    (ink_env.call.execution_input.ArgumentList
                      ink_env.call.execution_input.ArgumentListEnd
                      ink_env.call.execution_input.ArgumentListEnd)))
                Salt
                RetType)::["exec_input"]
            α0
            α7 in
        (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              GasLimit
              Endowment
              Args
              Salt
              (ink_env.call.common.Unset_
                (ink_env.call.common.ReturnType unit)))::["returns"]
          α8.
      
      Global Instance AssociatedFunction_new :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
      
      Definition total_supply
          (self : ref Self)
          : M ltac:(erc20.erc20.Balance) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow α0 erc20.erc20.Erc20Ref in
        let* α2 := erc20.erc20.Erc20Ref::["try_total_supply"] α1 in
        (core.result.Result T E)::["unwrap_or_else"]
          α2
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::total_supply: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := borrow error ink_primitives.LangError in
          let* α5 := deref α4 ink_primitives.LangError in
          let* α6 := borrow α5 ink_primitives.LangError in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_total_supply :
        Notation.DoubleColon Self "total_supply" := {
        Notation.double_colon := total_supply;
      }.
      
      Definition try_total_supply
          (self : ref Self)
          :
            M
              ltac:(ink_primitives.MessageResult
                constr:(ltac:(erc20.erc20.Balance))) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
              (Self := erc20.erc20.Erc20Ref))
            α1 in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        let* α5 := erc20.erc20._.CallBuilder::["total_supply"] α4 in
        let* α6 :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput Args))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType R)))::["try_invoke"]
            α5 in
        (core.result.Result T E)::["unwrap_or_else"]
          α6
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::total_supply: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 :=
            borrow
              error
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α5 :=
            deref
              α4
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α6 :=
            borrow
              α5
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_try_total_supply :
        Notation.DoubleColon Self "try_total_supply" := {
        Notation.double_colon := try_total_supply;
      }.
      
      Definition balance_of
          (self : ref Self)
          (owner : ltac:(erc20.erc20.AccountId))
          : M ltac:(erc20.erc20.Balance) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow α0 erc20.erc20.Erc20Ref in
        let* α2 := erc20.erc20.Erc20Ref::["try_balance_of"] α1 owner in
        (core.result.Result T E)::["unwrap_or_else"]
          α2
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::balance_of: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := borrow error ink_primitives.LangError in
          let* α5 := deref α4 ink_primitives.LangError in
          let* α6 := borrow α5 ink_primitives.LangError in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_balance_of :
        Notation.DoubleColon Self "balance_of" := {
        Notation.double_colon := balance_of;
      }.
      
      Definition try_balance_of
          (self : ref Self)
          (owner : ltac:(erc20.erc20.AccountId))
          :
            M
              ltac:(ink_primitives.MessageResult
                constr:(ltac:(erc20.erc20.Balance))) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
              (Self := erc20.erc20.Erc20Ref))
            α1 in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        let* α5 := erc20.erc20._.CallBuilder::["balance_of"] α4 owner in
        let* α6 :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput Args))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType R)))::["try_invoke"]
            α5 in
        (core.result.Result T E)::["unwrap_or_else"]
          α6
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::balance_of: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 :=
            borrow
              error
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α5 :=
            deref
              α4
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α6 :=
            borrow
              α5
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_try_balance_of :
        Notation.DoubleColon Self "try_balance_of" := {
        Notation.double_colon := try_balance_of;
      }.
      
      Definition allowance
          (self : ref Self)
          (owner : ltac:(erc20.erc20.AccountId))
          (spender : ltac:(erc20.erc20.AccountId))
          : M ltac:(erc20.erc20.Balance) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow α0 erc20.erc20.Erc20Ref in
        let* α2 := erc20.erc20.Erc20Ref::["try_allowance"] α1 owner spender in
        (core.result.Result T E)::["unwrap_or_else"]
          α2
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::allowance: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := borrow error ink_primitives.LangError in
          let* α5 := deref α4 ink_primitives.LangError in
          let* α6 := borrow α5 ink_primitives.LangError in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_allowance :
        Notation.DoubleColon Self "allowance" := {
        Notation.double_colon := allowance;
      }.
      
      Definition try_allowance
          (self : ref Self)
          (owner : ltac:(erc20.erc20.AccountId))
          (spender : ltac:(erc20.erc20.AccountId))
          :
            M
              ltac:(ink_primitives.MessageResult
                constr:(ltac:(erc20.erc20.Balance))) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
              (Self := erc20.erc20.Erc20Ref))
            α1 in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        let* α5 := erc20.erc20._.CallBuilder::["allowance"] α4 owner spender in
        let* α6 :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput Args))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType R)))::["try_invoke"]
            α5 in
        (core.result.Result T E)::["unwrap_or_else"]
          α6
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::allowance: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 :=
            borrow
              error
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α5 :=
            deref
              α4
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α6 :=
            borrow
              α5
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_try_allowance :
        Notation.DoubleColon Self "try_allowance" := {
        Notation.double_colon := try_allowance;
      }.
      
      Definition transfer
          (self : mut_ref Self)
          (to : ltac:(erc20.erc20.AccountId))
          (value : ltac:(erc20.erc20.Balance))
          : M ltac:(erc20.erc20.Result constr:(unit)) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
        let* α2 := erc20.erc20.Erc20Ref::["try_transfer"] α1 to value in
        (core.result.Result T E)::["unwrap_or_else"]
          α2
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::transfer: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := borrow error ink_primitives.LangError in
          let* α5 := deref α4 ink_primitives.LangError in
          let* α6 := borrow α5 ink_primitives.LangError in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_transfer :
        Notation.DoubleColon Self "transfer" := {
        Notation.double_colon := transfer;
      }.
      
      Definition try_transfer
          (self : mut_ref Self)
          (to : ltac:(erc20.erc20.AccountId))
          (value : ltac:(erc20.erc20.Balance))
          :
            M
              ltac:(ink_primitives.MessageResult
                constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
              (Self := erc20.erc20.Erc20Ref))
            α1 in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
        let* α5 := erc20.erc20._.CallBuilder::["transfer"] α4 to value in
        let* α6 :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput Args))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType R)))::["try_invoke"]
            α5 in
        (core.result.Result T E)::["unwrap_or_else"]
          α6
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::transfer: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 :=
            borrow
              error
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α5 :=
            deref
              α4
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α6 :=
            borrow
              α5
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_try_transfer :
        Notation.DoubleColon Self "try_transfer" := {
        Notation.double_colon := try_transfer;
      }.
      
      Definition approve
          (self : mut_ref Self)
          (spender : ltac:(erc20.erc20.AccountId))
          (value : ltac:(erc20.erc20.Balance))
          : M ltac:(erc20.erc20.Result constr:(unit)) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
        let* α2 := erc20.erc20.Erc20Ref::["try_approve"] α1 spender value in
        (core.result.Result T E)::["unwrap_or_else"]
          α2
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::approve: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := borrow error ink_primitives.LangError in
          let* α5 := deref α4 ink_primitives.LangError in
          let* α6 := borrow α5 ink_primitives.LangError in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_approve :
        Notation.DoubleColon Self "approve" := {
        Notation.double_colon := approve;
      }.
      
      Definition try_approve
          (self : mut_ref Self)
          (spender : ltac:(erc20.erc20.AccountId))
          (value : ltac:(erc20.erc20.Balance))
          :
            M
              ltac:(ink_primitives.MessageResult
                constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
              (Self := erc20.erc20.Erc20Ref))
            α1 in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
        let* α5 := erc20.erc20._.CallBuilder::["approve"] α4 spender value in
        let* α6 :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput Args))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType R)))::["try_invoke"]
            α5 in
        (core.result.Result T E)::["unwrap_or_else"]
          α6
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::approve: " ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 :=
            borrow
              error
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α5 :=
            deref
              α4
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α6 :=
            borrow
              α5
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_try_approve :
        Notation.DoubleColon Self "try_approve" := {
        Notation.double_colon := try_approve;
      }.
      
      Definition transfer_from
          (self : mut_ref Self)
          (from : ltac:(erc20.erc20.AccountId))
          (to : ltac:(erc20.erc20.AccountId))
          (value : ltac:(erc20.erc20.Balance))
          : M ltac:(erc20.erc20.Result constr:(unit)) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          erc20.erc20.Erc20Ref::["try_transfer_from"] α1 from to value in
        (core.result.Result T E)::["unwrap_or_else"]
          α2
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::transfer_from: "
              ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 := borrow error ink_primitives.LangError in
          let* α5 := deref α4 ink_primitives.LangError in
          let* α6 := borrow α5 ink_primitives.LangError in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_transfer_from :
        Notation.DoubleColon Self "transfer_from" := {
        Notation.double_colon := transfer_from;
      }.
      
      Definition try_transfer_from
          (self : mut_ref Self)
          (from : ltac:(erc20.erc20.AccountId))
          (to : ltac:(erc20.erc20.AccountId))
          (value : ltac:(erc20.erc20.Balance))
          :
            M
              ltac:(ink_primitives.MessageResult
                constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
        let* α2 :=
          (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
              (Self := erc20.erc20.Erc20Ref))
            α1 in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
        let* α5 :=
          erc20.erc20._.CallBuilder::["transfer_from"] α4 from to value in
        let* α6 :=
          (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
                E
                (ink_env.call.common.Set_
                  (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                    E))
                (ink_env.call.common.Set_
                  (ink_env.call.execution_input.ExecutionInput Args))
                (ink_env.call.common.Set_
                  (ink_env.call.common.ReturnType R)))::["try_invoke"]
            α5 in
        (core.result.Result T E)::["unwrap_or_else"]
          α6
          (let* α0 :=
            borrow
              [ mk_str "encountered error while calling Erc20::transfer_from: "
              ]
              (list (ref str)) in
          let* α1 := deref α0 (list (ref str)) in
          let* α2 := borrow α1 (list (ref str)) in
          let* α3 := pointer_coercion "Unsize" α2 in
          let* α4 :=
            borrow
              error
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α5 :=
            deref
              α4
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α6 :=
            borrow
              α5
              ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
          let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
          let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
          let* α9 := deref α8 (list core.fmt.rt.Argument) in
          let* α10 := borrow α9 (list core.fmt.rt.Argument) in
          let* α11 := pointer_coercion "Unsize" α10 in
          let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
          let* α13 := core.panicking.panic_fmt α12 in
          never_to_any α13).
      
      Global Instance AssociatedFunction_try_transfer_from :
        Notation.DoubleColon Self "try_transfer_from" := {
        Notation.double_colon := try_transfer_from;
      }.
    End Impl_erc20_erc20_Erc20Ref_8.
  End Impl_erc20_erc20_Erc20Ref_8.
  
  Module
    Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
    Section
      Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition from_account_id
          (account_id : ltac:(erc20.erc20.AccountId))
          : M Self :=
        let* α0 :=
          (ink_env.call.create_builder.FromAccountId.from_account_id
              (Self := erc20.erc20._.CallBuilder))
            account_id in
        M.alloc {| erc20.erc20.Erc20Ref.inner := α0; |}.
      
      Global Instance AssociatedFunction_from_account_id :
        Notation.DoubleColon Self "from_account_id" := {
        Notation.double_colon := from_account_id;
      }.
      
      #[refine] Global Instance ℐ :
        ink_env.call.create_builder.FromAccountId.Trait Self
          (T := ltac:(erc20.erc20.Environment)) := {
        ink_env.call.create_builder.FromAccountId.from_account_id :=
          from_account_id;
      }.
      Admitted.
    End Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
  
  Module Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
    Section Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition to_account_id
          (self : ref Self)
          : M ltac:(erc20.erc20.AccountId) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := α0.["inner"] in
        let* α2 := borrow α1 erc20.erc20._.CallBuilder in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α4.
      
      Global Instance AssociatedFunction_to_account_id :
        Notation.DoubleColon Self "to_account_id" := {
        Notation.double_colon := to_account_id;
      }.
      
      #[refine] Global Instance ℐ :
        ink.contract_ref.ToAccountId.Trait Self
          (T := ltac:(erc20.erc20.Environment)) := {
        ink.contract_ref.ToAccountId.to_account_id := to_account_id;
      }.
      Admitted.
    End Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
    Section Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition as_ref
          (self : ref Self)
          : M (ref ltac:(erc20.erc20.AccountId)) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := α0.["inner"] in
        let* α2 := borrow α1 erc20.erc20._.CallBuilder in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow α3 erc20.erc20._.CallBuilder in
        let* α5 :=
          (core.convert.AsRef.as_ref (Self := erc20.erc20._.CallBuilder)) α4 in
        let* α6 := deref α5 ink_primitives.types.AccountId in
        borrow α6 ink_primitives.types.AccountId.
      
      Global Instance AssociatedFunction_as_ref :
        Notation.DoubleColon Self "as_ref" := {
        Notation.double_colon := as_ref;
      }.
      
      #[refine] Global Instance ℐ :
        core.convert.AsRef.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
        core.convert.AsRef.as_ref := as_ref;
      }.
      Admitted.
    End Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
  
  Module Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
    Section Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Erc20Ref.
      
      Definition as_mut
          (self : mut_ref Self)
          : M (mut_ref ltac:(erc20.erc20.AccountId)) :=
        let* α0 := deref self erc20.erc20.Erc20Ref in
        let* α1 := α0.["inner"] in
        let* α2 := borrow_mut α1 erc20.erc20._.CallBuilder in
        let* α3 := deref α2 erc20.erc20._.CallBuilder in
        let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
        let* α5 :=
          (core.convert.AsMut.as_mut (Self := erc20.erc20._.CallBuilder)) α4 in
        let* α6 := deref α5 ink_primitives.types.AccountId in
        let* α0 := borrow_mut α6 ink_primitives.types.AccountId in
        let* α1 := deref α0 ink_primitives.types.AccountId in
        borrow_mut α1 ink_primitives.types.AccountId.
      
      Global Instance AssociatedFunction_as_mut :
        Notation.DoubleColon Self "as_mut" := {
        Notation.double_colon := as_mut;
      }.
      
      #[refine] Global Instance ℐ :
        core.convert.AsMut.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
        core.convert.AsMut.as_mut := as_mut;
      }.
      Admitted.
    End Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
    Global Hint Resolve ℐ : core.
  End Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
  
  Module Error.
    Inductive t `{ℋ : State.Trait} : Set :=
    | InsufficientBalance
    | InsufficientAllowance.
  End Error.
  Definition Error `{ℋ : State.Trait} : Set := Error.t.
  
  Module Impl_core_fmt_Debug_for_erc20_erc20_Error.
    Section Impl_core_fmt_Debug_for_erc20_erc20_Error.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Error.
      
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M ltac:(core.fmt.Result) :=
        let* α0 := deref f core.fmt.Formatter in
        let* α1 := borrow_mut α0 core.fmt.Formatter in
        let* α2 :=
          match self with
          | erc20.erc20.Error  =>
            let* α0 := deref (mk_str "InsufficientBalance") str in
            borrow α0 str
          | erc20.erc20.Error  =>
            let* α0 := deref (mk_str "InsufficientAllowance") str in
            borrow α0 str
          end in
        core.fmt.Formatter::["write_str"] α1 α2.
      
      Global Instance AssociatedFunction_fmt :
        Notation.DoubleColon Self "fmt" := {
        Notation.double_colon := fmt;
      }.
      
      #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
      Admitted.
    End Impl_core_fmt_Debug_for_erc20_erc20_Error.
    Global Hint Resolve ℐ : core.
  End Impl_core_fmt_Debug_for_erc20_erc20_Error.
  
  Module Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
    Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Error.
      
      #[refine] Global Instance ℐ :
        core.marker.StructuralPartialEq.Trait Self := {
      }.
      Admitted.
    End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
    Global Hint Resolve ℐ : core.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  
  Module Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
    Section Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Error.
      
      Definition eq
          (self : ref Self)
          (other : ref erc20.erc20.Error)
          : M bool :=
        let* __self_tag :=
          let* α0 := deref self erc20.erc20.Error in
          let* α1 := borrow α0 erc20.erc20.Error in
          "unimplemented parent_kind" α1 in
        let* __arg1_tag :=
          let* α0 := deref other erc20.erc20.Error in
          let* α1 := borrow α0 erc20.erc20.Error in
          "unimplemented parent_kind" α1 in
        eq __self_tag __arg1_tag.
      
      Global Instance AssociatedFunction_eq :
        Notation.DoubleColon Self "eq" := {
        Notation.double_colon := eq;
      }.
      
      #[refine] Global Instance ℐ :
        core.cmp.PartialEq.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
        core.cmp.PartialEq.eq := eq;
      }.
      Admitted.
    End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
    Global Hint Resolve ℐ : core.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  
  Module Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
    Section Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Error.
      
      #[refine] Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
      }.
      Admitted.
    End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
    Global Hint Resolve ℐ : core.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  
  Module Impl_core_cmp_Eq_for_erc20_erc20_Error.
    Section Impl_core_cmp_Eq_for_erc20_erc20_Error.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := erc20.erc20.Error.
      
      Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
        M.alloc tt.
      
      Global Instance AssociatedFunction_assert_receiver_is_total_eq :
        Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
        Notation.double_colon := assert_receiver_is_total_eq;
      }.
      
      #[refine] Global Instance ℐ : core.cmp.Eq.Trait Self := {
      }.
      Admitted.
    End Impl_core_cmp_Eq_for_erc20_erc20_Error.
    Global Hint Resolve ℐ : core.
  End Impl_core_cmp_Eq_for_erc20_erc20_Error.
  
  Ltac Result T := refine (core.result.Result T erc20.erc20.Error).
End erc20.

Module Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Env : Set := ink_env.types.DefaultEnvironment.
    
    #[refine] Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
      ink_env.contract.ContractEnv.Env := Env;
    }.
    Admitted.
  End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20.

Ltac Environment :=
  refine (ink_env.types.DefaultEnvironment).

Ltac AccountId :=
  refine
    (ink_env.types.Environment.AccountId
      (Self := ink_env.types.DefaultEnvironment)).

Ltac Balance :=
  refine
    (ink_env.types.Environment.Balance
      (Self := ink_env.types.DefaultEnvironment)).

Ltac Hash :=
  refine
    (ink_env.types.Environment.Hash
      (Self := ink_env.types.DefaultEnvironment)).

Ltac Timestamp :=
  refine
    (ink_env.types.Environment.Timestamp
      (Self := ink_env.types.DefaultEnvironment)).

Ltac BlockNumber :=
  refine
    (ink_env.types.Environment.BlockNumber
      (Self := ink_env.types.DefaultEnvironment)).

Ltac ChainExtension :=
  refine
    (ink_env.types.Environment.ChainExtension
      (Self := ink_env.types.DefaultEnvironment)).

Definition MAX_EVENT_TOPICS `{ℋ : State.Trait} : usize :=
  M.run
    (Pure
      (ink_env.types.Environment.MAX_EVENT_TOPICS
        (Self :=
          (ink_env.types.DefaultEnvironment)))).

Module Check.
  Section Check.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      salt : unit;
      field_0 : ltac:(erc20.erc20.Balance);
      field_1 :
        ink_storage.lazy.mapping.Mapping
          ltac:(erc20.erc20.AccountId)
          ltac:(erc20.erc20.Balance)
          ink_storage.lazy.mapping.Mapping.Default.KeyType;
      field_2 :
        ink_storage.lazy.mapping.Mapping
          (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId))
          ltac:(erc20.erc20.Balance)
          ink_storage.lazy.mapping.Mapping.Default.KeyType;
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_salt : Notation.Dot "salt" := {
      Notation.dot x := let* x := M.read x in Pure x.(salt) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_salt : Notation.DoubleColon t "salt" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(salt) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_field_0 : Notation.Dot "field_0" := {
      Notation.dot x := let* x := M.read x in Pure x.(field_0) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_field_0 :
      Notation.DoubleColon t "field_0" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(field_0) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_field_1 : Notation.Dot "field_1" := {
      Notation.dot x := let* x := M.read x in Pure x.(field_1) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_field_1 :
      Notation.DoubleColon t "field_1" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(field_1) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_field_2 : Notation.Dot "field_2" := {
      Notation.dot x := let* x := M.read x in Pure x.(field_2) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_field_2 :
      Notation.DoubleColon t "field_2" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(field_2) : M _;
    }.
    Admitted.
  End Check.
End Check.
Definition Check `{ℋ : State.Trait} : Set := M.val Check.t.

Module Erc20.
  Section Erc20.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      total_supply :
        ink_storage_traits.storage.AutoStorableHint.Type_
          (Self := ltac:(erc20.erc20.Balance))
          (Trait := ltac:(try clear Trait; hauto l: on));
      balances :
        ink_storage_traits.storage.AutoStorableHint.Type_
          (Self := ink_storage.lazy.mapping.Mapping
            ltac:(erc20.erc20.AccountId)
            ltac:(erc20.erc20.Balance)
            ink_storage.lazy.mapping.Mapping.Default.KeyType)
          (Trait := ltac:(try clear Trait; hauto l: on));
      allowances :
        ink_storage_traits.storage.AutoStorableHint.Type_
          (Self := ink_storage.lazy.mapping.Mapping
            (ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId))
            ltac:(erc20.erc20.Balance)
            ink_storage.lazy.mapping.Mapping.Default.KeyType)
          (Trait := ltac:(try clear Trait; hauto l: on));
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_total_supply :
      Notation.Dot "total_supply" := {
      Notation.dot x := let* x := M.read x in Pure x.(total_supply) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_total_supply :
      Notation.DoubleColon t "total_supply" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(total_supply) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_balances : Notation.Dot "balances" := {
      Notation.dot x := let* x := M.read x in Pure x.(balances) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_balances :
      Notation.DoubleColon t "balances" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(balances) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_allowances : Notation.Dot "allowances" := {
      Notation.dot x := let* x := M.read x in Pure x.(allowances) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_allowances :
      Notation.DoubleColon t "allowances" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(allowances) : M _;
    }.
    Admitted.
  End Erc20.
End Erc20.
Definition Erc20 `{ℋ : State.Trait} : Set := M.val Erc20.t.

Module Impl_ink_storage_traits_storage_StorableHint_for_erc20_erc20_Erc20.
  Section Impl_ink_storage_traits_storage_StorableHint_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Context {__ink_generic_salt : Set}.
    
    Context
      {ℋ_0 : ink_storage_traits.storage.StorageKey.Trait __ink_generic_salt}.
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Type_ : Set := erc20.erc20.Erc20.
    
    Definition PreferredKey : Set := ink_storage_traits.impls.AutoKey.
    
    #[refine] Global Instance ℐ :
      ink_storage_traits.storage.StorableHint.Trait Self
        (Key := __ink_generic_salt) := {
      ink_storage_traits.storage.StorableHint.Type_ := Type_;
      ink_storage_traits.storage.StorableHint.PreferredKey := PreferredKey;
    }.
    Admitted.
  End Impl_ink_storage_traits_storage_StorableHint_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_storage_traits_storage_StorableHint_for_erc20_erc20_Erc20.

Module Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.
  Section Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition KEY : ltac:(ink_primitives.key.Key) :=
      M.run (Pure (ink_storage_traits.storage.StorageKey.KEY (Self := unit))).
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    #[refine] Global Instance ℐ :
      ink_storage_traits.storage.StorageKey.Trait Self := {
      ink_storage_traits.storage.StorageKey.KEY := KEY;
    }.
    Admitted.
  End Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_storage_traits_storage_StorageKey_for_erc20_erc20_Erc20.

Module Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.
  Section Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition decode
        {__ink_I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __ink_I}
        (__input : mut_ref __ink_I)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := deref __input __ink_I in
      let* α1 := borrow_mut α0 __ink_I in
      let* α2 :=
        (ink_storage_traits.storage.Storable.decode (Self := u128)) α1 in
      let* α3 :=
        (core.ops.try_trait.Try.branch
            (Self := (core.result.Result u128 parity_scale_codec.error.Error)))
          α2 in
      let* α4 :=
        match α3 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20.Erc20
                    parity_scale_codec.error.Error)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      let* α5 := deref __input __ink_I in
      let* α6 := borrow_mut α5 __ink_I in
      let* α7 :=
        (ink_storage_traits.storage.Storable.decode
            (Self :=
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))))
          α6 in
      let* α8 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              (core.result.Result
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))
                parity_scale_codec.error.Error)))
          α7 in
      let* α9 :=
        match α8 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20.Erc20
                    parity_scale_codec.error.Error)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      let* α10 := deref __input __ink_I in
      let* α11 := borrow_mut α10 __ink_I in
      let* α12 :=
        (ink_storage_traits.storage.Storable.decode
            (Self :=
              (ink_storage.lazy.mapping.Mapping
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId)
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))))
          α11 in
      let* α13 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              (core.result.Result
                (ink_storage.lazy.mapping.Mapping
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId)
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))
                parity_scale_codec.error.Error)))
          α12 in
      let* α14 :=
        match α13 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20.Erc20
                    parity_scale_codec.error.Error)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      let* α15 :=
        M.alloc
          {|
            erc20.erc20.Erc20.total_supply := α4;
            erc20.erc20.Erc20.balances := α9;
            erc20.erc20.Erc20.allowances := α14;
          |} in
      Pure (core.result.Result.Ok α15).
    
    Global Instance AssociatedFunction_decode
        {__ink_I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __ink_I} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__ink_I := __ink_I);
    }.
    
    Definition encode
        {__ink_O : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __ink_O}
        {ℋ_1 : core.marker.Sized.Trait __ink_O}
        (self : ref Self)
        (__dest : mut_ref __ink_O)
        : M unit :=
      match self with
      |
          {|
            erc20.erc20.Erc20.total_supply := __binding_0;
            erc20.erc20.Erc20.balances := __binding_1;
            erc20.erc20.Erc20.allowances := __binding_2;
          |}
          =>
        let* _ :=
          let* _ :=
            let* α0 := deref __binding_0 u128 in
            let* α1 := borrow α0 u128 in
            let* α2 := deref __dest __ink_O in
            let* α3 := borrow_mut α2 __ink_O in
            (ink_storage_traits.storage.Storable.encode (Self := u128)) α1 α3 in
          M.alloc tt in
        let* _ :=
          let* _ :=
            let* α0 :=
              deref
                __binding_1
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))) in
            let* α1 :=
              borrow
                α0
                (ink_storage.lazy.mapping.Mapping
                  ink_primitives.types.AccountId
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit))) in
            let* α2 := deref __dest __ink_O in
            let* α3 := borrow_mut α2 __ink_O in
            (ink_storage_traits.storage.Storable.encode
                (Self :=
                  (ink_storage.lazy.mapping.Mapping
                    ink_primitives.types.AccountId
                    u128
                    (ink_storage_traits.impls.ResolverKey
                      ink_storage_traits.impls.AutoKey
                      (ink_storage_traits.impls.ManualKey unit)))))
              α1
              α3 in
          M.alloc tt in
        let* _ :=
          let* α0 :=
            deref
              __binding_2
              (ink_storage.lazy.mapping.Mapping
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId)
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit))) in
          let* α1 :=
            borrow
              α0
              (ink_storage.lazy.mapping.Mapping
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId)
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit))) in
          let* α2 := deref __dest __ink_O in
          let* α3 := borrow_mut α2 __ink_O in
          (ink_storage_traits.storage.Storable.encode
              (Self :=
                (ink_storage.lazy.mapping.Mapping
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId)
                  u128
                  (ink_storage_traits.impls.ResolverKey
                    ink_storage_traits.impls.AutoKey
                    (ink_storage_traits.impls.ManualKey unit)))))
            α1
            α3 in
        M.alloc tt
      end.
    
    Global Instance AssociatedFunction_encode
        {__ink_O : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __ink_O}
        {ℋ_1 : core.marker.Sized.Trait __ink_O} :
      Notation.DoubleColon Self "encode" := {
      Notation.double_colon := encode (__ink_O := __ink_O);
    }.
    
    #[refine] Global Instance ℐ :
      ink_storage_traits.storage.Storable.Trait Self := {
      ink_storage_traits.storage.Storable.decode
        {__ink_I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __ink_I} :=
        decode (__ink_I := __ink_I);
      ink_storage_traits.storage.Storable.encode
        {__ink_O : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __ink_O}
        {ℋ_1 : core.marker.Sized.Trait __ink_O} :=
        encode (__ink_O := __ink_O);
    }.
    Admitted.
  End Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_storage_traits_storage_Storable_for_erc20_erc20_Erc20.

Module Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.
  Section Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Identity : Set := Self.
    
    Definition type_info
        : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
      let* α0 := (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let* α1 :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "Erc20")
          (mk_str "erc20::erc20") in
      let* α2 :=
        (scale_info.build.TypeBuilder
              F
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let* α3 := (alloc.vec.Vec T alloc.alloc.Global)::["new"] in
      let* α4 := (scale_info.build.TypeBuilder F S)::["type_params"] α2 α3 in
      let* α5 :=
        borrow [ mk_str "A simple ERC-20 contract." ] (list (ref str)) in
      let* α6 := deref α5 (list (ref str)) in
      let* α7 := borrow α6 (list (ref str)) in
      let* α8 := pointer_coercion "Unsize" α7 in
      let* α9 :=
        (scale_info.build.TypeBuilder scale_info.form.MetaForm S)::["docs"]
          α4
          α8 in
      let* α10 := (scale_info.build.Fields F)::["named"] in
      let* α11 :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α10
          (let* α0 :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  N
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let* α1 :=
            (scale_info.build.FieldBuilder
                  F
                  scale_info.build.field_state.NameNotAssigned
                  T)::["name"]
              α0
              (mk_str "total_supply") in
          let* α2 :=
            (scale_info.build.FieldBuilder F N T)::["type_name"]
              α1
              (mk_str
                "<Balance as::ink::storage::traits::AutoStorableHint<::ink::
storage::traits::ManualKey<375105693u32, ()>,>>::Type") in
          let* α3 := borrow [ mk_str "Total token supply." ] (list (ref str)) in
          let* α4 := deref α3 (list (ref str)) in
          let* α5 := borrow α4 (list (ref str)) in
          let* α6 := pointer_coercion "Unsize" α5 in
          (scale_info.build.FieldBuilder scale_info.form.MetaForm N T)::["docs"]
            α2
            α6) in
      let* α12 :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α11
          (let* α0 :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  N
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let* α1 :=
            (scale_info.build.FieldBuilder
                  F
                  scale_info.build.field_state.NameNotAssigned
                  T)::["name"]
              α0
              (mk_str "balances") in
          let* α2 :=
            (scale_info.build.FieldBuilder F N T)::["type_name"]
              α1
              (mk_str
                "<Mapping<AccountId, Balance> as::ink::storage::traits::
AutoStorableHint<::ink::storage::traits::ManualKey<639884519u32, ()
>,>>::Type") in
          let* α3 :=
            borrow
              [ mk_str "Mapping from owner to number of owned token." ]
              (list (ref str)) in
          let* α4 := deref α3 (list (ref str)) in
          let* α5 := borrow α4 (list (ref str)) in
          let* α6 := pointer_coercion "Unsize" α5 in
          (scale_info.build.FieldBuilder scale_info.form.MetaForm N T)::["docs"]
            α2
            α6) in
      let* α13 :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α12
          (let* α0 :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  N
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let* α1 :=
            (scale_info.build.FieldBuilder
                  F
                  scale_info.build.field_state.NameNotAssigned
                  T)::["name"]
              α0
              (mk_str "allowances") in
          let* α2 :=
            (scale_info.build.FieldBuilder F N T)::["type_name"]
              α1
              (mk_str
                "<Mapping<(AccountId, AccountId), Balance> as::ink::storage::traits
::AutoStorableHint<::ink::storage::traits::ManualKey<
3969917367u32, ()>,>>::Type") in
          let* α3 :=
            borrow
              [
                mk_str
                  "Mapping of the token amount which an account is allowed to withdraw";
                mk_str "from another account."
              ]
              (list (ref str)) in
          let* α4 := deref α3 (list (ref str)) in
          let* α5 := borrow α4 (list (ref str)) in
          let* α6 := pointer_coercion "Unsize" α5 in
          (scale_info.build.FieldBuilder scale_info.form.MetaForm N T)::["docs"]
            α2
            α6) in
      (scale_info.build.TypeBuilder
            F
            scale_info.build.state.PathAssigned)::["composite"]
        α9
        α13.
    
    Global Instance AssociatedFunction_type_info :
      Notation.DoubleColon Self "type_info" := {
      Notation.double_colon := type_info;
    }.
    
    #[refine] Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
      scale_info.TypeInfo.Identity := Identity;
      scale_info.TypeInfo.type_info := type_info;
    }.
    Admitted.
  End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20.

Module Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.
  Section Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition layout
        (__key : ref ltac:(ink_primitives.key.Key))
        : M (ink_metadata.layout.Layout ink_metadata.layout.Layout.Default.F) :=
      let* α0 := deref __key u32 in
      let* α1 := borrow α0 u32 in
      let* α2 :=
        (ink_storage_traits.layout.StorageLayout.layout (Self := u128)) α1 in
      let* α3 :=
        (ink_metadata.layout.FieldLayout F)::["new"]
          (mk_str "total_supply")
          α2 in
      let* α4 := deref __key u32 in
      let* α5 := borrow α4 u32 in
      let* α6 :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self :=
              (ink_storage.lazy.mapping.Mapping
                ink_primitives.types.AccountId
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))))
          α5 in
      let* α7 :=
        (ink_metadata.layout.FieldLayout F)::["new"] (mk_str "balances") α6 in
      let* α8 := deref __key u32 in
      let* α9 := borrow α8 u32 in
      let* α10 :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self :=
              (ink_storage.lazy.mapping.Mapping
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId)
                u128
                (ink_storage_traits.impls.ResolverKey
                  ink_storage_traits.impls.AutoKey
                  (ink_storage_traits.impls.ManualKey unit)))))
          α9 in
      let* α11 :=
        (ink_metadata.layout.FieldLayout F)::["new"]
          (mk_str "allowances")
          α10 in
      let* α12 :=
        (ink_metadata.layout.StructLayout F)::["new"]
          (mk_str "Erc20")
          [ α3; α7; α11 ] in
      Pure (ink_metadata.layout.Layout.Struct α12).
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    #[refine] Global Instance ℐ :
      ink_storage_traits.layout.StorageLayout.Trait Self := {
      ink_storage_traits.layout.StorageLayout.layout := layout;
    }.
    Admitted.
  End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20.

Module Impl_core_default_Default_for_erc20_erc20_Erc20.
  Section Impl_core_default_Default_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition default : M erc20.erc20.Erc20 :=
      let* α0 := core.default.Default.default (Self := u128) in
      let* α1 :=
        core.default.Default.default
          (Self :=
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) in
      let* α2 :=
        core.default.Default.default
          (Self :=
            (ink_storage.lazy.mapping.Mapping
              (ink_primitives.types.AccountId * ink_primitives.types.AccountId)
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) in
      M.alloc
        {|
          erc20.erc20.Erc20.total_supply := α0;
          erc20.erc20.Erc20.balances := α1;
          erc20.erc20.Erc20.allowances := α2;
        |}.
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    #[refine] Global Instance ℐ : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
    Admitted.
  End Impl_core_default_Default_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_core_default_Default_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition NAME : ref str := M.run (Pure (mk_str "Erc20")).
    
    Global Instance AssociatedFunction_NAME :
      Notation.DoubleColon Self "NAME" := {
      Notation.double_colon := NAME;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.contract.ContractName.Trait Self := {
      ink.reflect.contract.ContractName.NAME := NAME;
    }.
    Admitted.
  End Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_contract_ContractName_for_erc20_erc20_Erc20.

Module Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.
  Section Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ref erc20.erc20.Erc20.
    
    Definition EnvAccess : Set :=
      ink.env_access.EnvAccess
        (ink_env.types.DefaultEnvironment).
    
    Definition env (self : Self) : M EnvAccess :=
      core.default.Default.default
        (Self := (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)).
    
    Global Instance AssociatedFunction_env :
      Notation.DoubleColon Self "env" := {
      Notation.double_colon := env;
    }.
    
    #[refine] Global Instance ℐ : ink.codegen.env.Env.Trait Self := {
      ink.codegen.env.Env.EnvAccess := EnvAccess;
      ink.codegen.env.Env.env := env;
    }.
    Admitted.
  End Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_codegen_env_Env_for_StaticRef_erc20_erc20_Erc20.

Module Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.
  Section Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition EnvAccess : Set :=
      ink.env_access.EnvAccess
        (ink_env.types.DefaultEnvironment).
    
    Definition env : M EnvAccess :=
      core.default.Default.default
        (Self := (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)).
    
    Global Instance AssociatedFunction_env :
      Notation.DoubleColon Self "env" := {
      Notation.double_colon := env;
    }.
    
    #[refine] Global Instance ℐ : ink.codegen.env.StaticEnv.Trait Self := {
      ink.codegen.env.StaticEnv.EnvAccess := EnvAccess;
      ink.codegen.env.StaticEnv.env := env;
    }.
    Admitted.
  End Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_codegen_env_StaticEnv_for_erc20_erc20_Erc20.

Module
  Impl_ink_codegen_event_emit_EmitEvent_for_ink_env_access_EnvAccess_erc20_erc20_Environment.
  Section
    Impl_ink_codegen_event_emit_EmitEvent_for_ink_env_access_EnvAccess_erc20_erc20_Environment.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set :=
      ink.env_access.EnvAccess ltac:(erc20.erc20.Environment).
    
    Definition emit_event
        {E : Set}
        {ℋ_0 :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_
              (Self := erc20.erc20.Erc20)
              (Trait := ltac:(try clear Trait; hauto l: on)))}
        (self : Self)
        (event : E)
        : M unit :=
      let* _ :=
        let* α0 := (core.convert.Into.into (Self := E)) event in
        ink_env.api.emit_event α0 in
      M.alloc tt.
    
    Global Instance AssociatedFunction_emit_event
        {E : Set}
        {ℋ_0 :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_
              (Self := erc20.erc20.Erc20)
              (Trait := ltac:(try clear Trait; hauto l: on)))} :
      Notation.DoubleColon Self "emit_event" := {
      Notation.double_colon := emit_event (E := E);
    }.
    
    #[refine] Global Instance ℐ :
      ink.codegen.event.emit.EmitEvent.Trait Self (C := erc20.erc20.Erc20) := {
      ink.codegen.event.emit.EmitEvent.emit_event
        {E : Set}
        {ℋ_0 :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_
              (Self := erc20.erc20.Erc20)
              (Trait := ltac:(try clear Trait; hauto l: on)))} :=
        emit_event (E := E);
    }.
    Admitted.
  End
    Impl_ink_codegen_event_emit_EmitEvent_for_ink_env_access_EnvAccess_erc20_erc20_Environment.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_codegen_event_emit_EmitEvent_for_ink_env_access_EnvAccess_erc20_erc20_Environment.

Module __ink_EventBase.
  Inductive t `{ℋ : State.Trait} : Set :=
  | Transfer (_ : erc20.erc20.Transfer)
  | Approval (_ : erc20.erc20.Approval).
End __ink_EventBase.
Definition __ink_EventBase `{ℋ : State.Trait} : Set := __ink_EventBase.t.

Module Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.
  Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.__ink_EventBase.
    
    Definition encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy}
        (self : ref Self)
        (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
        : M unit :=
      let* α0 := deref self erc20.erc20.__ink_EventBase in
      match α0 with
      | erc20.erc20.__ink_EventBase aa =>
        let* _ :=
          let* α0 := deref __codec_dest_edqy __CodecOutputEdqy in
          let* α1 := borrow_mut α0 __CodecOutputEdqy in
          let* α2 := M.alloc 0 in
          let* α3 := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy))
            α1
            α3 in
        let* _ :=
          let* α0 := deref aa erc20.erc20.Transfer in
          let* α1 := borrow α0 erc20.erc20.Transfer in
          let* α2 := deref __codec_dest_edqy __CodecOutputEdqy in
          let* α3 := borrow_mut α2 __CodecOutputEdqy in
          (parity_scale_codec.codec.Encode.encode_to
              (Self := erc20.erc20.Transfer))
            α1
            α3 in
        M.alloc tt
      | erc20.erc20.__ink_EventBase aa =>
        let* _ :=
          let* α0 := deref __codec_dest_edqy __CodecOutputEdqy in
          let* α1 := borrow_mut α0 __CodecOutputEdqy in
          let* α2 := M.alloc 1 in
          let* α3 := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy))
            α1
            α3 in
        let* _ :=
          let* α0 := deref aa erc20.erc20.Approval in
          let* α1 := borrow α0 erc20.erc20.Approval in
          let* α2 := deref __codec_dest_edqy __CodecOutputEdqy in
          let* α3 := borrow_mut α2 __CodecOutputEdqy in
          (parity_scale_codec.codec.Encode.encode_to
              (Self := erc20.erc20.Approval))
            α1
            α3 in
        M.alloc tt
      | _ => M.alloc tt
      end.
    
    Global Instance AssociatedFunction_encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.DoubleColon Self "encode_to" := {
      Notation.double_colon
        :=
        encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___ink_EventBase.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.__ink_EventBase.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
    }.
    Admitted.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.
  Global Hint Resolve ℐ : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___ink_EventBase.

Module Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.
  Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.__ink_EventBase.
    
    Definition decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := deref __codec_input_edqy __CodecInputEdqy in
      let* α1 := borrow_mut α0 __CodecInputEdqy in
      let* α2 :=
        (parity_scale_codec.codec.Input.read_byte (Self := __CodecInputEdqy))
          α1 in
      let* α3 :=
        (core.result.Result T E)::["map_err"]
          α2
          (parity_scale_codec.error.Error::["chain"]
            e
            (mk_str
              "Could not decode `__ink_EventBase`, failed to read variant byte")) in
      let* α4 :=
        (core.ops.try_trait.Try.branch
            (Self := (core.result.Result u8 parity_scale_codec.error.Error)))
          α3 in
      let* α5 :=
        match α4 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20.__ink_EventBase
                    parity_scale_codec.error.Error)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      match α5 with
      | __codec_x_edqy =>
        let* _ :=
          let* α0 :=
            borrow_mut
              (let* __codec_res_edqy :=
                let* α0 := deref __codec_input_edqy __CodecInputEdqy in
                let* α1 := borrow_mut α0 __CodecInputEdqy in
                (parity_scale_codec.codec.Decode.decode
                    (Self := erc20.erc20.Transfer))
                  α1 in
              let* α0 :=
                match __codec_res_edqy with
                | core.result.Result e =>
                  let* α0 :=
                    parity_scale_codec.error.Error::["chain"]
                      e
                      (mk_str
                        "Could not decode `__ink_EventBase::Transfer.0`") in
                  let* α1 := Return (core.result.Result.Err α0) in
                  never_to_any α1
                | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
                end in
              Pure
                (core.result.Result.Ok
                  (erc20.erc20.__ink_EventBase.Transfer α0)))
              type not implemented in
          let* α1 := M.alloc tt in
          let* α2 :=
            (core.ops.function.FnMut.call_mut (Self := type not implemented))
              α0
              α1 in
          Return α2 in
        let* α0 := M.alloc tt in
        never_to_any α0
      | __codec_x_edqy =>
        let* _ :=
          let* α0 :=
            borrow_mut
              (let* __codec_res_edqy :=
                let* α0 := deref __codec_input_edqy __CodecInputEdqy in
                let* α1 := borrow_mut α0 __CodecInputEdqy in
                (parity_scale_codec.codec.Decode.decode
                    (Self := erc20.erc20.Approval))
                  α1 in
              let* α0 :=
                match __codec_res_edqy with
                | core.result.Result e =>
                  let* α0 :=
                    parity_scale_codec.error.Error::["chain"]
                      e
                      (mk_str
                        "Could not decode `__ink_EventBase::Approval.0`") in
                  let* α1 := Return (core.result.Result.Err α0) in
                  never_to_any α1
                | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
                end in
              Pure
                (core.result.Result.Ok
                  (erc20.erc20.__ink_EventBase.Approval α0)))
              type not implemented in
          let* α1 := M.alloc tt in
          let* α2 :=
            (core.ops.function.FnMut.call_mut (Self := type not implemented))
              α0
              α1 in
          Return α2 in
        let* α0 := M.alloc tt in
        never_to_any α0
      | _ =>
        let* _ :=
          let* α0 :=
            borrow
              (let* α0 :=
                (core.convert.Into.into (Self := (ref str)))
                  (mk_str
                    "Could not decode `__ink_EventBase`, variant doesn't exist") in
              Pure (core.result.Result.Err α0))
              type not implemented in
          let* α1 := M.alloc tt in
          let* α2 :=
            (core.ops.function.Fn.call (Self := type not implemented)) α0 α1 in
          Return α2 in
        let* α0 := M.alloc tt in
        never_to_any α0
      end.
    
    Global Instance AssociatedFunction_decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___ink_EventBase.

Module Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.
  Section Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Type_ : Set := erc20.erc20.__ink_EventBase.
    
    #[refine] Global Instance ℐ :
      ink.reflect.event.ContractEventBase.Trait Self := {
      ink.reflect.event.ContractEventBase.Type_ := Type_;
    }.
    Admitted.
  End Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_event_ContractEventBase_for_erc20_erc20_Erc20.

Module Impl_core_convert_From_for_erc20_erc20___ink_EventBase.
  Section Impl_core_convert_From_for_erc20_erc20___ink_EventBase.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.__ink_EventBase.
    
    Definition from (event : erc20.erc20.Transfer) : M Self :=
      "unimplemented parent_kind" event.
    
    Global Instance AssociatedFunction_from :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.From.Trait Self (T := erc20.erc20.Transfer) := {
      core.convert.From.from := from;
    }.
    Admitted.
  End Impl_core_convert_From_for_erc20_erc20___ink_EventBase.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_From_for_erc20_erc20___ink_EventBase.

Module Impl_core_convert_From_for_erc20_erc20___ink_EventBase.
  Section Impl_core_convert_From_for_erc20_erc20___ink_EventBase.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.__ink_EventBase.
    
    Definition from (event : erc20.erc20.Approval) : M Self :=
      "unimplemented parent_kind" event.
    
    Global Instance AssociatedFunction_from :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.From.Trait Self (T := erc20.erc20.Approval) := {
      core.convert.From.from := from;
    }.
    Admitted.
  End Impl_core_convert_From_for_erc20_erc20___ink_EventBase.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_From_for_erc20_erc20___ink_EventBase.

Module __ink_UndefinedAmountOfTopics.
  Inductive t `{ℋ : State.Trait} : Set :=
  .
End __ink_UndefinedAmountOfTopics.
Definition __ink_UndefinedAmountOfTopics `{ℋ : State.Trait} : Set :=
  __ink_UndefinedAmountOfTopics.t.

Module
  Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.
  Section
    Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_UndefinedAmountOfTopics.
    
    Definition AMOUNT : usize := M.run (M.alloc 0).
    
    Global Instance AssociatedFunction_AMOUNT :
      Notation.DoubleColon Self "AMOUNT" := {
      Notation.double_colon := AMOUNT;
    }.
    
    #[refine] Global Instance ℐ :
      ink_env.topics.EventTopicsAmount.Trait Self := {
      ink_env.topics.EventTopicsAmount.AMOUNT := AMOUNT;
    }.
    Admitted.
  End
    Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_env_topics_EventTopicsAmount_for_erc20_erc20_____ink_UndefinedAmountOfTopics.

Module Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.
  Section Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.__ink_EventBase.
    
    Definition RemainingTopics : Set :=
      erc20.erc20._.__ink_UndefinedAmountOfTopics.
    
    Definition topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
        (self : ref Self)
        (builder : ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B)
        :
          M
            (ink_env.topics.TopicsBuilderBackend.Output
              (Self := B)
              (Trait := ltac:(try clear Trait; hauto l: on))) :=
      match self with
      | erc20.erc20.__ink_EventBase event =>
        let* α0 := deref event erc20.erc20.Transfer in
        let* α1 := borrow α0 erc20.erc20.Transfer in
        (ink_env.topics.Topics.topics (Self := erc20.erc20.Transfer)) α1 builder
      | erc20.erc20.__ink_EventBase event =>
        let* α0 := deref event erc20.erc20.Approval in
        let* α1 := borrow α0 erc20.erc20.Approval in
        (ink_env.topics.Topics.topics (Self := erc20.erc20.Approval)) α1 builder
      | _ =>
        let* α0 := borrow [ mk_str "Event does not exist!" ] (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := core.fmt.Arguments::["new_const"] α3 in
        let* α5 := core.panicking.panic_fmt α4 in
        never_to_any α5
      end.
    
    Global Instance AssociatedFunction_topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
      Notation.DoubleColon Self "topics" := {
      Notation.double_colon := topics (E := E) (B := B);
    }.
    
    #[refine] Global Instance ℐ : ink_env.topics.Topics.Trait Self := {
      ink_env.topics.Topics.RemainingTopics := RemainingTopics;
      ink_env.topics.Topics.topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :=
        topics (E := E) (B := B);
    }.
    Admitted.
  End Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_topics_Topics_for_erc20_erc20___ink_EventBase.

Module Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  Section Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Transfer.
    
    Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
    
    #[refine] Global Instance ℐ :
      ink.codegen.event.topics.EventLenTopics.Trait Self := {
      ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
    }.
    Admitted.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.
  Global Hint Resolve ℐ : core.
End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Transfer.

Module Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  Section Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Approval.
    
    Definition LenTopics : Set := ink.codegen.event.topics.EventTopics.
    
    #[refine] Global Instance ℐ :
      ink.codegen.event.topics.EventLenTopics.Trait Self := {
      ink.codegen.event.topics.EventLenTopics.LenTopics := LenTopics;
    }.
    Admitted.
  End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.
  Global Hint Resolve ℐ : core.
End Impl_ink_codegen_event_topics_EventLenTopics_for_erc20_erc20_Approval.

Module Transfer.
  Section Transfer.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      from : core.option.Option ltac:(erc20.erc20.AccountId);
      to : core.option.Option ltac:(erc20.erc20.AccountId);
      value : ltac:(erc20.erc20.Balance);
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_from : Notation.Dot "from" := {
      Notation.dot x := let* x := M.read x in Pure x.(from) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_from : Notation.DoubleColon t "from" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(from) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_to : Notation.Dot "to" := {
      Notation.dot x := let* x := M.read x in Pure x.(to) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_to : Notation.DoubleColon t "to" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(to) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Admitted.
  End Transfer.
End Transfer.
Definition Transfer `{ℋ : State.Trait} : Set := M.val Transfer.t.

Module Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.
  Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Transfer.
    
    Definition encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy}
        (self : ref Self)
        (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
        : M unit :=
      let* _ :=
        let* α0 := deref self erc20.erc20.Transfer in
        let* α1 := α0.["from"] in
        let* α2 :=
          borrow α1 (core.option.Option ink_primitives.types.AccountId) in
        let* α3 :=
          deref α2 (core.option.Option ink_primitives.types.AccountId) in
        let* α4 :=
          borrow α3 (core.option.Option ink_primitives.types.AccountId) in
        let* α5 := deref __codec_dest_edqy __CodecOutputEdqy in
        let* α6 := borrow_mut α5 __CodecOutputEdqy in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := (core.option.Option ink_primitives.types.AccountId)))
          α4
          α6 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Transfer in
        let* α1 := α0.["to"] in
        let* α2 :=
          borrow α1 (core.option.Option ink_primitives.types.AccountId) in
        let* α3 :=
          deref α2 (core.option.Option ink_primitives.types.AccountId) in
        let* α4 :=
          borrow α3 (core.option.Option ink_primitives.types.AccountId) in
        let* α5 := deref __codec_dest_edqy __CodecOutputEdqy in
        let* α6 := borrow_mut α5 __CodecOutputEdqy in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := (core.option.Option ink_primitives.types.AccountId)))
          α4
          α6 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Transfer in
        let* α1 := α0.["value"] in
        let* α2 := borrow α1 u128 in
        let* α3 := deref α2 u128 in
        let* α4 := borrow α3 u128 in
        let* α5 := deref __codec_dest_edqy __CodecOutputEdqy in
        let* α6 := borrow_mut α5 __CodecOutputEdqy in
        (parity_scale_codec.codec.Encode.encode_to (Self := u128)) α4 α6 in
      M.alloc tt.
    
    Global Instance AssociatedFunction_encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.DoubleColon Self "encode_to" := {
      Notation.double_colon
        :=
        encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Transfer.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Transfer.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
    }.
    Admitted.
  End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Transfer.

Module Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.
  Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Transfer.
    
    Definition decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode
            (Self := (core.option.Option ink_primitives.types.AccountId)))
          α1 in
      let* α0 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Transfer::from`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode
            (Self := (core.option.Option ink_primitives.types.AccountId)))
          α1 in
      let* α1 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Transfer::to`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode (Self := u128)) α1 in
      let* α2 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Transfer::value`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* α3 :=
        M.alloc
          {|
            erc20.erc20.Transfer.from := α0;
            erc20.erc20.Transfer.to := α1;
            erc20.erc20.Transfer.value := α2;
          |} in
      Pure (core.result.Result.Ok α3).
    
    Global Instance AssociatedFunction_decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Transfer.

Module Approval.
  Section Approval.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      owner : ltac:(erc20.erc20.AccountId);
      spender : ltac:(erc20.erc20.AccountId);
      value : ltac:(erc20.erc20.Balance);
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_owner : Notation.Dot "owner" := {
      Notation.dot x := let* x := M.read x in Pure x.(owner) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_owner : Notation.DoubleColon t "owner" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(owner) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_spender : Notation.Dot "spender" := {
      Notation.dot x := let* x := M.read x in Pure x.(spender) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_spender :
      Notation.DoubleColon t "spender" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(spender) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_value : Notation.Dot "value" := {
      Notation.dot x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_value : Notation.DoubleColon t "value" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(value) : M _;
    }.
    Admitted.
  End Approval.
End Approval.
Definition Approval `{ℋ : State.Trait} : Set := M.val Approval.t.

Module Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.
  Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Approval.
    
    Definition encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy}
        (self : ref Self)
        (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
        : M unit :=
      let* _ :=
        let* α0 := deref self erc20.erc20.Approval in
        let* α1 := α0.["owner"] in
        let* α2 := borrow α1 ink_primitives.types.AccountId in
        let* α3 := deref α2 ink_primitives.types.AccountId in
        let* α4 := borrow α3 ink_primitives.types.AccountId in
        let* α5 := deref __codec_dest_edqy __CodecOutputEdqy in
        let* α6 := borrow_mut α5 __CodecOutputEdqy in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := ink_primitives.types.AccountId))
          α4
          α6 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Approval in
        let* α1 := α0.["spender"] in
        let* α2 := borrow α1 ink_primitives.types.AccountId in
        let* α3 := deref α2 ink_primitives.types.AccountId in
        let* α4 := borrow α3 ink_primitives.types.AccountId in
        let* α5 := deref __codec_dest_edqy __CodecOutputEdqy in
        let* α6 := borrow_mut α5 __CodecOutputEdqy in
        (parity_scale_codec.codec.Encode.encode_to
            (Self := ink_primitives.types.AccountId))
          α4
          α6 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Approval in
        let* α1 := α0.["value"] in
        let* α2 := borrow α1 u128 in
        let* α3 := deref α2 u128 in
        let* α4 := borrow α3 u128 in
        let* α5 := deref __codec_dest_edqy __CodecOutputEdqy in
        let* α6 := borrow_mut α5 __CodecOutputEdqy in
        (parity_scale_codec.codec.Encode.encode_to (Self := u128)) α4 α6 in
      M.alloc tt.
    
    Global Instance AssociatedFunction_encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.DoubleColon Self "encode_to" := {
      Notation.double_colon
        :=
        encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Approval.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Approval.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
    }.
    Admitted.
  End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Approval.

Module Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.
  Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Approval.
    
    Definition decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode
            (Self := ink_primitives.types.AccountId))
          α1 in
      let* α0 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Approval::owner`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode
            (Self := ink_primitives.types.AccountId))
          α1 in
      let* α1 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Approval::spender`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode (Self := u128)) α1 in
      let* α2 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Approval::value`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* α3 :=
        M.alloc
          {|
            erc20.erc20.Approval.owner := α0;
            erc20.erc20.Approval.spender := α1;
            erc20.erc20.Approval.value := α2;
          |} in
      Pure (core.result.Result.Ok α3).
    
    Global Instance AssociatedFunction_decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Approval.

Module Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.
  Section Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Transfer.
    
    Definition RemainingTopics : Set :=
      list ink_env.topics.state.HasRemainingTopics.
    
    Definition topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
        (self : ref Self)
        (builder : ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B)
        :
          M
            (ink_env.topics.TopicsBuilderBackend.Output
              (Self := B)
              (Trait := ltac:(try clear Trait; hauto l: on))) :=
      let* α0 :=
        (ink_env.topics.TopicsBuilder
              ink_env.topics.state.Uninit
              E
              B)::["build"]
          builder in
      let* α1 :=
        [69, 114, 99, 50, 48, 58, 58, 84, 114, 97, 110, 115, 102, 101, 114] in
      let* α2 := deref α1 (list u8) in
      let* α3 := borrow α2 (list u8) in
      let* α4 := [] in
      let* α5 := deref α4 (list u8) in
      let* α6 := borrow α5 (list u8) in
      let* α7 := pointer_coercion "Unsize" α6 in
      let* α8 :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α3;
            ink_env.topics.PrefixedValue.prefix := α7;
          |} in
      let* α9 := borrow α8 (ink_env.topics.PrefixedValue (list u8)) in
      let* α10 := deref α9 (ink_env.topics.PrefixedValue (list u8)) in
      let* α11 := borrow α10 (ink_env.topics.PrefixedValue (list u8)) in
      let* α12 := (ink_env.topics.TopicsBuilder S E B)::["push_topic"] α0 α11 in
      let* α13 := deref self erc20.erc20.Transfer in
      let* α14 := α13.["from"] in
      let* α15 :=
        borrow α14 (core.option.Option ink_primitives.types.AccountId) in
      let* α16 :=
        deref α15 (core.option.Option ink_primitives.types.AccountId) in
      let* α17 :=
        borrow α16 (core.option.Option ink_primitives.types.AccountId) in
      let* α18 :=
        [69, 114, 99, 50, 48, 58, 58, 84, 114, 97, 110, 115, 102, 101, 114, 58, 58, 102, 114, 111, 109] in
      let* α19 := deref α18 (list u8) in
      let* α20 := borrow α19 (list u8) in
      let* α21 := pointer_coercion "Unsize" α20 in
      let* α22 :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α17;
            ink_env.topics.PrefixedValue.prefix := α21;
          |} in
      let* α23 :=
        borrow
          α22
          (ink_env.topics.PrefixedValue
            (core.option.Option ink_primitives.types.AccountId)) in
      let* α24 :=
        deref
          α23
          (ink_env.topics.PrefixedValue
            (core.option.Option ink_primitives.types.AccountId)) in
      let* α25 :=
        borrow
          α24
          (ink_env.topics.PrefixedValue
            (core.option.Option ink_primitives.types.AccountId)) in
      let* α26 :=
        (ink_env.topics.TopicsBuilder S E B)::["push_topic"] α12 α25 in
      let* α27 := deref self erc20.erc20.Transfer in
      let* α28 := α27.["to"] in
      let* α29 :=
        borrow α28 (core.option.Option ink_primitives.types.AccountId) in
      let* α30 :=
        deref α29 (core.option.Option ink_primitives.types.AccountId) in
      let* α31 :=
        borrow α30 (core.option.Option ink_primitives.types.AccountId) in
      let* α32 :=
        [69, 114, 99, 50, 48, 58, 58, 84, 114, 97, 110, 115, 102, 101, 114, 58, 58, 116, 111] in
      let* α33 := deref α32 (list u8) in
      let* α34 := borrow α33 (list u8) in
      let* α35 := pointer_coercion "Unsize" α34 in
      let* α36 :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α31;
            ink_env.topics.PrefixedValue.prefix := α35;
          |} in
      let* α37 :=
        borrow
          α36
          (ink_env.topics.PrefixedValue
            (core.option.Option ink_primitives.types.AccountId)) in
      let* α38 :=
        deref
          α37
          (ink_env.topics.PrefixedValue
            (core.option.Option ink_primitives.types.AccountId)) in
      let* α39 :=
        borrow
          α38
          (ink_env.topics.PrefixedValue
            (core.option.Option ink_primitives.types.AccountId)) in
      let* α40 :=
        (ink_env.topics.TopicsBuilder S E B)::["push_topic"] α26 α39 in
      (ink_env.topics.TopicsBuilder
            ink_env.topics.state.NoRemainingTopics
            E
            B)::["finish"]
        α40.
    
    Global Instance AssociatedFunction_topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
      Notation.DoubleColon Self "topics" := {
      Notation.double_colon := topics (E := E) (B := B);
    }.
    
    #[refine] Global Instance ℐ : ink_env.topics.Topics.Trait Self := {
      ink_env.topics.Topics.RemainingTopics := RemainingTopics;
      ink_env.topics.Topics.topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :=
        topics (E := E) (B := B);
    }.
    Admitted.
  End Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_topics_Topics_for_erc20_erc20_Transfer.

Module Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.
  Section Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Approval.
    
    Definition RemainingTopics : Set :=
      list ink_env.topics.state.HasRemainingTopics.
    
    Definition topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)}
        (self : ref Self)
        (builder : ink_env.topics.TopicsBuilder ink_env.topics.state.Uninit E B)
        :
          M
            (ink_env.topics.TopicsBuilderBackend.Output
              (Self := B)
              (Trait := ltac:(try clear Trait; hauto l: on))) :=
      let* α0 :=
        (ink_env.topics.TopicsBuilder
              ink_env.topics.state.Uninit
              E
              B)::["build"]
          builder in
      let* α1 :=
        [69, 114, 99, 50, 48, 58, 58, 65, 112, 112, 114, 111, 118, 97, 108] in
      let* α2 := deref α1 (list u8) in
      let* α3 := borrow α2 (list u8) in
      let* α4 := [] in
      let* α5 := deref α4 (list u8) in
      let* α6 := borrow α5 (list u8) in
      let* α7 := pointer_coercion "Unsize" α6 in
      let* α8 :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α3;
            ink_env.topics.PrefixedValue.prefix := α7;
          |} in
      let* α9 := borrow α8 (ink_env.topics.PrefixedValue (list u8)) in
      let* α10 := deref α9 (ink_env.topics.PrefixedValue (list u8)) in
      let* α11 := borrow α10 (ink_env.topics.PrefixedValue (list u8)) in
      let* α12 := (ink_env.topics.TopicsBuilder S E B)::["push_topic"] α0 α11 in
      let* α13 := deref self erc20.erc20.Approval in
      let* α14 := α13.["owner"] in
      let* α15 := borrow α14 ink_primitives.types.AccountId in
      let* α16 := deref α15 ink_primitives.types.AccountId in
      let* α17 := borrow α16 ink_primitives.types.AccountId in
      let* α18 :=
        [69, 114, 99, 50, 48, 58, 58, 65, 112, 112, 114, 111, 118, 97, 108, 58, 58, 111, 119, 110, 101, 114] in
      let* α19 := deref α18 (list u8) in
      let* α20 := borrow α19 (list u8) in
      let* α21 := pointer_coercion "Unsize" α20 in
      let* α22 :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α17;
            ink_env.topics.PrefixedValue.prefix := α21;
          |} in
      let* α23 :=
        borrow
          α22
          (ink_env.topics.PrefixedValue ink_primitives.types.AccountId) in
      let* α24 :=
        deref
          α23
          (ink_env.topics.PrefixedValue ink_primitives.types.AccountId) in
      let* α25 :=
        borrow
          α24
          (ink_env.topics.PrefixedValue ink_primitives.types.AccountId) in
      let* α26 :=
        (ink_env.topics.TopicsBuilder S E B)::["push_topic"] α12 α25 in
      let* α27 := deref self erc20.erc20.Approval in
      let* α28 := α27.["spender"] in
      let* α29 := borrow α28 ink_primitives.types.AccountId in
      let* α30 := deref α29 ink_primitives.types.AccountId in
      let* α31 := borrow α30 ink_primitives.types.AccountId in
      let* α32 :=
        [69, 114, 99, 50, 48, 58, 58, 65, 112, 112, 114, 111, 118, 97, 108, 58, 58, 115, 112, 101, 110, 100, 101, 114] in
      let* α33 := deref α32 (list u8) in
      let* α34 := borrow α33 (list u8) in
      let* α35 := pointer_coercion "Unsize" α34 in
      let* α36 :=
        M.alloc
          {|
            ink_env.topics.PrefixedValue.value := α31;
            ink_env.topics.PrefixedValue.prefix := α35;
          |} in
      let* α37 :=
        borrow
          α36
          (ink_env.topics.PrefixedValue ink_primitives.types.AccountId) in
      let* α38 :=
        deref
          α37
          (ink_env.topics.PrefixedValue ink_primitives.types.AccountId) in
      let* α39 :=
        borrow
          α38
          (ink_env.topics.PrefixedValue ink_primitives.types.AccountId) in
      let* α40 :=
        (ink_env.topics.TopicsBuilder S E B)::["push_topic"] α26 α39 in
      (ink_env.topics.TopicsBuilder
            ink_env.topics.state.NoRemainingTopics
            E
            B)::["finish"]
        α40.
    
    Global Instance AssociatedFunction_topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :
      Notation.DoubleColon Self "topics" := {
      Notation.double_colon := topics (E := E) (B := B);
    }.
    
    #[refine] Global Instance ℐ : ink_env.topics.Topics.Trait Self := {
      ink_env.topics.Topics.RemainingTopics := RemainingTopics;
      ink_env.topics.Topics.topics
        {E B : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E}
        {ℋ_1 : ink_env.topics.TopicsBuilderBackend.Trait B (E := E)} :=
        topics (E := E) (B := B);
    }.
    Admitted.
  End Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_topics_Topics_for_erc20_erc20_Approval.

Module
  Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set := ltac:(erc20.erc20.Balance).
    
    Definition Output : Set := Self.
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition Error : Set :=
      ink.reflect.dispatch.ConstructorOutput.Error
        (Self := ink.reflect.dispatch.ConstructorOutputValue Self).
    
    Definition IS_RESULT : CoqOfRust.core.primitive.bool :=
      M.run
        (Pure
          (ink.reflect.dispatch.ConstructorOutput.IS_RESULT
            (Self :=
              (ink.reflect.dispatch.ConstructorOutputValue
                erc20.erc20.Erc20)))).
    
    Global Instance AssociatedFunction_IS_RESULT :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition CALLABLE : Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (erc20.erc20.Erc20::["new"] __ink_binding_0)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 155 in
        let* α1 := M.alloc 174 in
        let* α2 := M.alloc 157 in
        let* α3 := M.alloc 94 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "new")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableConstructorInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableConstructorInfo.Input := Input;
      ink.reflect.dispatch.DispatchableConstructorInfo.Output := Output;
      ink.reflect.dispatch.DispatchableConstructorInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableConstructorInfo.Error := Error;
      ink.reflect.dispatch.DispatchableConstructorInfo.IS_RESULT := IS_RESULT;
      ink.reflect.dispatch.DispatchableConstructorInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableConstructorInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableConstructorInfo.LABEL := LABEL;
    }.
    Admitted.
  End
    Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableConstructorInfo_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set := unit.
    
    Definition Output : Set := ltac:(erc20.erc20.Balance).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 := deref storage erc20.erc20.Erc20 in
          let* α1 := borrow α0 erc20.erc20.Erc20 in
          erc20.erc20.Erc20::["total_supply"] α1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 219 in
        let* α1 := M.alloc 99 in
        let* α2 := M.alloc 117 in
        let* α3 := M.alloc 168 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "total_supply")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set := ltac:(erc20.erc20.AccountId).
    
    Definition Output : Set := ltac:(erc20.erc20.Balance).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 := deref storage erc20.erc20.Erc20 in
          let* α1 := borrow α0 erc20.erc20.Erc20 in
          erc20.erc20.Erc20::["balance_of"] α1 __ink_binding_0)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 15 in
        let* α1 := M.alloc 117 in
        let* α2 := M.alloc 90 in
        let* α3 := M.alloc 86 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "balance_of")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.AccountId).
    
    Definition Output : Set := ltac:(erc20.erc20.Balance).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 := deref storage erc20.erc20.Erc20 in
          let* α1 := borrow α0 erc20.erc20.Erc20 in
          erc20.erc20.Erc20::["allowance"] α1 __ink_binding_0 __ink_binding_1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 106 in
        let* α1 := M.alloc 0 in
        let* α2 := M.alloc 22 in
        let* α3 := M.alloc 94 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "allowance")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance).
    
    Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 := deref storage erc20.erc20.Erc20 in
          let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
          erc20.erc20.Erc20::["transfer"] α1 __ink_binding_0 __ink_binding_1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 132 in
        let* α1 := M.alloc 161 in
        let* α2 := M.alloc 93 in
        let* α3 := M.alloc 161 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "transfer")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      ltac:(erc20.erc20.AccountId) * ltac:(erc20.erc20.Balance).
    
    Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 := deref storage erc20.erc20.Erc20 in
          let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
          erc20.erc20.Erc20::["approve"] α1 __ink_binding_0 __ink_binding_1)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 104 in
        let* α1 := M.alloc 18 in
        let* α2 := M.alloc 102 in
        let* α3 := M.alloc 160 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "approve")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Input : Set :=
      ltac:(erc20.erc20.AccountId) *
        ltac:(erc20.erc20.AccountId) *
        ltac:(erc20.erc20.Balance).
    
    Definition Output : Set := ltac:(erc20.erc20.Result constr:(unit)).
    
    Definition Storage : Set := erc20.erc20.Erc20.
    
    Definition CALLABLE : (mut_ref Storage) -> Input -> (M Output) :=
      M.run
        (pointer_coercion
          "ClosureFnPointer(Normal)"
          (let* α0 := deref storage erc20.erc20.Erc20 in
          let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
          erc20.erc20.Erc20::["transfer_from"]
            α1
            __ink_binding_0
            __ink_binding_1
            __ink_binding_2)).
    
    Global Instance AssociatedFunction_CALLABLE :
      Notation.DoubleColon Self "CALLABLE" := {
      Notation.double_colon := CALLABLE;
    }.
    
    Definition SELECTOR : list CoqOfRust.core.primitive.u8 :=
      M.run
        (let* α0 := M.alloc 11 in
        let* α1 := M.alloc 57 in
        let* α2 := M.alloc 111 in
        let* α3 := M.alloc 24 in
        Pure [ α0; α1; α2; α3 ]).
    
    Global Instance AssociatedFunction_SELECTOR :
      Notation.DoubleColon Self "SELECTOR" := {
      Notation.double_colon := SELECTOR;
    }.
    
    Definition PAYABLE : CoqOfRust.core.primitive.bool := M.run (M.alloc false).
    
    Global Instance AssociatedFunction_PAYABLE :
      Notation.DoubleColon Self "PAYABLE" := {
      Notation.double_colon := PAYABLE;
    }.
    
    Definition MUTATES : CoqOfRust.core.primitive.bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_MUTATES :
      Notation.DoubleColon Self "MUTATES" := {
      Notation.double_colon := MUTATES;
    }.
    
    Definition LABEL : ref CoqOfRust.core.primitive.str :=
      M.run (Pure (mk_str "transfer_from")).
    
    Global Instance AssociatedFunction_LABEL :
      Notation.DoubleColon Self "LABEL" := {
      Notation.double_colon := LABEL;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DispatchableMessageInfo.Trait Self := {
      ink.reflect.dispatch.DispatchableMessageInfo.Input := Input;
      ink.reflect.dispatch.DispatchableMessageInfo.Output := Output;
      ink.reflect.dispatch.DispatchableMessageInfo.Storage := Storage;
      ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE := CALLABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR := SELECTOR;
      ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE := PAYABLE;
      ink.reflect.dispatch.DispatchableMessageInfo.MUTATES := MUTATES;
      ink.reflect.dispatch.DispatchableMessageInfo.LABEL := LABEL;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_DispatchableMessageInfo_for_erc20_erc20_Erc20.

Module __ink_ConstructorDecoder.
  Inductive t `{ℋ : State.Trait} : Set :=
  |
    Constructor0
    (_
      :
      ink.reflect.dispatch.DispatchableConstructorInfo.Input
        (Self := erc20.erc20.Erc20)).
End __ink_ConstructorDecoder.
Definition __ink_ConstructorDecoder `{ℋ : State.Trait} : Set :=
  __ink_ConstructorDecoder.t.

Module
  Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.
  Section
    Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_ConstructorDecoder.
    
    Definition decode_dispatch
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
        (input : mut_ref I)
        : M (core.result.Result Self ink.reflect.dispatch.DispatchError) :=
      let* α0 := deref input I in
      let* α1 := borrow_mut α0 I in
      let* α2 :=
        (parity_scale_codec.codec.Decode.decode (Self := (list u8))) α1 in
      let* α3 :=
        (core.result.Result T E)::["map_err"]
          α2
          (Pure (ink.reflect.dispatch.DispatchError.InvalidSelector tt)) in
      let* α4 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              (core.result.Result
                (list u8)
                ink.reflect.dispatch.DispatchError)))
          α3 in
      let* α5 :=
        match α4 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20._.__ink_ConstructorDecoder
                    ink.reflect.dispatch.DispatchError)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      match α5 with
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 := (parity_scale_codec.codec.Decode.decode (Self := u128)) α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result u128 ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_ConstructorDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | _invalid =>
        Pure
          (core.result.Result.Err
            (ink.reflect.dispatch.DispatchError.UnknownSelector tt))
      end.
    
    Global Instance AssociatedFunction_decode_dispatch
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
      Notation.DoubleColon Self "decode_dispatch" := {
      Notation.double_colon := decode_dispatch (I := I);
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DecodeDispatch.Trait Self := {
      ink.reflect.dispatch.DecodeDispatch.decode_dispatch
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
        decode_dispatch (I := I);
    }.
    Admitted.
  End
    Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_ConstructorDecoder.

Definition CONSTRUCTOR_0
    `{ℋ : State.Trait}
    : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableConstructorInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Module
  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.
  Section
    Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_ConstructorDecoder.
    
    Definition decode
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
        (input : mut_ref I)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := deref input I in
      let* α1 := borrow_mut α0 I in
      let* α2 :=
        (ink.reflect.dispatch.DecodeDispatch.decode_dispatch
            (Self := erc20.erc20._.__ink_ConstructorDecoder))
          α1 in
      (core.result.Result T E)::["map_err"]
        α2
        (core.convert.Into.into (Self := ink.reflect.dispatch.DispatchError)).
    
    Global Instance AssociatedFunction_decode
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (I := I);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
        decode (I := I);
    }.
    Admitted.
  End
    Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.
  Global Hint Resolve ℐ : core.
End
  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_ConstructorDecoder.

Module
  Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.
  Section
    Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_ConstructorDecoder.
    
    Definition execute_dispatchable
        (self : Self)
        : M (core.result.Result unit ink.reflect.dispatch.DispatchError) :=
      match self with
      | erc20.erc20._.__ink_ConstructorDecoder input =>
        let* _ :=
          let* α0 := M.alloc false in
          let* constructor_0 := M.alloc false in
          let constructor_0 :=
            ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE
              (Self := erc20.erc20.Erc20) in
          let* α0 := or α0 constructor_0 in
          let* α1 :=
            not
              (ink.reflect.dispatch.DispatchableConstructorInfo.PAYABLE
                (Self := erc20.erc20.Erc20)) in
          let* α2 := and α0 α1 in
          let* α3 := use α2 in
          if (α3 : bool) then
            let* _ :=
              let* α0 := ink.codegen.dispatch.execution.deny_payment in
              let* α1 :=
                (core.ops.try_trait.Try.branch
                    (Self :=
                      (core.result.Result
                        unit
                        ink.reflect.dispatch.DispatchError)))
                  α0 in
              match α1 with
              | core.ops.control_flow.ControlFlow residual =>
                let* α0 :=
                  (core.ops.try_trait.FromResidual.from_residual
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    residual in
                let* α1 := Return α0 in
                never_to_any α1
              | core.ops.control_flow.ControlFlow val => Pure val
              end in
            M.alloc tt
          else
            M.alloc tt in
        let* result :=
          (ink.reflect.dispatch.DispatchableConstructorInfo.CALLABLE
              (Self := erc20.erc20.Erc20))
            input in
        let* output_value :=
          (ink.reflect.dispatch.ConstructorOutputValue T)::["new"] result in
        let* output_result :=
          let* α0 :=
            borrow
              output_value
              (ink.reflect.dispatch.ConstructorOutputValue erc20.erc20.Erc20) in
          let* α1 :=
            deref
              α0
              (ink.reflect.dispatch.ConstructorOutputValue erc20.erc20.Erc20) in
          let* α2 :=
            borrow
              α1
              (ink.reflect.dispatch.ConstructorOutputValue erc20.erc20.Erc20) in
          (ink.reflect.dispatch.ConstructorOutput.as_result
              (Self :=
                (ink.reflect.dispatch.ConstructorOutputValue
                  erc20.erc20.Erc20)))
            α2 in
        let* _ :=
          let* α0 :=
            borrow
              output_result
              (core.result.Result (ref erc20.erc20.Erc20) (ref (ref unit))) in
          let* α1 := (core.result.Result T E)::["as_ref"] α0 in
          let* α2 := let_if core.result.Result contract := α1 in
          if (α2 : bool) then
            let* _ :=
              let* α0 :=
                borrow
                  (ink_storage_traits.storage.StorageKey.KEY
                    (Self := erc20.erc20.Erc20))
                  u32 in
              let* α1 := deref α0 u32 in
              let* α2 := borrow α1 u32 in
              let* α3 := deref contract (ref erc20.erc20.Erc20) in
              let* α4 := deref α3 erc20.erc20.Erc20 in
              let* α5 := borrow α4 erc20.erc20.Erc20 in
              ink_env.api.set_contract_storage α2 α5 in
            M.alloc tt
          else
            M.alloc tt in
        let* _ :=
          let* α0 :=
            borrow
              output_result
              (core.result.Result (ref erc20.erc20.Erc20) (ref (ref unit))) in
          let* α1 := (core.result.Result T E)::["is_err"] α0 in
          let* α2 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              α1 in
          let* α3 :=
            (core.result.Result T E)::["map"] output_result (M.alloc tt) in
          let* α4 := "unimplemented parent_kind" α3 in
          let* α5 :=
            borrow
              α4
              (core.result.Result
                (core.result.Result unit (ref (ref unit)))
                ink_primitives.LangError) in
          let* α6 :=
            deref
              α5
              (core.result.Result
                (core.result.Result unit (ref (ref unit)))
                ink_primitives.LangError) in
          let* α7 :=
            borrow
              α6
              (core.result.Result
                (core.result.Result unit (ref (ref unit)))
                ink_primitives.LangError) in
          ink_env.api.return_value α2 α7 in
        let* α0 := M.alloc tt in
        never_to_any α0
      end.
    
    Global Instance AssociatedFunction_execute_dispatchable :
      Notation.DoubleColon Self "execute_dispatchable" := {
      Notation.double_colon := execute_dispatchable;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.ExecuteDispatchable.Trait Self := {
      ink.reflect.dispatch.ExecuteDispatchable.execute_dispatchable :=
        execute_dispatchable;
    }.
    Admitted.
  End
    Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_ConstructorDecoder.

Module
  Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Type_ : Set := erc20.erc20._.__ink_ConstructorDecoder.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.ContractConstructorDecoder.Trait Self := {
      ink.reflect.dispatch.ContractConstructorDecoder.Type_ := Type_;
    }.
    Admitted.
  End
    Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_ContractConstructorDecoder_for_erc20_erc20_Erc20.

Module __ink_MessageDecoder.
  Inductive t `{ℋ : State.Trait} : Set :=
  |
    Message0
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message1
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message2
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message3
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message4
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20))
  |
    Message5
    (_
      :
      ink.reflect.dispatch.DispatchableMessageInfo.Input
        (Self := erc20.erc20.Erc20)).
End __ink_MessageDecoder.
Definition __ink_MessageDecoder `{ℋ : State.Trait} : Set :=
  __ink_MessageDecoder.t.

Module
  Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.
  Section
    Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_MessageDecoder.
    
    Definition decode_dispatch
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
        (input : mut_ref I)
        : M (core.result.Result Self ink.reflect.dispatch.DispatchError) :=
      let* α0 := deref input I in
      let* α1 := borrow_mut α0 I in
      let* α2 :=
        (parity_scale_codec.codec.Decode.decode (Self := (list u8))) α1 in
      let* α3 :=
        (core.result.Result T E)::["map_err"]
          α2
          (Pure (ink.reflect.dispatch.DispatchError.InvalidSelector tt)) in
      let* α4 :=
        (core.ops.try_trait.Try.branch
            (Self :=
              (core.result.Result
                (list u8)
                ink.reflect.dispatch.DispatchError)))
          α3 in
      let* α5 :=
        match α4 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20._.__ink_MessageDecoder
                    ink.reflect.dispatch.DispatchError)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      match α5 with
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 := (parity_scale_codec.codec.Decode.decode (Self := unit)) α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result unit ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 :=
          (parity_scale_codec.codec.Decode.decode
              (Self := ink_primitives.types.AccountId))
            α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result
                  ink_primitives.types.AccountId
                  ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 :=
          (parity_scale_codec.codec.Decode.decode
              (Self :=
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId)))
            α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId)
                  ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 :=
          (parity_scale_codec.codec.Decode.decode
              (Self := (ink_primitives.types.AccountId * u128)))
            α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result
                  (ink_primitives.types.AccountId * u128)
                  ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 :=
          (parity_scale_codec.codec.Decode.decode
              (Self := (ink_primitives.types.AccountId * u128)))
            α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result
                  (ink_primitives.types.AccountId * u128)
                  ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | [_; _; _; _] =>
        let* α0 := deref input I in
        let* α1 := borrow_mut α0 I in
        let* α2 :=
          (parity_scale_codec.codec.Decode.decode
              (Self :=
                (ink_primitives.types.AccountId *
                  ink_primitives.types.AccountId *
                  u128)))
            α1 in
        let* α3 :=
          (core.result.Result T E)::["map_err"]
            α2
            (Pure (ink.reflect.dispatch.DispatchError.InvalidParameters tt)) in
        let* α4 :=
          (core.ops.try_trait.Try.branch
              (Self :=
                (core.result.Result
                  (ink_primitives.types.AccountId *
                    ink_primitives.types.AccountId *
                    u128)
                  ink.reflect.dispatch.DispatchError)))
            α3 in
        let* α5 :=
          match α4 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      erc20.erc20._.__ink_MessageDecoder
                      ink.reflect.dispatch.DispatchError)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        let* α6 := "unimplemented parent_kind" α5 in
        Pure (core.result.Result.Ok α6)
      | _invalid =>
        Pure
          (core.result.Result.Err
            (ink.reflect.dispatch.DispatchError.UnknownSelector tt))
      end.
    
    Global Instance AssociatedFunction_decode_dispatch
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
      Notation.DoubleColon Self "decode_dispatch" := {
      Notation.double_colon := decode_dispatch (I := I);
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.DecodeDispatch.Trait Self := {
      ink.reflect.dispatch.DecodeDispatch.decode_dispatch
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
        decode_dispatch (I := I);
    }.
    Admitted.
  End
    Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_reflect_dispatch_DecodeDispatch_for_erc20_erc20_____ink_MessageDecoder.

Definition MESSAGE_0 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Definition MESSAGE_1 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Definition MESSAGE_2 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Definition MESSAGE_3 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Definition MESSAGE_4 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Definition MESSAGE_5 `{ℋ : State.Trait} : array CoqOfRust.core.primitive.u8 :=
  M.run
    (Pure
      (ink.reflect.dispatch.DispatchableMessageInfo.SELECTOR
        (Self := erc20.erc20.Erc20))).

Module
  Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.
  Section
    Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_MessageDecoder.
    
    Definition decode
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I}
        (input : mut_ref I)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := deref input I in
      let* α1 := borrow_mut α0 I in
      let* α2 :=
        (ink.reflect.dispatch.DecodeDispatch.decode_dispatch
            (Self := erc20.erc20._.__ink_MessageDecoder))
          α1 in
      (core.result.Result T E)::["map_err"]
        α2
        (core.convert.Into.into (Self := ink.reflect.dispatch.DispatchError)).
    
    Global Instance AssociatedFunction_decode
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (I := I);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {I : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :=
        decode (I := I);
    }.
    Admitted.
  End
    Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_____ink_MessageDecoder.

Definition push_contract
    `{ℋ : State.Trait}
    (contract : core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)
    (mutates : bool)
    : M unit :=
  let* α0 := use mutates in
  if (α0 : bool) then
    let* _ :=
      let* α0 :=
        borrow
          (ink_storage_traits.storage.StorageKey.KEY
            (Self := erc20.erc20.Erc20))
          u32 in
      let* α1 := deref α0 u32 in
      let* α2 := borrow α1 u32 in
      let* α3 :=
        borrow
          contract
          (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
      let* α4 :=
        deref α3 (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
      let* α5 :=
        borrow α4 (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
      let* α6 :=
        (core.ops.deref.Deref.deref
            (Self := (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
          α5 in
      let* α7 := deref α6 erc20.erc20.Erc20 in
      let* α8 := borrow α7 erc20.erc20.Erc20 in
      ink_env.api.set_contract_storage α2 α8 in
    M.alloc tt
  else
    M.alloc tt.

Module
  Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.
  Section
    Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.__ink_MessageDecoder.
    
    Definition execute_dispatchable
        (self : Self)
        : M (core.result.Result unit ink.reflect.dispatch.DispatchError) :=
      let key :=
        ink_storage_traits.storage.StorageKey.KEY (Self := erc20.erc20.Erc20) in
      let* contract :=
        let* α0 := borrow key u32 in
        let* α1 := deref α0 u32 in
        let* α2 := borrow α1 u32 in
        let* α3 := ink_env.api.get_contract_storage α2 in
        let* α4 :=
          match α3 with
          | core.result.Result core.option.Option value => Pure value
          | core.result.Result core.option.Option  =>
            let* α0 :=
              borrow [ mk_str "storage entry was empty" ] (list (ref str)) in
            let* α1 := deref α0 (list (ref str)) in
            let* α2 := borrow α1 (list (ref str)) in
            let* α3 := pointer_coercion "Unsize" α2 in
            let* α4 := core.fmt.Arguments::["new_const"] α3 in
            let* α5 := core.panicking.panic_fmt α4 in
            never_to_any α5
          | core.result.Result _ =>
            let* α0 :=
              borrow
                [ mk_str "could not properly decode storage entry" ]
                (list (ref str)) in
            let* α1 := deref α0 (list (ref str)) in
            let* α2 := borrow α1 (list (ref str)) in
            let* α3 := pointer_coercion "Unsize" α2 in
            let* α4 := core.fmt.Arguments::["new_const"] α3 in
            let* α5 := core.panicking.panic_fmt α4 in
            never_to_any α5
          end in
        (core.mem.manually_drop.ManuallyDrop T)::["new"] α4 in
      let* _ :=
        match self with
        | erc20.erc20._.__ink_MessageDecoder input =>
          let* _ :=
            let* α0 := M.alloc false in
            let* message_0 := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α1 := or α0 message_0 in
            let* message_1 := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α2 := or α1 message_1 in
            let* message_2 := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α3 := or α2 message_2 in
            let* message_3 := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α4 := or α3 message_3 in
            let* message_4 := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α5 := or α4 message_4 in
            let* message_5 := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α0 := or α5 message_5 in
            let* α1 :=
              not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)) in
            let* α2 := and α0 α1 in
            let* α3 := use α2 in
            if (α3 : bool) then
              let* _ :=
                let* α0 := ink.codegen.dispatch.execution.deny_payment in
                let* α1 :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    α0 in
                match α1 with
                | core.ops.control_flow.ControlFlow residual =>
                  let* α0 :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          (core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)))
                      residual in
                  let* α1 := Return α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow val => Pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result :=
            let* α0 :=
              borrow_mut
                contract
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α1 :=
              deref
                α0
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α2 :=
              borrow_mut
                α1
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α3 :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
                α2 in
            let* α4 := deref α3 erc20.erc20.Erc20 in
            let* α5 := borrow_mut α4 erc20.erc20.Erc20 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20))
              α5
              input in
          let* is_reverted :=
            let* α0 := borrow result u128 in
            let* α1 := deref α0 u128 in
            let* α2 := borrow α1 u128 in
            let* α3 :=
              borrow
                (ink.result_info.IsResultErr.Build_t α2)
                (ink.result_info.IsResultErr u128) in
            let* α0 :=
              (ink.result_info.IsResultErrFallback.value
                  (Self := (ink.result_info.IsResultErr u128)))
                α3 in
            and
              (ink.result_info.IsResultTypeFallback.VALUE
                (Self := (ink.result_info.IsResultType u128)))
              α0 in
          let* _ :=
            let* α0 := not is_reverted in
            let* α1 := use α0 in
            if (α1 : bool) then
              let* _ :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)) in
              M.alloc tt
            else
              M.alloc tt in
          let* α0 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let* α1 := "unimplemented parent_kind" result in
          let* α2 :=
            borrow α1 (core.result.Result u128 ink_primitives.LangError) in
          let* α3 :=
            deref α2 (core.result.Result u128 ink_primitives.LangError) in
          let* α4 :=
            borrow α3 (core.result.Result u128 ink_primitives.LangError) in
          let* α5 := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder input =>
          let* _ :=
            let* α0 := M.alloc false in
            let* message_0 := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α1 := or α0 message_0 in
            let* message_1 := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α2 := or α1 message_1 in
            let* message_2 := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α3 := or α2 message_2 in
            let* message_3 := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α4 := or α3 message_3 in
            let* message_4 := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α5 := or α4 message_4 in
            let* message_5 := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α0 := or α5 message_5 in
            let* α1 :=
              not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)) in
            let* α2 := and α0 α1 in
            let* α3 := use α2 in
            if (α3 : bool) then
              let* _ :=
                let* α0 := ink.codegen.dispatch.execution.deny_payment in
                let* α1 :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    α0 in
                match α1 with
                | core.ops.control_flow.ControlFlow residual =>
                  let* α0 :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          (core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)))
                      residual in
                  let* α1 := Return α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow val => Pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result :=
            let* α0 :=
              borrow_mut
                contract
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α1 :=
              deref
                α0
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α2 :=
              borrow_mut
                α1
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α3 :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
                α2 in
            let* α4 := deref α3 erc20.erc20.Erc20 in
            let* α5 := borrow_mut α4 erc20.erc20.Erc20 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20))
              α5
              input in
          let* is_reverted :=
            let* α0 := borrow result u128 in
            let* α1 := deref α0 u128 in
            let* α2 := borrow α1 u128 in
            let* α3 :=
              borrow
                (ink.result_info.IsResultErr.Build_t α2)
                (ink.result_info.IsResultErr u128) in
            let* α0 :=
              (ink.result_info.IsResultErrFallback.value
                  (Self := (ink.result_info.IsResultErr u128)))
                α3 in
            and
              (ink.result_info.IsResultTypeFallback.VALUE
                (Self := (ink.result_info.IsResultType u128)))
              α0 in
          let* _ :=
            let* α0 := not is_reverted in
            let* α1 := use α0 in
            if (α1 : bool) then
              let* _ :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)) in
              M.alloc tt
            else
              M.alloc tt in
          let* α0 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let* α1 := "unimplemented parent_kind" result in
          let* α2 :=
            borrow α1 (core.result.Result u128 ink_primitives.LangError) in
          let* α3 :=
            deref α2 (core.result.Result u128 ink_primitives.LangError) in
          let* α4 :=
            borrow α3 (core.result.Result u128 ink_primitives.LangError) in
          let* α5 := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder input =>
          let* _ :=
            let* α0 := M.alloc false in
            let* message_0 := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α1 := or α0 message_0 in
            let* message_1 := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α2 := or α1 message_1 in
            let* message_2 := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α3 := or α2 message_2 in
            let* message_3 := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α4 := or α3 message_3 in
            let* message_4 := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α5 := or α4 message_4 in
            let* message_5 := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α0 := or α5 message_5 in
            let* α1 :=
              not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)) in
            let* α2 := and α0 α1 in
            let* α3 := use α2 in
            if (α3 : bool) then
              let* _ :=
                let* α0 := ink.codegen.dispatch.execution.deny_payment in
                let* α1 :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    α0 in
                match α1 with
                | core.ops.control_flow.ControlFlow residual =>
                  let* α0 :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          (core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)))
                      residual in
                  let* α1 := Return α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow val => Pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result :=
            let* α0 :=
              borrow_mut
                contract
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α1 :=
              deref
                α0
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α2 :=
              borrow_mut
                α1
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α3 :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
                α2 in
            let* α4 := deref α3 erc20.erc20.Erc20 in
            let* α5 := borrow_mut α4 erc20.erc20.Erc20 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20))
              α5
              input in
          let* is_reverted :=
            let* α0 := borrow result u128 in
            let* α1 := deref α0 u128 in
            let* α2 := borrow α1 u128 in
            let* α3 :=
              borrow
                (ink.result_info.IsResultErr.Build_t α2)
                (ink.result_info.IsResultErr u128) in
            let* α0 :=
              (ink.result_info.IsResultErrFallback.value
                  (Self := (ink.result_info.IsResultErr u128)))
                α3 in
            and
              (ink.result_info.IsResultTypeFallback.VALUE
                (Self := (ink.result_info.IsResultType u128)))
              α0 in
          let* _ :=
            let* α0 := not is_reverted in
            let* α1 := use α0 in
            if (α1 : bool) then
              let* _ :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)) in
              M.alloc tt
            else
              M.alloc tt in
          let* α0 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let* α1 := "unimplemented parent_kind" result in
          let* α2 :=
            borrow α1 (core.result.Result u128 ink_primitives.LangError) in
          let* α3 :=
            deref α2 (core.result.Result u128 ink_primitives.LangError) in
          let* α4 :=
            borrow α3 (core.result.Result u128 ink_primitives.LangError) in
          let* α5 := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder input =>
          let* _ :=
            let* α0 := M.alloc false in
            let* message_0 := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α1 := or α0 message_0 in
            let* message_1 := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α2 := or α1 message_1 in
            let* message_2 := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α3 := or α2 message_2 in
            let* message_3 := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α4 := or α3 message_3 in
            let* message_4 := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α5 := or α4 message_4 in
            let* message_5 := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α0 := or α5 message_5 in
            let* α1 :=
              not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)) in
            let* α2 := and α0 α1 in
            let* α3 := use α2 in
            if (α3 : bool) then
              let* _ :=
                let* α0 := ink.codegen.dispatch.execution.deny_payment in
                let* α1 :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    α0 in
                match α1 with
                | core.ops.control_flow.ControlFlow residual =>
                  let* α0 :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          (core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)))
                      residual in
                  let* α1 := Return α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow val => Pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result :=
            let* α0 :=
              borrow_mut
                contract
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α1 :=
              deref
                α0
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α2 :=
              borrow_mut
                α1
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α3 :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
                α2 in
            let* α4 := deref α3 erc20.erc20.Erc20 in
            let* α5 := borrow_mut α4 erc20.erc20.Erc20 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20))
              α5
              input in
          let* is_reverted :=
            let* α0 :=
              borrow result (core.result.Result unit erc20.erc20.Error) in
            let* α1 := deref α0 (core.result.Result unit erc20.erc20.Error) in
            let* α2 := borrow α1 (core.result.Result unit erc20.erc20.Error) in
            let* α3 :=
              borrow
                (ink.result_info.IsResultErr.Build_t α2)
                (ink.result_info.IsResultErr
                  (core.result.Result unit erc20.erc20.Error)) in
            let* α0 :=
              (ink.result_info.IsResultErr (core.result.Result T E))::["value"]
                α3 in
            and (ink.result_info.VALUE (Self := unit)) α0 in
          let* _ :=
            let* α0 := not is_reverted in
            let* α1 := use α0 in
            if (α1 : bool) then
              let* _ :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)) in
              M.alloc tt
            else
              M.alloc tt in
          let* α0 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let* α1 := "unimplemented parent_kind" result in
          let* α2 :=
            borrow
              α1
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α3 :=
            deref
              α2
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α4 :=
            borrow
              α3
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α5 := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder input =>
          let* _ :=
            let* α0 := M.alloc false in
            let* message_0 := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α1 := or α0 message_0 in
            let* message_1 := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α2 := or α1 message_1 in
            let* message_2 := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α3 := or α2 message_2 in
            let* message_3 := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α4 := or α3 message_3 in
            let* message_4 := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α5 := or α4 message_4 in
            let* message_5 := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α0 := or α5 message_5 in
            let* α1 :=
              not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)) in
            let* α2 := and α0 α1 in
            let* α3 := use α2 in
            if (α3 : bool) then
              let* _ :=
                let* α0 := ink.codegen.dispatch.execution.deny_payment in
                let* α1 :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    α0 in
                match α1 with
                | core.ops.control_flow.ControlFlow residual =>
                  let* α0 :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          (core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)))
                      residual in
                  let* α1 := Return α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow val => Pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result :=
            let* α0 :=
              borrow_mut
                contract
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α1 :=
              deref
                α0
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α2 :=
              borrow_mut
                α1
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α3 :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
                α2 in
            let* α4 := deref α3 erc20.erc20.Erc20 in
            let* α5 := borrow_mut α4 erc20.erc20.Erc20 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20))
              α5
              input in
          let* is_reverted :=
            let* α0 :=
              borrow result (core.result.Result unit erc20.erc20.Error) in
            let* α1 := deref α0 (core.result.Result unit erc20.erc20.Error) in
            let* α2 := borrow α1 (core.result.Result unit erc20.erc20.Error) in
            let* α3 :=
              borrow
                (ink.result_info.IsResultErr.Build_t α2)
                (ink.result_info.IsResultErr
                  (core.result.Result unit erc20.erc20.Error)) in
            let* α0 :=
              (ink.result_info.IsResultErr (core.result.Result T E))::["value"]
                α3 in
            and (ink.result_info.VALUE (Self := unit)) α0 in
          let* _ :=
            let* α0 := not is_reverted in
            let* α1 := use α0 in
            if (α1 : bool) then
              let* _ :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)) in
              M.alloc tt
            else
              M.alloc tt in
          let* α0 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let* α1 := "unimplemented parent_kind" result in
          let* α2 :=
            borrow
              α1
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α3 :=
            deref
              α2
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α4 :=
            borrow
              α3
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α5 := ink_env.api.return_value α0 α4 in
          never_to_any α5
        | erc20.erc20._.__ink_MessageDecoder input =>
          let* _ :=
            let* α0 := M.alloc false in
            let* message_0 := M.alloc false in
            let message_0 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α1 := or α0 message_0 in
            let* message_1 := M.alloc false in
            let message_1 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α2 := or α1 message_1 in
            let* message_2 := M.alloc false in
            let message_2 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α3 := or α2 message_2 in
            let* message_3 := M.alloc false in
            let message_3 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α4 := or α3 message_3 in
            let* message_4 := M.alloc false in
            let message_4 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α5 := or α4 message_4 in
            let* message_5 := M.alloc false in
            let message_5 :=
              ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                (Self := erc20.erc20.Erc20) in
            let* α0 := or α5 message_5 in
            let* α1 :=
              not
                (ink.reflect.dispatch.DispatchableMessageInfo.PAYABLE
                  (Self := erc20.erc20.Erc20)) in
            let* α2 := and α0 α1 in
            let* α3 := use α2 in
            if (α3 : bool) then
              let* _ :=
                let* α0 := ink.codegen.dispatch.execution.deny_payment in
                let* α1 :=
                  (core.ops.try_trait.Try.branch
                      (Self :=
                        (core.result.Result
                          unit
                          ink.reflect.dispatch.DispatchError)))
                    α0 in
                match α1 with
                | core.ops.control_flow.ControlFlow residual =>
                  let* α0 :=
                    (core.ops.try_trait.FromResidual.from_residual
                        (Self :=
                          (core.result.Result
                            unit
                            ink.reflect.dispatch.DispatchError)))
                      residual in
                  let* α1 := Return α0 in
                  never_to_any α1
                | core.ops.control_flow.ControlFlow val => Pure val
                end in
              M.alloc tt
            else
              M.alloc tt in
          let* result :=
            let* α0 :=
              borrow_mut
                contract
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α1 :=
              deref
                α0
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α2 :=
              borrow_mut
                α1
                (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20) in
            let* α3 :=
              (core.ops.deref.DerefMut.deref_mut
                  (Self :=
                    (core.mem.manually_drop.ManuallyDrop erc20.erc20.Erc20)))
                α2 in
            let* α4 := deref α3 erc20.erc20.Erc20 in
            let* α5 := borrow_mut α4 erc20.erc20.Erc20 in
            (ink.reflect.dispatch.DispatchableMessageInfo.CALLABLE
                (Self := erc20.erc20.Erc20))
              α5
              input in
          let* is_reverted :=
            let* α0 :=
              borrow result (core.result.Result unit erc20.erc20.Error) in
            let* α1 := deref α0 (core.result.Result unit erc20.erc20.Error) in
            let* α2 := borrow α1 (core.result.Result unit erc20.erc20.Error) in
            let* α3 :=
              borrow
                (ink.result_info.IsResultErr.Build_t α2)
                (ink.result_info.IsResultErr
                  (core.result.Result unit erc20.erc20.Error)) in
            let* α0 :=
              (ink.result_info.IsResultErr (core.result.Result T E))::["value"]
                α3 in
            and (ink.result_info.VALUE (Self := unit)) α0 in
          let* _ :=
            let* α0 := not is_reverted in
            let* α1 := use α0 in
            if (α1 : bool) then
              let* _ :=
                "unimplemented parent_kind"
                  contract
                  (ink.reflect.dispatch.DispatchableMessageInfo.MUTATES
                    (Self := erc20.erc20.Erc20)) in
              M.alloc tt
            else
              M.alloc tt in
          let* α0 :=
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.ReturnFlags::["new_with_reverted"]
              is_reverted in
          let* α1 := "unimplemented parent_kind" result in
          let* α2 :=
            borrow
              α1
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α3 :=
            deref
              α2
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α4 :=
            borrow
              α3
              (core.result.Result
                (core.result.Result unit erc20.erc20.Error)
                ink_primitives.LangError) in
          let* α5 := ink_env.api.return_value α0 α4 in
          never_to_any α5
        end in
      let* α0 := M.alloc tt in
      never_to_any α0.
    
    Global Instance AssociatedFunction_execute_dispatchable :
      Notation.DoubleColon Self "execute_dispatchable" := {
      Notation.double_colon := execute_dispatchable;
    }.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.ExecuteDispatchable.Trait Self := {
      ink.reflect.dispatch.ExecuteDispatchable.execute_dispatchable :=
        execute_dispatchable;
    }.
    Admitted.
  End
    Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_reflect_dispatch_ExecuteDispatchable_for_erc20_erc20_____ink_MessageDecoder.

Module Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.
  Section
    Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Type_ : Set := erc20.erc20._.__ink_MessageDecoder.
    
    #[refine] Global Instance ℐ :
      ink.reflect.dispatch.ContractMessageDecoder.Trait Self := {
      ink.reflect.dispatch.ContractMessageDecoder.Type_ := Type_;
    }.
    Admitted.
  End Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_reflect_dispatch_ContractMessageDecoder_for_erc20_erc20_Erc20.

Definition _
    `{ℋ : State.Trait}
    : ink.codegen.utils.same_type.IsSameType erc20.erc20.Erc20 :=
  M.run (ink.codegen.utils.same_type.IsSameType erc20.erc20.Erc20)::["new"].

Module Impl_erc20_erc20_Erc20_29.
  Section Impl_erc20_erc20_Erc20_29.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition new (total_supply : ltac:(erc20.erc20.Balance)) : M Self :=
      let* balances :=
        core.default.Default.default
          (Self :=
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) in
      let* caller :=
        let* α0 := ink.codegen.env.StaticEnv.env (Self := erc20.erc20.Erc20) in
        (ink.env_access.EnvAccess E)::["caller"] α0 in
      let* _ :=
        let* α0 :=
          borrow_mut
            balances
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit))) in
        let* α1 := borrow total_supply u128 in
        let* α2 := deref α1 u128 in
        let* α3 := borrow α2 u128 in
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["insert"]
          α0
          caller
          α3 in
      let* _ :=
        let* α0 := ink.codegen.env.StaticEnv.env (Self := erc20.erc20.Erc20) in
        let* α1 :=
          M.alloc
            {|
              erc20.erc20.Transfer.from := core.option.Option.None tt;
              erc20.erc20.Transfer.to := core.option.Option.Some caller;
              erc20.erc20.Transfer.value := total_supply;
            |} in
        (ink.codegen.event.emit.EmitEvent.emit_event
            (Self :=
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)))
          α0
          α1 in
      let* α0 :=
        core.default.Default.default
          (Self :=
            (ink_storage.lazy.mapping.Mapping
              (ink_primitives.types.AccountId * ink_primitives.types.AccountId)
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit)))) in
      M.alloc
        {|
          erc20.erc20.Erc20.total_supply := total_supply;
          erc20.erc20.Erc20.balances := balances;
          erc20.erc20.Erc20.allowances := α0;
        |}.
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition total_supply (self : ref Self) : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20 in
      α0.["total_supply"].
    
    Global Instance AssociatedFunction_total_supply :
      Notation.DoubleColon Self "total_supply" := {
      Notation.double_colon := total_supply;
    }.
    
    Definition balance_of
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20 in
      let* α1 := borrow α0 erc20.erc20.Erc20 in
      let* α2 := borrow owner ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α4 := borrow α3 ink_primitives.types.AccountId in
      erc20.erc20.Erc20::["balance_of_impl"] α1 α4.
    
    Global Instance AssociatedFunction_balance_of :
      Notation.DoubleColon Self "balance_of" := {
      Notation.double_colon := balance_of;
    }.
    
    Definition allowance
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        (spender : ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20 in
      let* α1 := borrow α0 erc20.erc20.Erc20 in
      let* α2 := borrow owner ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α4 := borrow α3 ink_primitives.types.AccountId in
      let* α5 := borrow spender ink_primitives.types.AccountId in
      let* α6 := deref α5 ink_primitives.types.AccountId in
      let* α7 := borrow α6 ink_primitives.types.AccountId in
      erc20.erc20.Erc20::["allowance_impl"] α1 α4 α7.
    
    Global Instance AssociatedFunction_allowance :
      Notation.DoubleColon Self "allowance" := {
      Notation.double_colon := allowance;
    }.
    
    Definition transfer
        (self : mut_ref Self)
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* from :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 :=
          (ink.codegen.env.Env.env (Self := (ref erc20.erc20.Erc20))) α1 in
        (ink.env_access.EnvAccess E)::["caller"] α2 in
      let* α0 := deref self erc20.erc20.Erc20 in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
      let* α2 := borrow from ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α4 := borrow α3 ink_primitives.types.AccountId in
      let* α5 := borrow to ink_primitives.types.AccountId in
      let* α6 := deref α5 ink_primitives.types.AccountId in
      let* α7 := borrow α6 ink_primitives.types.AccountId in
      erc20.erc20.Erc20::["transfer_from_to"] α1 α4 α7 value.
    
    Global Instance AssociatedFunction_transfer :
      Notation.DoubleColon Self "transfer" := {
      Notation.double_colon := transfer;
    }.
    
    Definition approve
        (self : mut_ref Self)
        (spender : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* owner :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 :=
          (ink.codegen.env.Env.env (Self := (ref erc20.erc20.Erc20))) α1 in
        (ink.env_access.EnvAccess E)::["caller"] α2 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := α0.["allowances"] in
        let* α2 :=
          borrow_mut
            α1
            (ink_storage.lazy.mapping.Mapping
              (ink_primitives.types.AccountId * ink_primitives.types.AccountId)
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit))) in
        let* α3 := borrow owner ink_primitives.types.AccountId in
        let* α4 := borrow spender ink_primitives.types.AccountId in
        let* α5 := borrow value u128 in
        let* α6 := deref α5 u128 in
        let* α7 := borrow α6 u128 in
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["insert"]
          α2
          (α3, α4)
          α7 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 :=
          (ink.codegen.env.Env.env (Self := (ref erc20.erc20.Erc20))) α1 in
        let* α3 :=
          M.alloc
            {|
              erc20.erc20.Approval.owner := owner;
              erc20.erc20.Approval.spender := spender;
              erc20.erc20.Approval.value := value;
            |} in
        (ink.codegen.event.emit.EmitEvent.emit_event
            (Self :=
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)))
          α2
          α3 in
      let* α0 := M.alloc tt in
      Pure (core.result.Result.Ok α0).
    
    Global Instance AssociatedFunction_approve :
      Notation.DoubleColon Self "approve" := {
      Notation.double_colon := approve;
    }.
    
    Definition transfer_from
        (self : mut_ref Self)
        (from : ltac:(erc20.erc20.AccountId))
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* caller :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 :=
          (ink.codegen.env.Env.env (Self := (ref erc20.erc20.Erc20))) α1 in
        (ink.env_access.EnvAccess E)::["caller"] α2 in
      let* allowance :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 := borrow from ink_primitives.types.AccountId in
        let* α3 := deref α2 ink_primitives.types.AccountId in
        let* α4 := borrow α3 ink_primitives.types.AccountId in
        let* α5 := borrow caller ink_primitives.types.AccountId in
        let* α6 := deref α5 ink_primitives.types.AccountId in
        let* α7 := borrow α6 ink_primitives.types.AccountId in
        erc20.erc20.Erc20::["allowance_impl"] α1 α4 α7 in
      let* _ :=
        let* α0 := lt allowance value in
        let* α1 := use α0 in
        if (α1 : bool) then
          let* α0 :=
            Return
              (core.result.Result.Err
                (erc20.erc20.Error.InsufficientAllowance tt)) in
          never_to_any α0
        else
          M.alloc tt in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow_mut α0 erc20.erc20.Erc20 in
        let* α2 := borrow from ink_primitives.types.AccountId in
        let* α3 := deref α2 ink_primitives.types.AccountId in
        let* α4 := borrow α3 ink_primitives.types.AccountId in
        let* α5 := borrow to ink_primitives.types.AccountId in
        let* α6 := deref α5 ink_primitives.types.AccountId in
        let* α7 := borrow α6 ink_primitives.types.AccountId in
        let* α8 := erc20.erc20.Erc20::["transfer_from_to"] α1 α4 α7 value in
        let* α9 :=
          (core.ops.try_trait.Try.branch
              (Self := (core.result.Result unit erc20.erc20.Error)))
            α8 in
        match α9 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self := (core.result.Result unit erc20.erc20.Error)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := α0.["allowances"] in
        let* α2 :=
          borrow_mut
            α1
            (ink_storage.lazy.mapping.Mapping
              (ink_primitives.types.AccountId * ink_primitives.types.AccountId)
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit))) in
        let* α3 := borrow from ink_primitives.types.AccountId in
        let* α4 := borrow caller ink_primitives.types.AccountId in
        let* α5 := sub allowance value in
        let* α6 := borrow α5 u128 in
        let* α7 := deref α6 u128 in
        let* α8 := borrow α7 u128 in
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["insert"]
          α2
          (α3, α4)
          α8 in
      let* α0 := M.alloc tt in
      Pure (core.result.Result.Ok α0).
    
    Global Instance AssociatedFunction_transfer_from :
      Notation.DoubleColon Self "transfer_from" := {
      Notation.double_colon := transfer_from;
    }.
    
    Definition balance_of_impl
        (self : ref Self)
        (owner : ref ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20 in
      let* α1 := α0.["balances"] in
      let* α2 :=
        borrow
          α1
          (ink_storage.lazy.mapping.Mapping
            ink_primitives.types.AccountId
            u128
            (ink_storage_traits.impls.ResolverKey
              ink_storage_traits.impls.AutoKey
              (ink_storage_traits.impls.ManualKey unit))) in
      let* α3 :=
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["get"] α2 owner in
      (core.option.Option T)::["unwrap_or_default"] α3.
    
    Global Instance AssociatedFunction_balance_of_impl :
      Notation.DoubleColon Self "balance_of_impl" := {
      Notation.double_colon := balance_of_impl;
    }.
    
    Definition allowance_impl
        (self : ref Self)
        (owner : ref ltac:(erc20.erc20.AccountId))
        (spender : ref ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20 in
      let* α1 := α0.["allowances"] in
      let* α2 :=
        borrow
          α1
          (ink_storage.lazy.mapping.Mapping
            (ink_primitives.types.AccountId * ink_primitives.types.AccountId)
            u128
            (ink_storage_traits.impls.ResolverKey
              ink_storage_traits.impls.AutoKey
              (ink_storage_traits.impls.ManualKey unit))) in
      let* α3 :=
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["get"]
          α2
          (owner, spender) in
      (core.option.Option T)::["unwrap_or_default"] α3.
    
    Global Instance AssociatedFunction_allowance_impl :
      Notation.DoubleColon Self "allowance_impl" := {
      Notation.double_colon := allowance_impl;
    }.
    
    Definition transfer_from_to
        (self : mut_ref Self)
        (from : ref ltac:(erc20.erc20.AccountId))
        (to : ref ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* from_balance :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 := deref from ink_primitives.types.AccountId in
        let* α3 := borrow α2 ink_primitives.types.AccountId in
        erc20.erc20.Erc20::["balance_of_impl"] α1 α3 in
      let* _ :=
        let* α0 := lt from_balance value in
        let* α1 := use α0 in
        if (α1 : bool) then
          let* α0 :=
            Return
              (core.result.Result.Err
                (erc20.erc20.Error.InsufficientBalance tt)) in
          never_to_any α0
        else
          M.alloc tt in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := α0.["balances"] in
        let* α2 :=
          borrow_mut
            α1
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit))) in
        let* α3 := sub from_balance value in
        let* α4 := borrow α3 u128 in
        let* α5 := deref α4 u128 in
        let* α6 := borrow α5 u128 in
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["insert"] α2 from α6 in
      let* to_balance :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 := deref to ink_primitives.types.AccountId in
        let* α3 := borrow α2 ink_primitives.types.AccountId in
        erc20.erc20.Erc20::["balance_of_impl"] α1 α3 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := α0.["balances"] in
        let* α2 :=
          borrow_mut
            α1
            (ink_storage.lazy.mapping.Mapping
              ink_primitives.types.AccountId
              u128
              (ink_storage_traits.impls.ResolverKey
                ink_storage_traits.impls.AutoKey
                (ink_storage_traits.impls.ManualKey unit))) in
        let* α3 := add to_balance value in
        let* α4 := borrow α3 u128 in
        let* α5 := deref α4 u128 in
        let* α6 := borrow α5 u128 in
        (ink_storage.lazy.mapping.Mapping K V KeyType)::["insert"] α2 to α6 in
      let* _ :=
        let* α0 := deref self erc20.erc20.Erc20 in
        let* α1 := borrow α0 erc20.erc20.Erc20 in
        let* α2 :=
          (ink.codegen.env.Env.env (Self := (ref erc20.erc20.Erc20))) α1 in
        let* α3 := deref from ink_primitives.types.AccountId in
        let* α4 := deref to ink_primitives.types.AccountId in
        let* α5 :=
          M.alloc
            {|
              erc20.erc20.Transfer.from := core.option.Option.Some α3;
              erc20.erc20.Transfer.to := core.option.Option.Some α4;
              erc20.erc20.Transfer.value := value;
            |} in
        (ink.codegen.event.emit.EmitEvent.emit_event
            (Self :=
              (ink.env_access.EnvAccess ink_env.types.DefaultEnvironment)))
          α2
          α5 in
      let* α0 := M.alloc tt in
      Pure (core.result.Result.Ok α0).
    
    Global Instance AssociatedFunction_transfer_from_to :
      Notation.DoubleColon Self "transfer_from_to" := {
      Notation.double_colon := transfer_from_to;
    }.
  End Impl_erc20_erc20_Erc20_29.
End Impl_erc20_erc20_Erc20_29.

Module CallBuilder.
  Section CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      account_id : ltac:(erc20.erc20.AccountId);
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_account_id : Notation.Dot "account_id" := {
      Notation.dot x := let* x := M.read x in Pure x.(account_id) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_account_id :
      Notation.DoubleColon t "account_id" := {
      Notation.double_colon x :=
        let* x := M.read x in Pure x.(account_id) : M _;
    }.
    Admitted.
  End CallBuilder.
End CallBuilder.
Definition CallBuilder `{ℋ : State.Trait} : Set := M.val CallBuilder.t.

Module Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.
  Section Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M ltac:(core.fmt.Result) :=
      let* α0 := deref f core.fmt.Formatter in
      let* α1 := borrow_mut α0 core.fmt.Formatter in
      let* α2 := deref (mk_str "CallBuilder") str in
      let* α3 := borrow α2 str in
      let* α4 := deref (mk_str "account_id") str in
      let* α5 := borrow α4 str in
      let* α6 := deref self erc20.erc20._.CallBuilder in
      let* α7 := α6.["account_id"] in
      let* α8 := borrow α7 ink_primitives.types.AccountId in
      let* α9 := borrow α8 (ref ink_primitives.types.AccountId) in
      let* α10 := deref α9 (ref ink_primitives.types.AccountId) in
      let* α11 := borrow α10 (ref ink_primitives.types.AccountId) in
      let* α12 := pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_erc20_erc20___CallBuilder.

Module Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.
  Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy}
        (self : ref Self)
        (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
        : M unit :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := borrow α2 (ref ink_primitives.types.AccountId) in
      let* α4 := deref α3 (ref ink_primitives.types.AccountId) in
      let* α5 := borrow α4 (ref ink_primitives.types.AccountId) in
      let* α6 := deref __codec_dest_edqy __CodecOutputEdqy in
      let* α7 := borrow_mut α6 __CodecOutputEdqy in
      (parity_scale_codec.codec.Encode.encode_to
          (Self := (ref ink_primitives.types.AccountId)))
        α5
        α7.
    
    Global Instance AssociatedFunction_encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.DoubleColon Self "encode_to" := {
      Notation.double_colon
        :=
        encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Definition encode
        (self : ref Self)
        :
          M
            (alloc.vec.Vec
              CoqOfRust.core.primitive.u8
              alloc.vec.Vec.Default.A) :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := borrow α2 (ref ink_primitives.types.AccountId) in
      let* α4 := deref α3 (ref ink_primitives.types.AccountId) in
      let* α5 := borrow α4 (ref ink_primitives.types.AccountId) in
      (parity_scale_codec.codec.Encode.encode
          (Self := (ref ink_primitives.types.AccountId)))
        α5.
    
    Global Instance AssociatedFunction_encode :
      Notation.DoubleColon Self "encode" := {
      Notation.double_colon := encode;
    }.
    
    Definition using_encoded
        {R F : Set}
        {ℋ_0 :
          core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))}
        (self : ref Self)
        (f : F)
        : M R :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := borrow α2 (ref ink_primitives.types.AccountId) in
      let* α4 := deref α3 (ref ink_primitives.types.AccountId) in
      let* α5 := borrow α4 (ref ink_primitives.types.AccountId) in
      (parity_scale_codec.codec.Encode.using_encoded
          (Self := (ref ink_primitives.types.AccountId)))
        α5
        f.
    
    Global Instance AssociatedFunction_using_encoded
        {R F : Set}
        {ℋ_0 :
          core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))} :
      Notation.DoubleColon Self "using_encoded" := {
      Notation.double_colon := using_encoded (R := R) (F := F);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20___CallBuilder.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
    }.
    Admitted.
  End
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20___CallBuilder.

Module Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.
  Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode
            (Self := ink_primitives.types.AccountId))
          α1 in
      let* α0 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `CallBuilder::account_id`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* α1 := M.alloc {| erc20.erc20._.CallBuilder.account_id := α0; |} in
      Pure (core.result.Result.Ok α1).
    
    Global Instance AssociatedFunction_decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    Definition decode_into
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        (dst_ : mut_ref (core.mem.maybe_uninit.MaybeUninit Self))
        :
          M
            (core.result.Result
              parity_scale_codec.decode_finished.DecodeFinished
              parity_scale_codec.error.Error) :=
      let* _ :=
        let* α0 := core.mem.size_of in
        let* α1 := borrow α0 usize in
        let* α2 := core.mem.size_of in
        let* α3 := borrow α2 usize in
        match (α1, α3) with
        | (left_val, right_val) =>
          let* α0 := deref left_val usize in
          let* α1 := deref right_val usize in
          let* α2 := eq α0 α1 in
          let* α3 := not α2 in
          let* α4 := use α3 in
          if (α4 : bool) then
            let kind := core.panicking.AssertKind.Eq tt in
            let* _ :=
              let* α0 := deref left_val usize in
              let* α1 := borrow α0 usize in
              let* α2 := deref α1 usize in
              let* α3 := borrow α2 usize in
              let* α4 := deref right_val usize in
              let* α5 := borrow α4 usize in
              let* α6 := deref α5 usize in
              let* α7 := borrow α6 usize in
              core.panicking.assert_failed
                kind
                α3
                α7
                (core.option.Option.None tt) in
            let* α0 := M.alloc tt in
            never_to_any α0
          else
            M.alloc tt
        end in
      let* _ :=
        let* α0 := core.mem.size_of in
        let* α1 := M.alloc 0 in
        let* α2 := gt α0 α1 in
        let* α3 := use α2 in
        let* α4 :=
          if (α3 : bool) then
            M.alloc 1
          else
            M.alloc 0 in
        let* α5 := M.alloc 1 in
        let* α6 := le α4 α5 in
        let* α7 := not α6 in
        let* α8 := use α7 in
        if (α8 : bool) then
          let* α0 :=
            core.panicking.panic
              (mk_str
                "assertion failed: if ::core::mem::size_of::<AccountId>() > 0 { 1 } else { 0 } <= 1") in
          never_to_any α0
        else
          M.alloc tt in
      let* _ :=
        let* dst_ :=
          let* α0 :=
            deref
              dst_
              (core.mem.maybe_uninit.MaybeUninit erc20.erc20._.CallBuilder) in
          borrow_mut
            α0
            (core.mem.maybe_uninit.MaybeUninit erc20.erc20._.CallBuilder) in
        let* dst_ :=
          let* α0 :=
            deref
              dst_
              (core.mem.maybe_uninit.MaybeUninit erc20.erc20._.CallBuilder) in
          let* α1 :=
            borrow_mut
              α0
              (core.mem.maybe_uninit.MaybeUninit erc20.erc20._.CallBuilder) in
          let* α2 := (core.mem.maybe_uninit.MaybeUninit T)::["as_mut_ptr"] α1 in
          let* α3 := type not implemented::["cast"] α2 in
          let* α4 :=
            deref
              α3
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          let* α5 :=
            borrow_mut
              α4
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          let* α6 :=
            deref
              α5
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          let* α0 :=
            borrow_mut
              α6
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          let* α1 :=
            deref
              α0
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          borrow_mut
            α1
            (core.mem.maybe_uninit.MaybeUninit
              ink_primitives.types.AccountId) in
        let* _ :=
          let* α0 := deref __codec_input_edqy __CodecInputEdqy in
          let* α1 := borrow_mut α0 __CodecInputEdqy in
          let* α2 :=
            deref
              dst_
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          let* α3 :=
            borrow_mut
              α2
              (core.mem.maybe_uninit.MaybeUninit
                ink_primitives.types.AccountId) in
          let* α4 :=
            (parity_scale_codec.codec.Decode.decode_into
                (Self := ink_primitives.types.AccountId))
              α1
              α3 in
          let* α5 :=
            (core.ops.try_trait.Try.branch
                (Self :=
                  (core.result.Result
                    parity_scale_codec.decode_finished.DecodeFinished
                    parity_scale_codec.error.Error)))
              α4 in
          match α5 with
          | core.ops.control_flow.ControlFlow residual =>
            let* α0 :=
              (core.ops.try_trait.FromResidual.from_residual
                  (Self :=
                    (core.result.Result
                      parity_scale_codec.decode_finished.DecodeFinished
                      parity_scale_codec.error.Error)))
                residual in
            let* α1 := Return α0 in
            never_to_any α1
          | core.ops.control_flow.ControlFlow val => Pure val
          end in
        M.alloc tt in
      let* α0 :=
        parity_scale_codec.decode_finished.DecodeFinished::["assert_decoding_finished"] in
      Pure (core.result.Result.Ok α0).
    
    Global Instance AssociatedFunction_decode_into
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode_into" := {
      Notation.double_colon
        :=
        decode_into (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20___CallBuilder.

Module Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.
  Section Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition hash
        {__H : Set}
        {ℋ_0 : core.hash.Hasher.Trait __H}
        (self : ref Self)
        (state : mut_ref __H)
        : M unit :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α4 := borrow α3 ink_primitives.types.AccountId in
      let* α5 := deref state __H in
      let* α6 := borrow_mut α5 __H in
      (core.hash.Hash.hash (Self := ink_primitives.types.AccountId)) α4 α6.
    
    Global Instance AssociatedFunction_hash
        {__H : Set}
        {ℋ_0 : core.hash.Hasher.Trait __H} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash (__H := __H);
    }.
    
    #[refine] Global Instance ℐ : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
        hash (__H := __H);
    }.
    Admitted.
  End Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_hash_Hash_for_erc20_erc20___CallBuilder.

Module Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.
  Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    #[refine] Global Instance ℐ :
      core.marker.StructuralPartialEq.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20___CallBuilder.

Module Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.
  Section Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition eq
        (self : ref Self)
        (other : ref erc20.erc20._.CallBuilder)
        : M bool :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := deref other erc20.erc20._.CallBuilder in
      let* α4 := α3.["account_id"] in
      let* α5 := borrow α4 ink_primitives.types.AccountId in
      (core.cmp.PartialEq.eq (Self := ink_primitives.types.AccountId)) α2 α5.
    
    Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
      Notation.double_colon := eq;
    }.
    
    #[refine] Global Instance ℐ :
      core.cmp.PartialEq.Trait Self
        (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
      core.cmp.PartialEq.eq := eq;
    }.
    Admitted.
  End Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_cmp_PartialEq_for_erc20_erc20___CallBuilder.

Module Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.
  Section Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    #[refine] Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_StructuralEq_for_erc20_erc20___CallBuilder.

Module Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.
  Section Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      let* _ := M.alloc tt in
      M.alloc tt.
    
    Global Instance AssociatedFunction_assert_receiver_is_total_eq :
      Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
      Notation.double_colon := assert_receiver_is_total_eq;
    }.
    
    #[refine] Global Instance ℐ : core.cmp.Eq.Trait Self := {
    }.
    Admitted.
  End Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_cmp_Eq_for_erc20_erc20___CallBuilder.

Module Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.
  Section Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition clone (self : ref Self) : M erc20.erc20._.CallBuilder :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α4 := borrow α3 ink_primitives.types.AccountId in
      let* α5 :=
        (core.clone.Clone.clone (Self := ink_primitives.types.AccountId)) α4 in
      M.alloc {| erc20.erc20._.CallBuilder.account_id := α5; |}.
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    #[refine] Global Instance ℐ : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
    Admitted.
  End Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_clone_Clone_for_erc20_erc20___CallBuilder.

Module Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.
  Section Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition Identity : Set := Self.
    
    Definition type_info
        : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
      let* α0 := (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let* α1 :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "CallBuilder")
          (mk_str "erc20::erc20") in
      let* α2 :=
        (scale_info.build.TypeBuilder
              F
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let* α3 := (alloc.vec.Vec T alloc.alloc.Global)::["new"] in
      let* α4 := (scale_info.build.TypeBuilder F S)::["type_params"] α2 α3 in
      let* α5 :=
        borrow
          [
            mk_str "The ink! smart contract's call builder.";
            mk_str "";
            mk_str
              "Implements the underlying on-chain calling of the ink! smart contract";
            mk_str "messages and trait implementations in a type safe way."
          ]
          (list (ref str)) in
      let* α6 := deref α5 (list (ref str)) in
      let* α7 := borrow α6 (list (ref str)) in
      let* α8 := pointer_coercion "Unsize" α7 in
      let* α9 :=
        (scale_info.build.TypeBuilder scale_info.form.MetaForm S)::["docs"]
          α4
          α8 in
      let* α10 := (scale_info.build.Fields F)::["named"] in
      let* α11 :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α10
          (let* α0 :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  N
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let* α1 :=
            (scale_info.build.FieldBuilder
                  F
                  scale_info.build.field_state.NameNotAssigned
                  T)::["name"]
              α0
              (mk_str "account_id") in
          (scale_info.build.FieldBuilder F N T)::["type_name"]
            α1
            (mk_str "AccountId")) in
      (scale_info.build.TypeBuilder
            F
            scale_info.build.state.PathAssigned)::["composite"]
        α9
        α11.
    
    Global Instance AssociatedFunction_type_info :
      Notation.DoubleColon Self "type_info" := {
      Notation.double_colon := type_info;
    }.
    
    #[refine] Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
      scale_info.TypeInfo.Identity := Identity;
      scale_info.TypeInfo.type_info := type_info;
    }.
    Admitted.
  End Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_scale_info_TypeInfo_for_erc20_erc20___CallBuilder.

Module
  Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.
  Section
    Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition layout
        (__key : ref ltac:(ink_primitives.key.Key))
        : M (ink_metadata.layout.Layout ink_metadata.layout.Layout.Default.F) :=
      let* α0 := deref __key u32 in
      let* α1 := borrow α0 u32 in
      let* α2 :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self := ink_primitives.types.AccountId))
          α1 in
      let* α3 :=
        (ink_metadata.layout.FieldLayout F)::["new"] (mk_str "account_id") α2 in
      let* α4 :=
        (ink_metadata.layout.StructLayout F)::["new"]
          (mk_str "CallBuilder")
          [ α3 ] in
      Pure (ink_metadata.layout.Layout.Struct α4).
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    #[refine] Global Instance ℐ :
      ink_storage_traits.layout.StorageLayout.Trait Self := {
      ink_storage_traits.layout.StorageLayout.layout := layout;
    }.
    Admitted.
  End
    Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20___CallBuilder.

Module Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.
  Section
    Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Type_ : Set := erc20.erc20._.CallBuilder.
    
    #[refine] Global Instance ℐ :
      ink.codegen.dispatch.info.ContractCallBuilder.Trait Self := {
      ink.codegen.dispatch.info.ContractCallBuilder.Type_ := Type_;
    }.
    Admitted.
  End Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_codegen_dispatch_info_ContractCallBuilder_for_erc20_erc20_Erc20.

Module Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.
  Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition Env : Set :=
      ink_env.types.DefaultEnvironment.
    
    #[refine] Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
      ink_env.contract.ContractEnv.Env := Env;
    }.
    Admitted.
  End Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20___CallBuilder.

Module
  Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20___CallBuilder.
  Section
    Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition from_account_id
        (account_id : ltac:(erc20.erc20.AccountId))
        : M Self :=
      M.alloc {| erc20.erc20._.CallBuilder.account_id := account_id; |}.
    
    Global Instance AssociatedFunction_from_account_id :
      Notation.DoubleColon Self "from_account_id" := {
      Notation.double_colon := from_account_id;
    }.
    
    #[refine] Global Instance ℐ :
      ink_env.call.create_builder.FromAccountId.Trait Self
        (T := ltac:(erc20.erc20.Environment)) := {
      ink_env.call.create_builder.FromAccountId.from_account_id :=
        from_account_id;
    }.
    Admitted.
  End
    Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20___CallBuilder.

Module Impl_ink_contract_ref_ToAccountId_for_erc20_erc20___CallBuilder.
  Section Impl_ink_contract_ref_ToAccountId_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition to_account_id
        (self : ref Self)
        : M ltac:(erc20.erc20.AccountId) :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α4 := borrow α3 ink_primitives.types.AccountId in
      (core.clone.Clone.clone (Self := ink_primitives.types.AccountId)) α4.
    
    Global Instance AssociatedFunction_to_account_id :
      Notation.DoubleColon Self "to_account_id" := {
      Notation.double_colon := to_account_id;
    }.
    
    #[refine] Global Instance ℐ :
      ink.contract_ref.ToAccountId.Trait Self
        (T := ltac:(erc20.erc20.Environment)) := {
      ink.contract_ref.ToAccountId.to_account_id := to_account_id;
    }.
    Admitted.
  End Impl_ink_contract_ref_ToAccountId_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_ink_contract_ref_ToAccountId_for_erc20_erc20___CallBuilder.

Module Impl_core_convert_AsRef_for_erc20_erc20___CallBuilder.
  Section Impl_core_convert_AsRef_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition as_ref
        (self : ref Self)
        : M (ref ltac:(erc20.erc20.AccountId)) :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow α1 ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      borrow α3 ink_primitives.types.AccountId.
    
    Global Instance AssociatedFunction_as_ref :
      Notation.DoubleColon Self "as_ref" := {
      Notation.double_colon := as_ref;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.AsRef.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
      core.convert.AsRef.as_ref := as_ref;
    }.
    Admitted.
  End Impl_core_convert_AsRef_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_AsRef_for_erc20_erc20___CallBuilder.

Module Impl_core_convert_AsMut_for_erc20_erc20___CallBuilder.
  Section Impl_core_convert_AsMut_for_erc20_erc20___CallBuilder.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition as_mut
        (self : mut_ref Self)
        : M (mut_ref ltac:(erc20.erc20.AccountId)) :=
      let* α0 := deref self erc20.erc20._.CallBuilder in
      let* α1 := α0.["account_id"] in
      let* α2 := borrow_mut α1 ink_primitives.types.AccountId in
      let* α3 := deref α2 ink_primitives.types.AccountId in
      let* α0 := borrow_mut α3 ink_primitives.types.AccountId in
      let* α1 := deref α0 ink_primitives.types.AccountId in
      borrow_mut α1 ink_primitives.types.AccountId.
    
    Global Instance AssociatedFunction_as_mut :
      Notation.DoubleColon Self "as_mut" := {
      Notation.double_colon := as_mut;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.AsMut.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
      core.convert.AsMut.as_mut := as_mut;
    }.
    Admitted.
  End Impl_core_convert_AsMut_for_erc20_erc20___CallBuilder.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_AsMut_for_erc20_erc20___CallBuilder.

Module Impl_erc20_erc20___CallBuilder_18.
  Section Impl_erc20_erc20___CallBuilder_18.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20._.CallBuilder.
    
    Definition total_supply
        (self : ref Self)
        :
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ltac:(erc20.erc20.Environment)
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ltac:(erc20.erc20.Environment)))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  ltac:(ink_env.call.execution_input.EmptyArgumentList)))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType ltac:(erc20.erc20.Balance)))) :=
      let* α0 :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 := deref self erc20.erc20._.CallBuilder in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α2 in
      let* α4 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Unset_ CallType)
              Args
              RetType)::["call"]
          α0
          α3 in
      let* α5 := M.alloc 219 in
      let* α6 := M.alloc 99 in
      let* α7 := M.alloc 117 in
      let* α8 := M.alloc 168 in
      let* α9 := ink_env.call.selector.Selector::["new"] [ α5; α6; α7; α8 ] in
      let* α10 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α9 in
      let* α11 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              RetType)::["exec_input"]
          α4
          α10 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α11.
    
    Global Instance AssociatedFunction_total_supply :
      Notation.DoubleColon Self "total_supply" := {
      Notation.double_colon := total_supply;
    }.
    
    Definition balance_of
        (self : ref Self)
        (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
        :
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ltac:(erc20.erc20.Environment)
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ltac:(erc20.erc20.Environment)))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.AccountId))
                    ltac:(ink_env.call.execution_input.EmptyArgumentList))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType ltac:(erc20.erc20.Balance)))) :=
      let* α0 :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 := deref self erc20.erc20._.CallBuilder in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α2 in
      let* α4 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Unset_ CallType)
              Args
              RetType)::["call"]
          α0
          α3 in
      let* α5 := M.alloc 15 in
      let* α6 := M.alloc 117 in
      let* α7 := M.alloc 90 in
      let* α8 := M.alloc 86 in
      let* α9 := ink_env.call.selector.Selector::["new"] [ α5; α6; α7; α8 ] in
      let* α10 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α9 in
      let* α11 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α10
          __ink_binding_0 in
      let* α12 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              RetType)::["exec_input"]
          α4
          α11 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α12.
    
    Global Instance AssociatedFunction_balance_of :
      Notation.DoubleColon Self "balance_of" := {
      Notation.double_colon := balance_of;
    }.
    
    Definition allowance
        (self : ref Self)
        (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
        (__ink_binding_1 : ltac:(erc20.erc20.AccountId))
        :
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ltac:(erc20.erc20.Environment)
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ltac:(erc20.erc20.Environment)))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.AccountId))
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ltac:(erc20.erc20.AccountId))
                      ltac:(ink_env.call.execution_input.EmptyArgumentList)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType ltac:(erc20.erc20.Balance)))) :=
      let* α0 :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 := deref self erc20.erc20._.CallBuilder in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α2 in
      let* α4 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Unset_ CallType)
              Args
              RetType)::["call"]
          α0
          α3 in
      let* α5 := M.alloc 106 in
      let* α6 := M.alloc 0 in
      let* α7 := M.alloc 22 in
      let* α8 := M.alloc 94 in
      let* α9 := ink_env.call.selector.Selector::["new"] [ α5; α6; α7; α8 ] in
      let* α10 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α9 in
      let* α11 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α10
          __ink_binding_0 in
      let* α12 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument Head)
                Rest))::["push_arg"]
          α11
          __ink_binding_1 in
      let* α13 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              RetType)::["exec_input"]
          α4
          α12 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α13.
    
    Global Instance AssociatedFunction_allowance :
      Notation.DoubleColon Self "allowance" := {
      Notation.double_colon := allowance;
    }.
    
    Definition transfer
        (self : mut_ref Self)
        (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
        (__ink_binding_1 : ltac:(erc20.erc20.Balance))
        :
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ltac:(erc20.erc20.Environment)
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ltac:(erc20.erc20.Environment)))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.Balance))
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ltac:(erc20.erc20.AccountId))
                      ltac:(ink_env.call.execution_input.EmptyArgumentList)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  ltac:(erc20.erc20.Result constr:(unit))))) :=
      let* α0 :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 := deref self erc20.erc20._.CallBuilder in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α2 in
      let* α4 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Unset_ CallType)
              Args
              RetType)::["call"]
          α0
          α3 in
      let* α5 := M.alloc 132 in
      let* α6 := M.alloc 161 in
      let* α7 := M.alloc 93 in
      let* α8 := M.alloc 161 in
      let* α9 := ink_env.call.selector.Selector::["new"] [ α5; α6; α7; α8 ] in
      let* α10 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α9 in
      let* α11 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α10
          __ink_binding_0 in
      let* α12 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument Head)
                Rest))::["push_arg"]
          α11
          __ink_binding_1 in
      let* α13 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              RetType)::["exec_input"]
          α4
          α12 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α13.
    
    Global Instance AssociatedFunction_transfer :
      Notation.DoubleColon Self "transfer" := {
      Notation.double_colon := transfer;
    }.
    
    Definition approve
        (self : mut_ref Self)
        (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
        (__ink_binding_1 : ltac:(erc20.erc20.Balance))
        :
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ltac:(erc20.erc20.Environment)
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ltac:(erc20.erc20.Environment)))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.Balance))
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ltac:(erc20.erc20.AccountId))
                      ltac:(ink_env.call.execution_input.EmptyArgumentList)))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  ltac:(erc20.erc20.Result constr:(unit))))) :=
      let* α0 :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 := deref self erc20.erc20._.CallBuilder in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α2 in
      let* α4 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Unset_ CallType)
              Args
              RetType)::["call"]
          α0
          α3 in
      let* α5 := M.alloc 104 in
      let* α6 := M.alloc 18 in
      let* α7 := M.alloc 102 in
      let* α8 := M.alloc 160 in
      let* α9 := ink_env.call.selector.Selector::["new"] [ α5; α6; α7; α8 ] in
      let* α10 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α9 in
      let* α11 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α10
          __ink_binding_0 in
      let* α12 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument Head)
                Rest))::["push_arg"]
          α11
          __ink_binding_1 in
      let* α13 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              RetType)::["exec_input"]
          α4
          α12 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α13.
    
    Global Instance AssociatedFunction_approve :
      Notation.DoubleColon Self "approve" := {
      Notation.double_colon := approve;
    }.
    
    Definition transfer_from
        (self : mut_ref Self)
        (__ink_binding_0 : ltac:(erc20.erc20.AccountId))
        (__ink_binding_1 : ltac:(erc20.erc20.AccountId))
        (__ink_binding_2 : ltac:(erc20.erc20.Balance))
        :
          M
            (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              ltac:(erc20.erc20.Environment)
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  ltac:(erc20.erc20.Environment)))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.Balance))
                    (ink_env.call.execution_input.ArgumentList
                      (ink_env.call.execution_input.Argument
                        ltac:(erc20.erc20.AccountId))
                      (ink_env.call.execution_input.ArgumentList
                        (ink_env.call.execution_input.Argument
                          ltac:(erc20.erc20.AccountId))
                        ltac:(ink_env.call.execution_input.EmptyArgumentList))))))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType
                  ltac:(erc20.erc20.Result constr:(unit))))) :=
      let* α0 :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.build_call in
      let* α1 := deref self erc20.erc20._.CallBuilder in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 :=
        (ink.contract_ref.ToAccountId.to_account_id
            (Self := erc20.erc20._.CallBuilder))
          α2 in
      let* α4 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Unset_ CallType)
              Args
              RetType)::["call"]
          α0
          α3 in
      let* α5 := M.alloc 11 in
      let* α6 := M.alloc 57 in
      let* α7 := M.alloc 111 in
      let* α8 := M.alloc 24 in
      let* α9 := ink_env.call.selector.Selector::["new"] [ α5; α6; α7; α8 ] in
      let* α10 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α9 in
      let* α11 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α10
          __ink_binding_0 in
      let* α12 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument Head)
                Rest))::["push_arg"]
          α11
          __ink_binding_1 in
      let* α13 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                (ink_env.call.execution_input.Argument Head)
                Rest))::["push_arg"]
          α12
          __ink_binding_2 in
      let* α14 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              CallType
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              RetType)::["exec_input"]
          α4
          α13 in
      (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
            E
            CallType
            Args
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α14.
    
    Global Instance AssociatedFunction_transfer_from :
      Notation.DoubleColon Self "transfer_from" := {
      Notation.double_colon := transfer_from;
    }.
  End Impl_erc20_erc20___CallBuilder_18.
End Impl_erc20_erc20___CallBuilder_18.

Module Erc20Ref.
  Section Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Record t : Set := {
      inner :
        ink.codegen.dispatch.info.ContractCallBuilder.Type_
          (Self := erc20.erc20.Erc20)
          (Trait := ltac:(try clear Trait; hauto l: on));
    }.
    Global Set Primitive Projections.
    
    #[refine] Global Instance Get_inner : Notation.Dot "inner" := {
      Notation.dot x := let* x := M.read x in Pure x.(inner) : M _;
    }.
    Admitted.
    #[refine] Global Instance Get_AF_inner : Notation.DoubleColon t "inner" := {
      Notation.double_colon x := let* x := M.read x in Pure x.(inner) : M _;
    }.
    Admitted.
  End Erc20Ref.
End Erc20Ref.
Definition Erc20Ref `{ℋ : State.Trait} : Set := M.val Erc20Ref.t.

Module Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  Section Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M ltac:(core.fmt.Result) :=
      let* α0 := deref f core.fmt.Formatter in
      let* α1 := borrow_mut α0 core.fmt.Formatter in
      let* α2 := deref (mk_str "Erc20Ref") str in
      let* α3 := borrow α2 str in
      let* α4 := deref (mk_str "inner") str in
      let* α5 := borrow α4 str in
      let* α6 := deref self erc20.erc20.Erc20Ref in
      let* α7 := α6.["inner"] in
      let* α8 := borrow α7 erc20.erc20._.CallBuilder in
      let* α9 := borrow α8 (ref erc20.erc20._.CallBuilder) in
      let* α10 := deref α9 (ref erc20.erc20._.CallBuilder) in
      let* α11 := borrow α10 (ref erc20.erc20._.CallBuilder) in
      let* α12 := pointer_coercion "Unsize" α11 in
      core.fmt.Formatter::["debug_struct_field1_finish"] α1 α3 α5 α12.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_erc20_erc20_Erc20Ref.

Module Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.
  Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy}
        (self : ref Self)
        (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
        : M unit :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := borrow α2 (ref erc20.erc20._.CallBuilder) in
      let* α4 := deref α3 (ref erc20.erc20._.CallBuilder) in
      let* α5 := borrow α4 (ref erc20.erc20._.CallBuilder) in
      let* α6 := deref __codec_dest_edqy __CodecOutputEdqy in
      let* α7 := borrow_mut α6 __CodecOutputEdqy in
      (parity_scale_codec.codec.Encode.encode_to
          (Self := (ref erc20.erc20._.CallBuilder)))
        α5
        α7.
    
    Global Instance AssociatedFunction_encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.DoubleColon Self "encode_to" := {
      Notation.double_colon
        :=
        encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    Definition encode
        (self : ref Self)
        :
          M
            (alloc.vec.Vec
              CoqOfRust.core.primitive.u8
              alloc.vec.Vec.Default.A) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := borrow α2 (ref erc20.erc20._.CallBuilder) in
      let* α4 := deref α3 (ref erc20.erc20._.CallBuilder) in
      let* α5 := borrow α4 (ref erc20.erc20._.CallBuilder) in
      (parity_scale_codec.codec.Encode.encode
          (Self := (ref erc20.erc20._.CallBuilder)))
        α5.
    
    Global Instance AssociatedFunction_encode :
      Notation.DoubleColon Self "encode" := {
      Notation.double_colon := encode;
    }.
    
    Definition using_encoded
        {R F : Set}
        {ℋ_0 :
          core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))}
        (self : ref Self)
        (f : F)
        : M R :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := borrow α2 (ref erc20.erc20._.CallBuilder) in
      let* α4 := deref α3 (ref erc20.erc20._.CallBuilder) in
      let* α5 := borrow α4 (ref erc20.erc20._.CallBuilder) in
      (parity_scale_codec.codec.Encode.using_encoded
          (Self := (ref erc20.erc20._.CallBuilder)))
        α5
        f.
    
    Global Instance AssociatedFunction_using_encoded
        {R F : Set}
        {ℋ_0 :
          core.ops.function.FnOnce.Trait F
            (Args := ref (Slice CoqOfRust.core.primitive.u8))} :
      Notation.DoubleColon Self "using_encoded" := {
      Notation.double_colon := using_encoded (R := R) (F := F);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Erc20Ref.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.
  Section
    Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
    }.
    Admitted.
  End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Erc20Ref.

Module Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.
  Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* __codec_res_edqy :=
        let* α0 := deref __codec_input_edqy __CodecInputEdqy in
        let* α1 := borrow_mut α0 __CodecInputEdqy in
        (parity_scale_codec.codec.Decode.decode
            (Self := erc20.erc20._.CallBuilder))
          α1 in
      let* α0 :=
        match __codec_res_edqy with
        | core.result.Result e =>
          let* α0 :=
            parity_scale_codec.error.Error::["chain"]
              e
              (mk_str "Could not decode `Erc20Ref::inner`") in
          let* α1 := Return (core.result.Result.Err α0) in
          never_to_any α1
        | core.result.Result __codec_res_edqy => Pure __codec_res_edqy
        end in
      let* α1 := M.alloc {| erc20.erc20.Erc20Ref.inner := α0; |} in
      Pure (core.result.Result.Ok α1).
    
    Global Instance AssociatedFunction_decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Erc20Ref.

Module Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  Section Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition hash
        {__H : Set}
        {ℋ_0 : core.hash.Hasher.Trait __H}
        (self : ref Self)
        (state : mut_ref __H)
        : M unit :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      let* α5 := deref state __H in
      let* α6 := borrow_mut α5 __H in
      (core.hash.Hash.hash (Self := erc20.erc20._.CallBuilder)) α4 α6.
    
    Global Instance AssociatedFunction_hash
        {__H : Set}
        {ℋ_0 : core.hash.Hasher.Trait __H} :
      Notation.DoubleColon Self "hash" := {
      Notation.double_colon := hash (__H := __H);
    }.
    
    #[refine] Global Instance ℐ : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash {__H : Set} {ℋ_0 : core.hash.Hasher.Trait __H} :=
        hash (__H := __H);
    }.
    Admitted.
  End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_hash_Hash_for_erc20_erc20_Erc20Ref.

Module Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    #[refine] Global Instance ℐ :
      core.marker.StructuralPartialEq.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Erc20Ref.

Module Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition eq
        (self : ref Self)
        (other : ref erc20.erc20.Erc20Ref)
        : M bool :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := deref other erc20.erc20.Erc20Ref in
      let* α4 := α3.["inner"] in
      let* α5 := borrow α4 erc20.erc20._.CallBuilder in
      (core.cmp.PartialEq.eq (Self := erc20.erc20._.CallBuilder)) α2 α5.
    
    Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
      Notation.double_colon := eq;
    }.
    
    #[refine] Global Instance ℐ :
      core.cmp.PartialEq.Trait Self
        (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
      core.cmp.PartialEq.eq := eq;
    }.
    Admitted.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_cmp_PartialEq_for_erc20_erc20_Erc20Ref.

Module Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    #[refine] Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_StructuralEq_for_erc20_erc20_Erc20Ref.

Module Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  Section Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      let* _ := M.alloc tt in
      M.alloc tt.
    
    Global Instance AssociatedFunction_assert_receiver_is_total_eq :
      Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
      Notation.double_colon := assert_receiver_is_total_eq;
    }.
    
    #[refine] Global Instance ℐ : core.cmp.Eq.Trait Self := {
    }.
    Admitted.
  End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_cmp_Eq_for_erc20_erc20_Erc20Ref.

Module Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  Section Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition clone (self : ref Self) : M erc20.erc20.Erc20Ref :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      let* α5 :=
        (core.clone.Clone.clone (Self := erc20.erc20._.CallBuilder)) α4 in
      M.alloc {| erc20.erc20.Erc20Ref.inner := α5; |}.
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    #[refine] Global Instance ℐ : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone := clone;
    }.
    Admitted.
  End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_clone_Clone_for_erc20_erc20_Erc20Ref.

Module Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.
  Section Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition Identity : Set := Self.
    
    Definition type_info
        : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
      let* α0 := (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let* α1 :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "Erc20Ref")
          (mk_str "erc20::erc20") in
      let* α2 :=
        (scale_info.build.TypeBuilder
              F
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let* α3 := (alloc.vec.Vec T alloc.alloc.Global)::["new"] in
      let* α4 := (scale_info.build.TypeBuilder F S)::["type_params"] α2 α3 in
      let* α5 :=
        borrow [ mk_str "A simple ERC-20 contract." ] (list (ref str)) in
      let* α6 := deref α5 (list (ref str)) in
      let* α7 := borrow α6 (list (ref str)) in
      let* α8 := pointer_coercion "Unsize" α7 in
      let* α9 :=
        (scale_info.build.TypeBuilder scale_info.form.MetaForm S)::["docs"]
          α4
          α8 in
      let* α10 := (scale_info.build.Fields F)::["named"] in
      let* α11 :=
        (scale_info.build.FieldsBuilder
              scale_info.form.MetaForm
              scale_info.build.NamedFields)::["field"]
          α10
          (let* α0 :=
            (scale_info.build.FieldBuilder
                  scale_info.form.MetaForm
                  N
                  scale_info.build.field_state.TypeNotAssigned)::["ty"]
              f in
          let* α1 :=
            (scale_info.build.FieldBuilder
                  F
                  scale_info.build.field_state.NameNotAssigned
                  T)::["name"]
              α0
              (mk_str "inner") in
          (scale_info.build.FieldBuilder F N T)::["type_name"]
            α1
            (mk_str "<Erc20 as::ink::codegen::ContractCallBuilder>::Type")) in
      (scale_info.build.TypeBuilder
            F
            scale_info.build.state.PathAssigned)::["composite"]
        α9
        α11.
    
    Global Instance AssociatedFunction_type_info :
      Notation.DoubleColon Self "type_info" := {
      Notation.double_colon := type_info;
    }.
    
    #[refine] Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
      scale_info.TypeInfo.Identity := Identity;
      scale_info.TypeInfo.type_info := type_info;
    }.
    Admitted.
  End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Erc20Ref.

Module Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.
  Section Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition layout
        (__key : ref ltac:(ink_primitives.key.Key))
        : M (ink_metadata.layout.Layout ink_metadata.layout.Layout.Default.F) :=
      let* α0 := deref __key u32 in
      let* α1 := borrow α0 u32 in
      let* α2 :=
        (ink_storage_traits.layout.StorageLayout.layout
            (Self := erc20.erc20._.CallBuilder))
          α1 in
      let* α3 :=
        (ink_metadata.layout.FieldLayout F)::["new"] (mk_str "inner") α2 in
      let* α4 :=
        (ink_metadata.layout.StructLayout F)::["new"]
          (mk_str "Erc20Ref")
          [ α3 ] in
      Pure (ink_metadata.layout.Layout.Struct α4).
    
    Global Instance AssociatedFunction_layout :
      Notation.DoubleColon Self "layout" := {
      Notation.double_colon := layout;
    }.
    
    #[refine] Global Instance ℐ :
      ink_storage_traits.layout.StorageLayout.Trait Self := {
      ink_storage_traits.layout.StorageLayout.layout := layout;
    }.
    Admitted.
  End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_ink_storage_traits_layout_StorageLayout_for_erc20_erc20_Erc20Ref.

Module Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.
  Section Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Type_ : Set := erc20.erc20.Erc20Ref.
    
    #[refine] Global Instance ℐ :
      ink_env.contract.ContractReference.Trait Self := {
      ink_env.contract.ContractReference.Type_ := Type_;
    }.
    Admitted.
  End Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_contract_ContractReference_for_erc20_erc20_Erc20.

Module
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_erc20_erc20_Erc20.
  Section
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_erc20_erc20_Erc20.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20.
    
    Definition Output : Set := erc20.erc20.Erc20Ref.
    
    Definition Error : Set := unit.
    
    Definition ok (value : erc20.erc20.Erc20Ref) : M Output := Pure value.
    
    Global Instance AssociatedFunction_ok : Notation.DoubleColon Self "ok" := {
      Notation.double_colon := ok;
    }.
    
    #[refine] Global Instance ℐ :
      ink_env.call.create_builder.ConstructorReturnType.Trait Self
        (C := erc20.erc20.Erc20Ref) := {
      ink_env.call.create_builder.ConstructorReturnType.Output := Output;
      ink_env.call.create_builder.ConstructorReturnType.Error := Error;
      ink_env.call.create_builder.ConstructorReturnType.ok := ok;
    }.
    Admitted.
  End
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_erc20_erc20_Erc20.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_erc20_erc20_Erc20.

Module
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_erc20_erc20_Erc20_E.
  Section
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_erc20_erc20_Erc20_E.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Context {ℋ_0 : parity_scale_codec.codec.Decode.Trait E}.
    Definition Self : Set := core.result.Result erc20.erc20.Erc20 E.
    
    Definition IS_RESULT : bool := M.run (M.alloc true).
    
    Global Instance AssociatedFunction_IS_RESULT :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition Output : Set := core.result.Result erc20.erc20.Erc20Ref E.
    
    Definition Error : Set := E.
    
    Definition ok (value : erc20.erc20.Erc20Ref) : M Output :=
      Pure (core.result.Result.Ok value).
    
    Global Instance AssociatedFunction_ok : Notation.DoubleColon Self "ok" := {
      Notation.double_colon := ok;
    }.
    
    Definition err (err : Error) : M (core.option.Option Output) :=
      Pure (core.option.Option.Some (core.result.Result.Err err)).
    
    Global Instance AssociatedFunction_err :
      Notation.DoubleColon Self "err" := {
      Notation.double_colon := err;
    }.
    
    #[refine] Global Instance ℐ :
      ink_env.call.create_builder.ConstructorReturnType.Trait Self
        (C := erc20.erc20.Erc20Ref) := {
      ink_env.call.create_builder.ConstructorReturnType.Output := Output;
      ink_env.call.create_builder.ConstructorReturnType.Error := Error;
      ink_env.call.create_builder.ConstructorReturnType.ok := ok;
    }.
    Admitted.
  End
    Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_erc20_erc20_Erc20_E.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_env_call_create_builder_ConstructorReturnType_for_core_result_Result_erc20_erc20_Erc20_E.

Module Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.
  Section Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition Env : Set :=
      ink_env.types.DefaultEnvironment.
    
    #[refine] Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
      ink_env.contract.ContractEnv.Env := Env;
    }.
    Admitted.
  End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_contract_ContractEnv_for_erc20_erc20_Erc20Ref.

Module Impl_erc20_erc20_Erc20Ref_26.
  Section Impl_erc20_erc20_Erc20Ref_26.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition new
        (__ink_binding_0 : ltac:(erc20.erc20.Balance))
        :
          M
            (ink_env.call.create_builder.CreateBuilder
              ltac:(erc20.erc20.Environment)
              Self
              (ink_env.call.common.Unset_ ltac:(erc20.erc20.Hash))
              (ink_env.call.common.Unset_ u64)
              (ink_env.call.common.Unset_ ltac:(erc20.erc20.Balance))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    (ink_env.call.execution_input.Argument
                      ltac:(erc20.erc20.Balance))
                    ltac:(ink_env.call.execution_input.EmptyArgumentList))))
              (ink_env.call.common.Unset_
                ink_env.call.create_builder.state.Salt)
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType Self))) :=
      let* α0 := ink_env.call.create_builder.build_create in
      let* α1 := M.alloc 155 in
      let* α2 := M.alloc 174 in
      let* α3 := M.alloc 157 in
      let* α4 := M.alloc 94 in
      let* α5 := ink_env.call.selector.Selector::["new"] [ α1; α2; α3; α4 ] in
      let* α6 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["new"]
          α5 in
      let* α7 :=
        (ink_env.call.execution_input.ExecutionInput
              (ink_env.call.execution_input.ArgumentList
                ink_env.call.execution_input.ArgumentListEnd
                ink_env.call.execution_input.ArgumentListEnd))::["push_arg"]
          α6
          __ink_binding_0 in
      let* α8 :=
        (ink_env.call.create_builder.CreateBuilder
              E
              ContractRef
              CodeHash
              GasLimit
              Endowment
              (ink_env.call.common.Unset_
                (ink_env.call.execution_input.ExecutionInput
                  (ink_env.call.execution_input.ArgumentList
                    ink_env.call.execution_input.ArgumentListEnd
                    ink_env.call.execution_input.ArgumentListEnd)))
              Salt
              RetType)::["exec_input"]
          α0
          α7 in
      (ink_env.call.create_builder.CreateBuilder
            E
            ContractRef
            CodeHash
            GasLimit
            Endowment
            Args
            Salt
            (ink_env.call.common.Unset_
              (ink_env.call.common.ReturnType unit)))::["returns"]
        α8.
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Definition total_supply (self : ref Self) : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow α0 erc20.erc20.Erc20Ref in
      let* α2 := erc20.erc20.Erc20Ref::["try_total_supply"] α1 in
      (core.result.Result T E)::["unwrap_or_else"]
        α2
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::total_supply: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := borrow error ink_primitives.LangError in
        let* α5 := deref α4 ink_primitives.LangError in
        let* α6 := borrow α5 ink_primitives.LangError in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_total_supply :
      Notation.DoubleColon Self "total_supply" := {
      Notation.double_colon := total_supply;
    }.
    
    Definition try_total_supply
        (self : ref Self)
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Balance))) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow α0 erc20.erc20.Erc20Ref in
      let* α2 :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
            (Self := erc20.erc20.Erc20Ref))
          α1 in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      let* α5 := erc20.erc20._.CallBuilder::["total_supply"] α4 in
      let* α6 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput Args))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType R)))::["try_invoke"]
          α5 in
      (core.result.Result T E)::["unwrap_or_else"]
        α6
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::total_supply: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          borrow
            error
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α5 :=
          deref
            α4
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α6 :=
          borrow
            α5
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_try_total_supply :
      Notation.DoubleColon Self "try_total_supply" := {
      Notation.double_colon := try_total_supply;
    }.
    
    Definition balance_of
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow α0 erc20.erc20.Erc20Ref in
      let* α2 := erc20.erc20.Erc20Ref::["try_balance_of"] α1 owner in
      (core.result.Result T E)::["unwrap_or_else"]
        α2
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::balance_of: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := borrow error ink_primitives.LangError in
        let* α5 := deref α4 ink_primitives.LangError in
        let* α6 := borrow α5 ink_primitives.LangError in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_balance_of :
      Notation.DoubleColon Self "balance_of" := {
      Notation.double_colon := balance_of;
    }.
    
    Definition try_balance_of
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Balance))) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow α0 erc20.erc20.Erc20Ref in
      let* α2 :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
            (Self := erc20.erc20.Erc20Ref))
          α1 in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      let* α5 := erc20.erc20._.CallBuilder::["balance_of"] α4 owner in
      let* α6 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput Args))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType R)))::["try_invoke"]
          α5 in
      (core.result.Result T E)::["unwrap_or_else"]
        α6
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::balance_of: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          borrow
            error
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α5 :=
          deref
            α4
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α6 :=
          borrow
            α5
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_try_balance_of :
      Notation.DoubleColon Self "try_balance_of" := {
      Notation.double_colon := try_balance_of;
    }.
    
    Definition allowance
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        (spender : ltac:(erc20.erc20.AccountId))
        : M ltac:(erc20.erc20.Balance) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow α0 erc20.erc20.Erc20Ref in
      let* α2 := erc20.erc20.Erc20Ref::["try_allowance"] α1 owner spender in
      (core.result.Result T E)::["unwrap_or_else"]
        α2
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::allowance: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := borrow error ink_primitives.LangError in
        let* α5 := deref α4 ink_primitives.LangError in
        let* α6 := borrow α5 ink_primitives.LangError in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_allowance :
      Notation.DoubleColon Self "allowance" := {
      Notation.double_colon := allowance;
    }.
    
    Definition try_allowance
        (self : ref Self)
        (owner : ltac:(erc20.erc20.AccountId))
        (spender : ltac:(erc20.erc20.AccountId))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Balance))) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow α0 erc20.erc20.Erc20Ref in
      let* α2 :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call
            (Self := erc20.erc20.Erc20Ref))
          α1 in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      let* α5 := erc20.erc20._.CallBuilder::["allowance"] α4 owner spender in
      let* α6 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput Args))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType R)))::["try_invoke"]
          α5 in
      (core.result.Result T E)::["unwrap_or_else"]
        α6
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::allowance: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          borrow
            error
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α5 :=
          deref
            α4
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α6 :=
          borrow
            α5
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_try_allowance :
      Notation.DoubleColon Self "try_allowance" := {
      Notation.double_colon := try_allowance;
    }.
    
    Definition transfer
        (self : mut_ref Self)
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
      let* α2 := erc20.erc20.Erc20Ref::["try_transfer"] α1 to value in
      (core.result.Result T E)::["unwrap_or_else"]
        α2
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::transfer: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := borrow error ink_primitives.LangError in
        let* α5 := deref α4 ink_primitives.LangError in
        let* α6 := borrow α5 ink_primitives.LangError in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_transfer :
      Notation.DoubleColon Self "transfer" := {
      Notation.double_colon := transfer;
    }.
    
    Definition try_transfer
        (self : mut_ref Self)
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
      let* α2 :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
            (Self := erc20.erc20.Erc20Ref))
          α1 in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
      let* α5 := erc20.erc20._.CallBuilder::["transfer"] α4 to value in
      let* α6 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput Args))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType R)))::["try_invoke"]
          α5 in
      (core.result.Result T E)::["unwrap_or_else"]
        α6
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::transfer: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          borrow
            error
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α5 :=
          deref
            α4
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α6 :=
          borrow
            α5
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_try_transfer :
      Notation.DoubleColon Self "try_transfer" := {
      Notation.double_colon := try_transfer;
    }.
    
    Definition approve
        (self : mut_ref Self)
        (spender : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
      let* α2 := erc20.erc20.Erc20Ref::["try_approve"] α1 spender value in
      (core.result.Result T E)::["unwrap_or_else"]
        α2
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::approve: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := borrow error ink_primitives.LangError in
        let* α5 := deref α4 ink_primitives.LangError in
        let* α6 := borrow α5 ink_primitives.LangError in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_approve :
      Notation.DoubleColon Self "approve" := {
      Notation.double_colon := approve;
    }.
    
    Definition try_approve
        (self : mut_ref Self)
        (spender : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
      let* α2 :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
            (Self := erc20.erc20.Erc20Ref))
          α1 in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
      let* α5 := erc20.erc20._.CallBuilder::["approve"] α4 spender value in
      let* α6 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput Args))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType R)))::["try_invoke"]
          α5 in
      (core.result.Result T E)::["unwrap_or_else"]
        α6
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::approve: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          borrow
            error
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α5 :=
          deref
            α4
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α6 :=
          borrow
            α5
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_try_approve :
      Notation.DoubleColon Self "try_approve" := {
      Notation.double_colon := try_approve;
    }.
    
    Definition transfer_from
        (self : mut_ref Self)
        (from : ltac:(erc20.erc20.AccountId))
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        : M ltac:(erc20.erc20.Result constr:(unit)) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
      let* α2 := erc20.erc20.Erc20Ref::["try_transfer_from"] α1 from to value in
      (core.result.Result T E)::["unwrap_or_else"]
        α2
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::transfer_from: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 := borrow error ink_primitives.LangError in
        let* α5 := deref α4 ink_primitives.LangError in
        let* α6 := borrow α5 ink_primitives.LangError in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_transfer_from :
      Notation.DoubleColon Self "transfer_from" := {
      Notation.double_colon := transfer_from;
    }.
    
    Definition try_transfer_from
        (self : mut_ref Self)
        (from : ltac:(erc20.erc20.AccountId))
        (to : ltac:(erc20.erc20.AccountId))
        (value : ltac:(erc20.erc20.Balance))
        :
          M
            ltac:(ink_primitives.MessageResult
              constr:(ltac:(erc20.erc20.Result constr:(unit)))) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := borrow_mut α0 erc20.erc20.Erc20Ref in
      let* α2 :=
        (ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut
            (Self := erc20.erc20.Erc20Ref))
          α1 in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
      let* α5 :=
        erc20.erc20._.CallBuilder::["transfer_from"] α4 from to value in
      let* α6 :=
        (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
              E
              (ink_env.call.common.Set_
                (ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Call
                  E))
              (ink_env.call.common.Set_
                (ink_env.call.execution_input.ExecutionInput Args))
              (ink_env.call.common.Set_
                (ink_env.call.common.ReturnType R)))::["try_invoke"]
          α5 in
      (core.result.Result T E)::["unwrap_or_else"]
        α6
        (let* α0 :=
          borrow
            [ mk_str "encountered error while calling Erc20::transfer_from: " ]
            (list (ref str)) in
        let* α1 := deref α0 (list (ref str)) in
        let* α2 := borrow α1 (list (ref str)) in
        let* α3 := pointer_coercion "Unsize" α2 in
        let* α4 :=
          borrow
            error
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α5 :=
          deref
            α4
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α6 :=
          borrow
            α5
            ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.Error in
        let* α7 := core.fmt.rt.Argument::["new_debug"] α6 in
        let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
        let* α9 := deref α8 (list core.fmt.rt.Argument) in
        let* α10 := borrow α9 (list core.fmt.rt.Argument) in
        let* α11 := pointer_coercion "Unsize" α10 in
        let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
        let* α13 := core.panicking.panic_fmt α12 in
        never_to_any α13).
    
    Global Instance AssociatedFunction_try_transfer_from :
      Notation.DoubleColon Self "try_transfer_from" := {
      Notation.double_colon := try_transfer_from;
    }.
  End Impl_erc20_erc20_Erc20Ref_26.
End Impl_erc20_erc20_Erc20Ref_26.

Module
  Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.
  Section
    Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition Builder : Set :=
      ink.codegen.dispatch.info.ContractCallBuilder.Type_
        (Self := erc20.erc20.Erc20).
    
    Definition call (self : ref Self) : M (ref Builder) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      borrow α3 erc20.erc20._.CallBuilder.
    
    Global Instance AssociatedFunction_call :
      Notation.DoubleColon Self "call" := {
      Notation.double_colon := call;
    }.
    
    Definition call_mut (self : mut_ref Self) : M (mut_ref Builder) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow_mut α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α0 := borrow_mut α3 erc20.erc20._.CallBuilder in
      let* α1 := deref α0 erc20.erc20._.CallBuilder in
      borrow_mut α1 erc20.erc20._.CallBuilder.
    
    Global Instance AssociatedFunction_call_mut :
      Notation.DoubleColon Self "call_mut" := {
      Notation.double_colon := call_mut;
    }.
    
    #[refine] Global Instance ℐ :
      ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Self := {
      ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder := Builder;
      ink.codegen.trait_def.call_builder.TraitCallBuilder.call := call;
      ink.codegen.trait_def.call_builder.TraitCallBuilder.call_mut := call_mut;
    }.
    Admitted.
  End
    Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End
  Impl_ink_codegen_trait_def_call_builder_TraitCallBuilder_for_erc20_erc20_Erc20Ref.

Module Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
  Section
    Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition from_account_id
        (account_id : ltac:(erc20.erc20.AccountId))
        : M Self :=
      let* α0 :=
        (ink_env.call.create_builder.FromAccountId.from_account_id
            (Self := erc20.erc20._.CallBuilder))
          account_id in
      M.alloc {| erc20.erc20.Erc20Ref.inner := α0; |}.
    
    Global Instance AssociatedFunction_from_account_id :
      Notation.DoubleColon Self "from_account_id" := {
      Notation.double_colon := from_account_id;
    }.
    
    #[refine] Global Instance ℐ :
      ink_env.call.create_builder.FromAccountId.Trait Self
        (T := ltac:(erc20.erc20.Environment)) := {
      ink_env.call.create_builder.FromAccountId.from_account_id :=
        from_account_id;
    }.
    Admitted.
  End Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_ink_env_call_create_builder_FromAccountId_for_erc20_erc20_Erc20Ref.

Module Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
  Section Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition to_account_id
        (self : ref Self)
        : M ltac:(erc20.erc20.AccountId) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      (ink.contract_ref.ToAccountId.to_account_id
          (Self := erc20.erc20._.CallBuilder))
        α4.
    
    Global Instance AssociatedFunction_to_account_id :
      Notation.DoubleColon Self "to_account_id" := {
      Notation.double_colon := to_account_id;
    }.
    
    #[refine] Global Instance ℐ :
      ink.contract_ref.ToAccountId.Trait Self
        (T := ltac:(erc20.erc20.Environment)) := {
      ink.contract_ref.ToAccountId.to_account_id := to_account_id;
    }.
    Admitted.
  End Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_ink_contract_ref_ToAccountId_for_erc20_erc20_Erc20Ref.

Module Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
  Section Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition as_ref
        (self : ref Self)
        : M (ref ltac:(erc20.erc20.AccountId)) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow α3 erc20.erc20._.CallBuilder in
      let* α5 :=
        (core.convert.AsRef.as_ref (Self := erc20.erc20._.CallBuilder)) α4 in
      let* α6 := deref α5 ink_primitives.types.AccountId in
      borrow α6 ink_primitives.types.AccountId.
    
    Global Instance AssociatedFunction_as_ref :
      Notation.DoubleColon Self "as_ref" := {
      Notation.double_colon := as_ref;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.AsRef.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
      core.convert.AsRef.as_ref := as_ref;
    }.
    Admitted.
  End Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_AsRef_for_erc20_erc20_Erc20Ref.

Module Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
  Section Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Erc20Ref.
    
    Definition as_mut
        (self : mut_ref Self)
        : M (mut_ref ltac:(erc20.erc20.AccountId)) :=
      let* α0 := deref self erc20.erc20.Erc20Ref in
      let* α1 := α0.["inner"] in
      let* α2 := borrow_mut α1 erc20.erc20._.CallBuilder in
      let* α3 := deref α2 erc20.erc20._.CallBuilder in
      let* α4 := borrow_mut α3 erc20.erc20._.CallBuilder in
      let* α5 :=
        (core.convert.AsMut.as_mut (Self := erc20.erc20._.CallBuilder)) α4 in
      let* α6 := deref α5 ink_primitives.types.AccountId in
      let* α0 := borrow_mut α6 ink_primitives.types.AccountId in
      let* α1 := deref α0 ink_primitives.types.AccountId in
      borrow_mut α1 ink_primitives.types.AccountId.
    
    Global Instance AssociatedFunction_as_mut :
      Notation.DoubleColon Self "as_mut" := {
      Notation.double_colon := as_mut;
    }.
    
    #[refine] Global Instance ℐ :
      core.convert.AsMut.Trait Self (T := ltac:(erc20.erc20.AccountId)) := {
      core.convert.AsMut.as_mut := as_mut;
    }.
    Admitted.
  End Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.
  Global Hint Resolve ℐ : core.
End Impl_core_convert_AsMut_for_erc20_erc20_Erc20Ref.

Definition __ink_generate_metadata
    `{ℋ : State.Trait}
    : M ink_metadata.InkProject :=
  let* layout :=
    let* α0 :=
      (core.convert.From.from (Self := ink_metadata.layout.LayoutKey))
        (ink_storage_traits.storage.StorageKey.KEY
          (Self := erc20.erc20.Erc20)) in
    let* α1 :=
      borrow
        (ink_storage_traits.storage.StorageKey.KEY (Self := erc20.erc20.Erc20))
        u32 in
    let* α2 := deref α1 u32 in
    let* α3 := borrow α2 u32 in
    let* α4 :=
      (ink_storage_traits.layout.StorageLayout.layout
          (Self := erc20.erc20.Erc20))
        α3 in
    let* α5 :=
      (ink_metadata.layout.RootLayout scale_info.form.MetaForm)::["new"]
        α0
        α4 in
    Pure (ink_metadata.layout.Layout.Root α5) in
  let* _ :=
    let* α0 :=
      borrow layout (ink_metadata.layout.Layout scale_info.form.MetaForm) in
    let* α1 := deref α0 (ink_metadata.layout.Layout scale_info.form.MetaForm) in
    let* α2 :=
      borrow α1 (ink_metadata.layout.Layout scale_info.form.MetaForm) in
    let* α3 := ink_metadata.layout.validate.ValidateLayout::["validate"] α2 in
    (core.result.Result T E)::["unwrap_or_else"]
      α3
      (let* α0 :=
        borrow
          [ mk_str "metadata ink! generation failed: " ]
          (list (ref str)) in
      let* α1 := deref α0 (list (ref str)) in
      let* α2 := borrow α1 (list (ref str)) in
      let* α3 := pointer_coercion "Unsize" α2 in
      let* α4 := borrow error ink_metadata.layout.MetadataError in
      let* α5 := deref α4 ink_metadata.layout.MetadataError in
      let* α6 := borrow α5 ink_metadata.layout.MetadataError in
      let* α7 := core.fmt.rt.Argument::["new_display"] α6 in
      let* α8 := borrow [ α7 ] (list core.fmt.rt.Argument) in
      let* α9 := deref α8 (list core.fmt.rt.Argument) in
      let* α10 := borrow α9 (list core.fmt.rt.Argument) in
      let* α11 := pointer_coercion "Unsize" α10 in
      let* α12 := core.fmt.Arguments::["new_v1"] α3 α11 in
      let* α13 := core.panicking.panic_fmt α12 in
      never_to_any α13) in
  let* α0 := (ink_metadata.specs.ContractSpec F)::["new"] in
  let* α1 :=
    (ink_metadata.specs.ConstructorSpec F)::["from_label"] (mk_str "new") in
  let* α2 := M.alloc 155 in
  let* α3 := M.alloc 174 in
  let* α4 := M.alloc 157 in
  let* α5 := M.alloc 94 in
  let* α6 :=
    (ink_metadata.specs.ConstructorSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          P
          R)::["selector"]
      α1
      [ α2; α3; α4; α5 ] in
  let* α7 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "total_supply") in
  let* α8 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α9 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α8
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α10 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α9 in
  let* α11 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α7 α10 in
  let* α12 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α11 in
  let* α13 :=
    (ink_metadata.specs.ConstructorSpecBuilder F S P R)::["args"] α6 [ α12 ] in
  let* α14 := M.alloc false in
  let* α15 :=
    (ink_metadata.specs.ConstructorSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α13
      α14 in
  let* α16 := M.alloc false in
  let* α17 :=
    (ink_metadata.specs.ConstructorSpecBuilder F S P R)::["default"] α15 α16 in
  let* α18 :=
    use
      (ink.reflect.dispatch.DispatchableConstructorInfo.IS_RESULT
        (Self := erc20.erc20.Erc20)) in
  let* α19 :=
    if (α18 : bool) then
      let* α0 :=
        (ink_metadata.specs.TypeSpec
              scale_info.form.MetaForm)::["with_name_str"]
          (mk_str "ink_primitives::ConstructorResult") in
      Pure (core.option.Option.Some α0)
    else
      let* α0 :=
        (ink_metadata.specs.TypeSpec
              scale_info.form.MetaForm)::["with_name_str"]
          (mk_str "ink_primitives::ConstructorResult") in
      Pure (core.option.Option.Some α0) in
  let* α20 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α19 in
  let* α21 :=
    (ink_metadata.specs.ConstructorSpecBuilder
          F
          S
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α17
      α20 in
  let* α22 :=
    (ink_metadata.specs.ConstructorSpecBuilder F S P R)::["docs"]
      α21
      [
        mk_str
          " Creates a new ERC-20 contract with the specified initial supply."
      ] in
  let* α23 :=
    (ink_metadata.specs.ConstructorSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α22 in
  let* α24 :=
    (ink_metadata.specs.ContractSpecBuilder
          F
          ink_metadata.specs.Invalid)::["constructors"]
      α0
      [ α23 ] in
  let* α25 :=
    (ink_metadata.specs.MessageSpec F)::["from_label"]
      (mk_str "total_supply") in
  let* α26 := M.alloc 219 in
  let* α27 := M.alloc 99 in
  let* α28 := M.alloc 117 in
  let* α29 := M.alloc 168 in
  let* α30 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          M
          P
          R)::["selector"]
      α25
      [ α26; α27; α28; α29 ] in
  let* α31 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["args"] α30 [ ] in
  let* α32 := deref (mk_str "MessageResult") str in
  let* α33 := borrow α32 str in
  let* α34 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α33 ] in
  let* α35 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α34
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α36 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α35 in
  let* α37 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α36 in
  let* α38 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α31
      α37 in
  let* α39 := M.alloc false in
  let* α40 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
          P
          R)::["mutates"]
      α38
      α39 in
  let* α41 := M.alloc false in
  let* α42 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α40
      α41 in
  let* α43 := M.alloc false in
  let* α44 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["default"] α42 α43 in
  let* α45 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["docs"]
      α44
      [ mk_str " Returns the total token supply." ] in
  let* α46 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.Mutates
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α45 in
  let* α47 :=
    (ink_metadata.specs.MessageSpec F)::["from_label"] (mk_str "balance_of") in
  let* α48 := M.alloc 15 in
  let* α49 := M.alloc 117 in
  let* α50 := M.alloc 90 in
  let* α51 := M.alloc 86 in
  let* α52 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          M
          P
          R)::["selector"]
      α47
      [ α48; α49; α50; α51 ] in
  let* α53 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "owner") in
  let* α54 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α55 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α54
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α56 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α55 in
  let* α57 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α53 α56 in
  let* α58 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α57 in
  let* α59 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["args"] α52 [ α58 ] in
  let* α60 := deref (mk_str "MessageResult") str in
  let* α61 := borrow α60 str in
  let* α62 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α61 ] in
  let* α63 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α62
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α64 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α63 in
  let* α65 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α64 in
  let* α66 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α59
      α65 in
  let* α67 := M.alloc false in
  let* α68 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
          P
          R)::["mutates"]
      α66
      α67 in
  let* α69 := M.alloc false in
  let* α70 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α68
      α69 in
  let* α71 := M.alloc false in
  let* α72 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["default"] α70 α71 in
  let* α73 := deref (mk_str "") str in
  let* α74 := borrow α73 str in
  let* α75 :=
    deref (mk_str " Returns `0` if the account is non-existent.") str in
  let* α76 := borrow α75 str in
  let* α77 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["docs"]
      α72
      [
        mk_str " Returns the account balance for the specified `owner`.";
        α74;
        α76
      ] in
  let* α78 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.Mutates
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α77 in
  let* α79 :=
    (ink_metadata.specs.MessageSpec F)::["from_label"] (mk_str "allowance") in
  let* α80 := M.alloc 106 in
  let* α81 := M.alloc 0 in
  let* α82 := M.alloc 22 in
  let* α83 := M.alloc 94 in
  let* α84 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          M
          P
          R)::["selector"]
      α79
      [ α80; α81; α82; α83 ] in
  let* α85 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "owner") in
  let* α86 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α87 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α86
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α88 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α87 in
  let* α89 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α85 α88 in
  let* α90 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α89 in
  let* α91 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "spender") in
  let* α92 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α93 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α92
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α94 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α93 in
  let* α95 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α91 α94 in
  let* α96 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α95 in
  let* α97 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["args"]
      α84
      [ α90; α96 ] in
  let* α98 := deref (mk_str "MessageResult") str in
  let* α99 := borrow α98 str in
  let* α100 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α99 ] in
  let* α101 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α100
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α102 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α101 in
  let* α103 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α102 in
  let* α104 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α97
      α103 in
  let* α105 := M.alloc false in
  let* α106 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
          P
          R)::["mutates"]
      α104
      α105 in
  let* α107 := M.alloc false in
  let* α108 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α106
      α107 in
  let* α109 := M.alloc false in
  let* α110 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["default"] α108 α109 in
  let* α111 := deref (mk_str "") str in
  let* α112 := borrow α111 str in
  let* α113 :=
    deref (mk_str " Returns `0` if no allowance has been set.") str in
  let* α114 := borrow α113 str in
  let* α115 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["docs"]
      α110
      [
        mk_str
          " Returns the amount which `spender` is still allowed to withdraw from `owner`.";
        α112;
        α114
      ] in
  let* α116 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.Mutates
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α115 in
  let* α117 :=
    (ink_metadata.specs.MessageSpec F)::["from_label"] (mk_str "transfer") in
  let* α118 := M.alloc 132 in
  let* α119 := M.alloc 161 in
  let* α120 := M.alloc 93 in
  let* α121 := M.alloc 161 in
  let* α122 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          M
          P
          R)::["selector"]
      α117
      [ α118; α119; α120; α121 ] in
  let* α123 := (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "to") in
  let* α124 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α125 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α124
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α126 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α125 in
  let* α127 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α123 α126 in
  let* α128 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α127 in
  let* α129 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "value") in
  let* α130 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α131 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α130
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α132 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α131 in
  let* α133 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α129 α132 in
  let* α134 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α133 in
  let* α135 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["args"]
      α122
      [ α128; α134 ] in
  let* α136 := deref (mk_str "MessageResult") str in
  let* α137 := borrow α136 str in
  let* α138 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α137 ] in
  let* α139 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α138
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α140 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α139 in
  let* α141 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α140 in
  let* α142 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α135
      α141 in
  let* α143 := M.alloc true in
  let* α144 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
          P
          R)::["mutates"]
      α142
      α143 in
  let* α145 := M.alloc false in
  let* α146 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α144
      α145 in
  let* α147 := M.alloc false in
  let* α148 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["default"] α146 α147 in
  let* α149 := deref (mk_str "") str in
  let* α150 := borrow α149 str in
  let* α151 :=
    deref (mk_str " On success a `Transfer` event is emitted.") str in
  let* α152 := borrow α151 str in
  let* α153 := deref (mk_str "") str in
  let* α154 := borrow α153 str in
  let* α155 := deref (mk_str " # Errors") str in
  let* α156 := borrow α155 str in
  let* α157 := deref (mk_str "") str in
  let* α158 := borrow α157 str in
  let* α159 :=
    deref
      (mk_str
        " Returns `InsufficientBalance` error if there are not enough tokens on")
      str in
  let* α160 := borrow α159 str in
  let* α161 := deref (mk_str " the caller's account balance.") str in
  let* α162 := borrow α161 str in
  let* α163 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["docs"]
      α148
      [
        mk_str
          " Transfers `value` amount of tokens from the caller's account to account `to`.";
        α150;
        α152;
        α154;
        α156;
        α158;
        α160;
        α162
      ] in
  let* α164 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.Mutates
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α163 in
  let* α165 :=
    (ink_metadata.specs.MessageSpec F)::["from_label"] (mk_str "approve") in
  let* α166 := M.alloc 104 in
  let* α167 := M.alloc 18 in
  let* α168 := M.alloc 102 in
  let* α169 := M.alloc 160 in
  let* α170 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          M
          P
          R)::["selector"]
      α165
      [ α166; α167; α168; α169 ] in
  let* α171 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "spender") in
  let* α172 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α173 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α172
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α174 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α173 in
  let* α175 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α171 α174 in
  let* α176 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α175 in
  let* α177 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "value") in
  let* α178 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α179 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α178
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α180 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α179 in
  let* α181 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α177 α180 in
  let* α182 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α181 in
  let* α183 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["args"]
      α170
      [ α176; α182 ] in
  let* α184 := deref (mk_str "MessageResult") str in
  let* α185 := borrow α184 str in
  let* α186 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α185 ] in
  let* α187 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α186
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α188 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α187 in
  let* α189 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α188 in
  let* α190 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α183
      α189 in
  let* α191 := M.alloc true in
  let* α192 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
          P
          R)::["mutates"]
      α190
      α191 in
  let* α193 := M.alloc false in
  let* α194 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α192
      α193 in
  let* α195 := M.alloc false in
  let* α196 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["default"] α194 α195 in
  let* α197 := deref (mk_str " the `value` amount.") str in
  let* α198 := borrow α197 str in
  let* α199 := deref (mk_str "") str in
  let* α200 := borrow α199 str in
  let* α201 :=
    deref
      (mk_str
        " If this function is called again it overwrites the current allowance with")
      str in
  let* α202 := borrow α201 str in
  let* α203 := deref (mk_str " `value`.") str in
  let* α204 := borrow α203 str in
  let* α205 := deref (mk_str "") str in
  let* α206 := borrow α205 str in
  let* α207 := deref (mk_str " An `Approval` event is emitted.") str in
  let* α208 := borrow α207 str in
  let* α209 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["docs"]
      α196
      [
        mk_str
          " Allows `spender` to withdraw from the caller's account multiple times, up to";
        α198;
        α200;
        α202;
        α204;
        α206;
        α208
      ] in
  let* α210 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.Mutates
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α209 in
  let* α211 :=
    (ink_metadata.specs.MessageSpec F)::["from_label"]
      (mk_str "transfer_from") in
  let* α212 := M.alloc 11 in
  let* α213 := M.alloc 57 in
  let* α214 := M.alloc 111 in
  let* α215 := M.alloc 24 in
  let* α216 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.Selector)
          M
          P
          R)::["selector"]
      α211
      [ α212; α213; α214; α215 ] in
  let* α217 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "from") in
  let* α218 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α219 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α218
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α220 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α219 in
  let* α221 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α217 α220 in
  let* α222 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α221 in
  let* α223 := (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "to") in
  let* α224 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α225 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α224
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α226 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α225 in
  let* α227 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α223 α226 in
  let* α228 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α227 in
  let* α229 :=
    (ink_metadata.specs.MessageParamSpec F)::["new"] (mk_str "value") in
  let* α230 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α231 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α230
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α232 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α231 in
  let* α233 :=
    (ink_metadata.specs.MessageParamSpecBuilder F)::["of_type"] α229 α232 in
  let* α234 := (ink_metadata.specs.MessageParamSpecBuilder F)::["done"] α233 in
  let* α235 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["args"]
      α216
      [ α222; α228; α234 ] in
  let* α236 := deref (mk_str "MessageResult") str in
  let* α237 := borrow α236 str in
  let* α238 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α237 ] in
  let* α239 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α238
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α240 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α239 in
  let* α241 := (ink_metadata.specs.ReturnTypeSpec F)::["new"] α240 in
  let* α242 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          P
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.Returns))::["returns"]
      α235
      α241 in
  let* α243 := M.alloc true in
  let* α244 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          (ink_metadata.specs.Missing ink_metadata.specs.state.Mutates)
          P
          R)::["mutates"]
      α242
      α243 in
  let* α245 := M.alloc false in
  let* α246 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          S
          M
          (ink_metadata.specs.Missing ink_metadata.specs.state.IsPayable)
          R)::["payable"]
      α244
      α245 in
  let* α247 := M.alloc false in
  let* α248 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["default"] α246 α247 in
  let* α249 := deref (mk_str "") str in
  let* α250 := borrow α249 str in
  let* α251 :=
    deref
      (mk_str
        " This can be used to allow a contract to transfer tokens on ones behalf and/or")
      str in
  let* α252 := borrow α251 str in
  let* α253 :=
    deref (mk_str " to charge fees in sub-currencies, for example.") str in
  let* α254 := borrow α253 str in
  let* α255 := deref (mk_str "") str in
  let* α256 := borrow α255 str in
  let* α257 :=
    deref (mk_str " On success a `Transfer` event is emitted.") str in
  let* α258 := borrow α257 str in
  let* α259 := deref (mk_str "") str in
  let* α260 := borrow α259 str in
  let* α261 := deref (mk_str " # Errors") str in
  let* α262 := borrow α261 str in
  let* α263 := deref (mk_str "") str in
  let* α264 := borrow α263 str in
  let* α265 :=
    deref
      (mk_str
        " Returns `InsufficientAllowance` error if there are not enough tokens allowed")
      str in
  let* α266 := borrow α265 str in
  let* α267 := deref (mk_str " for the caller to withdraw from `from`.") str in
  let* α268 := borrow α267 str in
  let* α269 := deref (mk_str "") str in
  let* α270 := borrow α269 str in
  let* α271 :=
    deref
      (mk_str
        " Returns `InsufficientBalance` error if there are not enough tokens on")
      str in
  let* α272 := borrow α271 str in
  let* α273 := deref (mk_str " the account balance of `from`.") str in
  let* α274 := borrow α273 str in
  let* α275 :=
    (ink_metadata.specs.MessageSpecBuilder F S M P R)::["docs"]
      α248
      [
        mk_str
          " Transfers `value` tokens on the behalf of `from` to the account `to`.";
        α250;
        α252;
        α254;
        α256;
        α258;
        α260;
        α262;
        α264;
        α266;
        α268;
        α270;
        α272;
        α274
      ] in
  let* α276 :=
    (ink_metadata.specs.MessageSpecBuilder
          F
          ink_metadata.specs.state.Selector
          ink_metadata.specs.state.Mutates
          ink_metadata.specs.state.IsPayable
          ink_metadata.specs.state.Returns)::["done"]
      α275 in
  let* α277 :=
    (ink_metadata.specs.ContractSpecBuilder F S)::["messages"]
      α24
      [ α46; α78; α116; α164; α210; α276 ] in
  let* α278 := (ink_metadata.specs.EventSpec F)::["new"] (mk_str "Transfer") in
  let* α279 := (ink_metadata.specs.EventParamSpec F)::["new"] (mk_str "from") in
  let* α280 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Option" ] in
  let* α281 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α280
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α282 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α281 in
  let* α283 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["of_type"] α279 α282 in
  let* α284 := M.alloc true in
  let* α285 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["indexed"] α283 α284 in
  let* α286 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["docs"] α285 [ ] in
  let* α287 := (ink_metadata.specs.EventParamSpecBuilder F)::["done"] α286 in
  let* α288 := (ink_metadata.specs.EventParamSpec F)::["new"] (mk_str "to") in
  let* α289 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Option" ] in
  let* α290 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α289
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α291 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α290 in
  let* α292 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["of_type"] α288 α291 in
  let* α293 := M.alloc true in
  let* α294 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["indexed"] α292 α293 in
  let* α295 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["docs"] α294 [ ] in
  let* α296 := (ink_metadata.specs.EventParamSpecBuilder F)::["done"] α295 in
  let* α297 :=
    (ink_metadata.specs.EventParamSpec F)::["new"] (mk_str "value") in
  let* α298 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α299 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α298
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α300 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α299 in
  let* α301 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["of_type"] α297 α300 in
  let* α302 := M.alloc false in
  let* α303 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["indexed"] α301 α302 in
  let* α304 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["docs"] α303 [ ] in
  let* α305 := (ink_metadata.specs.EventParamSpecBuilder F)::["done"] α304 in
  let* α306 :=
    (ink_metadata.specs.EventSpecBuilder F)::["args"]
      α278
      [ α287; α296; α305 ] in
  let* α307 :=
    (ink_metadata.specs.EventSpecBuilder F)::["docs"]
      α306
      [ mk_str " Event emitted when a token transfer occurs." ] in
  let* α308 := (ink_metadata.specs.EventSpecBuilder F)::["done"] α307 in
  let* α309 := (ink_metadata.specs.EventSpec F)::["new"] (mk_str "Approval") in
  let* α310 :=
    (ink_metadata.specs.EventParamSpec F)::["new"] (mk_str "owner") in
  let* α311 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α312 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α311
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α313 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α312 in
  let* α314 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["of_type"] α310 α313 in
  let* α315 := M.alloc true in
  let* α316 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["indexed"] α314 α315 in
  let* α317 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["docs"] α316 [ ] in
  let* α318 := (ink_metadata.specs.EventParamSpecBuilder F)::["done"] α317 in
  let* α319 :=
    (ink_metadata.specs.EventParamSpec F)::["new"] (mk_str "spender") in
  let* α320 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α321 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α320
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α322 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α321 in
  let* α323 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["of_type"] α319 α322 in
  let* α324 := M.alloc true in
  let* α325 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["indexed"] α323 α324 in
  let* α326 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["docs"] α325 [ ] in
  let* α327 := (ink_metadata.specs.EventParamSpecBuilder F)::["done"] α326 in
  let* α328 :=
    (ink_metadata.specs.EventParamSpec F)::["new"] (mk_str "value") in
  let* α329 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α330 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α329
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α331 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α330 in
  let* α332 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["of_type"] α328 α331 in
  let* α333 := M.alloc false in
  let* α334 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["indexed"] α332 α333 in
  let* α335 :=
    (ink_metadata.specs.EventParamSpecBuilder F)::["docs"] α334 [ ] in
  let* α336 := (ink_metadata.specs.EventParamSpecBuilder F)::["done"] α335 in
  let* α337 :=
    (ink_metadata.specs.EventSpecBuilder F)::["args"]
      α309
      [ α318; α327; α336 ] in
  let* α338 :=
    deref (mk_str " up to the amount of `value` tokens from `owner`.") str in
  let* α339 := borrow α338 str in
  let* α340 :=
    (ink_metadata.specs.EventSpecBuilder F)::["docs"]
      α337
      [
        mk_str
          " Event emitted when an approval occurs that `spender` is allowed to withdraw";
        α339
      ] in
  let* α341 := (ink_metadata.specs.EventSpecBuilder F)::["done"] α340 in
  let* α342 :=
    (ink_metadata.specs.ContractSpecBuilder F S)::["events"]
      α277
      [ α308; α341 ] in
  let* α343 :=
    (ink_metadata.specs.ContractSpecBuilder F S)::["docs"] α342 [ ] in
  let* α344 := deref (mk_str "LangError") str in
  let* α345 := borrow α344 str in
  let* α346 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ink"; α345 ] in
  let* α347 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α346
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α348 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α347 in
  let* α349 :=
    (ink_metadata.specs.ContractSpecBuilder F S)::["lang_error"] α343 α348 in
  let* α350 := (ink_metadata.specs.EnvironmentSpec F)::["new"] in
  let* α351 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "AccountId" ] in
  let* α352 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α351
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α353 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α352 in
  let* α354 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          (ink_metadata.specs.Missing ink_metadata.specs.state.AccountId)
          B
          H
          T
          BN
          C
          M)::["account_id"]
      α350
      α353 in
  let* α355 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Balance" ] in
  let* α356 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α355
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α357 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α356 in
  let* α358 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          A
          (ink_metadata.specs.Missing ink_metadata.specs.state.Balance)
          H
          T
          BN
          C
          M)::["balance"]
      α354
      α357 in
  let* α359 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Hash" ] in
  let* α360 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α359
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α361 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α360 in
  let* α362 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          A
          B
          (ink_metadata.specs.Missing ink_metadata.specs.state.Hash)
          T
          BN
          C
          M)::["hash"]
      α358
      α361 in
  let* α363 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "Timestamp" ] in
  let* α364 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α363
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α365 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α364 in
  let* α366 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          A
          B
          H
          (ink_metadata.specs.Missing ink_metadata.specs.state.Timestamp)
          BN
          C
          M)::["timestamp"]
      α362
      α365 in
  let* α367 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "BlockNumber" ] in
  let* α368 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α367
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α369 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α368 in
  let* α370 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          A
          B
          H
          T
          (ink_metadata.specs.Missing ink_metadata.specs.state.BlockNumber)
          C
          M)::["block_number"]
      α366
      α369 in
  let* α371 :=
    (core.iter.traits.collect.IntoIterator.into_iter (Self := (list (ref str))))
      [ mk_str "ChainExtension" ] in
  let* α372 :=
    (core.iter.traits.iterator.Iterator.map
        (Self := (core.array.iter.IntoIter (ref str))))
      α371
      (core.convert.AsRef.as_ref (Self := str)) in
  let* α373 :=
    (ink_metadata.specs.TypeSpec scale_info.form.MetaForm)::["with_name_segs"]
      α372 in
  let* α374 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          A
          B
          H
          T
          BN
          (ink_metadata.specs.Missing ink_metadata.specs.state.ChainExtension)
          M)::["chain_extension"]
      α370
      α373 in
  let* α375 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          A
          B
          H
          T
          BN
          C
          (ink_metadata.specs.Missing
            ink_metadata.specs.state.MaxEventTopics))::["max_event_topics"]
      α374
      erc20.erc20.MAX_EVENT_TOPICS in
  let* α376 :=
    (ink_metadata.specs.EnvironmentSpecBuilder
          F
          ink_metadata.specs.state.AccountId
          ink_metadata.specs.state.Balance
          ink_metadata.specs.state.Hash
          ink_metadata.specs.state.Timestamp
          ink_metadata.specs.state.BlockNumber
          ink_metadata.specs.state.ChainExtension
          ink_metadata.specs.state.MaxEventTopics)::["done"]
      α375 in
  let* α377 :=
    (ink_metadata.specs.ContractSpecBuilder F S)::["environment"] α349 α376 in
  let* α378 :=
    (ink_metadata.specs.ContractSpecBuilder
          F
          ink_metadata.specs.Valid)::["done"]
      α377 in
  ink_metadata.InkProject::["new"] layout α378.

Module Error.
  Inductive t `{ℋ : State.Trait} : Set :=
  | InsufficientBalance
  | InsufficientAllowance.
End Error.
Definition Error `{ℋ : State.Trait} : Set := Error.t.

Module Impl_scale_info_TypeInfo_for_erc20_erc20_Error.
  Section Impl_scale_info_TypeInfo_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition Identity : Set := Self.
    
    Definition type_info
        : M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T) :=
      let* α0 := (scale_info.ty.Type_ scale_info.form.MetaForm)::["builder"] in
      let* α1 :=
        (scale_info.ty.path.Path scale_info.form.MetaForm)::["new"]
          (mk_str "Error")
          (mk_str "erc20::erc20") in
      let* α2 :=
        (scale_info.build.TypeBuilder
              F
              scale_info.build.state.PathNotAssigned)::["path"]
          α0
          α1 in
      let* α3 := (alloc.vec.Vec T alloc.alloc.Global)::["new"] in
      let* α4 := (scale_info.build.TypeBuilder F S)::["type_params"] α2 α3 in
      let* α5 := borrow [ mk_str "The ERC-20 error types." ] (list (ref str)) in
      let* α6 := deref α5 (list (ref str)) in
      let* α7 := borrow α6 (list (ref str)) in
      let* α8 := pointer_coercion "Unsize" α7 in
      let* α9 :=
        (scale_info.build.TypeBuilder scale_info.form.MetaForm S)::["docs"]
          α4
          α8 in
      let* α10 := (scale_info.build.Variants F)::["new"] in
      let* α11 :=
        (scale_info.build.Variants F)::["variant"]
          α10
          (mk_str "InsufficientBalance")
          (let* α0 := M.alloc 0 in
          let* α1 := cast α0 in
          let* α2 :=
            (scale_info.build.VariantBuilder
                  F
                  scale_info.build.variant_state.IndexNotAssigned)::["index"]
              v
              α1 in
          let* α3 :=
            borrow
              [
                mk_str
                  "Returned if not enough balance to fulfill a request is available."
              ]
              (list (ref str)) in
          let* α4 := deref α3 (list (ref str)) in
          let* α5 := borrow α4 (list (ref str)) in
          let* α6 := pointer_coercion "Unsize" α5 in
          (scale_info.build.VariantBuilder scale_info.form.MetaForm S)::["docs"]
            α2
            α6) in
      let* α12 :=
        (scale_info.build.Variants F)::["variant"]
          α11
          (mk_str "InsufficientAllowance")
          (let* α0 := M.alloc 1 in
          let* α1 := cast α0 in
          let* α2 :=
            (scale_info.build.VariantBuilder
                  F
                  scale_info.build.variant_state.IndexNotAssigned)::["index"]
              v
              α1 in
          let* α3 :=
            borrow
              [
                mk_str
                  "Returned if not enough allowance to fulfill a request is available."
              ]
              (list (ref str)) in
          let* α4 := deref α3 (list (ref str)) in
          let* α5 := borrow α4 (list (ref str)) in
          let* α6 := pointer_coercion "Unsize" α5 in
          (scale_info.build.VariantBuilder scale_info.form.MetaForm S)::["docs"]
            α2
            α6) in
      (scale_info.build.TypeBuilder
            F
            scale_info.build.state.PathAssigned)::["variant"]
        α9
        α12.
    
    Global Instance AssociatedFunction_type_info :
      Notation.DoubleColon Self "type_info" := {
      Notation.double_colon := type_info;
    }.
    
    #[refine] Global Instance ℐ : scale_info.TypeInfo.Trait Self := {
      scale_info.TypeInfo.Identity := Identity;
      scale_info.TypeInfo.type_info := type_info;
    }.
    Admitted.
  End Impl_scale_info_TypeInfo_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_scale_info_TypeInfo_for_erc20_erc20_Error.

Module Impl_core_fmt_Debug_for_erc20_erc20_Error.
  Section Impl_core_fmt_Debug_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M ltac:(core.fmt.Result) :=
      let* α0 := deref f core.fmt.Formatter in
      let* α1 := borrow_mut α0 core.fmt.Formatter in
      let* α2 :=
        match self with
        | erc20.erc20.Error  =>
          let* α0 := deref (mk_str "InsufficientBalance") str in
          borrow α0 str
        | erc20.erc20.Error  =>
          let* α0 := deref (mk_str "InsufficientAllowance") str in
          borrow α0 str
        end in
      core.fmt.Formatter::["write_str"] α1 α2.
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    #[refine] Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
    Admitted.
  End Impl_core_fmt_Debug_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_core_fmt_Debug_for_erc20_erc20_Error.

Module Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  Section Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    #[refine] Global Instance ℐ :
      core.marker.StructuralPartialEq.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_StructuralPartialEq_for_erc20_erc20_Error.

Module Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  Section Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition eq (self : ref Self) (other : ref erc20.erc20.Error) : M bool :=
      let* __self_tag :=
        let* α0 := deref self erc20.erc20.Error in
        let* α1 := borrow α0 erc20.erc20.Error in
        "unimplemented parent_kind" α1 in
      let* __arg1_tag :=
        let* α0 := deref other erc20.erc20.Error in
        let* α1 := borrow α0 erc20.erc20.Error in
        "unimplemented parent_kind" α1 in
      eq __self_tag __arg1_tag.
    
    Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
      Notation.double_colon := eq;
    }.
    
    #[refine] Global Instance ℐ :
      core.cmp.PartialEq.Trait Self
        (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
      core.cmp.PartialEq.eq := eq;
    }.
    Admitted.
  End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_core_cmp_PartialEq_for_erc20_erc20_Error.

Module Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  Section Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    #[refine] Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
    }.
    Admitted.
  End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_core_marker_StructuralEq_for_erc20_erc20_Error.

Module Impl_core_cmp_Eq_for_erc20_erc20_Error.
  Section Impl_core_cmp_Eq_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition assert_receiver_is_total_eq (self : ref Self) : M unit :=
      M.alloc tt.
    
    Global Instance AssociatedFunction_assert_receiver_is_total_eq :
      Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
      Notation.double_colon := assert_receiver_is_total_eq;
    }.
    
    #[refine] Global Instance ℐ : core.cmp.Eq.Trait Self := {
    }.
    Admitted.
  End Impl_core_cmp_Eq_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_core_cmp_Eq_for_erc20_erc20_Error.

Module Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.
  Section Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy}
        (self : ref Self)
        (__codec_dest_edqy : mut_ref __CodecOutputEdqy)
        : M unit :=
      let* α0 := deref self erc20.erc20.Error in
      match α0 with
      | erc20.erc20.Error  =>
        let* _ :=
          let* α0 := deref __codec_dest_edqy __CodecOutputEdqy in
          let* α1 := borrow_mut α0 __CodecOutputEdqy in
          let* α2 := M.alloc 0 in
          let* α3 := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy))
            α1
            α3 in
        M.alloc tt
      | erc20.erc20.Error  =>
        let* _ :=
          let* α0 := deref __codec_dest_edqy __CodecOutputEdqy in
          let* α1 := borrow_mut α0 __CodecOutputEdqy in
          let* α2 := M.alloc 1 in
          let* α3 := cast α2 in
          (parity_scale_codec.codec.Output.push_byte
              (Self := __CodecOutputEdqy))
            α1
            α3 in
        M.alloc tt
      | _ => M.alloc tt
      end.
    
    Global Instance AssociatedFunction_encode_to
        {__CodecOutputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Output.Trait __CodecOutputEdqy}
        {ℋ_1 : core.marker.Sized.Trait __CodecOutputEdqy} :
      Notation.DoubleColon Self "encode_to" := {
      Notation.double_colon
        :=
        encode_to (__CodecOutputEdqy := __CodecOutputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Encode.Trait Self := {
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Encode_for_erc20_erc20_Error.

Module Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.
  Section Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.encode_like.EncodeLike.Trait Self
        (T := parity_scale_codec.encode_like.EncodeLike.Default.T Self) := {
    }.
    Admitted.
  End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_erc20_erc20_Error.

Module Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.
  Section Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := erc20.erc20.Error.
    
    Definition decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy}
        (__codec_input_edqy : mut_ref __CodecInputEdqy)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := deref __codec_input_edqy __CodecInputEdqy in
      let* α1 := borrow_mut α0 __CodecInputEdqy in
      let* α2 :=
        (parity_scale_codec.codec.Input.read_byte (Self := __CodecInputEdqy))
          α1 in
      let* α3 :=
        (core.result.Result T E)::["map_err"]
          α2
          (parity_scale_codec.error.Error::["chain"]
            e
            (mk_str "Could not decode `Error`, failed to read variant byte")) in
      let* α4 :=
        (core.ops.try_trait.Try.branch
            (Self := (core.result.Result u8 parity_scale_codec.error.Error)))
          α3 in
      let* α5 :=
        match α4 with
        | core.ops.control_flow.ControlFlow residual =>
          let* α0 :=
            (core.ops.try_trait.FromResidual.from_residual
                (Self :=
                  (core.result.Result
                    erc20.erc20.Error
                    parity_scale_codec.error.Error)))
              residual in
          let* α1 := Return α0 in
          never_to_any α1
        | core.ops.control_flow.ControlFlow val => Pure val
        end in
      match α5 with
      | __codec_x_edqy =>
        let* _ :=
          let* α0 :=
            borrow
              (Pure
                (core.result.Result.Ok
                  (erc20.erc20.Error.InsufficientBalance tt)))
              type not implemented in
          let* α1 := M.alloc tt in
          let* α2 :=
            (core.ops.function.Fn.call (Self := type not implemented)) α0 α1 in
          Return α2 in
        let* α0 := M.alloc tt in
        never_to_any α0
      | __codec_x_edqy =>
        let* _ :=
          let* α0 :=
            borrow
              (Pure
                (core.result.Result.Ok
                  (erc20.erc20.Error.InsufficientAllowance tt)))
              type not implemented in
          let* α1 := M.alloc tt in
          let* α2 :=
            (core.ops.function.Fn.call (Self := type not implemented)) α0 α1 in
          Return α2 in
        let* α0 := M.alloc tt in
        never_to_any α0
      | _ =>
        let* _ :=
          let* α0 :=
            borrow
              (let* α0 :=
                (core.convert.Into.into (Self := (ref str)))
                  (mk_str "Could not decode `Error`, variant doesn't exist") in
              Pure (core.result.Result.Err α0))
              type not implemented in
          let* α1 := M.alloc tt in
          let* α2 :=
            (core.ops.function.Fn.call (Self := type not implemented)) α0 α1 in
          Return α2 in
        let* α0 := M.alloc tt in
        never_to_any α0
      end.
    
    Global Instance AssociatedFunction_decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    
    #[refine] Global Instance ℐ :
      parity_scale_codec.codec.Decode.Trait Self := {
      parity_scale_codec.codec.Decode.decode
        {__CodecInputEdqy : Set}
        {ℋ_0 : parity_scale_codec.codec.Input.Trait __CodecInputEdqy} :=
        decode (__CodecInputEdqy := __CodecInputEdqy);
    }.
    Admitted.
  End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.
  Global Hint Resolve ℐ : core.
End Impl_parity_scale_codec_codec_Decode_for_erc20_erc20_Error.

Ltac Result T := refine (core.result.Result T erc20.erc20.Error).
