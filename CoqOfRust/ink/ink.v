(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
Require CoqOfRust.ink.ink_env.

Module result_info.
  Module  IsResultType.
  Section IsResultType.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
  End IsResultType.
  End IsResultType.
  Definition IsResultType (T : Set) `{ℋ : State.Trait} : Set :=
    M.Val (IsResultType.t (T := T)).
  
  Module  IsResultTypeFallback.
  Section IsResultTypeFallback.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      VALUE : bool;
    }.
    
  End IsResultTypeFallback.
  End IsResultTypeFallback.
  
  Module  Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  Section Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Definition Self : Set := ink.result_info.IsResultType T.
    
    Global Instance ℐ :
      ink.result_info.IsResultTypeFallback.Required.Trait Self := {
      ink.result_info.IsResultTypeFallback.VALUE := Datatypes.None;
    }.
  End Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  End Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  
  Module  IsResultErr.
  Section IsResultErr.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : ref T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
    }.
  End IsResultErr.
  End IsResultErr.
  Definition IsResultErr `{ℋ : State.Trait} (T : Set) : Set :=
    M.Val (IsResultErr.t (T := T)).
  
  Module  IsResultErrFallback.
  Section IsResultErrFallback.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End IsResultErrFallback.
  End IsResultErrFallback.
  
  Module  Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
  Section Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Definition Self : Set := ink.result_info.IsResultErr T.
    
    Global Instance ℐ :
      ink.result_info.IsResultErrFallback.Required.Trait Self := {
      ink.result_info.IsResultErrFallback.value := Datatypes.None;
    }.
  End Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
  End Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
End result_info.

Module  IsResultType.
Section IsResultType.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    marker : core.marker.PhantomData (T);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_marker : Notation.Dot "marker" := {
    Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
  Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
End IsResultType.
End IsResultType.
Definition IsResultType (T : Set) `{ℋ : State.Trait} : Set :=
  M.Val (IsResultType.t (T := T)).

Module  IsResultTypeFallback.
Section IsResultTypeFallback.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    VALUE : bool;
  }.
  
End IsResultTypeFallback.
End IsResultTypeFallback.

Module  Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
Section Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := ink.result_info.IsResultType T.
  
  Global Instance ℐ :
    ink.result_info.IsResultTypeFallback.Required.Trait Self := {
    ink.result_info.IsResultTypeFallback.VALUE := Datatypes.None;
  }.
End Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.
End Impl_ink_result_info_IsResultTypeFallback_for_ink_result_info_IsResultType_T.

Module  IsResultErr.
Section IsResultErr.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    x0 : ref T;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End IsResultErr.
End IsResultErr.
Definition IsResultErr `{ℋ : State.Trait} (T : Set) : Set :=
  M.Val (IsResultErr.t (T := T)).

Module  IsResultErrFallback.
Section IsResultErrFallback.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End IsResultErrFallback.
End IsResultErrFallback.

Module  Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
Section Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := ink.result_info.IsResultErr T.
  
  Global Instance ℐ :
    ink.result_info.IsResultErrFallback.Required.Trait Self := {
    ink.result_info.IsResultErrFallback.value := Datatypes.None;
  }.
End Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.
End Impl_ink_result_info_IsResultErrFallback_for_ink_result_info_IsResultErr_T.

Module reflect.
  Module contract.
    Module  ContractName.
    Section ContractName.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        NAME : ref str;
      }.
      
    End ContractName.
    End ContractName.
  End contract.
  
  Module dispatch.
    Module  DispatchableMessageInfo.
    Section DispatchableMessageInfo.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Input : Set;
        Output : Set;
        Storage : Set;
        CALLABLE : (mut_ref Storage) -> Input -> M Output;
        MUTATES : bool;
        PAYABLE : bool;
        SELECTOR : array u8;
        LABEL : ref str;
      }.
      
      Global Instance Method_Input `(Trait) :
        Notation.DoubleColonType Self "Input" := {
        Notation.double_colon_type := Input;
      }.
      Global Instance Method_Output `(Trait) :
        Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Storage `(Trait) :
        Notation.DoubleColonType Self "Storage" := {
        Notation.double_colon_type := Storage;
      }.
    End DispatchableMessageInfo.
    End DispatchableMessageInfo.
    
    Module  DispatchableConstructorInfo.
    Section DispatchableConstructorInfo.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Input : Set;
        Storage : Set;
        Output : Set;
        Error : Set;
        IS_RESULT : bool;
        CALLABLE : Input -> M Output;
        PAYABLE : bool;
        SELECTOR : array u8;
        LABEL : ref str;
      }.
      
      Global Instance Method_Input `(Trait) :
        Notation.DoubleColonType Self "Input" := {
        Notation.double_colon_type := Input;
      }.
      Global Instance Method_Storage `(Trait) :
        Notation.DoubleColonType Self "Storage" := {
        Notation.double_colon_type := Storage;
      }.
      Global Instance Method_Output `(Trait) :
        Notation.DoubleColonType Self "Output" := {
        Notation.double_colon_type := Output;
      }.
      Global Instance Method_Error `(Trait) :
        Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
    End DispatchableConstructorInfo.
    End DispatchableConstructorInfo.
    
    Module private.
      Module  Sealed.
      Section Sealed.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End Sealed.
      End Sealed.
    End private.
    
    Module  ConstructorOutput.
    Section ConstructorOutput.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) {C : Set} : Type := {
        ℒ_0 :: ink.reflect.dispatch.private.Sealed.Trait Self;
        IS_RESULT : bool;
        Error : Set;
        as_result : (ref Self) -> M (core.result.Result (ref C) (ref Error));
      }.
      
      Global Instance Method_Error `(Trait) :
        Notation.DoubleColonType Self "Error" := {
        Notation.double_colon_type := Error;
      }.
    End ConstructorOutput.
    End ConstructorOutput.
    
    Module  ConstructorOutputValue.
    Section ConstructorOutputValue.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
      }.
    End ConstructorOutputValue.
    End ConstructorOutputValue.
    Definition ConstructorOutputValue `{ℋ : State.Trait} (T : Set) : Set :=
      M.Val (ConstructorOutputValue.t (T := T)).
    
    Module  Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    Section Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Definition Self : Set := ink.reflect.dispatch.ConstructorOutputValue T.
      
      Global Instance ℐ : ink.reflect.dispatch.private.Sealed.Trait Self := {
      }.
    End Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    End Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    
    Module  Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    Section Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
      Context `{ℋ : State.Trait}.
      
      Context {C : Set}.
      
      Definition Self : Set := ink.reflect.dispatch.ConstructorOutputValue C.
      
      Definition Error : Set := ref unit.
      
      Parameter as_result :
          (ref Self) -> M (core.result.Result (ref C) (ref Error)).
      
      Global Instance AssociatedFunction_as_result :
        Notation.DoubleColon Self "as_result" := {
        Notation.double_colon := as_result;
      }.
      
      Global Instance ℐ :
        ink.reflect.dispatch.ConstructorOutput.Required.Trait Self (C := C) := {
        ink.reflect.dispatch.ConstructorOutput.Error := Error;
        ink.reflect.dispatch.ConstructorOutput.as_result := as_result;
        ink.reflect.dispatch.ConstructorOutput.IS_RESULT := Datatypes.None;
      }.
    End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    
    Module  Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    Section Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
      Context `{ℋ : State.Trait}.
      
      Context {C E : Set}.
      
      Definition Self : Set :=
        ink.reflect.dispatch.ConstructorOutputValue (core.result.Result C E).
      
      Parameter IS_RESULT : bool.
      
      Global Instance AssociatedFunction_IS_RESULT :
        Notation.DoubleColon Self "IS_RESULT" := {
        Notation.double_colon := IS_RESULT;
      }.
      
      Definition Error : Set := E.
      
      Parameter as_result :
          (ref Self) -> M (core.result.Result (ref C) (ref Error)).
      
      Global Instance AssociatedFunction_as_result :
        Notation.DoubleColon Self "as_result" := {
        Notation.double_colon := as_result;
      }.
      
      Global Instance ℐ :
        ink.reflect.dispatch.ConstructorOutput.Required.Trait Self (C := C) := {
        ink.reflect.dispatch.ConstructorOutput.IS_RESULT :=
          Datatypes.Some IS_RESULT;
        ink.reflect.dispatch.ConstructorOutput.Error := Error;
        ink.reflect.dispatch.ConstructorOutput.as_result := as_result;
      }.
    End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    
    Module DispatchError.
      Inductive t `{ℋ : State.Trait} : Set :=
      | InvalidSelector
      | UnknownSelector
      | InvalidParameters
      | CouldNotReadInput
      | PaidUnpayableMessage.
    End DispatchError.
    Definition DispatchError `{ℋ : State.Trait} : Set := M.Val DispatchError.t.
    
    Module  ExecuteDispatchable.
    Section ExecuteDispatchable.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        execute_dispatchable :
          Self ->
            M (core.result.Result unit ink.reflect.dispatch.DispatchError);
      }.
      
    End ExecuteDispatchable.
    End ExecuteDispatchable.
    
    Module  ContractMessageDecoder.
    Section ContractMessageDecoder.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
        ℒ_0 :: parity_scale_codec.codec.Decode.Trait Type_;
        ℒ_1 :: ink.reflect.dispatch.ExecuteDispatchable.Trait Type_;
      }.
      
      Global Instance Method_Type_ `(Trait) :
        Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractMessageDecoder.
    End ContractMessageDecoder.
    
    Module  DecodeDispatch.
    Section DecodeDispatch.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ℒ_0 :: parity_scale_codec.codec.Decode.Trait Self;
        decode_dispatch
          {I : Set}
          {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
          (mut_ref I) ->
            M (core.result.Result Self ink.reflect.dispatch.DispatchError);
      }.
      
    End DecodeDispatch.
    End DecodeDispatch.
    
    Module  ContractConstructorDecoder.
    Section ContractConstructorDecoder.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
        ℒ_0 :: ink.reflect.dispatch.DecodeDispatch.Trait Type_;
        ℒ_1 :: ink.reflect.dispatch.ExecuteDispatchable.Trait Type_;
      }.
      
      Global Instance Method_Type_ `(Trait) :
        Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractConstructorDecoder.
    End ContractConstructorDecoder.
    
    Module  Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Parameter fmt :
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M ltac:(core.fmt.Result).
      
      Global Instance AssociatedFunction_fmt :
        Notation.DoubleColon Self "fmt" := {
        Notation.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Global Instance ℐ : core.marker.Copy.Trait Self := {
      }.
    End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Parameter clone : (ref Self) -> M ink.reflect.dispatch.DispatchError.
      
      Global Instance AssociatedFunction_clone :
        Notation.DoubleColon Self "clone" := {
        Notation.double_colon := clone;
      }.
      
      Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
        core.clone.Clone.clone := clone;
        core.clone.Clone.clone_from := Datatypes.None;
      }.
    End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
      }.
    End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Parameter eq :
          (ref Self) -> (ref ink.reflect.dispatch.DispatchError) -> M bool.
      
      Global Instance AssociatedFunction_eq :
        Notation.DoubleColon Self "eq" := {
        Notation.double_colon := eq;
      }.
      
      Global Instance ℐ :
        core.cmp.PartialEq.Required.Trait Self
          (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
        core.cmp.PartialEq.eq := eq;
        core.cmp.PartialEq.ne := Datatypes.None;
      }.
    End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
      }.
    End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
      
      Global Instance AssociatedFunction_assert_receiver_is_total_eq :
        Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
        Notation.double_colon := assert_receiver_is_total_eq;
      }.
      
      Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
        core.cmp.Eq.assert_receiver_is_total_eq :=
          Datatypes.Some assert_receiver_is_total_eq;
      }.
    End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
    Section Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.reflect.dispatch.DispatchError.
      
      Parameter fmt :
          (ref Self) ->
            (mut_ref core.fmt.Formatter) ->
            M ltac:(core.fmt.Result).
      
      Global Instance AssociatedFunction_fmt :
        Notation.DoubleColon Self "fmt" := {
        Notation.double_colon := fmt;
      }.
      
      Global Instance ℐ : core.fmt.Display.Trait Self := {
        core.fmt.Display.fmt := fmt;
      }.
    End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
    End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
    
    Module  Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
    Section Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := parity_scale_codec.error.Error.
      
      Parameter from : ink.reflect.dispatch.DispatchError -> M Self.
      
      Global Instance AssociatedFunction_from :
        Notation.DoubleColon Self "from" := {
        Notation.double_colon := from;
      }.
      
      Global Instance ℐ :
        core.convert.From.Trait Self
          (T := ink.reflect.dispatch.DispatchError) := {
        core.convert.From.from := from;
      }.
    End Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
    End Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
  End dispatch.
  
  Module event.
    Module  ContractEventBase.
    Section ContractEventBase.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait) :
        Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractEventBase.
    End ContractEventBase.
  End event.
  
  Module trait_def.
    Module info.
      Module  TraitMessageInfo.
      Section TraitMessageInfo.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          PAYABLE : bool;
          SELECTOR : array u8;
        }.
        
      End TraitMessageInfo.
      End TraitMessageInfo.
      
      Module  TraitInfo.
      Section TraitInfo.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          ID : u32;
          PATH : ref str;
          NAME : ref str;
        }.
        
      End TraitInfo.
      End TraitInfo.
    End info.
    
    Module registry.
      Module  TraitDefinitionRegistry.
      Section TraitDefinitionRegistry.
        Context `{ℋ : State.Trait}.
        
        Context {E : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          marker : core.marker.PhantomData (E);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_marker : Notation.Dot "marker" := {
          Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
        }.
        Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
          Notation.double_colon x :=
            let* x := M.read x in M.pure x.(marker) : M _;
        }.
      End TraitDefinitionRegistry.
      End TraitDefinitionRegistry.
      Definition TraitDefinitionRegistry (E : Set) `{ℋ : State.Trait} : Set :=
        M.Val (TraitDefinitionRegistry.t (E := E)).
      
      Module  Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
      Section Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
        Context `{ℋ : State.Trait}.
        
        Context {E : Set}.
        
        Context {ℋ_0 : ink_env.types.Environment.Trait E}.
        Definition Self : Set :=
          ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
        
        Definition Env : Set := E.
        
        Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
          ink_env.contract.ContractEnv.Env := Env;
        }.
      End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
      End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    End registry.
  End trait_def.
End reflect.

Module codegen.
  Module dispatch.
    Module execution.
      Parameter deny_payment :
          forall
            `{ℋ : State.Trait}
            {E : Set}
            {ℋ_0 : ink_env.types.Environment.Trait E},
          M (core.result.Result unit ink.reflect.dispatch.DispatchError).
    End execution.
    
    Module info.
      Module  ContractCallBuilder.
      Section ContractCallBuilder.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Type_ : Set;
        }.
        
        Global Instance Method_Type_ `(Trait) :
          Notation.DoubleColonType Self "Type_" := {
          Notation.double_colon_type := Type_;
        }.
      End ContractCallBuilder.
      End ContractCallBuilder.
    End info.
    
    Module type_check.
      Module  DispatchInput.
      Section DispatchInput.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
        }.
      End DispatchInput.
      End DispatchInput.
      Definition DispatchInput `{ℋ : State.Trait} (T : Set) : Set :=
        M.Val (DispatchInput.t (T := T)).
      
      Module  DispatchOutput.
      Section DispatchOutput.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          x0 : T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_0 : Notation.Dot "0" := {
          Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
        }.
      End DispatchOutput.
      End DispatchOutput.
      Definition DispatchOutput `{ℋ : State.Trait} (T : Set) : Set :=
        M.Val (DispatchOutput.t (T := T)).
    End type_check.
  End dispatch.
  
  Module env.
    Module  Env.
    Section Env.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        EnvAccess : Set;
        env : Self -> M EnvAccess;
      }.
      
      Global Instance Method_EnvAccess `(Trait) :
        Notation.DoubleColonType Self "EnvAccess" := {
        Notation.double_colon_type := EnvAccess;
      }.
    End Env.
    End Env.
    
    Module  StaticEnv.
    Section StaticEnv.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        EnvAccess : Set;
        env : M EnvAccess;
      }.
      
      Global Instance Method_EnvAccess `(Trait) :
        Notation.DoubleColonType Self "EnvAccess" := {
        Notation.double_colon_type := EnvAccess;
      }.
    End StaticEnv.
    End StaticEnv.
  End env.
  
  Module event.
    Module emit.
      Module  EmitEvent.
      Section EmitEvent.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) {C : Set} : Type := {
          ℒ_0 :: ink.reflect.event.ContractEventBase.Trait C;
          emit_event
            {E : Set}
            {ℋ_0 :
              core.convert.Into.Trait E
                (T := ink.reflect.event.ContractEventBase.Type_
                  (Self := C)
                  (Trait := ltac:(refine _)))} :
            Self -> E -> M unit;
        }.
        
      End EmitEvent.
      End EmitEvent.
    End emit.
    
    Module topics.
      Module  RespectTopicLimit.
      Section RespectTopicLimit.
        Context `{ℋ : State.Trait}.
        
        Unset Primitive Projections.
        Class Trait (Self : Set) : Type := {
        }.
        Global Set Primitive Projections.
      End RespectTopicLimit.
      End RespectTopicLimit.
      
      Module  EventLenTopics.
      Section EventLenTopics.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          LenTopics : Set;
        }.
        
        Global Instance Method_LenTopics `(Trait) :
          Notation.DoubleColonType Self "LenTopics" := {
          Notation.double_colon_type := LenTopics;
        }.
      End EventLenTopics.
      End EventLenTopics.
      
      Module  EventRespectsTopicLimit.
      Section EventRespectsTopicLimit.
        Context `{ℋ : State.Trait}.
        
        Context {Event : Set}.
        
        Context
          {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
          {ℋ_1 :
            ink.codegen.event.topics.RespectTopicLimit.Trait
                (ink.codegen.event.topics.EventLenTopics.LenTopics
                  (Self := Event)
                  (Trait := ltac:(refine _)))}.
        Unset Primitive Projections.
        Record t : Set := {
          marker : core.marker.PhantomData (Event);
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_marker : Notation.Dot "marker" := {
          Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
        }.
        Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
          Notation.double_colon x :=
            let* x := M.read x in M.pure x.(marker) : M _;
        }.
      End EventRespectsTopicLimit.
      End EventRespectsTopicLimit.
      Definition EventRespectsTopicLimit
          (Event : Set)
          `{ℋ : State.Trait}
          {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
          {ℋ_1 :
            ink.codegen.event.topics.RespectTopicLimit.Trait
                (ink.codegen.event.topics.EventLenTopics.LenTopics
                  (Self := Event)
                  (Trait := ltac:(refine _)))}
          : Set :=
        M.Val (EventRespectsTopicLimit.t (Event := Event)).
      
      Module  EventTopics.
      Section EventTopics.
        Context `{ℋ : State.Trait}.
        
        Inductive t : Set := Build.
      End EventTopics.
      End EventTopics.
      Definition EventTopics `{ℋ : State.Trait} := M.Val EventTopics.t.
      
      Module  Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
      Section Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
        Context `{ℋ : State.Trait}.
        
        Definition Self : Set := ink.codegen.event.topics.EventTopics.
        
        Global Instance ℐ :
          ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
        }.
      End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
      End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
    End topics.
  End event.
  
  Module implies_return.
    Module  ImpliesReturn.
    Section ImpliesReturn.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) {T : Set} : Type := {
      }.
      Global Set Primitive Projections.
    End ImpliesReturn.
    End ImpliesReturn.
    
    Module  Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
    Section Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Definition Self : Set := T.
      
      Global Instance ℐ :
        ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
      }.
    End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
    End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
    
    Module  Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    Section Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
      Context `{ℋ : State.Trait}.
      
      Context {T E CallType Args : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Definition Self : Set :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          (ink_env.call.common.Set_ CallType)
          (ink_env.call.common.Set_
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set_ (ink_env.call.common.ReturnType T)).
      
      Global Instance ℐ :
        ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
      }.
    End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    
    Module  Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
    Section Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
      Context `{ℋ : State.Trait}.
      
      Context {E CallType Args : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Definition Self : Set :=
        ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
          E
          (ink_env.call.common.Set_ CallType)
          (ink_env.call.common.Set_
            (ink_env.call.execution_input.ExecutionInput Args))
          (ink_env.call.common.Set_ unit).
      
      Global Instance ℐ :
        ink.codegen.implies_return.ImpliesReturn.Trait Self (T := unit) := {
      }.
    End Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
    End Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  End implies_return.
  
  Module trait_def.
    Module call_builder.
      Module  TraitCallBuilder.
      Section TraitCallBuilder.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Builder : Set;
          call : (ref Self) -> M (ref Builder);
          call_mut : (mut_ref Self) -> M (mut_ref Builder);
        }.
        
        Global Instance Method_Builder `(Trait) :
          Notation.DoubleColonType Self "Builder" := {
          Notation.double_colon_type := Builder;
        }.
      End TraitCallBuilder.
      End TraitCallBuilder.
      
      Module  TraitCallForwarder.
      Section TraitCallForwarder.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Forwarder : Set;
          ℒ_0 ::
            ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
        }.
        
        Global Instance Method_Forwarder `(Trait) :
          Notation.DoubleColonType Self "Forwarder" := {
          Notation.double_colon_type := Forwarder;
        }.
      End TraitCallForwarder.
      End TraitCallForwarder.
      
      Module  TraitCallForwarderFor.
      Section TraitCallForwarderFor.
        Context `{ℋ : State.Trait}.
        
        Class Trait (Self : Set) : Type := {
          Forwarder : Set;
          ℒ_0 ::
            ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
          forward : (ref Self) -> M (ref Forwarder);
          forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
          build :
            (ref Self) ->
              M
                (ref
                  (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                    (Self := Forwarder)
                    (Trait := ltac:(refine _))));
          build_mut :
            (mut_ref Self) ->
              M
                (mut_ref
                  (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                    (Self := Forwarder)
                    (Trait := ltac:(refine _))));
        }.
        
        Global Instance Method_Forwarder `(Trait) :
          Notation.DoubleColonType Self "Forwarder" := {
          Notation.double_colon_type := Forwarder;
        }.
      End TraitCallForwarderFor.
      End TraitCallForwarderFor.
    End call_builder.
    
    Module trait_message.
      Module  TraitMessagePayable.
      Section TraitMessagePayable.
        Context `{ℋ : State.Trait}.
        
        Inductive t : Set := Build.
      End TraitMessagePayable.
      End TraitMessagePayable.
      Definition TraitMessagePayable `{ℋ : State.Trait} :=
        M.Val TraitMessagePayable.t.
      
      Module  TraitMessageSelector.
      Section TraitMessageSelector.
        Context `{ℋ : State.Trait}.
        
        Inductive t : Set := Build.
      End TraitMessageSelector.
      End TraitMessageSelector.
      Definition TraitMessageSelector `{ℋ : State.Trait} :=
        M.Val TraitMessageSelector.t.
    End trait_message.
  End trait_def.
  
  Module utils.
    Module identity_type.
      Parameter consume_type : forall `{ℋ : State.Trait} {T : Set}, M unit.
    End identity_type.
    
    Module same_type.
      Module  IsSameType.
      Section IsSameType.
        Context `{ℋ : State.Trait}.
        
        Context {T : Set}.
        
        Unset Primitive Projections.
        Record t : Set := {
          _marker : core.marker.PhantomData T;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get__marker : Notation.Dot "_marker" := {
          Notation.dot x := let* x := M.read x in M.pure x.(_marker) : M _;
        }.
        Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
          Notation.double_colon x :=
            let* x := M.read x in M.pure x.(_marker) : M _;
        }.
      End IsSameType.
      End IsSameType.
      Definition IsSameType (T : Set) `{ℋ : State.Trait} : Set :=
        M.Val (IsSameType.t (T := T)).
    End same_type.
  End utils.
End codegen.

Module dispatch.
  Module execution.
    Parameter deny_payment :
        forall
          `{ℋ : State.Trait}
          {E : Set}
          {ℋ_0 : ink_env.types.Environment.Trait E},
        M (core.result.Result unit ink.reflect.dispatch.DispatchError).
  End execution.
  
  Module info.
    Module  ContractCallBuilder.
    Section ContractCallBuilder.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Type_ : Set;
      }.
      
      Global Instance Method_Type_ `(Trait) :
        Notation.DoubleColonType Self "Type_" := {
        Notation.double_colon_type := Type_;
      }.
    End ContractCallBuilder.
    End ContractCallBuilder.
  End info.
  
  Module type_check.
    Module  DispatchInput.
    Section DispatchInput.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
      }.
    End DispatchInput.
    End DispatchInput.
    Definition DispatchInput `{ℋ : State.Trait} (T : Set) : Set :=
      M.Val (DispatchInput.t (T := T)).
    
    Module  DispatchOutput.
    Section DispatchOutput.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        x0 : T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot "0" := {
        Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
      }.
    End DispatchOutput.
    End DispatchOutput.
    Definition DispatchOutput `{ℋ : State.Trait} (T : Set) : Set :=
      M.Val (DispatchOutput.t (T := T)).
  End type_check.
End dispatch.

Module execution.
  Parameter deny_payment :
      forall
        `{ℋ : State.Trait}
        {E : Set}
        {ℋ_0 : ink_env.types.Environment.Trait E},
      M (core.result.Result unit ink.reflect.dispatch.DispatchError).
End execution.

Parameter deny_payment :
    forall
      `{ℋ : State.Trait}
      {E : Set}
      {ℋ_0 : ink_env.types.Environment.Trait E},
    M (core.result.Result unit ink.reflect.dispatch.DispatchError).

Module info.
  Module  ContractCallBuilder.
  Section ContractCallBuilder.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait) :
      Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractCallBuilder.
  End ContractCallBuilder.
End info.

Module  ContractCallBuilder.
Section ContractCallBuilder.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
  }.
  
  Global Instance Method_Type_ `(Trait) :
    Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractCallBuilder.
End ContractCallBuilder.

Module type_check.
  Module  DispatchInput.
  Section DispatchInput.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
    }.
  End DispatchInput.
  End DispatchInput.
  Definition DispatchInput `{ℋ : State.Trait} (T : Set) : Set :=
    M.Val (DispatchInput.t (T := T)).
  
  Module  DispatchOutput.
  Section DispatchOutput.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
    }.
  End DispatchOutput.
  End DispatchOutput.
  Definition DispatchOutput `{ℋ : State.Trait} (T : Set) : Set :=
    M.Val (DispatchOutput.t (T := T)).
End type_check.

Module  DispatchInput.
Section DispatchInput.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    x0 : T;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End DispatchInput.
End DispatchInput.
Definition DispatchInput `{ℋ : State.Trait} (T : Set) : Set :=
  M.Val (DispatchInput.t (T := T)).

Module  DispatchOutput.
Section DispatchOutput.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    x0 : T;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End DispatchOutput.
End DispatchOutput.
Definition DispatchOutput `{ℋ : State.Trait} (T : Set) : Set :=
  M.Val (DispatchOutput.t (T := T)).

Module env.
  Module  Env.
  Section Env.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      EnvAccess : Set;
      env : Self -> M EnvAccess;
    }.
    
    Global Instance Method_EnvAccess `(Trait) :
      Notation.DoubleColonType Self "EnvAccess" := {
      Notation.double_colon_type := EnvAccess;
    }.
  End Env.
  End Env.
  
  Module  StaticEnv.
  Section StaticEnv.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      EnvAccess : Set;
      env : M EnvAccess;
    }.
    
    Global Instance Method_EnvAccess `(Trait) :
      Notation.DoubleColonType Self "EnvAccess" := {
      Notation.double_colon_type := EnvAccess;
    }.
  End StaticEnv.
  End StaticEnv.
End env.

Module  Env.
Section Env.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    EnvAccess : Set;
    env : Self -> M EnvAccess;
  }.
  
  Global Instance Method_EnvAccess `(Trait) :
    Notation.DoubleColonType Self "EnvAccess" := {
    Notation.double_colon_type := EnvAccess;
  }.
End Env.
End Env.

Module  StaticEnv.
Section StaticEnv.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    EnvAccess : Set;
    env : M EnvAccess;
  }.
  
  Global Instance Method_EnvAccess `(Trait) :
    Notation.DoubleColonType Self "EnvAccess" := {
    Notation.double_colon_type := EnvAccess;
  }.
End StaticEnv.
End StaticEnv.

Module event.
  Module emit.
    Module  EmitEvent.
    Section EmitEvent.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) {C : Set} : Type := {
        ℒ_0 :: ink.reflect.event.ContractEventBase.Trait C;
        emit_event
          {E : Set}
          {ℋ_0 :
            core.convert.Into.Trait E
              (T := ink.reflect.event.ContractEventBase.Type_
                (Self := C)
                (Trait := ltac:(refine _)))} :
          Self -> E -> M unit;
      }.
      
    End EmitEvent.
    End EmitEvent.
  End emit.
  
  Module topics.
    Module  RespectTopicLimit.
    Section RespectTopicLimit.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End RespectTopicLimit.
    End RespectTopicLimit.
    
    Module  EventLenTopics.
    Section EventLenTopics.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        LenTopics : Set;
      }.
      
      Global Instance Method_LenTopics `(Trait) :
        Notation.DoubleColonType Self "LenTopics" := {
        Notation.double_colon_type := LenTopics;
      }.
    End EventLenTopics.
    End EventLenTopics.
    
    Module  EventRespectsTopicLimit.
    Section EventRespectsTopicLimit.
      Context `{ℋ : State.Trait}.
      
      Context {Event : Set}.
      
      Context
        {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
        {ℋ_1 :
          ink.codegen.event.topics.RespectTopicLimit.Trait
              (ink.codegen.event.topics.EventLenTopics.LenTopics
                (Self := Event)
                (Trait := ltac:(refine _)))}.
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (Event);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon x :=
          let* x := M.read x in M.pure x.(marker) : M _;
      }.
    End EventRespectsTopicLimit.
    End EventRespectsTopicLimit.
    Definition EventRespectsTopicLimit
        (Event : Set)
        `{ℋ : State.Trait}
        {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
        {ℋ_1 :
          ink.codegen.event.topics.RespectTopicLimit.Trait
              (ink.codegen.event.topics.EventLenTopics.LenTopics
                (Self := Event)
                (Trait := ltac:(refine _)))}
        : Set :=
      M.Val (EventRespectsTopicLimit.t (Event := Event)).
    
    Module  EventTopics.
    Section EventTopics.
      Context `{ℋ : State.Trait}.
      
      Inductive t : Set := Build.
    End EventTopics.
    End EventTopics.
    Definition EventTopics `{ℋ : State.Trait} := M.Val EventTopics.t.
    
    Module  Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
    Section Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
      Context `{ℋ : State.Trait}.
      
      Definition Self : Set := ink.codegen.event.topics.EventTopics.
      
      Global Instance ℐ :
        ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
      }.
    End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
    End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
  End topics.
End event.

Module emit.
  Module  EmitEvent.
  Section EmitEvent.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {C : Set} : Type := {
      ℒ_0 :: ink.reflect.event.ContractEventBase.Trait C;
      emit_event
        {E : Set}
        {ℋ_0 :
          core.convert.Into.Trait E
            (T := ink.reflect.event.ContractEventBase.Type_
              (Self := C)
              (Trait := ltac:(refine _)))} :
        Self -> E -> M unit;
    }.
    
  End EmitEvent.
  End EmitEvent.
End emit.

Module  EmitEvent.
Section EmitEvent.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) {C : Set} : Type := {
    ℒ_0 :: ink.reflect.event.ContractEventBase.Trait C;
    emit_event
      {E : Set}
      {ℋ_0 :
        core.convert.Into.Trait E
          (T := ink.reflect.event.ContractEventBase.Type_
            (Self := C)
            (Trait := ltac:(refine _)))} :
      Self -> E -> M unit;
  }.
  
End EmitEvent.
End EmitEvent.

Module topics.
  Module  RespectTopicLimit.
  Section RespectTopicLimit.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End RespectTopicLimit.
  End RespectTopicLimit.
  
  Module  EventLenTopics.
  Section EventLenTopics.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      LenTopics : Set;
    }.
    
    Global Instance Method_LenTopics `(Trait) :
      Notation.DoubleColonType Self "LenTopics" := {
      Notation.double_colon_type := LenTopics;
    }.
  End EventLenTopics.
  End EventLenTopics.
  
  Module  EventRespectsTopicLimit.
  Section EventRespectsTopicLimit.
    Context `{ℋ : State.Trait}.
    
    Context {Event : Set}.
    
    Context
      {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
      {ℋ_1 :
        ink.codegen.event.topics.RespectTopicLimit.Trait
            (ink.codegen.event.topics.EventLenTopics.LenTopics
              (Self := Event)
              (Trait := ltac:(refine _)))}.
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (Event);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
  End EventRespectsTopicLimit.
  End EventRespectsTopicLimit.
  Definition EventRespectsTopicLimit
      (Event : Set)
      `{ℋ : State.Trait}
      {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
      {ℋ_1 :
        ink.codegen.event.topics.RespectTopicLimit.Trait
            (ink.codegen.event.topics.EventLenTopics.LenTopics
              (Self := Event)
              (Trait := ltac:(refine _)))}
      : Set :=
    M.Val (EventRespectsTopicLimit.t (Event := Event)).
  
  Module  EventTopics.
  Section EventTopics.
    Context `{ℋ : State.Trait}.
    
    Inductive t : Set := Build.
  End EventTopics.
  End EventTopics.
  Definition EventTopics `{ℋ : State.Trait} := M.Val EventTopics.t.
  
  Module  Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
  Section Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.codegen.event.topics.EventTopics.
    
    Global Instance ℐ :
      ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
    }.
  End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
  End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
End topics.

Module  EventRespectsTopicLimit.
Section EventRespectsTopicLimit.
  Context `{ℋ : State.Trait}.
  
  Context {Event : Set}.
  
  Context
    {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
    {ℋ_1 :
      ink.codegen.event.topics.RespectTopicLimit.Trait
          (ink.codegen.event.topics.EventLenTopics.LenTopics
            (Self := Event)
            (Trait := ltac:(refine _)))}.
  Unset Primitive Projections.
  Record t : Set := {
    marker : core.marker.PhantomData (Event);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_marker : Notation.Dot "marker" := {
    Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
  Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
End EventRespectsTopicLimit.
End EventRespectsTopicLimit.
Definition EventRespectsTopicLimit
    (Event : Set)
    `{ℋ : State.Trait}
    {ℋ_0 : ink.codegen.event.topics.EventLenTopics.Trait Event}
    {ℋ_1 :
      ink.codegen.event.topics.RespectTopicLimit.Trait
          (ink.codegen.event.topics.EventLenTopics.LenTopics
            (Self := Event)
            (Trait := ltac:(refine _)))}
    : Set :=
  M.Val (EventRespectsTopicLimit.t (Event := Event)).

Module  RespectTopicLimit.
Section RespectTopicLimit.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End RespectTopicLimit.
End RespectTopicLimit.

Module  EventTopics.
Section EventTopics.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End EventTopics.
End EventTopics.
Definition EventTopics `{ℋ : State.Trait} := M.Val EventTopics.t.

Module  Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
Section Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.codegen.event.topics.EventTopics.
  
  Global Instance ℐ : ink.codegen.event.topics.RespectTopicLimit.Trait Self := {
  }.
End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.
End Impl_ink_codegen_event_topics_RespectTopicLimit_for_ink_codegen_event_topics_EventTopics.

Module  EventLenTopics.
Section EventLenTopics.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    LenTopics : Set;
  }.
  
  Global Instance Method_LenTopics `(Trait) :
    Notation.DoubleColonType Self "LenTopics" := {
    Notation.double_colon_type := LenTopics;
  }.
End EventLenTopics.
End EventLenTopics.

Module implies_return.
  Module  ImpliesReturn.
  Section ImpliesReturn.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) {T : Set} : Type := {
    }.
    Global Set Primitive Projections.
  End ImpliesReturn.
  End ImpliesReturn.
  
  Module  Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
  Section Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Definition Self : Set := T.
    
    Global Instance ℐ :
      ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
    }.
  End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
  End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
  
  Module  Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  Section Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
    Context `{ℋ : State.Trait}.
    
    Context {T E CallType Args : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Definition Self : Set :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
        E
        (ink_env.call.common.Set_ CallType)
        (ink_env.call.common.Set_
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set_ (ink_env.call.common.ReturnType T)).
    
    Global Instance ℐ :
      ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
    }.
  End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  
  Module  Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  Section Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
    Context `{ℋ : State.Trait}.
    
    Context {E CallType Args : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Definition Self : Set :=
      ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
        E
        (ink_env.call.common.Set_ CallType)
        (ink_env.call.common.Set_
          (ink_env.call.execution_input.ExecutionInput Args))
        (ink_env.call.common.Set_ unit).
    
    Global Instance ℐ :
      ink.codegen.implies_return.ImpliesReturn.Trait Self (T := unit) := {
    }.
  End Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  End Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
End implies_return.

Module  ImpliesReturn.
Section ImpliesReturn.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) {T : Set} : Type := {
  }.
  Global Set Primitive Projections.
End ImpliesReturn.
End ImpliesReturn.

Module  Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
Section Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := T.
  
  Global Instance ℐ :
    ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
  }.
End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.
End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_T.

Module  Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
Section Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
  Context `{ℋ : State.Trait}.
  
  Context {T E CallType Args : Set}.
  
  Context {ℋ_0 : ink_env.types.Environment.Trait E}.
  Definition Self : Set :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
      E
      (ink_env.call.common.Set_ CallType)
      (ink_env.call.common.Set_
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set_ (ink_env.call.common.ReturnType T)).
  
  Global Instance ℐ :
    ink.codegen.implies_return.ImpliesReturn.Trait Self (T := T) := {
  }.
End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.
End Impl_ink_codegen_implies_return_ImpliesReturn_T_for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__ink_env_call_common_ReturnType_T.

Module  Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
Section Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
  Context `{ℋ : State.Trait}.
  
  Context {E CallType Args : Set}.
  
  Context {ℋ_0 : ink_env.types.Environment.Trait E}.
  Definition Self : Set :=
    ink_env.backend_and_call_builder_and_engine_and_engine_test_api_and_error.CallBuilder
      E
      (ink_env.call.common.Set_ CallType)
      (ink_env.call.common.Set_
        (ink_env.call.execution_input.ExecutionInput Args))
      (ink_env.call.common.Set_ unit).
  
  Global Instance ℐ :
    ink.codegen.implies_return.ImpliesReturn.Trait Self (T := unit) := {
  }.
End Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.
End Impl_ink_codegen_implies_return_ImpliesReturn_Tuple__for_ink_env_backend_and_call_builder_and_engine_and_engine_test_api_and_error_CallBuilder_E_ink_env_call_common_Set__CallType_ink_env_call_common_Set__ink_env_call_execution_input_ExecutionInput_Args_ink_env_call_common_Set__Tuple_.

Module trait_def.
  Module call_builder.
    Module  TraitCallBuilder.
    Section TraitCallBuilder.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Builder : Set;
        call : (ref Self) -> M (ref Builder);
        call_mut : (mut_ref Self) -> M (mut_ref Builder);
      }.
      
      Global Instance Method_Builder `(Trait) :
        Notation.DoubleColonType Self "Builder" := {
        Notation.double_colon_type := Builder;
      }.
    End TraitCallBuilder.
    End TraitCallBuilder.
    
    Module  TraitCallForwarder.
    Section TraitCallForwarder.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Forwarder : Set;
        ℒ_0 ::
          ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
      }.
      
      Global Instance Method_Forwarder `(Trait) :
        Notation.DoubleColonType Self "Forwarder" := {
        Notation.double_colon_type := Forwarder;
      }.
    End TraitCallForwarder.
    End TraitCallForwarder.
    
    Module  TraitCallForwarderFor.
    Section TraitCallForwarderFor.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        Forwarder : Set;
        ℒ_0 ::
          ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
        forward : (ref Self) -> M (ref Forwarder);
        forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
        build :
          (ref Self) ->
            M
              (ref
                (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                  (Self := Forwarder)
                  (Trait := ltac:(refine _))));
        build_mut :
          (mut_ref Self) ->
            M
              (mut_ref
                (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                  (Self := Forwarder)
                  (Trait := ltac:(refine _))));
      }.
      
      Global Instance Method_Forwarder `(Trait) :
        Notation.DoubleColonType Self "Forwarder" := {
        Notation.double_colon_type := Forwarder;
      }.
    End TraitCallForwarderFor.
    End TraitCallForwarderFor.
  End call_builder.
  
  Module trait_message.
    Module  TraitMessagePayable.
    Section TraitMessagePayable.
      Context `{ℋ : State.Trait}.
      
      Inductive t : Set := Build.
    End TraitMessagePayable.
    End TraitMessagePayable.
    Definition TraitMessagePayable `{ℋ : State.Trait} :=
      M.Val TraitMessagePayable.t.
    
    Module  TraitMessageSelector.
    Section TraitMessageSelector.
      Context `{ℋ : State.Trait}.
      
      Inductive t : Set := Build.
    End TraitMessageSelector.
    End TraitMessageSelector.
    Definition TraitMessageSelector `{ℋ : State.Trait} :=
      M.Val TraitMessageSelector.t.
  End trait_message.
End trait_def.

Module call_builder.
  Module  TraitCallBuilder.
  Section TraitCallBuilder.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Builder : Set;
      call : (ref Self) -> M (ref Builder);
      call_mut : (mut_ref Self) -> M (mut_ref Builder);
    }.
    
    Global Instance Method_Builder `(Trait) :
      Notation.DoubleColonType Self "Builder" := {
      Notation.double_colon_type := Builder;
    }.
  End TraitCallBuilder.
  End TraitCallBuilder.
  
  Module  TraitCallForwarder.
  Section TraitCallForwarder.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Forwarder : Set;
      ℒ_0 ::
        ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
    }.
    
    Global Instance Method_Forwarder `(Trait) :
      Notation.DoubleColonType Self "Forwarder" := {
      Notation.double_colon_type := Forwarder;
    }.
  End TraitCallForwarder.
  End TraitCallForwarder.
  
  Module  TraitCallForwarderFor.
  Section TraitCallForwarderFor.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Forwarder : Set;
      ℒ_0 ::
        ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
      forward : (ref Self) -> M (ref Forwarder);
      forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
      build :
        (ref Self) ->
          M
            (ref
              (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                (Self := Forwarder)
                (Trait := ltac:(refine _))));
      build_mut :
        (mut_ref Self) ->
          M
            (mut_ref
              (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
                (Self := Forwarder)
                (Trait := ltac:(refine _))));
    }.
    
    Global Instance Method_Forwarder `(Trait) :
      Notation.DoubleColonType Self "Forwarder" := {
      Notation.double_colon_type := Forwarder;
    }.
  End TraitCallForwarderFor.
  End TraitCallForwarderFor.
End call_builder.

Module  TraitCallBuilder.
Section TraitCallBuilder.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Builder : Set;
    call : (ref Self) -> M (ref Builder);
    call_mut : (mut_ref Self) -> M (mut_ref Builder);
  }.
  
  Global Instance Method_Builder `(Trait) :
    Notation.DoubleColonType Self "Builder" := {
    Notation.double_colon_type := Builder;
  }.
End TraitCallBuilder.
End TraitCallBuilder.

Module  TraitCallForwarder.
Section TraitCallForwarder.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Forwarder : Set;
    ℒ_0 :: ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
  }.
  
  Global Instance Method_Forwarder `(Trait) :
    Notation.DoubleColonType Self "Forwarder" := {
    Notation.double_colon_type := Forwarder;
  }.
End TraitCallForwarder.
End TraitCallForwarder.

Module  TraitCallForwarderFor.
Section TraitCallForwarderFor.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Forwarder : Set;
    ℒ_0 :: ink.codegen.trait_def.call_builder.TraitCallBuilder.Trait Forwarder;
    forward : (ref Self) -> M (ref Forwarder);
    forward_mut : (mut_ref Self) -> M (mut_ref Forwarder);
    build :
      (ref Self) ->
        M
          (ref
            (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
              (Self := Forwarder)
              (Trait := ltac:(refine _))));
    build_mut :
      (mut_ref Self) ->
        M
          (mut_ref
            (ink.codegen.trait_def.call_builder.TraitCallBuilder.Builder
              (Self := Forwarder)
              (Trait := ltac:(refine _))));
  }.
  
  Global Instance Method_Forwarder `(Trait) :
    Notation.DoubleColonType Self "Forwarder" := {
    Notation.double_colon_type := Forwarder;
  }.
End TraitCallForwarderFor.
End TraitCallForwarderFor.

Module trait_message.
  Module  TraitMessagePayable.
  Section TraitMessagePayable.
    Context `{ℋ : State.Trait}.
    
    Inductive t : Set := Build.
  End TraitMessagePayable.
  End TraitMessagePayable.
  Definition TraitMessagePayable `{ℋ : State.Trait} :=
    M.Val TraitMessagePayable.t.
  
  Module  TraitMessageSelector.
  Section TraitMessageSelector.
    Context `{ℋ : State.Trait}.
    
    Inductive t : Set := Build.
  End TraitMessageSelector.
  End TraitMessageSelector.
  Definition TraitMessageSelector `{ℋ : State.Trait} :=
    M.Val TraitMessageSelector.t.
End trait_message.

Module  TraitMessagePayable.
Section TraitMessagePayable.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End TraitMessagePayable.
End TraitMessagePayable.
Definition TraitMessagePayable `{ℋ : State.Trait} :=
  M.Val TraitMessagePayable.t.

Module  TraitMessageSelector.
Section TraitMessageSelector.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End TraitMessageSelector.
End TraitMessageSelector.
Definition TraitMessageSelector `{ℋ : State.Trait} :=
  M.Val TraitMessageSelector.t.

Module utils.
  Module identity_type.
    Parameter consume_type : forall `{ℋ : State.Trait} {T : Set}, M unit.
  End identity_type.
  
  Module same_type.
    Module  IsSameType.
    Section IsSameType.
      Context `{ℋ : State.Trait}.
      
      Context {T : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        _marker : core.marker.PhantomData T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get__marker : Notation.Dot "_marker" := {
        Notation.dot x := let* x := M.read x in M.pure x.(_marker) : M _;
      }.
      Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
        Notation.double_colon x :=
          let* x := M.read x in M.pure x.(_marker) : M _;
      }.
    End IsSameType.
    End IsSameType.
    Definition IsSameType (T : Set) `{ℋ : State.Trait} : Set :=
      M.Val (IsSameType.t (T := T)).
  End same_type.
End utils.

Module identity_type.
  Parameter consume_type : forall `{ℋ : State.Trait} {T : Set}, M unit.
End identity_type.

Parameter consume_type : forall `{ℋ : State.Trait} {T : Set}, M unit.

Module same_type.
  Module  IsSameType.
  Section IsSameType.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      _marker : core.marker.PhantomData T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot x := let* x := M.read x in M.pure x.(_marker) : M _;
    }.
    Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(_marker) : M _;
    }.
  End IsSameType.
  End IsSameType.
  Definition IsSameType (T : Set) `{ℋ : State.Trait} : Set :=
    M.Val (IsSameType.t (T := T)).
End same_type.

Module  IsSameType.
Section IsSameType.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    _marker : core.marker.PhantomData T;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get__marker : Notation.Dot "_marker" := {
    Notation.dot x := let* x := M.read x in M.pure x.(_marker) : M _;
  }.
  Global Instance Get_AF__marker : Notation.DoubleColon t "_marker" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(_marker) : M _;
  }.
End IsSameType.
End IsSameType.
Definition IsSameType (T : Set) `{ℋ : State.Trait} : Set :=
  M.Val (IsSameType.t (T := T)).

Module contract.
  Module  ContractName.
  Section ContractName.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      NAME : ref str;
    }.
    
  End ContractName.
  End ContractName.
End contract.

Module  ContractName.
Section ContractName.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    NAME : ref str;
  }.
  
End ContractName.
End ContractName.

Module Wrap_dispatch_1.
Module dispatch.
  Module  DispatchableMessageInfo.
  Section DispatchableMessageInfo.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Input : Set;
      Output : Set;
      Storage : Set;
      CALLABLE : (mut_ref Storage) -> Input -> M Output;
      MUTATES : bool;
      PAYABLE : bool;
      SELECTOR : array u8;
      LABEL : ref str;
    }.
    
    Global Instance Method_Input `(Trait) :
      Notation.DoubleColonType Self "Input" := {
      Notation.double_colon_type := Input;
    }.
    Global Instance Method_Output `(Trait) :
      Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Storage `(Trait) :
      Notation.DoubleColonType Self "Storage" := {
      Notation.double_colon_type := Storage;
    }.
  End DispatchableMessageInfo.
  End DispatchableMessageInfo.
  
  Module  DispatchableConstructorInfo.
  Section DispatchableConstructorInfo.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Input : Set;
      Storage : Set;
      Output : Set;
      Error : Set;
      IS_RESULT : bool;
      CALLABLE : Input -> M Output;
      PAYABLE : bool;
      SELECTOR : array u8;
      LABEL : ref str;
    }.
    
    Global Instance Method_Input `(Trait) :
      Notation.DoubleColonType Self "Input" := {
      Notation.double_colon_type := Input;
    }.
    Global Instance Method_Storage `(Trait) :
      Notation.DoubleColonType Self "Storage" := {
      Notation.double_colon_type := Storage;
    }.
    Global Instance Method_Output `(Trait) :
      Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_Error `(Trait) :
      Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
  End DispatchableConstructorInfo.
  End DispatchableConstructorInfo.
  
  Module private.
    Module  Sealed.
    Section Sealed.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End Sealed.
    End Sealed.
  End private.
  
  Module  ConstructorOutput.
  Section ConstructorOutput.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {C : Set} : Type := {
      ℒ_0 :: ink.reflect.dispatch.private.Sealed.Trait Self;
      IS_RESULT : bool;
      Error : Set;
      as_result : (ref Self) -> M (core.result.Result (ref C) (ref Error));
    }.
    
    Global Instance Method_Error `(Trait) :
      Notation.DoubleColonType Self "Error" := {
      Notation.double_colon_type := Error;
    }.
  End ConstructorOutput.
  End ConstructorOutput.
  
  Module  ConstructorOutputValue.
  Section ConstructorOutputValue.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      x0 : T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot "0" := {
      Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
    }.
  End ConstructorOutputValue.
  End ConstructorOutputValue.
  Definition ConstructorOutputValue `{ℋ : State.Trait} (T : Set) : Set :=
    M.Val (ConstructorOutputValue.t (T := T)).
  
  Module  Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
  Section Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
    Context `{ℋ : State.Trait}.
    
    Context {T : Set}.
    
    Definition Self : Set := ink.reflect.dispatch.ConstructorOutputValue T.
    
    Global Instance ℐ : ink.reflect.dispatch.private.Sealed.Trait Self := {
    }.
  End Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
  End Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
  
  Module  Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
  Section Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
    Context `{ℋ : State.Trait}.
    
    Context {C : Set}.
    
    Definition Self : Set := ink.reflect.dispatch.ConstructorOutputValue C.
    
    Definition Error : Set := ref unit.
    
    Parameter as_result :
        (ref Self) -> M (core.result.Result (ref C) (ref Error)).
    
    Global Instance AssociatedFunction_as_result :
      Notation.DoubleColon Self "as_result" := {
      Notation.double_colon := as_result;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.ConstructorOutput.Required.Trait Self (C := C) := {
      ink.reflect.dispatch.ConstructorOutput.Error := Error;
      ink.reflect.dispatch.ConstructorOutput.as_result := as_result;
      ink.reflect.dispatch.ConstructorOutput.IS_RESULT := Datatypes.None;
    }.
  End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
  End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
  
  Module  Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
  Section Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
    Context `{ℋ : State.Trait}.
    
    Context {C E : Set}.
    
    Definition Self : Set :=
      ink.reflect.dispatch.ConstructorOutputValue (core.result.Result C E).
    
    Parameter IS_RESULT : bool.
    
    Global Instance AssociatedFunction_IS_RESULT :
      Notation.DoubleColon Self "IS_RESULT" := {
      Notation.double_colon := IS_RESULT;
    }.
    
    Definition Error : Set := E.
    
    Parameter as_result :
        (ref Self) -> M (core.result.Result (ref C) (ref Error)).
    
    Global Instance AssociatedFunction_as_result :
      Notation.DoubleColon Self "as_result" := {
      Notation.double_colon := as_result;
    }.
    
    Global Instance ℐ :
      ink.reflect.dispatch.ConstructorOutput.Required.Trait Self (C := C) := {
      ink.reflect.dispatch.ConstructorOutput.IS_RESULT :=
        Datatypes.Some IS_RESULT;
      ink.reflect.dispatch.ConstructorOutput.Error := Error;
      ink.reflect.dispatch.ConstructorOutput.as_result := as_result;
    }.
  End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
  End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
  
  Module DispatchError.
    Inductive t `{ℋ : State.Trait} : Set :=
    | InvalidSelector
    | UnknownSelector
    | InvalidParameters
    | CouldNotReadInput
    | PaidUnpayableMessage.
  End DispatchError.
  Definition DispatchError `{ℋ : State.Trait} : Set := M.Val DispatchError.t.
  
  Module  ExecuteDispatchable.
  Section ExecuteDispatchable.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      execute_dispatchable :
        Self -> M (core.result.Result unit ink.reflect.dispatch.DispatchError);
    }.
    
  End ExecuteDispatchable.
  End ExecuteDispatchable.
  
  Module  ContractMessageDecoder.
  Section ContractMessageDecoder.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
      ℒ_0 :: parity_scale_codec.codec.Decode.Trait Type_;
      ℒ_1 :: ink.reflect.dispatch.ExecuteDispatchable.Trait Type_;
    }.
    
    Global Instance Method_Type_ `(Trait) :
      Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractMessageDecoder.
  End ContractMessageDecoder.
  
  Module  DecodeDispatch.
  Section DecodeDispatch.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: parity_scale_codec.codec.Decode.Trait Self;
      decode_dispatch {I : Set} {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
        (mut_ref I) ->
          M (core.result.Result Self ink.reflect.dispatch.DispatchError);
    }.
    
  End DecodeDispatch.
  End DecodeDispatch.
  
  Module  ContractConstructorDecoder.
  Section ContractConstructorDecoder.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
      ℒ_0 :: ink.reflect.dispatch.DecodeDispatch.Trait Type_;
      ℒ_1 :: ink.reflect.dispatch.ExecuteDispatchable.Trait Type_;
    }.
    
    Global Instance Method_Type_ `(Trait) :
      Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractConstructorDecoder.
  End ContractConstructorDecoder.
  
  Module  Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Parameter clone : (ref Self) -> M ink.reflect.dispatch.DispatchError.
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
    }.
  End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Parameter eq :
        (ref Self) -> (ref ink.reflect.dispatch.DispatchError) -> M bool.
    
    Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
      Notation.double_colon := eq;
    }.
    
    Global Instance ℐ :
      core.cmp.PartialEq.Required.Trait Self
        (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
      core.cmp.PartialEq.eq := eq;
      core.cmp.PartialEq.ne := Datatypes.None;
    }.
  End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
    }.
  End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
    
    Global Instance AssociatedFunction_assert_receiver_is_total_eq :
      Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
      Notation.double_colon := assert_receiver_is_total_eq;
    }.
    
    Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
      core.cmp.Eq.assert_receiver_is_total_eq :=
        Datatypes.Some assert_receiver_is_total_eq;
    }.
  End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
  Section Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.reflect.dispatch.DispatchError.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Display.Trait Self := {
      core.fmt.Display.fmt := fmt;
    }.
  End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
  End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
  
  Module  Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
  Section Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := parity_scale_codec.error.Error.
    
    Parameter from : ink.reflect.dispatch.DispatchError -> M Self.
    
    Global Instance AssociatedFunction_from :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance ℐ :
      core.convert.From.Trait Self
        (T := ink.reflect.dispatch.DispatchError) := {
      core.convert.From.from := from;
    }.
  End Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
  End Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
End dispatch.
End Wrap_dispatch_1.
Import Wrap_dispatch_1.

Module  DispatchableMessageInfo.
Section DispatchableMessageInfo.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Input : Set;
    Output : Set;
    Storage : Set;
    CALLABLE : (mut_ref Storage) -> Input -> M Output;
    MUTATES : bool;
    PAYABLE : bool;
    SELECTOR : array u8;
    LABEL : ref str;
  }.
  
  Global Instance Method_Input `(Trait) :
    Notation.DoubleColonType Self "Input" := {
    Notation.double_colon_type := Input;
  }.
  Global Instance Method_Output `(Trait) :
    Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_Storage `(Trait) :
    Notation.DoubleColonType Self "Storage" := {
    Notation.double_colon_type := Storage;
  }.
End DispatchableMessageInfo.
End DispatchableMessageInfo.

Module  DispatchableConstructorInfo.
Section DispatchableConstructorInfo.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Input : Set;
    Storage : Set;
    Output : Set;
    Error : Set;
    IS_RESULT : bool;
    CALLABLE : Input -> M Output;
    PAYABLE : bool;
    SELECTOR : array u8;
    LABEL : ref str;
  }.
  
  Global Instance Method_Input `(Trait) :
    Notation.DoubleColonType Self "Input" := {
    Notation.double_colon_type := Input;
  }.
  Global Instance Method_Storage `(Trait) :
    Notation.DoubleColonType Self "Storage" := {
    Notation.double_colon_type := Storage;
  }.
  Global Instance Method_Output `(Trait) :
    Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_Error `(Trait) :
    Notation.DoubleColonType Self "Error" := {
    Notation.double_colon_type := Error;
  }.
End DispatchableConstructorInfo.
End DispatchableConstructorInfo.

Module private.
  Module  Sealed.
  Section Sealed.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End Sealed.
  End Sealed.
End private.

Module  Sealed.
Section Sealed.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End Sealed.
End Sealed.

Module  ConstructorOutput.
Section ConstructorOutput.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) {C : Set} : Type := {
    ℒ_0 :: ink.reflect.dispatch.private.Sealed.Trait Self;
    IS_RESULT : bool;
    Error : Set;
    as_result : (ref Self) -> M (core.result.Result (ref C) (ref Error));
  }.
  
  Global Instance Method_Error `(Trait) :
    Notation.DoubleColonType Self "Error" := {
    Notation.double_colon_type := Error;
  }.
End ConstructorOutput.
End ConstructorOutput.

Module  ConstructorOutputValue.
Section ConstructorOutputValue.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    x0 : T;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot "0" := {
    Notation.dot x := let* x := M.read x in M.pure x.(x0) : M _;
  }.
End ConstructorOutputValue.
End ConstructorOutputValue.
Definition ConstructorOutputValue `{ℋ : State.Trait} (T : Set) : Set :=
  M.Val (ConstructorOutputValue.t (T := T)).

Module  Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
Section Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
  Context `{ℋ : State.Trait}.
  
  Context {T : Set}.
  
  Definition Self : Set := ink.reflect.dispatch.ConstructorOutputValue T.
  
  Global Instance ℐ : ink.reflect.dispatch.private.Sealed.Trait Self := {
  }.
End Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.
End Impl_ink_reflect_dispatch_private_Sealed_for_ink_reflect_dispatch_ConstructorOutputValue_T.

Module  Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
Section Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
  Context `{ℋ : State.Trait}.
  
  Context {C : Set}.
  
  Definition Self : Set := ink.reflect.dispatch.ConstructorOutputValue C.
  
  Definition Error : Set := ref unit.
  
  Parameter as_result :
      (ref Self) -> M (core.result.Result (ref C) (ref Error)).
  
  Global Instance AssociatedFunction_as_result :
    Notation.DoubleColon Self "as_result" := {
    Notation.double_colon := as_result;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.ConstructorOutput.Required.Trait Self (C := C) := {
    ink.reflect.dispatch.ConstructorOutput.Error := Error;
    ink.reflect.dispatch.ConstructorOutput.as_result := as_result;
    ink.reflect.dispatch.ConstructorOutput.IS_RESULT := Datatypes.None;
  }.
End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.
End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_C.

Module  Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
Section Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
  Context `{ℋ : State.Trait}.
  
  Context {C E : Set}.
  
  Definition Self : Set :=
    ink.reflect.dispatch.ConstructorOutputValue (core.result.Result C E).
  
  Parameter IS_RESULT : bool.
  
  Global Instance AssociatedFunction_IS_RESULT :
    Notation.DoubleColon Self "IS_RESULT" := {
    Notation.double_colon := IS_RESULT;
  }.
  
  Definition Error : Set := E.
  
  Parameter as_result :
      (ref Self) -> M (core.result.Result (ref C) (ref Error)).
  
  Global Instance AssociatedFunction_as_result :
    Notation.DoubleColon Self "as_result" := {
    Notation.double_colon := as_result;
  }.
  
  Global Instance ℐ :
    ink.reflect.dispatch.ConstructorOutput.Required.Trait Self (C := C) := {
    ink.reflect.dispatch.ConstructorOutput.IS_RESULT :=
      Datatypes.Some IS_RESULT;
    ink.reflect.dispatch.ConstructorOutput.Error := Error;
    ink.reflect.dispatch.ConstructorOutput.as_result := as_result;
  }.
End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.
End Impl_ink_reflect_dispatch_ConstructorOutput_C_for_ink_reflect_dispatch_ConstructorOutputValue_core_result_Result_C_E.

Module  ContractMessageDecoder.
Section ContractMessageDecoder.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    ℒ_0 :: parity_scale_codec.codec.Decode.Trait Type_;
    ℒ_1 :: ink.reflect.dispatch.ExecuteDispatchable.Trait Type_;
  }.
  
  Global Instance Method_Type_ `(Trait) :
    Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractMessageDecoder.
End ContractMessageDecoder.

Module  ContractConstructorDecoder.
Section ContractConstructorDecoder.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
    ℒ_0 :: ink.reflect.dispatch.DecodeDispatch.Trait Type_;
    ℒ_1 :: ink.reflect.dispatch.ExecuteDispatchable.Trait Type_;
  }.
  
  Global Instance Method_Type_ `(Trait) :
    Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractConstructorDecoder.
End ContractConstructorDecoder.

Module  ExecuteDispatchable.
Section ExecuteDispatchable.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    execute_dispatchable :
      Self -> M (core.result.Result unit ink.reflect.dispatch.DispatchError);
  }.
  
End ExecuteDispatchable.
End ExecuteDispatchable.

Module DispatchError.
  Inductive t `{ℋ : State.Trait} : Set :=
  | InvalidSelector
  | UnknownSelector
  | InvalidParameters
  | CouldNotReadInput
  | PaidUnpayableMessage.
End DispatchError.
Definition DispatchError `{ℋ : State.Trait} : Set := M.Val DispatchError.t.

Module  Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.
End Impl_core_fmt_Debug_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.
End Impl_core_marker_Copy_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Parameter clone : (ref Self) -> M ink.reflect.dispatch.DispatchError.
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.
End Impl_core_clone_Clone_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Global Instance ℐ : core.marker.StructuralPartialEq.Trait Self := {
  }.
End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.
End Impl_core_marker_StructuralPartialEq_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Parameter eq :
      (ref Self) -> (ref ink.reflect.dispatch.DispatchError) -> M bool.
  
  Global Instance AssociatedFunction_eq : Notation.DoubleColon Self "eq" := {
    Notation.double_colon := eq;
  }.
  
  Global Instance ℐ :
    core.cmp.PartialEq.Required.Trait Self
      (Rhs := core.cmp.PartialEq.Default.Rhs Self) := {
    core.cmp.PartialEq.eq := eq;
    core.cmp.PartialEq.ne := Datatypes.None;
  }.
End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.
End Impl_core_cmp_PartialEq_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Global Instance ℐ : core.marker.StructuralEq.Trait Self := {
  }.
End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.
End Impl_core_marker_StructuralEq_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Parameter assert_receiver_is_total_eq : (ref Self) -> M unit.
  
  Global Instance AssociatedFunction_assert_receiver_is_total_eq :
    Notation.DoubleColon Self "assert_receiver_is_total_eq" := {
    Notation.double_colon := assert_receiver_is_total_eq;
  }.
  
  Global Instance ℐ : core.cmp.Eq.Required.Trait Self := {
    core.cmp.Eq.assert_receiver_is_total_eq :=
      Datatypes.Some assert_receiver_is_total_eq;
  }.
End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.
End Impl_core_cmp_Eq_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
Section Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.reflect.dispatch.DispatchError.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Display.Trait Self := {
    core.fmt.Display.fmt := fmt;
  }.
End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.
End Impl_core_fmt_Display_for_ink_reflect_dispatch_DispatchError.

Module  Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
Section Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := parity_scale_codec.error.Error.
  
  Parameter from : ink.reflect.dispatch.DispatchError -> M Self.
  
  Global Instance AssociatedFunction_from :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance ℐ :
    core.convert.From.Trait Self (T := ink.reflect.dispatch.DispatchError) := {
    core.convert.From.from := from;
  }.
End Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.
End Impl_core_convert_From_ink_reflect_dispatch_DispatchError_for_parity_scale_codec_error_Error.

Module  DecodeDispatch.
Section DecodeDispatch.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: parity_scale_codec.codec.Decode.Trait Self;
    decode_dispatch {I : Set} {ℋ_0 : parity_scale_codec.codec.Input.Trait I} :
      (mut_ref I) ->
        M (core.result.Result Self ink.reflect.dispatch.DispatchError);
  }.
  
End DecodeDispatch.
End DecodeDispatch.

Module Wrap_event_1.
Module event.
  Module  ContractEventBase.
  Section ContractEventBase.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Type_ : Set;
    }.
    
    Global Instance Method_Type_ `(Trait) :
      Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := Type_;
    }.
  End ContractEventBase.
  End ContractEventBase.
End event.
End Wrap_event_1.
Import Wrap_event_1.

Module  ContractEventBase.
Section ContractEventBase.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Type_ : Set;
  }.
  
  Global Instance Method_Type_ `(Trait) :
    Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
End ContractEventBase.
End ContractEventBase.

Module Wrap_trait_def_1.
Module trait_def.
  Module info.
    Module  TraitMessageInfo.
    Section TraitMessageInfo.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        PAYABLE : bool;
        SELECTOR : array u8;
      }.
      
    End TraitMessageInfo.
    End TraitMessageInfo.
    
    Module  TraitInfo.
    Section TraitInfo.
      Context `{ℋ : State.Trait}.
      
      Class Trait (Self : Set) : Type := {
        ID : u32;
        PATH : ref str;
        NAME : ref str;
      }.
      
    End TraitInfo.
    End TraitInfo.
  End info.
  
  Module registry.
    Module  TraitDefinitionRegistry.
    Section TraitDefinitionRegistry.
      Context `{ℋ : State.Trait}.
      
      Context {E : Set}.
      
      Unset Primitive Projections.
      Record t : Set := {
        marker : core.marker.PhantomData (E);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
      }.
      Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
        Notation.double_colon x :=
          let* x := M.read x in M.pure x.(marker) : M _;
      }.
    End TraitDefinitionRegistry.
    End TraitDefinitionRegistry.
    Definition TraitDefinitionRegistry (E : Set) `{ℋ : State.Trait} : Set :=
      M.Val (TraitDefinitionRegistry.t (E := E)).
    
    Module  Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    Section Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
      Context `{ℋ : State.Trait}.
      
      Context {E : Set}.
      
      Context {ℋ_0 : ink_env.types.Environment.Trait E}.
      Definition Self : Set :=
        ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
      
      Definition Env : Set := E.
      
      Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
        ink_env.contract.ContractEnv.Env := Env;
      }.
    End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
  End registry.
End trait_def.
End Wrap_trait_def_1.
Import Wrap_trait_def_1.

Module Wrap_info_1.
Module info.
  Module  TraitMessageInfo.
  Section TraitMessageInfo.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      PAYABLE : bool;
      SELECTOR : array u8;
    }.
    
  End TraitMessageInfo.
  End TraitMessageInfo.
  
  Module  TraitInfo.
  Section TraitInfo.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ID : u32;
      PATH : ref str;
      NAME : ref str;
    }.
    
  End TraitInfo.
  End TraitInfo.
End info.
End Wrap_info_1.
Import Wrap_info_1.

Module  TraitMessageInfo.
Section TraitMessageInfo.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    PAYABLE : bool;
    SELECTOR : array u8;
  }.
  
End TraitMessageInfo.
End TraitMessageInfo.

Module  TraitInfo.
Section TraitInfo.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ID : u32;
    PATH : ref str;
    NAME : ref str;
  }.
  
End TraitInfo.
End TraitInfo.

Module registry.
  Module  TraitDefinitionRegistry.
  Section TraitDefinitionRegistry.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
  End TraitDefinitionRegistry.
  End TraitDefinitionRegistry.
  Definition TraitDefinitionRegistry (E : Set) `{ℋ : State.Trait} : Set :=
    M.Val (TraitDefinitionRegistry.t (E := E)).
  
  Module  Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
  Section Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Context {ℋ_0 : ink_env.types.Environment.Trait E}.
    Definition Self : Set :=
      ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
    
    Definition Env : Set := E.
    
    Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
      ink_env.contract.ContractEnv.Env := Env;
    }.
  End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
  End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
End registry.

Module  TraitDefinitionRegistry.
Section TraitDefinitionRegistry.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    marker : core.marker.PhantomData (E);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_marker : Notation.Dot "marker" := {
    Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
  Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
End TraitDefinitionRegistry.
End TraitDefinitionRegistry.
Definition TraitDefinitionRegistry (E : Set) `{ℋ : State.Trait} : Set :=
  M.Val (TraitDefinitionRegistry.t (E := E)).

Module  Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
Section Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Context {ℋ_0 : ink_env.types.Environment.Trait E}.
  Definition Self : Set :=
    ink.reflect.trait_def.registry.TraitDefinitionRegistry E.
  
  Definition Env : Set := E.
  
  Global Instance ℐ : ink_env.contract.ContractEnv.Trait Self := {
    ink_env.contract.ContractEnv.Env := Env;
  }.
End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.
End Impl_ink_env_contract_ContractEnv_for_ink_reflect_trait_def_registry_TraitDefinitionRegistry_E.

Module chain_extension.
  Module  ChainExtensionInstance.
  Section ChainExtensionInstance.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      Instance : Set;
      instantiate : M Instance;
    }.
    
    Global Instance Method_Instance `(Trait) :
      Notation.DoubleColonType Self "Instance" := {
      Notation.double_colon_type := Instance;
    }.
  End ChainExtensionInstance.
  End ChainExtensionInstance.
  
  Module  ChainExtension.
  Section ChainExtension.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ErrorCode : Set;
      ℒ_0 :: ink_env.chain_extension.FromStatusCode.Trait ErrorCode;
    }.
    
    Global Instance Method_ErrorCode `(Trait) :
      Notation.DoubleColonType Self "ErrorCode" := {
      Notation.double_colon_type := ErrorCode;
    }.
  End ChainExtension.
  End ChainExtension.
  
  Module private.
    Module  IsResultSealed.
    Section IsResultSealed.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End IsResultSealed.
    End IsResultSealed.
    
    Module  OutputSealed.
    Section OutputSealed.
      Context `{ℋ : State.Trait}.
      
      Unset Primitive Projections.
      Class Trait (Self : Set) : Type := {
      }.
      Global Set Primitive Projections.
    End OutputSealed.
    End OutputSealed.
  End private.
  
  Module  IsResultType.
  Section IsResultType.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) : Type := {
      ℒ_0 :: ink.chain_extension.private.IsResultSealed.Trait Self;
      Ok : Set;
      Err : Set;
    }.
    
    Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
      Notation.double_colon_type := Ok;
    }.
    Global Instance Method_Err `(Trait) :
      Notation.DoubleColonType Self "Err" := {
      Notation.double_colon_type := Err;
    }.
  End IsResultType.
  End IsResultType.
  
  Module  Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  Section Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
    Context `{ℋ : State.Trait}.
    
    Context {T E : Set}.
    
    Definition Self : Set := core.result.Result T E.
    
    Global Instance ℐ :
      ink.chain_extension.private.IsResultSealed.Trait Self := {
    }.
  End Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  End Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  
  Module  Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  Section Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
    Context `{ℋ : State.Trait}.
    
    Context {T E : Set}.
    
    Definition Self : Set := core.result.Result T E.
    
    Definition Ok : Set := T.
    
    Definition Err : Set := E.
    
    Global Instance ℐ : ink.chain_extension.IsResultType.Trait Self := {
      ink.chain_extension.IsResultType.Ok := Ok;
      ink.chain_extension.IsResultType.Err := Err;
    }.
  End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  
  Module  Output.
  Section Output.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {T E : Set} : Type := {
      ℒ_0 :: ink.chain_extension.private.OutputSealed.Trait Self;
      ReturnType : Set;
    }.
    
    Global Instance Method_ReturnType `(Trait) :
      Notation.DoubleColonType Self "ReturnType" := {
      Notation.double_colon_type := ReturnType;
    }.
  End Output.
  End Output.
  
  Module  ValueReturned.
  Section ValueReturned.
    Context `{ℋ : State.Trait}.
    
    Inductive t : Set := Build.
  End ValueReturned.
  End ValueReturned.
  Definition ValueReturned `{ℋ : State.Trait} := M.Val ValueReturned.t.
  
  Module  Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
  Section Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
    Context `{ℋ : State.Trait}.
    
    Definition Self : Set := ink.chain_extension.ValueReturned.
    
    Global Instance ℐ : ink.chain_extension.private.OutputSealed.Trait Self := {
    }.
  End Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
  End Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
  
  (* Module Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
  (* Section Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
    Context `{ℋ : State.Trait}.
    
    Context {T E : Set}.
    
    Definition Self : Set := ink.chain_extension.ValueReturned.
    
    Definition ReturnType : Set := T.
    
    Global Instance ℐ :
      ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
      ink.chain_extension.Output.ReturnType := ReturnType;
    }.
  End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)
  End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)
  
  (* Module Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
  (* Section Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
    Context `{ℋ : State.Trait}.
    
    Context {T E : Set}.
    
    Definition Self : Set := ink.chain_extension.ValueReturned.
    
    Definition ReturnType : Set := core.result.Result T E.
    
    Global Instance ℐ :
      ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
      ink.chain_extension.Output.ReturnType := ReturnType;
    }.
  End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)
  End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)
End chain_extension.

Module  ChainExtensionInstance.
Section ChainExtensionInstance.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    Instance : Set;
    instantiate : M Instance;
  }.
  
  Global Instance Method_Instance `(Trait) :
    Notation.DoubleColonType Self "Instance" := {
    Notation.double_colon_type := Instance;
  }.
End ChainExtensionInstance.
End ChainExtensionInstance.

Module  ChainExtension.
Section ChainExtension.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ErrorCode : Set;
    ℒ_0 :: ink_env.chain_extension.FromStatusCode.Trait ErrorCode;
  }.
  
  Global Instance Method_ErrorCode `(Trait) :
    Notation.DoubleColonType Self "ErrorCode" := {
    Notation.double_colon_type := ErrorCode;
  }.
End ChainExtension.
End ChainExtension.

(* Module  IsResultType.
Section IsResultType.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) : Type := {
    ℒ_0 :: ink.chain_extension.private.IsResultSealed.Trait Self;
    Ok : Set;
    Err : Set;
  }.
  
  Global Instance Method_Ok `(Trait) : Notation.DoubleColonType Self "Ok" := {
    Notation.double_colon_type := Ok;
  }.
  Global Instance Method_Err `(Trait) : Notation.DoubleColonType Self "Err" := {
    Notation.double_colon_type := Err;
  }.
End IsResultType.
End IsResultType. *)

Module  Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
Section Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
  Context `{ℋ : State.Trait}.
  
  Context {T E : Set}.
  
  Definition Self : Set := core.result.Result T E.
  
  Global Instance ℐ : ink.chain_extension.private.IsResultSealed.Trait Self := {
  }.
End Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.
End Impl_ink_chain_extension_private_IsResultSealed_for_core_result_Result_T_E.

Module  Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
Section Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
  Context `{ℋ : State.Trait}.
  
  Context {T E : Set}.
  
  Definition Self : Set := core.result.Result T E.
  
  Definition Ok : Set := T.
  
  Definition Err : Set := E.
  
  Global Instance ℐ : ink.chain_extension.IsResultType.Trait Self := {
    ink.chain_extension.IsResultType.Ok := Ok;
    ink.chain_extension.IsResultType.Err := Err;
  }.
End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.
End Impl_ink_chain_extension_IsResultType_for_core_result_Result_T_E.

Module  Output.
Section Output.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) {T E : Set} : Type := {
    ℒ_0 :: ink.chain_extension.private.OutputSealed.Trait Self;
    ReturnType : Set;
  }.
  
  Global Instance Method_ReturnType `(Trait) :
    Notation.DoubleColonType Self "ReturnType" := {
    Notation.double_colon_type := ReturnType;
  }.
End Output.
End Output.

Module  ValueReturned.
Section ValueReturned.
  Context `{ℋ : State.Trait}.
  
  Inductive t : Set := Build.
End ValueReturned.
End ValueReturned.
Definition ValueReturned `{ℋ : State.Trait} := M.Val ValueReturned.t.

Module  Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
Section Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
  Context `{ℋ : State.Trait}.
  
  Definition Self : Set := ink.chain_extension.ValueReturned.
  
  Global Instance ℐ : ink.chain_extension.private.OutputSealed.Trait Self := {
  }.
End Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.
End Impl_ink_chain_extension_private_OutputSealed_for_ink_chain_extension_ValueReturned.

(* Module Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
(* Section Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
  Context `{ℋ : State.Trait}.
  
  Context {T E : Set}.
  
  Definition Self : Set := ink.chain_extension.ValueReturned.
  
  Definition ReturnType : Set := T.
  
  Global Instance ℐ :
    ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
    ink.chain_extension.Output.ReturnType := ReturnType;
  }.
End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)
End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)

(* Module Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
(* Section Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned.
  Context `{ℋ : State.Trait}.
  
  Context {T E : Set}.
  
  Definition Self : Set := ink.chain_extension.ValueReturned.
  
  Definition ReturnType : Set := core.result.Result T E.
  
  Global Instance ℐ :
    ink.chain_extension.Output.Trait Self (T := T) (E := E) := {
    ink.chain_extension.Output.ReturnType := ReturnType;
  }.
End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)
End Impl_ink_chain_extension_Output_T_E_for_ink_chain_extension_ValueReturned. *)

Module Wrap_private_1.
Module private.
  Module  IsResultSealed.
  Section IsResultSealed.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End IsResultSealed.
  End IsResultSealed.
  
  Module  OutputSealed.
  Section OutputSealed.
    Context `{ℋ : State.Trait}.
    
    Unset Primitive Projections.
    Class Trait (Self : Set) : Type := {
    }.
    Global Set Primitive Projections.
  End OutputSealed.
  End OutputSealed.
End private.
End Wrap_private_1.
Import Wrap_private_1.

Module  IsResultSealed.
Section IsResultSealed.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End IsResultSealed.
End IsResultSealed.

Module  OutputSealed.
Section OutputSealed.
  Context `{ℋ : State.Trait}.
  
  Unset Primitive Projections.
  Class Trait (Self : Set) : Type := {
  }.
  Global Set Primitive Projections.
End OutputSealed.
End OutputSealed.

Module contract_ref.
  Module  ToAccountId.
  Section ToAccountId.
    Context `{ℋ : State.Trait}.
    
    Class Trait (Self : Set) {T : Set} : Type := {
      ℒ_0 :: ink_env.types.Environment.Trait T;
      to_account_id :
        (ref Self) ->
          M
            (ink_env.types.Environment.AccountId
              (Self := T)
              (Trait := ltac:(refine _)));
    }.
    
  End ToAccountId.
  End ToAccountId.
End contract_ref.

Module  ToAccountId.
Section ToAccountId.
  Context `{ℋ : State.Trait}.
  
  Class Trait (Self : Set) {T : Set} : Type := {
    ℒ_0 :: ink_env.types.Environment.Trait T;
    to_account_id :
      (ref Self) ->
        M
          (ink_env.types.Environment.AccountId
            (Self := T)
            (Trait := ltac:(refine _)));
  }.
  
End ToAccountId.
End ToAccountId.

Module env_access.
  Module  EnvAccess.
  Section EnvAccess.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Unset Primitive Projections.
    Record t : Set := {
      marker : core.marker.PhantomData (ref E);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
    Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
      Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
    }.
  End EnvAccess.
  End EnvAccess.
  Definition EnvAccess (E : Set) `{ℋ : State.Trait} : Set :=
    M.Val (EnvAccess.t (E := E)).
  
  Module  Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  Section Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Context {ℋ_0 : core.marker.Copy.Trait E}.
    Definition Self : Set := ink.env_access.EnvAccess E.
    
    Global Instance ℐ : core.marker.Copy.Trait Self := {
    }.
  End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  
  Module  Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  Section Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Context {ℋ_0 : core.clone.Clone.Trait E}.
    Definition Self : Set := ink.env_access.EnvAccess E.
    
    Parameter clone : (ref Self) -> M (ink.env_access.EnvAccess E).
    
    Global Instance AssociatedFunction_clone :
      Notation.DoubleColon Self "clone" := {
      Notation.double_colon := clone;
    }.
    
    Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
      core.clone.Clone.clone := clone;
      core.clone.Clone.clone_from := Datatypes.None;
    }.
  End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  
  Module  Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  Section Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Definition Self : Set := ink.env_access.EnvAccess E.
    
    Parameter default : M Self.
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance ℐ : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  
  Module  Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
  Section Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
    Context `{ℋ : State.Trait}.
    
    Context {E : Set}.
    
    Definition Self : Set := ink.env_access.EnvAccess E.
    
    Parameter fmt :
        (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
    
    Global Instance AssociatedFunction_fmt :
      Notation.DoubleColon Self "fmt" := {
      Notation.double_colon := fmt;
    }.
    
    Global Instance ℐ : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
  End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
End env_access.

Module  EnvAccess.
Section EnvAccess.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Unset Primitive Projections.
  Record t : Set := {
    marker : core.marker.PhantomData (ref E);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_marker : Notation.Dot "marker" := {
    Notation.dot x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
  Global Instance Get_AF_marker : Notation.DoubleColon t "marker" := {
    Notation.double_colon x := let* x := M.read x in M.pure x.(marker) : M _;
  }.
End EnvAccess.
End EnvAccess.
Definition EnvAccess (E : Set) `{ℋ : State.Trait} : Set :=
  M.Val (EnvAccess.t (E := E)).

Module  Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
Section Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Context {ℋ_0 : core.marker.Copy.Trait E}.
  Definition Self : Set := ink.env_access.EnvAccess E.
  
  Global Instance ℐ : core.marker.Copy.Trait Self := {
  }.
End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.
End Impl_core_marker_Copy_for_ink_env_access_EnvAccess_E.

Module  Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
Section Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Context {ℋ_0 : core.clone.Clone.Trait E}.
  Definition Self : Set := ink.env_access.EnvAccess E.
  
  Parameter clone : (ref Self) -> M (ink.env_access.EnvAccess E).
  
  Global Instance AssociatedFunction_clone :
    Notation.DoubleColon Self "clone" := {
    Notation.double_colon := clone;
  }.
  
  Global Instance ℐ : core.clone.Clone.Required.Trait Self := {
    core.clone.Clone.clone := clone;
    core.clone.Clone.clone_from := Datatypes.None;
  }.
End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.
End Impl_core_clone_Clone_for_ink_env_access_EnvAccess_E.

Module  Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
Section Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Definition Self : Set := ink.env_access.EnvAccess E.
  
  Parameter default : M Self.
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance ℐ : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.
End Impl_core_default_Default_for_ink_env_access_EnvAccess_E.

Module  Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
Section Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
  Context `{ℋ : State.Trait}.
  
  Context {E : Set}.
  
  Definition Self : Set := ink.env_access.EnvAccess E.
  
  Parameter fmt :
      (ref Self) -> (mut_ref core.fmt.Formatter) -> M ltac:(core.fmt.Result).
  
  Global Instance AssociatedFunction_fmt : Notation.DoubleColon Self "fmt" := {
    Notation.double_colon := fmt;
  }.
  
  Global Instance ℐ : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
End Impl_core_fmt_Debug_for_ink_env_access_EnvAccess_E.
