(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module ext.
  Definition Result : Set := core.result.Result unit ink_engine.ext.Error.
  
  Module Error.
    Inductive t : Set :=
    | CalleeTrapped
    | CalleeReverted
    | KeyNotFound
    | _BelowSubsistenceThreshold
    | TransferFailed
    | _EndowmentTooLow
    | CodeNotFound
    | NotCallable
    | LoggingDisabled
    | EcdsaRecoveryFailed
    | Unknown.
  End Error.
  Definition Error := Error.t.
  
  Module Impl_core_fmt_Debug_for_ink_engine_ext_Error.
    Definition Self := ink_engine.ext.Error.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_engine_ext_Error.
  
  Module Impl_core_convert_From_for_ink_engine_ext_Result.
    Definition Self := ink_engine.ext.Result.
    
    Parameter from : forall `{H : State.Trait},
        ink_engine.ext.ReturnCode ->
        M (H := H) Self.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := ink_engine.ext.ReturnCode) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_engine_ext_Result.
  
  Module ReturnCode.
    Unset Primitive Projections.
    Record t : Set := {
      _ : u32;
    }.
    Global Set Primitive Projections.
  
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ReturnCode.
  Definition ReturnCode := ReturnCode.t.
  
  Module Impl_ink_engine_ext_ReturnCode.
    Definition Self := ink_engine.ext.ReturnCode.
    
    Parameter into_u32 : forall `{H : State.Trait}, Self -> M (H := H) u32.
    
    Global Instance Method_into_u32 `{H : State.Trait} :
      Notation.Dot "into_u32" := {
      Notation.dot := into_u32;
    }.
  End Impl_ink_engine_ext_ReturnCode.
  
  Module Engine.
    Unset Primitive Projections.
    Record t : Set := {
      database : ink_engine.database.Database;
      exec_context : ink_engine.exec_context.ExecContext;
      debug_info : ink_engine.test_api.DebugInfo;
      chain_spec : ink_engine.ext.ChainSpec;
      chain_extension_handler
        :
        ink_engine.chain_extension.ChainExtensionHandler;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_database : Notation.Dot "database" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_exec_context : Notation.Dot "exec_context" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_debug_info : Notation.Dot "debug_info" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_chain_spec : Notation.Dot "chain_spec" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_chain_extension_handler :
        Notation.Dot "chain_extension_handler" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
  End Engine.
  Definition Engine : Set := Engine.t.
  
  Module ChainSpec.
    Unset Primitive Projections.
    Record t : Set := {
      gas_price : ink_engine.types.Balance;
      minimum_balance : ink_engine.types.Balance;
      block_time : ink_engine.types.BlockTimestamp;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_gas_price : Notation.Dot "gas_price" := {
      Notation.dot '(Build_t x0 _ _) := x0;
    }.
    Global Instance Get_minimum_balance : Notation.Dot "minimum_balance" := {
      Notation.dot '(Build_t _ x1 _) := x1;
    }.
    Global Instance Get_block_time : Notation.Dot "block_time" := {
      Notation.dot '(Build_t _ _ x2) := x2;
    }.
  End ChainSpec.
  Definition ChainSpec : Set := ChainSpec.t.
  
  Module Impl_core_default_Default_for_ink_engine_ext_ChainSpec.
    Definition Self := ink_engine.ext.ChainSpec.
    
    Parameter default : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_ext_ChainSpec.
  
  Module Impl_ink_engine_ext_Engine.
    Definition Self := ink_engine.ext.Engine.
    
    Parameter new : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_engine_ext_Engine.
  
  Module Impl_core_default_Default_for_ink_engine_ext_Engine.
    Definition Self := ink_engine.ext.Engine.
    
    Parameter default : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_ext_Engine.
  
  Module Impl_ink_engine_ext_Engine_2.
    Definition Self := ink_engine.ext.Engine.
    
    Parameter transfer : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        ref Slice ->
        M (H := H) ink_engine.ext.Result.
    
    Global Instance Method_transfer `{H : State.Trait} :
      Notation.Dot "transfer" := {
      Notation.dot := transfer;
    }.
    
    Parameter deposit_event : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        ref Slice ->
        M (H := H) unit.
    
    Global Instance Method_deposit_event `{H : State.Trait} :
      Notation.Dot "deposit_event" := {
      Notation.dot := deposit_event;
    }.
    
    Parameter set_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        ref Slice ->
        M (H := H) (core.option.Option u32).
    
    Global Instance Method_set_storage `{H : State.Trait} :
      Notation.Dot "set_storage" := {
      Notation.dot := set_storage;
    }.
    
    Parameter get_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        mut_ref (mut_ref Slice) ->
        M (H := H) ink_engine.ext.Result.
    
    Global Instance Method_get_storage `{H : State.Trait} :
      Notation.Dot "get_storage" := {
      Notation.dot := get_storage;
    }.
    
    Parameter take_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        mut_ref (mut_ref Slice) ->
        M (H := H) ink_engine.ext.Result.
    
    Global Instance Method_take_storage `{H : State.Trait} :
      Notation.Dot "take_storage" := {
      Notation.dot := take_storage;
    }.
    
    Parameter contains_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        M (H := H) (core.option.Option u32).
    
    Global Instance Method_contains_storage `{H : State.Trait} :
      Notation.Dot "contains_storage" := {
      Notation.dot := contains_storage;
    }.
    
    Parameter clear_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        M (H := H) (core.option.Option u32).
    
    Global Instance Method_clear_storage `{H : State.Trait} :
      Notation.Dot "clear_storage" := {
      Notation.dot := clear_storage;
    }.
    
    Parameter terminate : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        M (H := H) Empty_set.
    
    Global Instance Method_terminate `{H : State.Trait} :
      Notation.Dot "terminate" := {
      Notation.dot := terminate;
    }.
    
    Parameter caller : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_caller `{H : State.Trait} :
      Notation.Dot "caller" := {
      Notation.dot := caller;
    }.
    
    Parameter balance : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_balance `{H : State.Trait} :
      Notation.Dot "balance" := {
      Notation.dot := balance;
    }.
    
    Parameter value_transferred : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_value_transferred `{H : State.Trait} :
      Notation.Dot "value_transferred" := {
      Notation.dot := value_transferred;
    }.
    
    Parameter address : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_address `{H : State.Trait} :
      Notation.Dot "address" := {
      Notation.dot := address;
    }.
    
    Parameter debug_message : forall `{H : State.Trait},
        mut_ref Self ->
        ref str ->
        M (H := H) unit.
    
    Global Instance Method_debug_message `{H : State.Trait} :
      Notation.Dot "debug_message" := {
      Notation.dot := debug_message;
    }.
    
    Parameter hash_blake2_256 : forall `{H : State.Trait},
        ref Slice ->
        mut_ref list u8 ->
        M (H := H) unit.
    
    Global Instance AssociatedFunction_hash_blake2_256 `{H : State.Trait} :
      Notation.DoubleColon Self "hash_blake2_256" := {
      Notation.double_colon := hash_blake2_256;
    }.
    
    Parameter hash_blake2_128 : forall `{H : State.Trait},
        ref Slice ->
        mut_ref list u8 ->
        M (H := H) unit.
    
    Global Instance AssociatedFunction_hash_blake2_128 `{H : State.Trait} :
      Notation.DoubleColon Self "hash_blake2_128" := {
      Notation.double_colon := hash_blake2_128;
    }.
    
    Parameter hash_sha2_256 : forall `{H : State.Trait},
        ref Slice ->
        mut_ref list u8 ->
        M (H := H) unit.
    
    Global Instance AssociatedFunction_hash_sha2_256 `{H : State.Trait} :
      Notation.DoubleColon Self "hash_sha2_256" := {
      Notation.double_colon := hash_sha2_256;
    }.
    
    Parameter hash_keccak_256 : forall `{H : State.Trait},
        ref Slice ->
        mut_ref list u8 ->
        M (H := H) unit.
    
    Global Instance AssociatedFunction_hash_keccak_256 `{H : State.Trait} :
      Notation.DoubleColon Self "hash_keccak_256" := {
      Notation.double_colon := hash_keccak_256;
    }.
    
    Parameter block_number : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_block_number `{H : State.Trait} :
      Notation.Dot "block_number" := {
      Notation.dot := block_number;
    }.
    
    Parameter block_timestamp : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_block_timestamp `{H : State.Trait} :
      Notation.Dot "block_timestamp" := {
      Notation.dot := block_timestamp;
    }.
    
    Parameter gas_left : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_gas_left `{H : State.Trait} :
      Notation.Dot "gas_left" := {
      Notation.dot := gas_left;
    }.
    
    Parameter minimum_balance : forall `{H : State.Trait},
        ref Self ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_minimum_balance `{H : State.Trait} :
      Notation.Dot "minimum_balance" := {
      Notation.dot := minimum_balance;
    }.
    
    Parameter instantiate : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        u64 ->
        ref Slice ->
        ref Slice ->
        mut_ref (mut_ref Slice) ->
        mut_ref (mut_ref Slice) ->
        ref Slice ->
        M (H := H) ink_engine.ext.Result.
    
    Global Instance Method_instantiate `{H : State.Trait} :
      Notation.Dot "instantiate" := {
      Notation.dot := instantiate;
    }.
    
    Parameter call : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        u64 ->
        ref Slice ->
        ref Slice ->
        mut_ref (mut_ref Slice) ->
        M (H := H) ink_engine.ext.Result.
    
    Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
      Notation.dot := call;
    }.
    
    Parameter weight_to_fee : forall `{H : State.Trait},
        ref Self ->
        u64 ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_weight_to_fee `{H : State.Trait} :
      Notation.Dot "weight_to_fee" := {
      Notation.dot := weight_to_fee;
    }.
    
    Parameter call_chain_extension : forall `{H : State.Trait},
        mut_ref Self ->
        u32 ->
        ref Slice ->
        mut_ref (mut_ref Slice) ->
        M (H := H) unit.
    
    Global Instance Method_call_chain_extension `{H : State.Trait} :
      Notation.Dot "call_chain_extension" := {
      Notation.dot := call_chain_extension;
    }.
    
    Parameter ecdsa_recover : forall `{H : State.Trait},
        mut_ref Self ->
        ref list u8 ->
        ref list u8 ->
        mut_ref list u8 ->
        M (H := H) ink_engine.ext.Result.
    
    Global Instance Method_ecdsa_recover `{H : State.Trait} :
      Notation.Dot "ecdsa_recover" := {
      Notation.dot := ecdsa_recover;
    }.
  End Impl_ink_engine_ext_Engine_2.
  
  Parameter set_output : forall `{H : State.Trait},
      mut_ref (mut_ref Slice) ->
      ref Slice ->
      M (H := H) unit.
End ext.

Definition Result : Set := core.result.Result unit ink_engine.ext.Error.

Module Error.
  Inductive t : Set :=
  | CalleeTrapped
  | CalleeReverted
  | KeyNotFound
  | _BelowSubsistenceThreshold
  | TransferFailed
  | _EndowmentTooLow
  | CodeNotFound
  | NotCallable
  | LoggingDisabled
  | EcdsaRecoveryFailed
  | Unknown.
End Error.
Definition Error := Error.t.

Module Impl_core_fmt_Debug_for_ink_engine_ext_Error.
  Definition Self := ink_engine.ext.Error.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_engine_ext_Error.

Module Impl_core_convert_From_for_ink_engine_ext_Result.
  Definition Self := ink_engine.ext.Result.
  
  Parameter from : forall `{H : State.Trait},
      ink_engine.ext.ReturnCode ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_engine.ext.ReturnCode) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_engine_ext_Result.

Module ReturnCode.
  Unset Primitive Projections.
  Record t : Set := {
    _ : u32;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ReturnCode.
Definition ReturnCode := ReturnCode.t.

Module Impl_ink_engine_ext_ReturnCode_2.
  Definition Self := ink_engine.ext.ReturnCode.
  
  Parameter into_u32 : forall `{H : State.Trait}, Self -> M (H := H) u32.
  
  Global Instance Method_into_u32 `{H : State.Trait} :
    Notation.Dot "into_u32" := {
    Notation.dot := into_u32;
  }.
End Impl_ink_engine_ext_ReturnCode_2.

Module Engine.
  Unset Primitive Projections.
  Record t : Set := {
    database : ink_engine.database.Database;
    exec_context : ink_engine.exec_context.ExecContext;
    debug_info : ink_engine.test_api.DebugInfo;
    chain_spec : ink_engine.ext.ChainSpec;
    chain_extension_handler : ink_engine.chain_extension.ChainExtensionHandler;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_database : Notation.Dot "database" := {
    Notation.dot '(Build_t x0 _ _ _ _) := x0;
  }.
  Global Instance Get_exec_context : Notation.Dot "exec_context" := {
    Notation.dot '(Build_t _ x1 _ _ _) := x1;
  }.
  Global Instance Get_debug_info : Notation.Dot "debug_info" := {
    Notation.dot '(Build_t _ _ x2 _ _) := x2;
  }.
  Global Instance Get_chain_spec : Notation.Dot "chain_spec" := {
    Notation.dot '(Build_t _ _ _ x3 _) := x3;
  }.
  Global Instance Get_chain_extension_handler :
      Notation.Dot "chain_extension_handler" := {
    Notation.dot '(Build_t _ _ _ _ x4) := x4;
  }.
End Engine.
Definition Engine : Set := Engine.t.

Module ChainSpec.
  Unset Primitive Projections.
  Record t : Set := {
    gas_price : ink_engine.types.Balance;
    minimum_balance : ink_engine.types.Balance;
    block_time : ink_engine.types.BlockTimestamp;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_gas_price : Notation.Dot "gas_price" := {
    Notation.dot '(Build_t x0 _ _) := x0;
  }.
  Global Instance Get_minimum_balance : Notation.Dot "minimum_balance" := {
    Notation.dot '(Build_t _ x1 _) := x1;
  }.
  Global Instance Get_block_time : Notation.Dot "block_time" := {
    Notation.dot '(Build_t _ _ x2) := x2;
  }.
End ChainSpec.
Definition ChainSpec : Set := ChainSpec.t.

Module Impl_core_default_Default_for_ink_engine_ext_ChainSpec.
  Definition Self := ink_engine.ext.ChainSpec.
  
  Parameter default : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_ext_ChainSpec.

Module Impl_ink_engine_ext_Engine_3.
  Definition Self := ink_engine.ext.Engine.
  
  Parameter new : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_engine_ext_Engine_3.

Module Impl_core_default_Default_for_ink_engine_ext_Engine.
  Definition Self := ink_engine.ext.Engine.
  
  Parameter default : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_ext_Engine.

Module Impl_ink_engine_ext_Engine_4.
  Definition Self := ink_engine.ext.Engine.
  
  Parameter transfer : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      ref Slice ->
      M (H := H) ink_engine.ext.Result.
  
  Global Instance Method_transfer `{H : State.Trait} :
    Notation.Dot "transfer" := {
    Notation.dot := transfer;
  }.
  
  Parameter deposit_event : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      ref Slice ->
      M (H := H) unit.
  
  Global Instance Method_deposit_event `{H : State.Trait} :
    Notation.Dot "deposit_event" := {
    Notation.dot := deposit_event;
  }.
  
  Parameter set_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      ref Slice ->
      M (H := H) (core.option.Option u32).
  
  Global Instance Method_set_storage `{H : State.Trait} :
    Notation.Dot "set_storage" := {
    Notation.dot := set_storage;
  }.
  
  Parameter get_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      mut_ref (mut_ref Slice) ->
      M (H := H) ink_engine.ext.Result.
  
  Global Instance Method_get_storage `{H : State.Trait} :
    Notation.Dot "get_storage" := {
    Notation.dot := get_storage;
  }.
  
  Parameter take_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      mut_ref (mut_ref Slice) ->
      M (H := H) ink_engine.ext.Result.
  
  Global Instance Method_take_storage `{H : State.Trait} :
    Notation.Dot "take_storage" := {
    Notation.dot := take_storage;
  }.
  
  Parameter contains_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      M (H := H) (core.option.Option u32).
  
  Global Instance Method_contains_storage `{H : State.Trait} :
    Notation.Dot "contains_storage" := {
    Notation.dot := contains_storage;
  }.
  
  Parameter clear_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      M (H := H) (core.option.Option u32).
  
  Global Instance Method_clear_storage `{H : State.Trait} :
    Notation.Dot "clear_storage" := {
    Notation.dot := clear_storage;
  }.
  
  Parameter terminate : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      M (H := H) Empty_set.
  
  Global Instance Method_terminate `{H : State.Trait} :
    Notation.Dot "terminate" := {
    Notation.dot := terminate;
  }.
  
  Parameter caller : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_caller `{H : State.Trait} : Notation.Dot "caller" := {
    Notation.dot := caller;
  }.
  
  Parameter balance : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_balance `{H : State.Trait} :
    Notation.Dot "balance" := {
    Notation.dot := balance;
  }.
  
  Parameter value_transferred : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_value_transferred `{H : State.Trait} :
    Notation.Dot "value_transferred" := {
    Notation.dot := value_transferred;
  }.
  
  Parameter address : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_address `{H : State.Trait} :
    Notation.Dot "address" := {
    Notation.dot := address;
  }.
  
  Parameter debug_message : forall `{H : State.Trait},
      mut_ref Self ->
      ref str ->
      M (H := H) unit.
  
  Global Instance Method_debug_message `{H : State.Trait} :
    Notation.Dot "debug_message" := {
    Notation.dot := debug_message;
  }.
  
  Parameter hash_blake2_256 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Global Instance AssociatedFunction_hash_blake2_256 `{H : State.Trait} :
    Notation.DoubleColon Self "hash_blake2_256" := {
    Notation.double_colon := hash_blake2_256;
  }.
  
  Parameter hash_blake2_128 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Global Instance AssociatedFunction_hash_blake2_128 `{H : State.Trait} :
    Notation.DoubleColon Self "hash_blake2_128" := {
    Notation.double_colon := hash_blake2_128;
  }.
  
  Parameter hash_sha2_256 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Global Instance AssociatedFunction_hash_sha2_256 `{H : State.Trait} :
    Notation.DoubleColon Self "hash_sha2_256" := {
    Notation.double_colon := hash_sha2_256;
  }.
  
  Parameter hash_keccak_256 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Global Instance AssociatedFunction_hash_keccak_256 `{H : State.Trait} :
    Notation.DoubleColon Self "hash_keccak_256" := {
    Notation.double_colon := hash_keccak_256;
  }.
  
  Parameter block_number : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_block_number `{H : State.Trait} :
    Notation.Dot "block_number" := {
    Notation.dot := block_number;
  }.
  
  Parameter block_timestamp : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_block_timestamp `{H : State.Trait} :
    Notation.Dot "block_timestamp" := {
    Notation.dot := block_timestamp;
  }.
  
  Parameter gas_left : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_gas_left `{H : State.Trait} :
    Notation.Dot "gas_left" := {
    Notation.dot := gas_left;
  }.
  
  Parameter minimum_balance : forall `{H : State.Trait},
      ref Self ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_minimum_balance `{H : State.Trait} :
    Notation.Dot "minimum_balance" := {
    Notation.dot := minimum_balance;
  }.
  
  Parameter instantiate : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      u64 ->
      ref Slice ->
      ref Slice ->
      mut_ref (mut_ref Slice) ->
      mut_ref (mut_ref Slice) ->
      ref Slice ->
      M (H := H) ink_engine.ext.Result.
  
  Global Instance Method_instantiate `{H : State.Trait} :
    Notation.Dot "instantiate" := {
    Notation.dot := instantiate;
  }.
  
  Parameter call : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      u64 ->
      ref Slice ->
      ref Slice ->
      mut_ref (mut_ref Slice) ->
      M (H := H) ink_engine.ext.Result.
  
  Global Instance Method_call `{H : State.Trait} : Notation.Dot "call" := {
    Notation.dot := call;
  }.
  
  Parameter weight_to_fee : forall `{H : State.Trait},
      ref Self ->
      u64 ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_weight_to_fee `{H : State.Trait} :
    Notation.Dot "weight_to_fee" := {
    Notation.dot := weight_to_fee;
  }.
  
  Parameter call_chain_extension : forall `{H : State.Trait},
      mut_ref Self ->
      u32 ->
      ref Slice ->
      mut_ref (mut_ref Slice) ->
      M (H := H) unit.
  
  Global Instance Method_call_chain_extension `{H : State.Trait} :
    Notation.Dot "call_chain_extension" := {
    Notation.dot := call_chain_extension;
  }.
  
  Parameter ecdsa_recover : forall `{H : State.Trait},
      mut_ref Self ->
      ref list u8 ->
      ref list u8 ->
      mut_ref list u8 ->
      M (H := H) ink_engine.ext.Result.
  
  Global Instance Method_ecdsa_recover `{H : State.Trait} :
    Notation.Dot "ecdsa_recover" := {
    Notation.dot := ecdsa_recover;
  }.
End Impl_ink_engine_ext_Engine_4.

Parameter set_output : forall `{H : State.Trait},
    mut_ref (mut_ref Slice) ->
    ref Slice ->
    M (H := H) unit.

Module test_api.
  Module EmittedEvent.
    Unset Primitive Projections.
    Record t : Set := {
      topics : alloc.vec.Vec (alloc.vec.Vec u8);
      data : alloc.vec.Vec u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_topics : Notation.Dot "topics" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_data : Notation.Dot "data" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End EmittedEvent.
  Definition EmittedEvent : Set := EmittedEvent.t.
  
  Module Impl_core_fmt_Debug_for_ink_engine_test_api_EmittedEvent.
    Definition Self := ink_engine.test_api.EmittedEvent.
    
    Parameter debug_struct_field2_finish : core.fmt.Formatter -> string -> 
      string -> alloc_vec_Vec_alloc_vec_Vec_u8 -> 
      string -> alloc_vec_Vec_u8 -> 
      M (H := H) core.fmt.Result.
    
    Global Instance Deb_debug_struct_field2_finish : Notation.DoubleColon
      core.fmt.Formatter "debug_struct_field2_finish" := {
      Notation.double_colon := debug_struct_field2_finish; }.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_engine_test_api_EmittedEvent.
  
  Module Impl_core_clone_Clone_for_ink_engine_test_api_EmittedEvent.
    Definition Self := ink_engine.test_api.EmittedEvent.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) ink_engine.test_api.EmittedEvent.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_engine_test_api_EmittedEvent.
  
  Module RecordedDebugMessages.
    Unset Primitive Projections.
    Record t : Set := {
      debug_messages : alloc.vec.Vec alloc.string.String;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_debug_messages : Notation.Dot "debug_messages" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End RecordedDebugMessages.
  Definition RecordedDebugMessages : Set := RecordedDebugMessages.t.
  
  Module Impl_core_clone_Clone_for_ink_engine_test_api_RecordedDebugMessages.
    Definition Self := ink_engine.test_api.RecordedDebugMessages.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) ink_engine.test_api.RecordedDebugMessages.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_engine_test_api_RecordedDebugMessages.
  
  Module Impl_ink_engine_test_api_RecordedDebugMessages.
    Definition Self := ink_engine.test_api.RecordedDebugMessages.
    
    Parameter new : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter record : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.string.String ->
        M (H := H) unit.
    
    Global Instance Method_record `{H : State.Trait} :
      Notation.Dot "record" := {
      Notation.dot := record;
    }.
    
    Parameter clear : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_clear `{H : State.Trait} : Notation.Dot "clear" := {
      Notation.dot := clear;
    }.
  End Impl_ink_engine_test_api_RecordedDebugMessages.
  
  Module
    Impl_core_default_Default_for_ink_engine_test_api_RecordedDebugMessages.
    Definition Self := ink_engine.test_api.RecordedDebugMessages.
    
    Parameter default : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_test_api_RecordedDebugMessages.
  
  Module
    Impl_core_iter_traits_collect_IntoIterator_for_ink_engine_test_api_RecordedDebugMessages.
    Definition Self := ink_engine.test_api.RecordedDebugMessages.
    
    Definition Item : Set := alloc.string.String.
    
    Definition IntoIter : Set := alloc.vec.into_iter.IntoIter ImplSelf.Item.
    
    Parameter into_iter : forall `{H : State.Trait},
        Self ->
        M (H := H) ImplSelf.IntoIter.
    
    Global Instance Method_into_iter `{H : State.Trait} :
      Notation.Dot "into_iter" := {
      Notation.dot := into_iter;
    }.
    
    Global Instance I : core.iter.traits.collect.IntoIterator.Trait Self := {
      core.iter.traits.collect.IntoIterator.into_iter
        `{H : State.Trait}
        :=
        into_iter;
    }.
  End
    Impl_core_iter_traits_collect_IntoIterator_for_ink_engine_test_api_RecordedDebugMessages.
  
  Module DebugInfo.
    Unset Primitive Projections.
    Record t : Set := {
      emitted_events : alloc.vec.Vec ink_engine.test_api.EmittedEvent;
      emitted_debug_messages : ink_engine.test_api.RecordedDebugMessages;
      count_reads
        :
        std.collections.hash.map.HashMap ink_engine.types.AccountId usize;
      count_writes
        :
        std.collections.hash.map.HashMap ink_engine.types.AccountId usize;
      cells_per_account
        :
        std.collections.hash.map.HashMap
          ink_engine.types.AccountId
          (std.collections.hash.map.HashMap (alloc.vec.Vec u8) bool);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_emitted_events : Notation.Dot "emitted_events" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_emitted_debug_messages :
        Notation.Dot "emitted_debug_messages" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_count_reads : Notation.Dot "count_reads" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_count_writes : Notation.Dot "count_writes" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_cells_per_account :
        Notation.Dot "cells_per_account" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
  End DebugInfo.
  Definition DebugInfo : Set := DebugInfo.t.
  
  Module Impl_core_default_Default_for_ink_engine_test_api_DebugInfo.
    Definition Self := ink_engine.test_api.DebugInfo.
    
    Parameter default : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_test_api_DebugInfo.
  
  Module Impl_ink_engine_test_api_DebugInfo.
    Definition Self := ink_engine.test_api.DebugInfo.
    
    Parameter new : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter reset : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_reset `{H : State.Trait} : Notation.Dot "reset" := {
      Notation.dot := reset;
    }.
    
    Parameter inc_writes : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.AccountId ->
        M (H := H) unit.
    
    Global Instance Method_inc_writes `{H : State.Trait} :
      Notation.Dot "inc_writes" := {
      Notation.dot := inc_writes;
    }.
    
    Parameter inc_reads : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.AccountId ->
        M (H := H) unit.
    
    Global Instance Method_inc_reads `{H : State.Trait} :
      Notation.Dot "inc_reads" := {
      Notation.dot := inc_reads;
    }.
    
    Parameter record_cell_for_account : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.AccountId ->
        alloc.vec.Vec u8 ->
        M (H := H) unit.
    
    Global Instance Method_record_cell_for_account `{H : State.Trait} :
      Notation.Dot "record_cell_for_account" := {
      Notation.dot := record_cell_for_account;
    }.
    
    Parameter remove_cell_for_account : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.AccountId ->
        alloc.vec.Vec u8 ->
        M (H := H) (core.option.Option bool).
    
    Global Instance Method_remove_cell_for_account `{H : State.Trait} :
      Notation.Dot "remove_cell_for_account" := {
      Notation.dot := remove_cell_for_account;
    }.
    
    Parameter record_debug_message : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.string.String ->
        M (H := H) unit.
    
    Global Instance Method_record_debug_message `{H : State.Trait} :
      Notation.Dot "record_debug_message" := {
      Notation.dot := record_debug_message;
    }.
    
    Parameter record_event : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.test_api.EmittedEvent ->
        M (H := H) unit.
    
    Global Instance Method_record_event `{H : State.Trait} :
      Notation.Dot "record_event" := {
      Notation.dot := record_event;
    }.
  End Impl_ink_engine_test_api_DebugInfo.
  
  Module Impl_ink_engine_ext_Engine_5.
    Definition Self := ink_engine.ext.Engine.
    
    Parameter initialize_or_reset : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_initialize_or_reset `{H : State.Trait} :
      Notation.Dot "initialize_or_reset" := {
      Notation.dot := initialize_or_reset;
    }.
    
    Parameter get_contract_storage_rw : forall `{H : State.Trait},
        ref Self ->
        alloc.vec.Vec u8 ->
        M (H := H) (usize * usize).
    
    Global Instance Method_get_contract_storage_rw `{H : State.Trait} :
      Notation.Dot "get_contract_storage_rw" := {
      Notation.dot := get_contract_storage_rw;
    }.
    
    Parameter count_reads : forall `{H : State.Trait},
        ref Self ->
        M (H := H) usize.
    
    Global Instance Method_count_reads `{H : State.Trait} :
      Notation.Dot "count_reads" := {
      Notation.dot := count_reads;
    }.
    
    Parameter count_writes : forall `{H : State.Trait},
        ref Self ->
        M (H := H) usize.
    
    Global Instance Method_count_writes `{H : State.Trait} :
      Notation.Dot "count_writes" := {
      Notation.dot := count_writes;
    }.
    
    Parameter set_caller : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.vec.Vec u8 ->
        M (H := H) unit.
    
    Global Instance Method_set_caller `{H : State.Trait} :
      Notation.Dot "set_caller" := {
      Notation.dot := set_caller;
    }.
    
    Parameter set_contract : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.vec.Vec u8 ->
        M (H := H) unit.
    
    Global Instance Method_set_contract `{H : State.Trait} :
      Notation.Dot "set_contract" := {
      Notation.dot := set_contract;
    }.
    
    Parameter set_callee : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.vec.Vec u8 ->
        M (H := H) unit.
    
    Global Instance Method_set_callee `{H : State.Trait} :
      Notation.Dot "set_callee" := {
      Notation.dot := set_callee;
    }.
    
    Parameter count_used_storage_cells : forall `{H : State.Trait},
        ref Self ->
        ref Slice ->
        M (H := H) (core.result.Result usize ink_engine.Error).
    
    Global Instance Method_count_used_storage_cells `{H : State.Trait} :
      Notation.Dot "count_used_storage_cells" := {
      Notation.dot := count_used_storage_cells;
    }.
    
    Parameter advance_block : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_advance_block `{H : State.Trait} :
      Notation.Dot "advance_block" := {
      Notation.dot := advance_block;
    }.
    
    Parameter get_callee : forall `{H : State.Trait},
        ref Self ->
        M (H := H) (alloc.vec.Vec u8).
    
    Global Instance Method_get_callee `{H : State.Trait} :
      Notation.Dot "get_callee" := {
      Notation.dot := get_callee;
    }.
    
    Parameter is_contract : forall `{H : State.Trait},
        ref Self ->
        alloc.vec.Vec u8 ->
        M (H := H) bool.
    
    Global Instance Method_is_contract `{H : State.Trait} :
      Notation.Dot "is_contract" := {
      Notation.dot := is_contract;
    }.
    
    Parameter get_emitted_debug_messages : forall `{H : State.Trait},
        ref Self ->
        M (H := H) ink_engine.test_api.RecordedDebugMessages.
    
    Global Instance Method_get_emitted_debug_messages `{H : State.Trait} :
      Notation.Dot "get_emitted_debug_messages" := {
      Notation.dot := get_emitted_debug_messages;
    }.
    
    Parameter get_emitted_events : forall `{H : State.Trait},
        ref Self ->
        M (H := H) OpaqueDef.
    
    Global Instance Method_get_emitted_events `{H : State.Trait} :
      Notation.Dot "get_emitted_events" := {
      Notation.dot := get_emitted_events;
    }.
    
    Parameter get_balance : forall `{H : State.Trait},
        ref Self ->
        alloc.vec.Vec u8 ->
        M (H := H)
          (core.result.Result ink_engine.types.Balance ink_engine.Error).
    
    Global Instance Method_get_balance `{H : State.Trait} :
      Notation.Dot "get_balance" := {
      Notation.dot := get_balance;
    }.
    
    Parameter set_balance : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.vec.Vec u8 ->
        ink_engine.types.Balance ->
        M (H := H) unit.
    
    Global Instance Method_set_balance `{H : State.Trait} :
      Notation.Dot "set_balance" := {
      Notation.dot := set_balance;
    }.
    
    Parameter set_value_transferred : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.Balance ->
        M (H := H) unit.
    
    Global Instance Method_set_value_transferred `{H : State.Trait} :
      Notation.Dot "set_value_transferred" := {
      Notation.dot := set_value_transferred;
    }.
    
    Parameter set_block_timestamp : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.BlockTimestamp ->
        M (H := H) unit.
    
    Global Instance Method_set_block_timestamp `{H : State.Trait} :
      Notation.Dot "set_block_timestamp" := {
      Notation.dot := set_block_timestamp;
    }.
    
    Parameter set_block_number : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.BlockNumber ->
        M (H := H) unit.
    
    Global Instance Method_set_block_number `{H : State.Trait} :
      Notation.Dot "set_block_number" := {
      Notation.dot := set_block_number;
    }.
  End Impl_ink_engine_ext_Engine_5.
End test_api.

Module EmittedEvent.
  Unset Primitive Projections.
  Record t : Set := {
    topics : alloc.vec.Vec (alloc.vec.Vec u8);
    data : alloc.vec.Vec u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_topics : Notation.Dot "topics" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_data : Notation.Dot "data" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End EmittedEvent.
Definition EmittedEvent : Set := EmittedEvent.t.

Module Impl_core_fmt_Debug_for_ink_engine_test_api_EmittedEvent.
  Definition Self := ink_engine.test_api.EmittedEvent.
  
  Parameter debug_struct_field2_finish : core.fmt.Formatter -> string -> 
    string -> alloc_vec_Vec_alloc_vec_Vec_u8 -> 
    string -> alloc_vec_Vec_u8 -> 
    M (H := H) core.fmt.Result.
  
  Global Instance Deb_debug_struct_field2_finish : Notation.DoubleColon
    core.fmt.Formatter "debug_struct_field2_finish" := {
    Notation.double_colon := debug_struct_field2_finish; }.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_engine_test_api_EmittedEvent.

Module Impl_core_clone_Clone_for_ink_engine_test_api_EmittedEvent.
  Definition Self := ink_engine.test_api.EmittedEvent.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) ink_engine.test_api.EmittedEvent.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_engine_test_api_EmittedEvent.

Module RecordedDebugMessages.
  Unset Primitive Projections.
  Record t : Set := {
    debug_messages : alloc.vec.Vec alloc.string.String;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_debug_messages : Notation.Dot "debug_messages" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End RecordedDebugMessages.
Definition RecordedDebugMessages : Set := RecordedDebugMessages.t.

Module Impl_core_clone_Clone_for_ink_engine_test_api_RecordedDebugMessages.
  Definition Self := ink_engine.test_api.RecordedDebugMessages.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) ink_engine.test_api.RecordedDebugMessages.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_engine_test_api_RecordedDebugMessages.

Module Impl_ink_engine_test_api_RecordedDebugMessages_2.
  Definition Self := ink_engine.test_api.RecordedDebugMessages.
  
  Parameter new : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter record : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.string.String ->
      M (H := H) unit.
  
  Global Instance Method_record `{H : State.Trait} : Notation.Dot "record" := {
    Notation.dot := record;
  }.
  
  Parameter clear : forall `{H : State.Trait}, mut_ref Self -> M (H := H) unit.
  
  Global Instance Method_clear `{H : State.Trait} : Notation.Dot "clear" := {
    Notation.dot := clear;
  }.
End Impl_ink_engine_test_api_RecordedDebugMessages_2.

Module Impl_core_default_Default_for_ink_engine_test_api_RecordedDebugMessages.
  Definition Self := ink_engine.test_api.RecordedDebugMessages.
  
  Parameter default : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_test_api_RecordedDebugMessages.

Module
  Impl_core_iter_traits_collect_IntoIterator_for_ink_engine_test_api_RecordedDebugMessages.
  Definition Self := ink_engine.test_api.RecordedDebugMessages.
  
  Definition Item : Set := alloc.string.String.
  
  Definition IntoIter : Set := alloc.vec.into_iter.IntoIter ImplSelf.Item.
  
  Parameter into_iter : forall `{H : State.Trait},
      Self ->
      M (H := H) ImplSelf.IntoIter.
  
  Global Instance Method_into_iter `{H : State.Trait} :
    Notation.Dot "into_iter" := {
    Notation.dot := into_iter;
  }.
  
  Global Instance I : core.iter.traits.collect.IntoIterator.Trait Self := {
    core.iter.traits.collect.IntoIterator.into_iter
      `{H : State.Trait}
      :=
      into_iter;
  }.
End
  Impl_core_iter_traits_collect_IntoIterator_for_ink_engine_test_api_RecordedDebugMessages.

Module DebugInfo.
  Unset Primitive Projections.
  Record t : Set := {
    emitted_events : alloc.vec.Vec ink_engine.test_api.EmittedEvent;
    emitted_debug_messages : ink_engine.test_api.RecordedDebugMessages;
    count_reads
      :
      std.collections.hash.map.HashMap ink_engine.types.AccountId usize;
    count_writes
      :
      std.collections.hash.map.HashMap ink_engine.types.AccountId usize;
    cells_per_account
      :
      std.collections.hash.map.HashMap
        ink_engine.types.AccountId
        (std.collections.hash.map.HashMap (alloc.vec.Vec u8) bool);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_emitted_events : Notation.Dot "emitted_events" := {
    Notation.dot '(Build_t x0 _ _ _ _) := x0;
  }.
  Global Instance Get_emitted_debug_messages :
      Notation.Dot "emitted_debug_messages" := {
    Notation.dot '(Build_t _ x1 _ _ _) := x1;
  }.
  Global Instance Get_count_reads : Notation.Dot "count_reads" := {
    Notation.dot '(Build_t _ _ x2 _ _) := x2;
  }.
  Global Instance Get_count_writes : Notation.Dot "count_writes" := {
    Notation.dot '(Build_t _ _ _ x3 _) := x3;
  }.
  Global Instance Get_cells_per_account : Notation.Dot "cells_per_account" := {
    Notation.dot '(Build_t _ _ _ _ x4) := x4;
  }.
End DebugInfo.
Definition DebugInfo : Set := DebugInfo.t.

Module Impl_core_default_Default_for_ink_engine_test_api_DebugInfo.
  Definition Self := ink_engine.test_api.DebugInfo.
  
  Parameter default : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_test_api_DebugInfo.

Module Impl_ink_engine_test_api_DebugInfo_2.
  Definition Self := ink_engine.test_api.DebugInfo.
  
  Parameter new : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter reset : forall `{H : State.Trait}, mut_ref Self -> M (H := H) unit.
  
  Global Instance Method_reset `{H : State.Trait} : Notation.Dot "reset" := {
    Notation.dot := reset;
  }.
  
  Parameter inc_writes : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.AccountId ->
      M (H := H) unit.
  
  Global Instance Method_inc_writes `{H : State.Trait} :
    Notation.Dot "inc_writes" := {
    Notation.dot := inc_writes;
  }.
  
  Parameter inc_reads : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.AccountId ->
      M (H := H) unit.
  
  Global Instance Method_inc_reads `{H : State.Trait} :
    Notation.Dot "inc_reads" := {
    Notation.dot := inc_reads;
  }.
  
  Parameter record_cell_for_account : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.AccountId ->
      alloc.vec.Vec u8 ->
      M (H := H) unit.
  
  Global Instance Method_record_cell_for_account `{H : State.Trait} :
    Notation.Dot "record_cell_for_account" := {
    Notation.dot := record_cell_for_account;
  }.
  
  Parameter remove_cell_for_account : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.AccountId ->
      alloc.vec.Vec u8 ->
      M (H := H) (core.option.Option bool).
  
  Global Instance Method_remove_cell_for_account `{H : State.Trait} :
    Notation.Dot "remove_cell_for_account" := {
    Notation.dot := remove_cell_for_account;
  }.
  
  Parameter record_debug_message : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.string.String ->
      M (H := H) unit.
  
  Global Instance Method_record_debug_message `{H : State.Trait} :
    Notation.Dot "record_debug_message" := {
    Notation.dot := record_debug_message;
  }.
  
  Parameter record_event : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.test_api.EmittedEvent ->
      M (H := H) unit.
  
  Global Instance Method_record_event `{H : State.Trait} :
    Notation.Dot "record_event" := {
    Notation.dot := record_event;
  }.
End Impl_ink_engine_test_api_DebugInfo_2.

Module Impl_ink_engine_ext_Engine_6.
  Definition Self := ink_engine.ext.Engine.
  
  Parameter initialize_or_reset : forall `{H : State.Trait},
      mut_ref Self ->
      M (H := H) unit.
  
  Global Instance Method_initialize_or_reset `{H : State.Trait} :
    Notation.Dot "initialize_or_reset" := {
    Notation.dot := initialize_or_reset;
  }.
  
  Parameter get_contract_storage_rw : forall `{H : State.Trait},
      ref Self ->
      alloc.vec.Vec u8 ->
      M (H := H) (usize * usize).
  
  Global Instance Method_get_contract_storage_rw `{H : State.Trait} :
    Notation.Dot "get_contract_storage_rw" := {
    Notation.dot := get_contract_storage_rw;
  }.
  
  Parameter count_reads : forall `{H : State.Trait},
      ref Self ->
      M (H := H) usize.
  
  Global Instance Method_count_reads `{H : State.Trait} :
    Notation.Dot "count_reads" := {
    Notation.dot := count_reads;
  }.
  
  Parameter count_writes : forall `{H : State.Trait},
      ref Self ->
      M (H := H) usize.
  
  Global Instance Method_count_writes `{H : State.Trait} :
    Notation.Dot "count_writes" := {
    Notation.dot := count_writes;
  }.
  
  Parameter set_caller : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.vec.Vec u8 ->
      M (H := H) unit.
  
  Global Instance Method_set_caller `{H : State.Trait} :
    Notation.Dot "set_caller" := {
    Notation.dot := set_caller;
  }.
  
  Parameter set_contract : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.vec.Vec u8 ->
      M (H := H) unit.
  
  Global Instance Method_set_contract `{H : State.Trait} :
    Notation.Dot "set_contract" := {
    Notation.dot := set_contract;
  }.
  
  Parameter set_callee : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.vec.Vec u8 ->
      M (H := H) unit.
  
  Global Instance Method_set_callee `{H : State.Trait} :
    Notation.Dot "set_callee" := {
    Notation.dot := set_callee;
  }.
  
  Parameter count_used_storage_cells : forall `{H : State.Trait},
      ref Self ->
      ref Slice ->
      M (H := H) (core.result.Result usize ink_engine.Error).
  
  Global Instance Method_count_used_storage_cells `{H : State.Trait} :
    Notation.Dot "count_used_storage_cells" := {
    Notation.dot := count_used_storage_cells;
  }.
  
  Parameter advance_block : forall `{H : State.Trait},
      mut_ref Self ->
      M (H := H) unit.
  
  Global Instance Method_advance_block `{H : State.Trait} :
    Notation.Dot "advance_block" := {
    Notation.dot := advance_block;
  }.
  
  Parameter get_callee : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (alloc.vec.Vec u8).
  
  Global Instance Method_get_callee `{H : State.Trait} :
    Notation.Dot "get_callee" := {
    Notation.dot := get_callee;
  }.
  
  Parameter is_contract : forall `{H : State.Trait},
      ref Self ->
      alloc.vec.Vec u8 ->
      M (H := H) bool.
  
  Global Instance Method_is_contract `{H : State.Trait} :
    Notation.Dot "is_contract" := {
    Notation.dot := is_contract;
  }.
  
  Parameter get_emitted_debug_messages : forall `{H : State.Trait},
      ref Self ->
      M (H := H) ink_engine.test_api.RecordedDebugMessages.
  
  Global Instance Method_get_emitted_debug_messages `{H : State.Trait} :
    Notation.Dot "get_emitted_debug_messages" := {
    Notation.dot := get_emitted_debug_messages;
  }.
  
  Parameter get_emitted_events : forall `{H : State.Trait},
      ref Self ->
      M (H := H) OpaqueDef.
  
  Global Instance Method_get_emitted_events `{H : State.Trait} :
    Notation.Dot "get_emitted_events" := {
    Notation.dot := get_emitted_events;
  }.
  
  Parameter get_balance : forall `{H : State.Trait},
      ref Self ->
      alloc.vec.Vec u8 ->
      M (H := H) (core.result.Result ink_engine.types.Balance ink_engine.Error).
  
  Global Instance Method_get_balance `{H : State.Trait} :
    Notation.Dot "get_balance" := {
    Notation.dot := get_balance;
  }.
  
  Parameter set_balance : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.vec.Vec u8 ->
      ink_engine.types.Balance ->
      M (H := H) unit.
  
  Global Instance Method_set_balance `{H : State.Trait} :
    Notation.Dot "set_balance" := {
    Notation.dot := set_balance;
  }.
  
  Parameter set_value_transferred : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.Balance ->
      M (H := H) unit.
  
  Global Instance Method_set_value_transferred `{H : State.Trait} :
    Notation.Dot "set_value_transferred" := {
    Notation.dot := set_value_transferred;
  }.
  
  Parameter set_block_timestamp : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.BlockTimestamp ->
      M (H := H) unit.
  
  Global Instance Method_set_block_timestamp `{H : State.Trait} :
    Notation.Dot "set_block_timestamp" := {
    Notation.dot := set_block_timestamp;
  }.
  
  Parameter set_block_number : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.BlockNumber ->
      M (H := H) unit.
  
  Global Instance Method_set_block_number `{H : State.Trait} :
    Notation.Dot "set_block_number" := {
    Notation.dot := set_block_number;
  }.
End Impl_ink_engine_ext_Engine_6.

Error OpaqueTy.

Module chain_extension.
  Module ChainExtensionHandler.
    Unset Primitive Projections.
    Record t : Set := {
      registered
        :
        std.collections.hash.map.HashMap
          ink_engine.chain_extension.ExtensionId
          (alloc.boxed.Box TraitObject);
      output : alloc.vec.Vec u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_registered : Notation.Dot "registered" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_output : Notation.Dot "output" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End ChainExtensionHandler.
  Definition ChainExtensionHandler : Set := ChainExtensionHandler.t.
  
  Module ExtensionId.
    Unset Primitive Projections.
    Record t : Set := {
      _ : u32;
    }.
    Global Set Primitive Projections.
  
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End ExtensionId.
  Definition ExtensionId := ExtensionId.t.
  
  Module Impl_core_fmt_Debug_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_engine_chain_extension_ExtensionId.
  
  Module Impl_core_convert_From_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter from : forall `{H : State.Trait},
        u32 ->
        M (H := H) ink_engine.chain_extension.ExtensionId.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := u32) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_engine_chain_extension_ExtensionId.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End
    Impl_core_marker_StructuralPartialEq_for_ink_engine_chain_extension_ExtensionId.
  
  Module Impl_core_cmp_PartialEq_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.chain_extension.ExtensionId ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_engine_chain_extension_ExtensionId.
  
  Module
    Impl_core_marker_StructuralEq_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_engine_chain_extension_ExtensionId.
  
  Module Impl_core_cmp_Eq_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_engine_chain_extension_ExtensionId.
  
  Module Impl_core_cmp_PartialOrd_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter partial_cmp : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.chain_extension.ExtensionId ->
        M (H := H) (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{H : State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_ink_engine_chain_extension_ExtensionId.
  
  Module Impl_core_cmp_Ord_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter cmp : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.chain_extension.ExtensionId ->
        M (H := H) core.cmp.Ordering.
    
    Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp `{H : State.Trait} := cmp;
    }.
  End Impl_core_cmp_Ord_for_ink_engine_chain_extension_ExtensionId.
  
  Module Impl_core_hash_Hash_for_ink_engine_chain_extension_ExtensionId.
    Definition Self := ink_engine.chain_extension.ExtensionId.
    
    Parameter hash : forall `{H : State.Trait},
        ref Self ->
        mut_ref __H ->
        M (H := H) unit.
    
    Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
    
    Global Instance I : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash `{H : State.Trait} := hash;
    }.
  End Impl_core_hash_Hash_for_ink_engine_chain_extension_ExtensionId.
  
  Module ChainExtension.
    Class Trait (Self : Set) : Set := {
      func_id `{H : State.Trait} : (ref Self) -> (M (H := H) u32);
      call
        `{H : State.Trait}
        :
        (mut_ref Self) ->
        (ref Slice) ->
        (mut_ref (alloc.vec.Vec u8)) ->
        (M (H := H) u32);
    }.
    
    Global Instance Method_func_id `{H : State.Trait} `(Trait)
      : Notation.Dot "func_id" := {
      Notation.dot := func_id;
    }.
    Global Instance Method_call `{H : State.Trait} `(Trait)
      : Notation.Dot "call" := {
      Notation.dot := call;
    }.
  End ChainExtension.
  
  Module
    Impl_core_default_Default_for_ink_engine_chain_extension_ChainExtensionHandler.
    Definition Self := ink_engine.chain_extension.ChainExtensionHandler.
    
    Parameter default : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_engine_chain_extension_ChainExtensionHandler.
  
  Module Impl_ink_engine_chain_extension_ChainExtensionHandler.
    Definition Self := ink_engine.chain_extension.ChainExtensionHandler.
    
    Parameter new : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter reset : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_reset `{H : State.Trait} : Notation.Dot "reset" := {
      Notation.dot := reset;
    }.
    
    Parameter register : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.boxed.Box TraitObject ->
        M (H := H) unit.
    
    Global Instance Method_register `{H : State.Trait} :
      Notation.Dot "register" := {
      Notation.dot := register;
    }.
    
    Parameter eval : forall `{H : State.Trait},
        mut_ref Self ->
        u32 ->
        ref Slice ->
        M (H := H) (core.result.Result (u32 * (ref Slice)) ink_engine.Error).
    
    Global Instance Method_eval `{H : State.Trait} : Notation.Dot "eval" := {
      Notation.dot := eval;
    }.
  End Impl_ink_engine_chain_extension_ChainExtensionHandler.
End chain_extension.

Module ChainExtensionHandler.
  Unset Primitive Projections.
  Record t : Set := {
    registered
      :
      std.collections.hash.map.HashMap
        ink_engine.chain_extension.ExtensionId
        (alloc.boxed.Box TraitObject);
    output : alloc.vec.Vec u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_registered : Notation.Dot "registered" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_output : Notation.Dot "output" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End ChainExtensionHandler.
Definition ChainExtensionHandler : Set := ChainExtensionHandler.t.

Module ExtensionId.
  Unset Primitive Projections.
  Record t : Set := {
    _ : u32;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End ExtensionId.
Definition ExtensionId := ExtensionId.t.

Module Impl_core_fmt_Debug_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_convert_From_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter from : forall `{H : State.Trait},
      u32 ->
      M (H := H) ink_engine.chain_extension.ExtensionId.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := u32) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_engine_chain_extension_ExtensionId.

Module
  Impl_parity_scale_codec_codec_Encode_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter encode_to : forall `{H : State.Trait},
      ref Self ->
      mut_ref __CodecOutputEdqy ->
      M (H := H) unit.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Parameter encode : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (alloc.vec.Vec Root.core.primitive.u8).
  
  Global Instance Method_encode `{H : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter using_encoded : forall `{H : State.Trait},
      ref Self ->
      F ->
      M (H := H) R.
  
  Global Instance Method_using_encoded `{H : State.Trait} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End
  Impl_parity_scale_codec_codec_Encode_for_ink_engine_chain_extension_ExtensionId.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Global Instance I : parity_scale_codec.encode_like.EncodeLike.Trait Self :=
    parity_scale_codec.encode_like.EncodeLike.Build_Trait _.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_engine_chain_extension_ExtensionId.

Module
  Impl_parity_scale_codec_codec_Decode_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter decode : forall `{H : State.Trait},
      mut_ref __CodecInputEdqy ->
      M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
  }.
End
  Impl_parity_scale_codec_codec_Decode_for_ink_engine_chain_extension_ExtensionId.

Module
  Impl_core_marker_StructuralPartialEq_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End
  Impl_core_marker_StructuralPartialEq_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_cmp_PartialEq_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.chain_extension.ExtensionId ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_marker_StructuralEq_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_cmp_Eq_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_cmp_PartialOrd_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter partial_cmp : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.chain_extension.ExtensionId ->
      M (H := H) (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{H : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_cmp_Ord_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter cmp : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.chain_extension.ExtensionId ->
      M (H := H) core.cmp.Ordering.
  
  Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp `{H : State.Trait} := cmp;
  }.
End Impl_core_cmp_Ord_for_ink_engine_chain_extension_ExtensionId.

Module Impl_core_hash_Hash_for_ink_engine_chain_extension_ExtensionId.
  Definition Self := ink_engine.chain_extension.ExtensionId.
  
  Parameter hash : forall `{H : State.Trait},
      ref Self ->
      mut_ref __H ->
      M (H := H) unit.
  
  Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash `{H : State.Trait} := hash;
  }.
End Impl_core_hash_Hash_for_ink_engine_chain_extension_ExtensionId.

Module ChainExtension.
  Class Trait (Self : Set) : Set := {
    func_id `{H : State.Trait} : (ref Self) -> (M (H := H) u32);
    call
      `{H : State.Trait}
      :
      (mut_ref Self) ->
      (ref Slice) ->
      (mut_ref (alloc.vec.Vec u8)) ->
      (M (H := H) u32);
  }.
  
  Global Instance Method_func_id `{H : State.Trait} `(Trait)
    : Notation.Dot "func_id" := {
    Notation.dot := func_id;
  }.
  Global Instance Method_call `{H : State.Trait} `(Trait)
    : Notation.Dot "call" := {
    Notation.dot := call;
  }.
End ChainExtension.

Module
  Impl_core_default_Default_for_ink_engine_chain_extension_ChainExtensionHandler.
  Definition Self := ink_engine.chain_extension.ChainExtensionHandler.
  
  Parameter default : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End
  Impl_core_default_Default_for_ink_engine_chain_extension_ChainExtensionHandler.

Module Impl_ink_engine_chain_extension_ChainExtensionHandler_2.
  Definition Self := ink_engine.chain_extension.ChainExtensionHandler.
  
  Parameter new : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter reset : forall `{H : State.Trait}, mut_ref Self -> M (H := H) unit.
  
  Global Instance Method_reset `{H : State.Trait} : Notation.Dot "reset" := {
    Notation.dot := reset;
  }.
  
  Parameter register : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.boxed.Box TraitObject ->
      M (H := H) unit.
  
  Global Instance Method_register `{H : State.Trait} :
    Notation.Dot "register" := {
    Notation.dot := register;
  }.
  
  Parameter eval : forall `{H : State.Trait},
      mut_ref Self ->
      u32 ->
      ref Slice ->
      M (H := H) (core.result.Result (u32 * (ref Slice)) ink_engine.Error).
  
  Global Instance Method_eval `{H : State.Trait} : Notation.Dot "eval" := {
    Notation.dot := eval;
  }.
End Impl_ink_engine_chain_extension_ChainExtensionHandler_2.

Module database.
  Definition BALANCE_OF `{H : State.Trait} : ref Slice :=
    run (Pure [98, 97, 108, 97, 110, 99, 101, 58]).
  
  Definition STORAGE_OF `{H : State.Trait} : ref Slice :=
    run
      (Pure
        [99, 111, 110, 116, 114, 97, 99, 116, 45, 115, 116, 111, 114, 97, 103, 101, 58]).
  
  Parameter balance_of_key : forall `{H : State.Trait},
      ref Slice ->
      M (H := H) list u8.
  
  Parameter storage_of_contract_key : forall `{H : State.Trait},
      ref Slice ->
      ref Slice ->
      M (H := H) list u8.
  
  Module Database.
    Unset Primitive Projections.
    Record t : Set := {
      hmap
        :
        std.collections.hash.map.HashMap (alloc.vec.Vec u8) (alloc.vec.Vec u8);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_hmap : Notation.Dot "hmap" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Database.
  Definition Database : Set := Database.t.
  
  Module Impl_core_default_Default_for_ink_engine_database_Database.
    Definition Self := ink_engine.database.Database.
    
    Parameter default : forall `{H : State.Trait},
        M (H := H) ink_engine.database.Database.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_database_Database.
  
  Module Impl_ink_engine_database_Database.
    Definition Self := ink_engine.database.Database.
    
    Parameter new : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter get : forall `{H : State.Trait},
        ref Self ->
        ref Slice ->
        M (H := H) (core.option.Option (ref (alloc.vec.Vec u8))).
    
    Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
      Notation.dot := get;
    }.
    
    Parameter get_from_contract_storage : forall `{H : State.Trait},
        ref Self ->
        ref Slice ->
        ref Slice ->
        M (H := H) (core.option.Option (ref (alloc.vec.Vec u8))).
    
    Global Instance Method_get_from_contract_storage `{H : State.Trait} :
      Notation.Dot "get_from_contract_storage" := {
      Notation.dot := get_from_contract_storage;
    }.
    
    Parameter insert_into_contract_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        ref Slice ->
        alloc.vec.Vec u8 ->
        M (H := H) (core.option.Option (alloc.vec.Vec u8)).
    
    Global Instance Method_insert_into_contract_storage `{H : State.Trait} :
      Notation.Dot "insert_into_contract_storage" := {
      Notation.dot := insert_into_contract_storage;
    }.
    
    Parameter remove_contract_storage : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        ref Slice ->
        M (H := H) (core.option.Option (alloc.vec.Vec u8)).
    
    Global Instance Method_remove_contract_storage `{H : State.Trait} :
      Notation.Dot "remove_contract_storage" := {
      Notation.dot := remove_contract_storage;
    }.
    
    Parameter remove : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        M (H := H) (core.option.Option (alloc.vec.Vec u8)).
    
    Global Instance Method_remove `{H : State.Trait} :
      Notation.Dot "remove" := {
      Notation.dot := remove;
    }.
    
    Parameter insert : forall `{H : State.Trait},
        mut_ref Self ->
        alloc.vec.Vec u8 ->
        alloc.vec.Vec u8 ->
        M (H := H) (core.option.Option (alloc.vec.Vec u8)).
    
    Global Instance Method_insert `{H : State.Trait} :
      Notation.Dot "insert" := {
      Notation.dot := insert;
    }.
    
    Parameter clear : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_clear `{H : State.Trait} : Notation.Dot "clear" := {
      Notation.dot := clear;
    }.
    
    Parameter get_balance : forall `{H : State.Trait},
        ref Self ->
        ref Slice ->
        M (H := H) (core.option.Option ink_engine.types.Balance).
    
    Global Instance Method_get_balance `{H : State.Trait} :
      Notation.Dot "get_balance" := {
      Notation.dot := get_balance;
    }.
    
    Parameter set_balance : forall `{H : State.Trait},
        mut_ref Self ->
        ref Slice ->
        ink_engine.types.Balance ->
        M (H := H) unit.
    
    Global Instance Method_set_balance `{H : State.Trait} :
      Notation.Dot "set_balance" := {
      Notation.dot := set_balance;
    }.
  End Impl_ink_engine_database_Database.
End database.

Definition BALANCE_OF `{H : State.Trait} : ref Slice :=
  run (Pure [98, 97, 108, 97, 110, 99, 101, 58]).

Definition STORAGE_OF `{H : State.Trait} : ref Slice :=
  run
    (Pure
      [99, 111, 110, 116, 114, 97, 99, 116, 45, 115, 116, 111, 114, 97, 103, 101, 58]).

Parameter balance_of_key : forall `{H : State.Trait},
    ref Slice ->
    M (H := H) list u8.

Parameter storage_of_contract_key : forall `{H : State.Trait},
    ref Slice ->
    ref Slice ->
    M (H := H) list u8.

Module Database.
  Unset Primitive Projections.
  Record t : Set := {
    hmap
      :
      std.collections.hash.map.HashMap (alloc.vec.Vec u8) (alloc.vec.Vec u8);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_hmap : Notation.Dot "hmap" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Database.
Definition Database : Set := Database.t.

Module Impl_core_default_Default_for_ink_engine_database_Database.
  Definition Self := ink_engine.database.Database.
  
  Parameter default : forall `{H : State.Trait},
      M (H := H) ink_engine.database.Database.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_database_Database.

Module Impl_ink_engine_database_Database_2.
  Definition Self := ink_engine.database.Database.
  
  Parameter new : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter get : forall `{H : State.Trait},
      ref Self ->
      ref Slice ->
      M (H := H) (core.option.Option (ref (alloc.vec.Vec u8))).
  
  Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Parameter get_from_contract_storage : forall `{H : State.Trait},
      ref Self ->
      ref Slice ->
      ref Slice ->
      M (H := H) (core.option.Option (ref (alloc.vec.Vec u8))).
  
  Global Instance Method_get_from_contract_storage `{H : State.Trait} :
    Notation.Dot "get_from_contract_storage" := {
    Notation.dot := get_from_contract_storage;
  }.
  
  Parameter insert_into_contract_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      ref Slice ->
      alloc.vec.Vec u8 ->
      M (H := H) (core.option.Option (alloc.vec.Vec u8)).
  
  Global Instance Method_insert_into_contract_storage `{H : State.Trait} :
    Notation.Dot "insert_into_contract_storage" := {
    Notation.dot := insert_into_contract_storage;
  }.
  
  Parameter remove_contract_storage : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      ref Slice ->
      M (H := H) (core.option.Option (alloc.vec.Vec u8)).
  
  Global Instance Method_remove_contract_storage `{H : State.Trait} :
    Notation.Dot "remove_contract_storage" := {
    Notation.dot := remove_contract_storage;
  }.
  
  Parameter remove : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      M (H := H) (core.option.Option (alloc.vec.Vec u8)).
  
  Global Instance Method_remove `{H : State.Trait} : Notation.Dot "remove" := {
    Notation.dot := remove;
  }.
  
  Parameter insert : forall `{H : State.Trait},
      mut_ref Self ->
      alloc.vec.Vec u8 ->
      alloc.vec.Vec u8 ->
      M (H := H) (core.option.Option (alloc.vec.Vec u8)).
  
  Global Instance Method_insert `{H : State.Trait} : Notation.Dot "insert" := {
    Notation.dot := insert;
  }.
  
  Parameter clear : forall `{H : State.Trait}, mut_ref Self -> M (H := H) unit.
  
  Global Instance Method_clear `{H : State.Trait} : Notation.Dot "clear" := {
    Notation.dot := clear;
  }.
  
  Parameter get_balance : forall `{H : State.Trait},
      ref Self ->
      ref Slice ->
      M (H := H) (core.option.Option ink_engine.types.Balance).
  
  Global Instance Method_get_balance `{H : State.Trait} :
    Notation.Dot "get_balance" := {
    Notation.dot := get_balance;
  }.
  
  Parameter set_balance : forall `{H : State.Trait},
      mut_ref Self ->
      ref Slice ->
      ink_engine.types.Balance ->
      M (H := H) unit.
  
  Global Instance Method_set_balance `{H : State.Trait} :
    Notation.Dot "set_balance" := {
    Notation.dot := set_balance;
  }.
End Impl_ink_engine_database_Database_2.

Module exec_context.
  Module ExecContext.
    Unset Primitive Projections.
    Record t : Set := {
      caller : core.option.Option ink_engine.types.AccountId;
      callee : core.option.Option ink_engine.types.AccountId;
      value_transferred : ink_engine.types.Balance;
      block_number : ink_engine.types.BlockNumber;
      block_timestamp : ink_engine.types.BlockTimestamp;
      contracts : alloc.vec.Vec (alloc.vec.Vec u8);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_caller : Notation.Dot "caller" := {
      Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_callee : Notation.Dot "callee" := {
      Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_value_transferred :
        Notation.Dot "value_transferred" := {
      Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_block_number : Notation.Dot "block_number" := {
      Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_block_timestamp : Notation.Dot "block_timestamp" := {
      Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_contracts : Notation.Dot "contracts" := {
      Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
    }.
  End ExecContext.
  Definition ExecContext : Set := ExecContext.t.
  
  Module Impl_core_default_Default_for_ink_engine_exec_context_ExecContext.
    Definition Self := ink_engine.exec_context.ExecContext.
    
    Parameter default : forall `{H : State.Trait},
        M (H := H) ink_engine.exec_context.ExecContext.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_exec_context_ExecContext.
  
  Module Impl_ink_engine_exec_context_ExecContext.
    Definition Self := ink_engine.exec_context.ExecContext.
    
    Parameter new : forall `{H : State.Trait}, M (H := H) Self.
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
    
    Parameter callee : forall `{H : State.Trait},
        ref Self ->
        M (H := H) (alloc.vec.Vec u8).
    
    Global Instance Method_callee `{H : State.Trait} :
      Notation.Dot "callee" := {
      Notation.dot := callee;
    }.
    
    Parameter reset : forall `{H : State.Trait},
        mut_ref Self ->
        M (H := H) unit.
    
    Global Instance Method_reset `{H : State.Trait} : Notation.Dot "reset" := {
      Notation.dot := reset;
    }.
    
    Parameter set_block_timestamp : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.BlockTimestamp ->
        M (H := H) unit.
    
    Global Instance Method_set_block_timestamp `{H : State.Trait} :
      Notation.Dot "set_block_timestamp" := {
      Notation.dot := set_block_timestamp;
    }.
    
    Parameter set_block_number : forall `{H : State.Trait},
        mut_ref Self ->
        ink_engine.types.BlockNumber ->
        M (H := H) unit.
    
    Global Instance Method_set_block_number `{H : State.Trait} :
      Notation.Dot "set_block_number" := {
      Notation.dot := set_block_number;
    }.
  End Impl_ink_engine_exec_context_ExecContext.
End exec_context.

Module ExecContext.
  Unset Primitive Projections.
  Record t : Set := {
    caller : core.option.Option ink_engine.types.AccountId;
    callee : core.option.Option ink_engine.types.AccountId;
    value_transferred : ink_engine.types.Balance;
    block_number : ink_engine.types.BlockNumber;
    block_timestamp : ink_engine.types.BlockTimestamp;
    contracts : alloc.vec.Vec (alloc.vec.Vec u8);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_caller : Notation.Dot "caller" := {
    Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
  }.
  Global Instance Get_callee : Notation.Dot "callee" := {
    Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
  }.
  Global Instance Get_value_transferred : Notation.Dot "value_transferred" := {
    Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
  }.
  Global Instance Get_block_number : Notation.Dot "block_number" := {
    Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
  }.
  Global Instance Get_block_timestamp : Notation.Dot "block_timestamp" := {
    Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
  }.
  Global Instance Get_contracts : Notation.Dot "contracts" := {
    Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
  }.
End ExecContext.
Definition ExecContext : Set := ExecContext.t.

Module Impl_core_default_Default_for_ink_engine_exec_context_ExecContext.
  Definition Self := ink_engine.exec_context.ExecContext.
  
  Parameter default : forall `{H : State.Trait},
      M (H := H) ink_engine.exec_context.ExecContext.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_exec_context_ExecContext.

Module Impl_ink_engine_exec_context_ExecContext_2.
  Definition Self := ink_engine.exec_context.ExecContext.
  
  Parameter new : forall `{H : State.Trait}, M (H := H) Self.
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
  
  Parameter callee : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (alloc.vec.Vec u8).
  
  Global Instance Method_callee `{H : State.Trait} : Notation.Dot "callee" := {
    Notation.dot := callee;
  }.
  
  Parameter reset : forall `{H : State.Trait}, mut_ref Self -> M (H := H) unit.
  
  Global Instance Method_reset `{H : State.Trait} : Notation.Dot "reset" := {
    Notation.dot := reset;
  }.
  
  Parameter set_block_timestamp : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.BlockTimestamp ->
      M (H := H) unit.
  
  Global Instance Method_set_block_timestamp `{H : State.Trait} :
    Notation.Dot "set_block_timestamp" := {
    Notation.dot := set_block_timestamp;
  }.
  
  Parameter set_block_number : forall `{H : State.Trait},
      mut_ref Self ->
      ink_engine.types.BlockNumber ->
      M (H := H) unit.
  
  Global Instance Method_set_block_number `{H : State.Trait} :
    Notation.Dot "set_block_number" := {
    Notation.dot := set_block_number;
  }.
End Impl_ink_engine_exec_context_ExecContext_2.

Module hashing.
  Parameter blake2b_256 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Parameter blake2b_128 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Parameter keccak_256 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
  
  Parameter sha2_256 : forall `{H : State.Trait},
      ref Slice ->
      mut_ref list u8 ->
      M (H := H) unit.
End hashing.

Parameter blake2b_256 : forall `{H : State.Trait},
    ref Slice ->
    mut_ref list u8 ->
    M (H := H) unit.

Definition Blake2b256 : Set := blake2.Blake2b typenum.generated.consts.U32.

Parameter blake2b_128 : forall `{H : State.Trait},
    ref Slice ->
    mut_ref list u8 ->
    M (H := H) unit.

Definition Blake2b128 : Set := blake2.Blake2b typenum.generated.consts.U16.

Parameter keccak_256 : forall `{H : State.Trait},
    ref Slice ->
    mut_ref list u8 ->
    M (H := H) unit.

Parameter sha2_256 : forall `{H : State.Trait},
    ref Slice ->
    mut_ref list u8 ->
    M (H := H) unit.

Module types.
  Definition BlockNumber : Set := u32.
  
  Definition BlockTimestamp : Set := u64.
  
  Definition Balance : Set := u128.
  
  Module AccountId.
    Unset Primitive Projections.
    Record t : Set := {
      _ : alloc.vec.Vec u8;
    }.
    Global Set Primitive Projections.
  
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End AccountId.
  Definition AccountId := AccountId.t.
  
  Module Impl_core_fmt_Debug_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_engine_types_AccountId.
  
  Module Impl_core_convert_From_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter from : forall `{H : State.Trait},
        alloc.vec.Vec u8 ->
        M (H := H) ink_engine.types.AccountId.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := alloc.vec.Vec u8) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_engine_types_AccountId.
  
  Module Impl_core_clone_Clone_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) ink_engine.types.AccountId.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_engine_types_AccountId.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountId.
  
  Module Impl_core_cmp_PartialEq_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.AccountId ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_engine_types_AccountId.
  
  Module Impl_core_marker_StructuralEq_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_engine_types_AccountId.
  
  Module Impl_core_cmp_Eq_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_engine_types_AccountId.
  
  Module Impl_core_cmp_PartialOrd_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter partial_cmp : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.AccountId ->
        M (H := H) (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{H : State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_ink_engine_types_AccountId.
  
  Module Impl_core_cmp_Ord_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter cmp : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.AccountId ->
        M (H := H) core.cmp.Ordering.
    
    Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp `{H : State.Trait} := cmp;
    }.
  End Impl_core_cmp_Ord_for_ink_engine_types_AccountId.
  
  Module Impl_core_hash_Hash_for_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter hash : forall `{H : State.Trait},
        ref Self ->
        mut_ref __H ->
        M (H := H) unit.
    
    Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
    
    Global Instance I : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash `{H : State.Trait} := hash;
    }.
  End Impl_core_hash_Hash_for_ink_engine_types_AccountId.
  
  Module Impl_ink_engine_types_AccountId.
    Definition Self := ink_engine.types.AccountId.
    
    Parameter from_bytes : forall `{H : State.Trait},
        ref Slice ->
        M (H := H) Self.
    
    Global Instance AssociatedFunction_from_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_bytes" := {
      Notation.double_colon := from_bytes;
    }.
    
    Parameter as_bytes : forall `{H : State.Trait},
        ref Self ->
        M (H := H) (ref Slice).
    
    Global Instance Method_as_bytes `{H : State.Trait} :
      Notation.Dot "as_bytes" := {
      Notation.dot := as_bytes;
    }.
  End Impl_ink_engine_types_AccountId.
  
  Module Key.
    Unset Primitive Projections.
    Record t : Set := {
      _ : alloc.vec.Vec u8;
    }.
    Global Set Primitive Projections.
  
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Key.
  Definition Key := Key.t.
  
  Module Impl_core_default_Default_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter default : forall `{H : State.Trait},
        M (H := H) ink_engine.types.Key.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_engine_types_Key.
  
  Module Impl_core_convert_From_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter from : forall `{H : State.Trait},
        alloc.vec.Vec u8 ->
        M (H := H) ink_engine.types.Key.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := alloc.vec.Vec u8) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_engine_types_Key.
  
  Module Impl_core_clone_Clone_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) ink_engine.types.Key.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_engine_types_Key.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_engine_types_Key.
  
  Module Impl_core_cmp_PartialEq_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.Key ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_engine_types_Key.
  
  Module Impl_core_marker_StructuralEq_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_engine_types_Key.
  
  Module Impl_core_cmp_Eq_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_engine_types_Key.
  
  Module Impl_core_cmp_PartialOrd_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter partial_cmp : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.Key ->
        M (H := H) (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{H : State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_ink_engine_types_Key.
  
  Module Impl_core_cmp_Ord_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter cmp : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.Key ->
        M (H := H) core.cmp.Ordering.
    
    Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp `{H : State.Trait} := cmp;
    }.
  End Impl_core_cmp_Ord_for_ink_engine_types_Key.
  
  Module Impl_core_hash_Hash_for_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter hash : forall `{H : State.Trait},
        ref Self ->
        mut_ref __H ->
        M (H := H) unit.
    
    Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
    
    Global Instance I : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash `{H : State.Trait} := hash;
    }.
  End Impl_core_hash_Hash_for_ink_engine_types_Key.
  
  Module Impl_ink_engine_types_Key.
    Definition Self := ink_engine.types.Key.
    
    Parameter from_bytes : forall `{H : State.Trait},
        ref Slice ->
        M (H := H) Self.
    
    Global Instance AssociatedFunction_from_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_bytes" := {
      Notation.double_colon := from_bytes;
    }.
  End Impl_ink_engine_types_Key.
  
  Module AccountError.
    Inductive t : Set :=
    | Decoding (_ : parity_scale_codec.error.Error)
    | UnexpectedUserAccount
    | NoAccountForId (_ : alloc.vec.Vec u8).
  End AccountError.
  Definition AccountError := AccountError.t.
  
  Module Impl_core_clone_Clone_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Parameter clone : forall `{H : State.Trait},
        ref Self ->
        M (H := H) ink_engine.types.AccountError.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_engine_types_AccountError.
  
  Module Impl_core_fmt_Debug_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Parameter fmt : forall `{H : State.Trait},
        ref Self ->
        mut_ref core.fmt.Formatter ->
        M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_engine_types_AccountError.
  
  Module Impl_core_convert_From_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Parameter from : forall `{H : State.Trait},
        parity_scale_codec.error.Error ->
        M (H := H) ink_engine.types.AccountError.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_engine_types_AccountError.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountError.
  
  Module Impl_core_cmp_PartialEq_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Parameter eq : forall `{H : State.Trait},
        ref Self ->
        ref ink_engine.types.AccountError ->
        M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_engine_types_AccountError.
  
  Module Impl_core_marker_StructuralEq_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_engine_types_AccountError.
  
  Module Impl_core_cmp_Eq_for_ink_engine_types_AccountError.
    Definition Self := ink_engine.types.AccountError.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
        ref Self ->
        M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_engine_types_AccountError.
End types.

Definition BlockNumber : Set := u32.

Definition BlockTimestamp : Set := u64.

Definition Balance : Set := u128.

Module AccountId.
  Unset Primitive Projections.
  Record t : Set := {
    _ : alloc.vec.Vec u8;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End AccountId.
Definition AccountId := AccountId.t.

Module Impl_core_fmt_Debug_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_engine_types_AccountId.

Module Impl_core_convert_From_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter from : forall `{H : State.Trait},
      alloc.vec.Vec u8 ->
      M (H := H) ink_engine.types.AccountId.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := alloc.vec.Vec u8) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_engine_types_AccountId.

Module Impl_core_clone_Clone_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) ink_engine.types.AccountId.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_engine_types_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountId.

Module Impl_core_cmp_PartialEq_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.AccountId ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_engine_types_AccountId.

Module Impl_core_marker_StructuralEq_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_engine_types_AccountId.

Module Impl_core_cmp_Eq_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_engine_types_AccountId.

Module Impl_core_cmp_PartialOrd_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter partial_cmp : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.AccountId ->
      M (H := H) (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{H : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_ink_engine_types_AccountId.

Module Impl_core_cmp_Ord_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter cmp : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.AccountId ->
      M (H := H) core.cmp.Ordering.
  
  Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp `{H : State.Trait} := cmp;
  }.
End Impl_core_cmp_Ord_for_ink_engine_types_AccountId.

Module Impl_core_hash_Hash_for_ink_engine_types_AccountId.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter hash : forall `{H : State.Trait},
      ref Self ->
      mut_ref __H ->
      M (H := H) unit.
  
  Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash `{H : State.Trait} := hash;
  }.
End Impl_core_hash_Hash_for_ink_engine_types_AccountId.

Module Impl_ink_engine_types_AccountId_2.
  Definition Self := ink_engine.types.AccountId.
  
  Parameter from_bytes : forall `{H : State.Trait},
      ref Slice ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_from_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_bytes" := {
    Notation.double_colon := from_bytes;
  }.
  
  Parameter as_bytes : forall `{H : State.Trait},
      ref Self ->
      M (H := H) (ref Slice).
  
  Global Instance Method_as_bytes `{H : State.Trait} :
    Notation.Dot "as_bytes" := {
    Notation.dot := as_bytes;
  }.
End Impl_ink_engine_types_AccountId_2.

Module Key.
  Unset Primitive Projections.
  Record t : Set := {
    _ : alloc.vec.Vec u8;
  }.
  Global Set Primitive Projections.

  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Key.
Definition Key := Key.t.

Module Impl_core_default_Default_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter default : forall `{H : State.Trait},
      M (H := H) ink_engine.types.Key.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_engine_types_Key.

Module Impl_core_convert_From_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter from : forall `{H : State.Trait},
      alloc.vec.Vec u8 ->
      M (H := H) ink_engine.types.Key.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := alloc.vec.Vec u8) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_engine_types_Key.

Module Impl_core_clone_Clone_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) ink_engine.types.Key.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_engine_types_Key.

Module Impl_core_marker_StructuralPartialEq_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_engine_types_Key.

Module Impl_core_cmp_PartialEq_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.Key ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_engine_types_Key.

Module Impl_core_marker_StructuralEq_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_engine_types_Key.

Module Impl_core_cmp_Eq_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_engine_types_Key.

Module Impl_core_cmp_PartialOrd_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter partial_cmp : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.Key ->
      M (H := H) (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{H : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_ink_engine_types_Key.

Module Impl_core_cmp_Ord_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter cmp : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.Key ->
      M (H := H) core.cmp.Ordering.
  
  Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp `{H : State.Trait} := cmp;
  }.
End Impl_core_cmp_Ord_for_ink_engine_types_Key.

Module Impl_core_hash_Hash_for_ink_engine_types_Key.
  Definition Self := ink_engine.types.Key.
  
  Parameter hash : forall `{H : State.Trait},
      ref Self ->
      mut_ref __H ->
      M (H := H) unit.
  
  Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash `{H : State.Trait} := hash;
  }.
End Impl_core_hash_Hash_for_ink_engine_types_Key.

Module Impl_ink_engine_types_Key_2.
  Definition Self := ink_engine.types.Key.
  
  Parameter from_bytes : forall `{H : State.Trait},
      ref Slice ->
      M (H := H) Self.
  
  Global Instance AssociatedFunction_from_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_bytes" := {
    Notation.double_colon := from_bytes;
  }.
End Impl_ink_engine_types_Key_2.

Module AccountError.
  Inductive t : Set :=
  | Decoding (_ : parity_scale_codec.error.Error)
  | UnexpectedUserAccount
  | NoAccountForId (_ : alloc.vec.Vec u8).
End AccountError.
Definition AccountError := AccountError.t.

Module Impl_core_clone_Clone_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Parameter clone : forall `{H : State.Trait},
      ref Self ->
      M (H := H) ink_engine.types.AccountError.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_engine_types_AccountError.

Module Impl_core_fmt_Debug_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_engine_types_AccountError.

Module Impl_core_convert_From_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Parameter from : forall `{H : State.Trait},
      parity_scale_codec.error.Error ->
      M (H := H) ink_engine.types.AccountError.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := parity_scale_codec.error.Error) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_engine_types_AccountError.

Module Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_engine_types_AccountError.

Module Impl_core_cmp_PartialEq_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.types.AccountError ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_engine_types_AccountError.

Module Impl_core_marker_StructuralEq_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_engine_types_AccountError.

Module Impl_core_cmp_Eq_for_ink_engine_types_AccountError.
  Definition Self := ink_engine.types.AccountError.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_engine_types_AccountError.

Module Error.
  Inductive t : Set :=
  | Account (_ : ink_engine.types.AccountError)
  | UninitializedBlocks
  | UninitializedExecutionContext
  | UnregisteredChainExtension.
End Error.
Definition Error := Error.t.

Module Impl_core_fmt_Debug_for_ink_engine_Error.
  Definition Self := ink_engine.Error.
  
  Parameter fmt : forall `{H : State.Trait},
      ref Self ->
      mut_ref core.fmt.Formatter ->
      M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_engine_Error.

Module Impl_core_convert_From_for_ink_engine_Error.
  Definition Self := ink_engine.Error.
  
  Parameter from : forall `{H : State.Trait},
      ink_engine.types.AccountError ->
      M (H := H) ink_engine.Error.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_engine.types.AccountError) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_engine_Error.

Module Impl_core_marker_StructuralPartialEq_for_ink_engine_Error.
  Definition Self := ink_engine.Error.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_engine_Error.

Module Impl_core_cmp_PartialEq_for_ink_engine_Error.
  Definition Self := ink_engine.Error.
  
  Parameter eq : forall `{H : State.Trait},
      ref Self ->
      ref ink_engine.Error ->
      M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_engine_Error.

Module Impl_core_marker_StructuralEq_for_ink_engine_Error.
  Definition Self := ink_engine.Error.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_engine_Error.

Module Impl_core_cmp_Eq_for_ink_engine_Error.
  Definition Self := ink_engine.Error.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait},
      ref Self ->
      M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_engine_Error.
