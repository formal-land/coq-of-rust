(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module blake2b.
  Parameter generate_blake2x256_hash : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_blake2x256_hash_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End blake2b.

Parameter generate_blake2x256_hash : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_blake2x256_hash_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Module chain_extension.
  Parameter generate : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End chain_extension.

Parameter generate : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Module contract.
  Parameter generate : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End contract.

Parameter generate : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Module ink_test.
  Parameter generate : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End ink_test.

Parameter generate : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Module selector.
  Parameter generate_selector_id : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_selector_id_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
  
  Parameter generate_selector_bytes : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_selector_bytes_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End selector.

Parameter generate_selector_id : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_selector_id_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Parameter generate_selector_bytes : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_selector_bytes_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Module storage.
  Module storable.
    Parameter storable_struct_derive : forall `{H : State.Trait},
        ref synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
    
    Parameter storable_enum_derive : forall `{H : State.Trait},
        ref synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
    
    Parameter storable_derive : forall `{H : State.Trait},
        synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
  End storable.
  
  Module storable_hint.
    Parameter storable_hint_inner : forall `{H : State.Trait},
        synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
    
    Parameter storable_hint_derive : forall `{H : State.Trait},
        synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
  End storable_hint.
  
  Module storage_key.
    Parameter storage_key_derive : forall `{H : State.Trait},
        synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
  End storage_key.
  
  Module storage_layout.
    Parameter field_layout : forall `{H : State.Trait},
        ref synstructure.VariantInfo ->
        M (H := H) OpaqueDef.
    
    Parameter storage_layout_struct : forall `{H : State.Trait},
        ref synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
    
    Parameter storage_layout_enum : forall `{H : State.Trait},
        ref synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
    
    Parameter storage_layout_derive : forall `{H : State.Trait},
        synstructure.Structure ->
        M (H := H) proc_macro2.TokenStream.
  End storage_layout.
End storage.

Module storable.
  Parameter storable_struct_derive : forall `{H : State.Trait},
      ref synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter storable_enum_derive : forall `{H : State.Trait},
      ref synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter storable_derive : forall `{H : State.Trait},
      synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
End storable.

Parameter storable_struct_derive : forall `{H : State.Trait},
    ref synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Parameter storable_enum_derive : forall `{H : State.Trait},
    ref synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Parameter storable_derive : forall `{H : State.Trait},
    synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Module storable_hint.
  Parameter storable_hint_inner : forall `{H : State.Trait},
      synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter storable_hint_derive : forall `{H : State.Trait},
      synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
End storable_hint.

Parameter storable_hint_inner : forall `{H : State.Trait},
    synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Parameter storable_hint_derive : forall `{H : State.Trait},
    synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Module storage_key.
  Parameter storage_key_derive : forall `{H : State.Trait},
      synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
End storage_key.

Parameter storage_key_derive : forall `{H : State.Trait},
    synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Module storage_layout.
  Parameter field_layout : forall `{H : State.Trait},
      ref synstructure.VariantInfo ->
      M (H := H) OpaqueDef.
  
  Parameter storage_layout_struct : forall `{H : State.Trait},
      ref synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter storage_layout_enum : forall `{H : State.Trait},
      ref synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter storage_layout_derive : forall `{H : State.Trait},
      synstructure.Structure ->
      M (H := H) proc_macro2.TokenStream.
End storage_layout.

Parameter field_layout : forall `{H : State.Trait},
    ref synstructure.VariantInfo ->
    M (H := H) OpaqueDef.

Error OpaqueTy.

Parameter storage_layout_struct : forall `{H : State.Trait},
    ref synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Parameter storage_layout_enum : forall `{H : State.Trait},
    ref synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Parameter storage_layout_derive : forall `{H : State.Trait},
    synstructure.Structure ->
    M (H := H) proc_macro2.TokenStream.

Module storage_item.
  Parameter generate : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter generate_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End storage_item.

Parameter generate : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter generate_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Module trait_def.
  Parameter analyze : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) proc_macro2.TokenStream.
  
  Parameter analyze_or_err : forall `{H : State.Trait},
      proc_macro2.TokenStream ->
      proc_macro2.TokenStream ->
      M (H := H) (syn.error.Result proc_macro2.TokenStream).
End trait_def.

Parameter analyze : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) proc_macro2.TokenStream.

Parameter analyze_or_err : forall `{H : State.Trait},
    proc_macro2.TokenStream ->
    proc_macro2.TokenStream ->
    M (H := H) (syn.error.Result proc_macro2.TokenStream).

Parameter blake2x256 : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter selector_id : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter selector_bytes : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter contract : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter trait_definition : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter storage_item : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter test : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter chain_extension : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter Storable : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter StorableHint : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter StorageKey : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Parameter StorageLayout : forall `{H : State.Trait},
    proc_macro.TokenStream ->
    M (H := H) proc_macro.TokenStream.

Definition _DECLS `{H : State.Trait} : ref Slice :=
  run
    (let* α0 :=
      proc_macro.bridge.client.ProcMacro::["bang"]
        "blake2x256"
        ink_macro.blake2x256 in
    let* α1 :=
      proc_macro.bridge.client.ProcMacro::["bang"]
        "selector_id"
        ink_macro.selector_id in
    let* α2 :=
      proc_macro.bridge.client.ProcMacro::["bang"]
        "selector_bytes"
        ink_macro.selector_bytes in
    let* α3 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "contract"
        ink_macro.contract in
    let* α4 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "trait_definition"
        ink_macro.trait_definition in
    let* α5 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "storage_item"
        ink_macro.storage_item in
    let* α6 :=
      proc_macro.bridge.client.ProcMacro::["attr"] "test" ink_macro.test in
    let* α7 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "chain_extension"
        ink_macro.chain_extension in
    let* α8 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "Storable"
        (addr_of [ ])
        ink_macro.Storable in
    let* α9 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "StorableHint"
        (addr_of [ ])
        ink_macro.StorableHint in
    let* α10 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "StorageKey"
        (addr_of [ ])
        ink_macro.StorageKey in
    let* α11 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "StorageLayout"
        (addr_of [ ])
        ink_macro.StorageLayout in
    Pure (addr_of [ α0; α1; α2; α3; α4; α5; α6; α7; α8; α9; α10; α11 ])).
