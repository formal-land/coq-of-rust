(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module blake2b.
  Definition generate_blake2x256_hash
      `{H : State.Trait}
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.blake2b.generate_blake2x256_hash_or_err input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_blake2x256_hash_or_err
      `{H : State.Trait}
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* hash :=
      let* α0 := ink_ir.ir.blake2.Blake2x256Macro::["try_from"] input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of hash) in
    Pure (core.result.Result.Ok α0).
End blake2b.

Definition generate_blake2x256_hash
    `{H : State.Trait}
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.blake2b.generate_blake2x256_hash_or_err input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_blake2x256_hash_or_err
    `{H : State.Trait}
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* hash :=
    let* α0 := ink_ir.ir.blake2.Blake2x256Macro::["try_from"] input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of hash) in
  Pure (core.result.Result.Ok α0).

Module chain_extension.
  Definition generate
      `{H : State.Trait}
      (attr : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.chain_extension.generate_or_err attr input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_or_err
      `{H : State.Trait}
      (attr : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* chain_extension :=
      let* α0 := ink_ir.ir.chain_extension.ChainExtension::["new"] attr input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of chain_extension) in
    Pure (core.result.Result.Ok α0).
End chain_extension.

Definition generate
    `{H : State.Trait}
    (attr : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.chain_extension.generate_or_err attr input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_or_err
    `{H : State.Trait}
    (attr : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* chain_extension :=
    let* α0 := ink_ir.ir.chain_extension.ChainExtension::["new"] attr input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of chain_extension) in
  Pure (core.result.Result.Ok α0).

Module contract.
  Definition generate
      `{H : State.Trait}
      (attr : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.contract.generate_or_err attr input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_or_err
      `{H : State.Trait}
      (attr : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* contract :=
      let* α0 := ink_ir.ir.contract.Contract::["new"] attr input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of contract) in
    Pure (core.result.Result.Ok α0).
End contract.

Definition generate
    `{H : State.Trait}
    (attr : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.contract.generate_or_err attr input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_or_err
    `{H : State.Trait}
    (attr : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* contract :=
    let* α0 := ink_ir.ir.contract.Contract::["new"] attr input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of contract) in
  Pure (core.result.Result.Ok α0).

Module ink_test.
  Definition generate
      `{H : State.Trait}
      (attr : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.ink_test.generate_or_err attr input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_or_err
      `{H : State.Trait}
      (attr : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* test_definition :=
      let* α0 := ink_ir.ir.ink_test.InkTest::["new"] attr input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of test_definition) in
    Pure (core.result.Result.Ok α0).
End ink_test.

Definition generate
    `{H : State.Trait}
    (attr : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.ink_test.generate_or_err attr input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_or_err
    `{H : State.Trait}
    (attr : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* test_definition :=
    let* α0 := ink_ir.ir.ink_test.InkTest::["new"] attr input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of test_definition) in
  Pure (core.result.Result.Ok α0).

Module selector.
  Definition generate_selector_id
      `{H : State.Trait}
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.selector.generate_selector_id_or_err input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_selector_id_or_err
      `{H : State.Trait}
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* selector :=
      let* α0 :=
        (ink_ir.ir.selector.SelectorMacro
              ink_ir.ir.selector.SelectorId)::["try_from"]
          input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of selector) in
    Pure (core.result.Result.Ok α0).
  
  Definition generate_selector_bytes
      `{H : State.Trait}
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.selector.generate_selector_bytes_or_err input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_selector_bytes_or_err
      `{H : State.Trait}
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* selector :=
      let* α0 :=
        (ink_ir.ir.selector.SelectorMacro
              ink_ir.ir.selector.SelectorBytes)::["try_from"]
          input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of selector) in
    Pure (core.result.Result.Ok α0).
End selector.

Definition generate_selector_id
    `{H : State.Trait}
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.selector.generate_selector_id_or_err input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_selector_id_or_err
    `{H : State.Trait}
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* selector :=
    let* α0 :=
      (ink_ir.ir.selector.SelectorMacro
            ink_ir.ir.selector.SelectorId)::["try_from"]
        input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of selector) in
  Pure (core.result.Result.Ok α0).

Definition generate_selector_bytes
    `{H : State.Trait}
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.selector.generate_selector_bytes_or_err input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_selector_bytes_or_err
    `{H : State.Trait}
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* selector :=
    let* α0 :=
      (ink_ir.ir.selector.SelectorMacro
            ink_ir.ir.selector.SelectorBytes)::["try_from"]
        input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of selector) in
  Pure (core.result.Result.Ok α0).

Module storage.
  Module storable.
    Definition storable_struct_derive
        `{H : State.Trait}
        (s : ref synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["len"] in
        match (addr_of α1, addr_of 1) with
        | (left_val, right_val) =>
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 := α0.["eq"] α1 in
          let* α3 := α2.["not"] in
          if (α3 : bool) then
            let kind := core.panicking.AssertKind.Eq in
            let* _ :=
              let* α0 := left_val.["deref"] in
              let* α1 := right_val.["deref"] in
              let* α2 :=
                format_arguments::["new_const"]
                  (addr_of [ "can only operate on structs" ]) in
              core.panicking.assert_failed
                kind
                (addr_of α0)
                (addr_of α1)
                (core.option.Option.Some α2) in
            Pure tt
          else
            Pure tt
        end in
      let* variant :=
        let* α0 := s.["variants"] in
        Pure (addr_of α0[0]) in
      let* decode_body :=
        variant.["construct"]
          (fun field _index =>
            let ty := addr_of field.["ty"] in
            let* span := ty.["span"] in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _span :=
              let* α0 := quote.__private.get_span span in
              α0.["__into_span"] in
            let* _ := quote.__private.push_lt_spanned (addr_of _s) _span in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "as" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "storage" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "traits" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned
                (addr_of _s)
                _span
                "Storable" in
            let* _ := quote.__private.push_gt_spanned (addr_of _s) _span in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "decode" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _span :=
                let* α0 := quote.__private.get_span _span in
                α0.["__into_span"] in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "__input" in
              quote.__private.push_group_spanned
                (addr_of _s)
                _span
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ :=
              quote.__private.push_question_spanned (addr_of _s) _span in
            Pure _s) in
      let* encode_body :=
        variant.["each"]
          (fun binding =>
            let* span :=
              let* α0 := binding.["ast"] in
              α0.["ty"].["span"] in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _span :=
              let* α0 := quote.__private.get_span span in
              α0.["__into_span"] in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "storage" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "traits" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned
                (addr_of _s)
                _span
                "Storable" in
            let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "encode" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _span :=
                let* α0 := quote.__private.get_span _span in
                α0.["__into_span"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of binding)
                  (addr_of _s) in
              let* _ := quote.__private.push_comma_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "__dest" in
              quote.__private.push_group_spanned
                (addr_of _s)
                _span
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_semi_spanned (addr_of _s) _span in
            Pure _s) in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "gen" in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ := quote.__private.push_at (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "inline" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "always" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "allow" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_ident (addr_of _s) "fn" in
        let* _ := quote.__private.push_ident (addr_of _s) "decode" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "scale" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Input" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "__input" in
          let* _ := quote.__private.push_colon (addr_of _s) in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "mut" in
          let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_rarrow (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "result" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Result" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Self" in
        let* _ := quote.__private.push_comma (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "scale" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Error" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "core" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "result" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Result" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Ok" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of decode_body)
                (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "inline" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "always" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "allow" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_ident (addr_of _s) "fn" in
        let* _ := quote.__private.push_ident (addr_of _s) "encode" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "scale" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Output" in
        let* _ := quote.__private.push_add (addr_of _s) in
        let* _ := quote.__private.push_question (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "marker" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Sized" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "self" in
          let* _ := quote.__private.push_comma (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
          let* _ := quote.__private.push_colon (addr_of _s) in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "mut" in
          let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "match" in
          let* _ := quote.__private.push_ident (addr_of _s) "self" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of encode_body)
                (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Brace
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      s.["gen_impl"] _s.
    
    Definition storable_enum_derive
        `{H : State.Trait}
        (s : ref synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["is_empty"] in
        let* α2 := α1.["not"] in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of
                [ "encountered invalid empty enum type deriving Storable trait"
                ]) in
          core.panicking.panic_fmt α0
        else
          Pure tt in
      let* _ :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["len"] in
        let* α2 := α1.["gt"] 256 in
        if (α2 : bool) then
          let* α0 := s.["ast"] in
          let* α1 := α0.["span"] in
          let* α2 :=
            syn.error.Error::["new"]
              α1
              "Currently only enums with at most 256 variants are supported." in
          let* α3 := α2.["to_compile_error"] in
          Return α3
        else
          Pure tt in
      let* decode_body :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["iter"] in
        let* α2 :=
          α1.["map"]
            (fun variant =>
              variant.["construct"]
                (fun field _index =>
                  let ty := addr_of field.["ty"] in
                  let* span := ty.["span"] in
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _span :=
                    let* α0 := quote.__private.get_span span in
                    α0.["__into_span"] in
                  let* _ :=
                    quote.__private.push_lt_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of ty)
                      (addr_of _s) in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "as" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "ink" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "storage" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "traits" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "Storable" in
                  let* _ :=
                    quote.__private.push_gt_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "decode" in
                  let* _ :=
                    let* _s := proc_macro2.TokenStream::["new"] in
                    let* _span :=
                      let* α0 := quote.__private.get_span _span in
                      α0.["__into_span"] in
                    let* _ :=
                      quote.__private.push_ident_spanned
                        (addr_of _s)
                        _span
                        "__input" in
                    quote.__private.push_group_spanned
                      (addr_of _s)
                      _span
                      proc_macro2.Delimiter.Parenthesis
                      _s in
                  let* _ :=
                    quote.__private.push_question_spanned (addr_of _s) _span in
                  Pure _s)) in
        let* α3 := α2.["enumerate"] in
        let* α4 := proc_macro2.TokenStream::["new"] in
        α3.["fold"]
          α4
          (fun acc (index, variant) =>
            let index := cast index u8 in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of acc) (addr_of _s) in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of index) (addr_of _s) in
            let* _ := quote.__private.push_fat_arrow (addr_of _s) in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of variant)
                (addr_of _s) in
            let* _ := quote.__private.push_comma (addr_of _s) in
            Pure _s) in
      let* encode_body :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["iter"] in
        let* α2 := α1.["enumerate"] in
        α2.["map"]
          (fun (index, variant) =>
            let* pat := variant.["pat"] in
            let index := cast index u8 in
            let* fields :=
              let* α0 := variant.["bindings"] in
              let* α1 := α0.["iter"] in
              α1.["map"]
                (fun field =>
                  let* span :=
                    let* α0 := field.["ast"] in
                    α0.["ty"].["span"] in
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _span :=
                    let* α0 := quote.__private.get_span span in
                    α0.["__into_span"] in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "ink" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "storage" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "traits" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "Storable" in
                  let* _ :=
                    quote.__private.push_colon2_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "encode" in
                  let* _ :=
                    let* _s := proc_macro2.TokenStream::["new"] in
                    let* _span :=
                      let* α0 := quote.__private.get_span _span in
                      α0.["__into_span"] in
                    let* _ :=
                      quote.to_tokens.ToTokens.to_tokens
                        (addr_of field)
                        (addr_of _s) in
                    let* _ :=
                      quote.__private.push_comma_spanned (addr_of _s) _span in
                    let* _ :=
                      quote.__private.push_ident_spanned
                        (addr_of _s)
                        _span
                        "__dest" in
                    quote.__private.push_group_spanned
                      (addr_of _s)
                      _span
                      proc_macro2.Delimiter.Parenthesis
                      _s in
                  let* _ :=
                    quote.__private.push_semi_spanned (addr_of _s) _span in
                  Pure _s) in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of pat) (addr_of _s) in
            let* _ := quote.__private.push_fat_arrow (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ := quote.__private.push_lt (addr_of _s) in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "core" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "primitive" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "u8" in
                let* _ := quote.__private.push_ident (addr_of _s) "as" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "ink" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "storage" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "traits" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
                let* _ := quote.__private.push_gt (addr_of _s) in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "encode" in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ := quote.__private.push_and (addr_of _s) in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of index)
                      (addr_of _s) in
                  let* _ := quote.__private.push_comma (addr_of _s) in
                  let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
                  quote.__private.push_group
                    (addr_of _s)
                    proc_macro2.Delimiter.Parenthesis
                    _s in
                let* _ := quote.__private.push_semi (addr_of _s) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Brace
                  _s in
              let* _ :=
                let has_iter :=
                  quote.__private.ThereIsNoIteratorInRepetition.Build in
                let* '(fields, i) := fields.["quote_into_iter"] in
                let* has_iter := has_iter.["bitor"] i in
                let _ := has_iter in
                loop
                  (if (true : bool) then
                    let* fields :=
                      let* α0 := fields.["next"] in
                      match α0 with
                      | core.option.Option.Some _x =>
                        Pure (quote.__private.RepInterp.Build_t _x)
                      | core.option.Option.None => Break
                      end in
                    let* _ :=
                      let* _s := proc_macro2.TokenStream::["new"] in
                      let* _ :=
                        quote.to_tokens.ToTokens.to_tokens
                          (addr_of fields)
                          (addr_of _s) in
                      quote.__private.push_group
                        (addr_of _s)
                        proc_macro2.Delimiter.Brace
                        _s in
                    Pure tt
                  else
                    let* _ := Break in
                    Pure tt) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Brace
                _s in
            Pure _s) in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "gen" in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ := quote.__private.push_at (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "inline" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "always" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "allow" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_ident (addr_of _s) "fn" in
        let* _ := quote.__private.push_ident (addr_of _s) "decode" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "scale" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Input" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "__input" in
          let* _ := quote.__private.push_colon (addr_of _s) in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "mut" in
          let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_rarrow (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "result" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Result" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Self" in
        let* _ := quote.__private.push_comma (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "scale" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Error" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "core" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "result" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Result" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Ok" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "match" in
            let* _ := quote.__private.push_lt (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "core" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "primitive" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "u8" in
            let* _ := quote.__private.push_ident (addr_of _s) "as" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "storage" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "traits" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
            let* _ := quote.__private.push_gt (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "decode" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_ident (addr_of _s) "__input" in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_question (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of decode_body)
                  (addr_of _s) in
              let* _ := quote.__private.push_underscore (addr_of _s) in
              let* _ := quote.__private.push_fat_arrow (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "unreachable" in
              let* _ := quote.__private.push_bang (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.__private.parse
                    (addr_of _s)
                    ""encountered invalid enum discriminant"" in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Brace
                _s in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "inline" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "always" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_pound (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "allow" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Bracket
            _s in
        let* _ := quote.__private.push_ident (addr_of _s) "fn" in
        let* _ := quote.__private.push_ident (addr_of _s) "encode" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "scale" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Output" in
        let* _ := quote.__private.push_add (addr_of _s) in
        let* _ := quote.__private.push_question (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "marker" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Sized" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "self" in
          let* _ := quote.__private.push_comma (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
          let* _ := quote.__private.push_colon (addr_of _s) in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "mut" in
          let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "match" in
          let* _ := quote.__private.push_ident (addr_of _s) "self" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              let has_iter :=
                quote.__private.ThereIsNoIteratorInRepetition.Build in
              let* '(encode_body, i) := encode_body.["quote_into_iter"] in
              let* has_iter := has_iter.["bitor"] i in
              let _ := has_iter in
              loop
                (if (true : bool) then
                  let* encode_body :=
                    let* α0 := encode_body.["next"] in
                    match α0 with
                    | core.option.Option.Some _x =>
                      Pure (quote.__private.RepInterp.Build_t _x)
                    | core.option.Option.None => Break
                    end in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of encode_body)
                      (addr_of _s) in
                  Pure tt
                else
                  let* _ := Break in
                  Pure tt) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Brace
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      s.["gen_impl"] _s.
    
    Definition storable_derive
        `{H : State.Trait}
        (s : synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 :=
          s.["bind_with"] (fun _ => Pure synstructure.BindStyle.Move) in
        let* α1 := α0.["add_bounds"] synstructure.AddBounds.Fields in
        α1.["underscore_const"] true in
      let* α0 := s.["ast"] in
      match addr_of α0.["data"] with
      | syn.derive.Data.Struct _ =>
        ink_macro.storage.storable.storable_struct_derive (addr_of s)
      | syn.derive.Data.Enum _ =>
        ink_macro.storage.storable.storable_enum_derive (addr_of s)
      | _ =>
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "cannot derive `Storable` for Rust `union` items" ]) in
        core.panicking.panic_fmt α0
      end.
  End storable.
  
  Module storable_hint.
    Definition storable_hint_inner
        `{H : State.Trait}
        (s : synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* ident :=
        let* α0 := s.["ast"] in
        α0.["ident"].["clone"] in
      let* salt_ident :=
        let* res :=
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of [ "__ink_generic_salt" ]) in
          alloc.fmt.format α0 in
        quote.__private.mk_ident (addr_of res) core.option.Option.None in
      let* generics :=
        let* α0 := s.["ast"] in
        α0.["generics"].["clone"] in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of salt_ident)
            (addr_of _s) in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
        let* α0 := syn.parse2 _s in
        let* α1 := α0.["unwrap"] in
        generics.["params"].["push"] α1 in
      let* '(impl_generics, _, where_clause) := generics.["split_for_impl"] in
      let* '(_, ty_generics_original, _) :=
        let* α0 := s.["ast"] in
        α0.["generics"].["split_for_impl"] in
      let* α0 := s.["ast"] in
      let* α1 := ink_ir.ir.utils.find_storage_key_salt α0 in
      match α1 with
      | core.option.Option.Some inner_salt_ident =>
        let* inner_salt_ident :=
          inner_salt_ident.["ident"].["to_token_stream"] in
        let* ty_generics :=
          let* α0 := s.["ast"] in
          let* α1 := α0.["generics"].["params"].["clone"] in
          let* α2 := α1.["into_iter"] in
          let* α3 :=
            α2.["map"]
              (fun param =>
                let* ident :=
                  match param with
                  | syn.generics.GenericParam.Type t =>
                    t.["ident"].["to_token_stream"]
                  | syn.generics.GenericParam.Lifetime l =>
                    l.["lifetime"].["to_token_stream"]
                  | syn.generics.GenericParam.Const c =>
                    c.["ident"].["to_token_stream"]
                  end in
                let* α0 := inner_salt_ident.["to_string"] in
                let* α1 := ident.["to_string"] in
                let* α2 := α0.["eq"] α1 in
                if (α2 : bool) then
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of salt_ident)
                      (addr_of _s) in
                  Pure (core.option.Option.Some _s)
                else
                  Pure (core.option.Option.Some ident)) in
          α3.["collect"] in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "impl" in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of impl_generics)
            (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "StorableHint" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of salt_ident)
            (addr_of _s) in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "for" in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of ty_generics_original)
            (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of where_clause)
            (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "type" in
          let* _ := quote.__private.push_ident (addr_of _s) "Type" in
          let* _ := quote.__private.push_eq (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
          let* _ := quote.__private.push_lt (addr_of _s) in
          let* _ :=
            let _i := 0 in
            let has_iter :=
              quote.__private.ThereIsNoIteratorInRepetition.Build in
            let* '(ty_generics, i) := ty_generics.["quote_into_iter"] in
            let* has_iter := has_iter.["bitor"] i in
            let _ := has_iter in
            loop
              (if (true : bool) then
                let* ty_generics :=
                  let* α0 := ty_generics.["next"] in
                  match α0 with
                  | core.option.Option.Some _x =>
                    Pure (quote.__private.RepInterp.Build_t _x)
                  | core.option.Option.None => Break
                  end in
                let* _ :=
                  let* α0 := _i.["gt"] 0 in
                  if (α0 : bool) then
                    let* _ := quote.__private.push_comma (addr_of _s) in
                    Pure tt
                  else
                    Pure tt in
                let* _ := _i.["add_assign"] 1 in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of ty_generics)
                    (addr_of _s) in
                Pure tt
              else
                let* _ := Break in
                Pure tt) in
          let* _ := quote.__private.push_gt (addr_of _s) in
          let* _ := quote.__private.push_semi (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "type" in
          let* _ := quote.__private.push_ident (addr_of _s) "PreferredKey" in
          let* _ := quote.__private.push_eq (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens
              (addr_of inner_salt_ident)
              (addr_of _s) in
          let* _ := quote.__private.push_semi (addr_of _s) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        Pure _s
      | _ =>
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "impl" in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of impl_generics)
            (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "StorableHint" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of salt_ident)
            (addr_of _s) in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "for" in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of ty_generics_original)
            (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of where_clause)
            (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "type" in
          let* _ := quote.__private.push_ident (addr_of _s) "Type" in
          let* _ := quote.__private.push_eq (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens
              (addr_of ty_generics_original)
              (addr_of _s) in
          let* _ := quote.__private.push_semi (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "type" in
          let* _ := quote.__private.push_ident (addr_of _s) "PreferredKey" in
          let* _ := quote.__private.push_eq (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "storage" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "traits" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "AutoKey" in
          let* _ := quote.__private.push_semi (addr_of _s) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        Pure _s
      end.
    
    Definition storable_hint_derive
        `{H : State.Trait}
        (s : synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* derive := ink_macro.storage.storable_hint.storable_hint_inner s in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "const" in
      let* _ := quote.__private.push_underscore (addr_of _s) in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ :=
        let* α0 := proc_macro2.TokenStream::["new"] in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          α0 in
      let* _ := quote.__private.push_eq (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of derive) (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      let* _ := quote.__private.push_semi (addr_of _s) in
      Pure _s.
  End storable_hint.
  
  Module storage_key.
    Definition storage_key_derive
        `{H : State.Trait}
        (s : synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 := s.["add_bounds"] synstructure.AddBounds.None in
        α0.["underscore_const"] true in
      let* salt :=
        let* α0 := s.["ast"] in
        let* α1 := ink_ir.ir.utils.find_storage_key_salt α0 in
        match α1 with
        | core.option.Option.Some param => param.["ident"].["to_token_stream"]
        | _ =>
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            let* α0 := proc_macro2.TokenStream::["new"] in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              α0 in
          Pure _s
        end in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "gen" in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ := quote.__private.push_at (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "const" in
        let* _ := quote.__private.push_ident (addr_of _s) "KEY" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Key" in
        let* _ := quote.__private.push_eq (addr_of _s) in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of salt) (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "as" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "KEY" in
        let* _ := quote.__private.push_semi (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      s.["gen_impl"] _s.
  End storage_key.
  
  Module storage_layout.
    Definition field_layout
        `{H : State.Trait}
        (variant : ref synstructure.VariantInfo)
        : M (H := H) OpaqueDef :=
      let* α0 := variant.["ast"] in
      let* α1 := α0.["fields"].["iter"] in
      let* α2 := α1.["enumerate"] in
      α2.["map"]
        (fun (i, field) =>
          let* ident :=
            let* α0 := field.["ident"].["as_ref"] in
            match α0 with
            | core.option.Option.Some ident =>
              let* ident_str := ident.["to_string"] in
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of ident_str)
                  (addr_of _s) in
              Pure _s
            | core.option.Option.None =>
              let* index := i.["to_string"] in
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of index)
                  (addr_of _s) in
              Pure _s
            end in
          let ty := addr_of field.["ty"] in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "FieldLayout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "new" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
            let* _ := quote.__private.push_comma (addr_of _s) in
            let* _ := quote.__private.push_lt (addr_of _s) in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "as" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "storage" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "traits" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
            let* _ := quote.__private.push_gt (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "layout" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_ident (addr_of _s) "__key" in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          Pure _s).
    
    Definition storage_layout_struct
        `{H : State.Trait}
        (s : ref synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 := s.["ast"] in
        let* α1 :=
          match α0.["data"] with
          | syn.derive.Data.Struct _ => Pure true
          | _ => Pure false
          end in
        let* α2 := α1.["not"] in
        if (α2 : bool) then
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of [ "s must be a struct item" ]) in
          core.panicking.panic_fmt α0
        else
          Pure tt in
      let* _ :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["len"] in
        let* α2 := α1.["eq"] 1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of [ "structs must have at most one variant" ]) in
          core.panicking.panic_fmt α0
        else
          Pure tt in
      let* struct_ident :=
        let* α0 := s.["ast"] in
        α0.["ident"].["clone"] in
      let* variant :=
        let* α0 := s.["variants"] in
        Pure (addr_of α0[0]) in
      let* field_layouts :=
        ink_macro.storage.storage_layout.field_layout variant in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "gen" in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ := quote.__private.push_at (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "fn" in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "__key" in
          let* _ := quote.__private.push_colon (addr_of _s) in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Key" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_rarrow (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Struct" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "layout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "StructLayout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "new" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "core" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
              let* _ := quote.__private.push_bang (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of struct_ident)
                    (addr_of _s) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  let has_iter :=
                    quote.__private.ThereIsNoIteratorInRepetition.Build in
                  let* '(field_layouts, i) :=
                    field_layouts.["quote_into_iter"] in
                  let* has_iter := has_iter.["bitor"] i in
                  let _ := has_iter in
                  loop
                    (if (true : bool) then
                      let* field_layouts :=
                        let* α0 := field_layouts.["next"] in
                        match α0 with
                        | core.option.Option.Some _x =>
                          Pure (quote.__private.RepInterp.Build_t _x)
                        | core.option.Option.None => Break
                        end in
                      let* _ :=
                        quote.to_tokens.ToTokens.to_tokens
                          (addr_of field_layouts)
                          (addr_of _s) in
                      let* _ := quote.__private.push_comma (addr_of _s) in
                      Pure tt
                    else
                      let* _ := Break in
                      Pure tt) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Bracket
                  _s in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      s.["gen_impl"] _s.
    
    Definition storage_layout_enum
        `{H : State.Trait}
        (s : ref synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 := s.["ast"] in
        let* α1 :=
          match α0.["data"] with
          | syn.derive.Data.Enum _ => Pure true
          | _ => Pure false
          end in
        let* α2 := α1.["not"] in
        if (α2 : bool) then
          let* α0 :=
            format_arguments::["new_const"]
              (addr_of [ "s must be an enum item" ]) in
          core.panicking.panic_fmt α0
        else
          Pure tt in
      let* _ :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["len"] in
        let* α2 := α1.["gt"] 256 in
        if (α2 : bool) then
          let* α0 := s.["ast"] in
          let* α1 := α0.["span"] in
          let* α2 :=
            syn.error.Error::["new"]
              α1
              "Currently only enums with at most 256 variants are supported." in
          let* α3 := α2.["to_compile_error"] in
          Return α3
        else
          Pure tt in
      let* variant_layouts :=
        let* α0 := s.["variants"] in
        let* α1 := α0.["iter"] in
        let* α2 := α1.["enumerate"] in
        α2.["map"]
          (fun (n, variant) =>
            let* variant_ident :=
              let* α0 := variant.["ast"] in
              Pure α0.["ident"] in
            let* discriminant :=
              let* α0 := variant.["ast"] in
              let* α1 := α0.["discriminant"].["as_ref"] in
              let* α2 :=
                α1.["map"]
                  (fun (_, expr) =>
                    let* _s := proc_macro2.TokenStream::["new"] in
                    let* _ :=
                      quote.to_tokens.ToTokens.to_tokens
                        (addr_of expr)
                        (addr_of _s) in
                    Pure _s) in
              α2.["unwrap_or_else"]
                (fun  =>
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of n)
                      (addr_of _s) in
                  Pure _s) in
            let* field_layouts :=
              ink_macro.storage.storage_layout.field_layout variant in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "ink" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "layout" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ :=
                  quote.__private.push_ident (addr_of _s) "Discriminant" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "from" in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of discriminant)
                      (addr_of _s) in
                  quote.__private.push_group
                    (addr_of _s)
                    proc_macro2.Delimiter.Parenthesis
                    _s in
                let* _ := quote.__private.push_comma (addr_of _s) in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "ink" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "layout" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ :=
                  quote.__private.push_ident (addr_of _s) "StructLayout" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "new" in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ := quote.__private.push_colon2 (addr_of _s) in
                  let* _ := quote.__private.push_ident (addr_of _s) "core" in
                  let* _ := quote.__private.push_colon2 (addr_of _s) in
                  let* _ :=
                    quote.__private.push_ident (addr_of _s) "stringify" in
                  let* _ := quote.__private.push_bang (addr_of _s) in
                  let* _ :=
                    let* _s := proc_macro2.TokenStream::["new"] in
                    let* _ :=
                      quote.to_tokens.ToTokens.to_tokens
                        (addr_of variant_ident)
                        (addr_of _s) in
                    quote.__private.push_group
                      (addr_of _s)
                      proc_macro2.Delimiter.Parenthesis
                      _s in
                  let* _ := quote.__private.push_comma (addr_of _s) in
                  let* _ :=
                    let* _s := proc_macro2.TokenStream::["new"] in
                    let* _ :=
                      let has_iter :=
                        quote.__private.ThereIsNoIteratorInRepetition.Build in
                      let* '(field_layouts, i) :=
                        field_layouts.["quote_into_iter"] in
                      let* has_iter := has_iter.["bitor"] i in
                      let _ := has_iter in
                      loop
                        (if (true : bool) then
                          let* field_layouts :=
                            let* α0 := field_layouts.["next"] in
                            match α0 with
                            | core.option.Option.Some _x =>
                              Pure (quote.__private.RepInterp.Build_t _x)
                            | core.option.Option.None => Break
                            end in
                          let* _ :=
                            quote.to_tokens.ToTokens.to_tokens
                              (addr_of field_layouts)
                              (addr_of _s) in
                          let* _ := quote.__private.push_comma (addr_of _s) in
                          Pure tt
                        else
                          let* _ := Break in
                          Pure tt) in
                    quote.__private.push_group
                      (addr_of _s)
                      proc_macro2.Delimiter.Bracket
                      _s in
                  quote.__private.push_group
                    (addr_of _s)
                    proc_macro2.Delimiter.Parenthesis
                    _s in
                let* _ := quote.__private.push_comma (addr_of _s) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Brace
                _s in
            Pure _s) in
      let* enum_ident :=
        let* α0 := s.["ast"] in
        α0.["ident"].["clone"] in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "gen" in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ := quote.__private.push_at (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "fn" in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "__key" in
          let* _ := quote.__private.push_colon (addr_of _s) in
          let* _ := quote.__private.push_and (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Key" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_rarrow (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Enum" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "layout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "EnumLayout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "new" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "core" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
              let* _ := quote.__private.push_bang (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of enum_ident)
                    (addr_of _s) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "ink" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "layout" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "LayoutKey" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "from" in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ := quote.__private.push_ident (addr_of _s) "__key" in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  let has_iter :=
                    quote.__private.ThereIsNoIteratorInRepetition.Build in
                  let* '(variant_layouts, i) :=
                    variant_layouts.["quote_into_iter"] in
                  let* has_iter := has_iter.["bitor"] i in
                  let _ := has_iter in
                  loop
                    (if (true : bool) then
                      let* variant_layouts :=
                        let* α0 := variant_layouts.["next"] in
                        match α0 with
                        | core.option.Option.Some _x =>
                          Pure (quote.__private.RepInterp.Build_t _x)
                        | core.option.Option.None => Break
                        end in
                      let* _ :=
                        quote.to_tokens.ToTokens.to_tokens
                          (addr_of variant_layouts)
                          (addr_of _s) in
                      let* _ := quote.__private.push_comma (addr_of _s) in
                      Pure tt
                    else
                      let* _ := Break in
                      Pure tt) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Bracket
                  _s in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      s.["gen_impl"] _s.
    
    Definition storage_layout_derive
        `{H : State.Trait}
        (s : synstructure.Structure)
        : M (H := H) proc_macro2.TokenStream :=
      let* _ :=
        let* α0 :=
          s.["bind_with"] (fun _ => Pure synstructure.BindStyle.Move) in
        let* α1 := α0.["add_bounds"] synstructure.AddBounds.Fields in
        α1.["underscore_const"] true in
      let* α0 := s.["ast"] in
      match addr_of α0.["data"] with
      | syn.derive.Data.Struct _ =>
        ink_macro.storage.storage_layout.storage_layout_struct (addr_of s)
      | syn.derive.Data.Enum _ =>
        ink_macro.storage.storage_layout.storage_layout_enum (addr_of s)
      | _ =>
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of
              [ "cannot derive `StorageLayout` for Rust `union` items" ]) in
        core.panicking.panic_fmt α0
      end.
  End storage_layout.
End storage.

Module storable.
  Definition storable_struct_derive
      `{H : State.Trait}
      (s : ref synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["len"] in
      match (addr_of α1, addr_of 1) with
      | (left_val, right_val) =>
        let* α0 := left_val.["deref"] in
        let* α1 := right_val.["deref"] in
        let* α2 := α0.["eq"] α1 in
        let* α3 := α2.["not"] in
        if (α3 : bool) then
          let kind := core.panicking.AssertKind.Eq in
          let* _ :=
            let* α0 := left_val.["deref"] in
            let* α1 := right_val.["deref"] in
            let* α2 :=
              format_arguments::["new_const"]
                (addr_of [ "can only operate on structs" ]) in
            core.panicking.assert_failed
              kind
              (addr_of α0)
              (addr_of α1)
              (core.option.Option.Some α2) in
          Pure tt
        else
          Pure tt
      end in
    let* variant :=
      let* α0 := s.["variants"] in
      Pure (addr_of α0[0]) in
    let* decode_body :=
      variant.["construct"]
        (fun field _index =>
          let ty := addr_of field.["ty"] in
          let* span := ty.["span"] in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _span :=
            let* α0 := quote.__private.get_span span in
            α0.["__into_span"] in
          let* _ := quote.__private.push_lt_spanned (addr_of _s) _span in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "as" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "storage" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "traits" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "Storable" in
          let* _ := quote.__private.push_gt_spanned (addr_of _s) _span in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "decode" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _span :=
              let* α0 := quote.__private.get_span _span in
              α0.["__into_span"] in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "__input" in
            quote.__private.push_group_spanned
              (addr_of _s)
              _span
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_question_spanned (addr_of _s) _span in
          Pure _s) in
    let* encode_body :=
      variant.["each"]
        (fun binding =>
          let* span :=
            let* α0 := binding.["ast"] in
            α0.["ty"].["span"] in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _span :=
            let* α0 := quote.__private.get_span span in
            α0.["__into_span"] in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "storage" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "traits" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "Storable" in
          let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "encode" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _span :=
              let* α0 := quote.__private.get_span _span in
              α0.["__into_span"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of binding)
                (addr_of _s) in
            let* _ := quote.__private.push_comma_spanned (addr_of _s) _span in
            let* _ :=
              quote.__private.push_ident_spanned (addr_of _s) _span "__dest" in
            quote.__private.push_group_spanned
              (addr_of _s)
              _span
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_semi_spanned (addr_of _s) _span in
          Pure _s) in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "gen" in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.__private.push_at (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "inline" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "always" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "allow" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_ident (addr_of _s) "fn" in
      let* _ := quote.__private.push_ident (addr_of _s) "decode" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "scale" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Input" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "__input" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "mut" in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      let* _ := quote.__private.push_rarrow (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "core" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "result" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Result" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ := quote.__private.push_comma (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "scale" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Error" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "result" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Result" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Ok" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens
              (addr_of decode_body)
              (addr_of _s) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "inline" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "always" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "allow" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_ident (addr_of _s) "fn" in
      let* _ := quote.__private.push_ident (addr_of _s) "encode" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "scale" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Output" in
      let* _ := quote.__private.push_add (addr_of _s) in
      let* _ := quote.__private.push_question (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "core" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "marker" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Sized" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "self" in
        let* _ := quote.__private.push_comma (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "mut" in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "match" in
        let* _ := quote.__private.push_ident (addr_of _s) "self" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens
              (addr_of encode_body)
              (addr_of _s) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    s.["gen_impl"] _s.
  
  Definition storable_enum_derive
      `{H : State.Trait}
      (s : ref synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["is_empty"] in
      let* α2 := α1.["not"] in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of
              [ "encountered invalid empty enum type deriving Storable trait"
              ]) in
        core.panicking.panic_fmt α0
      else
        Pure tt in
    let* _ :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["len"] in
      let* α2 := α1.["gt"] 256 in
      if (α2 : bool) then
        let* α0 := s.["ast"] in
        let* α1 := α0.["span"] in
        let* α2 :=
          syn.error.Error::["new"]
            α1
            "Currently only enums with at most 256 variants are supported." in
        let* α3 := α2.["to_compile_error"] in
        Return α3
      else
        Pure tt in
    let* decode_body :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["iter"] in
      let* α2 :=
        α1.["map"]
          (fun variant =>
            variant.["construct"]
              (fun field _index =>
                let ty := addr_of field.["ty"] in
                let* span := ty.["span"] in
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _span :=
                  let* α0 := quote.__private.get_span span in
                  α0.["__into_span"] in
                let* _ := quote.__private.push_lt_spanned (addr_of _s) _span in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of ty)
                    (addr_of _s) in
                let* _ :=
                  quote.__private.push_ident_spanned (addr_of _s) _span "as" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "storage" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "traits" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "Storable" in
                let* _ := quote.__private.push_gt_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "decode" in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _span :=
                    let* α0 := quote.__private.get_span _span in
                    α0.["__into_span"] in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "__input" in
                  quote.__private.push_group_spanned
                    (addr_of _s)
                    _span
                    proc_macro2.Delimiter.Parenthesis
                    _s in
                let* _ :=
                  quote.__private.push_question_spanned (addr_of _s) _span in
                Pure _s)) in
      let* α3 := α2.["enumerate"] in
      let* α4 := proc_macro2.TokenStream::["new"] in
      α3.["fold"]
        α4
        (fun acc (index, variant) =>
          let index := cast index u8 in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of acc) (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of index) (addr_of _s) in
          let* _ := quote.__private.push_fat_arrow (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of variant) (addr_of _s) in
          let* _ := quote.__private.push_comma (addr_of _s) in
          Pure _s) in
    let* encode_body :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["iter"] in
      let* α2 := α1.["enumerate"] in
      α2.["map"]
        (fun (index, variant) =>
          let* pat := variant.["pat"] in
          let index := cast index u8 in
          let* fields :=
            let* α0 := variant.["bindings"] in
            let* α1 := α0.["iter"] in
            α1.["map"]
              (fun field =>
                let* span :=
                  let* α0 := field.["ast"] in
                  α0.["ty"].["span"] in
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _span :=
                  let* α0 := quote.__private.get_span span in
                  α0.["__into_span"] in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "storage" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "traits" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "Storable" in
                let* _ :=
                  quote.__private.push_colon2_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "encode" in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _span :=
                    let* α0 := quote.__private.get_span _span in
                    α0.["__into_span"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of field)
                      (addr_of _s) in
                  let* _ :=
                    quote.__private.push_comma_spanned (addr_of _s) _span in
                  let* _ :=
                    quote.__private.push_ident_spanned
                      (addr_of _s)
                      _span
                      "__dest" in
                  quote.__private.push_group_spanned
                    (addr_of _s)
                    _span
                    proc_macro2.Delimiter.Parenthesis
                    _s in
                let* _ :=
                  quote.__private.push_semi_spanned (addr_of _s) _span in
                Pure _s) in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of pat) (addr_of _s) in
          let* _ := quote.__private.push_fat_arrow (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_lt (addr_of _s) in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "core" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "primitive" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "u8" in
              let* _ := quote.__private.push_ident (addr_of _s) "as" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "ink" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "storage" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "traits" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
              let* _ := quote.__private.push_gt (addr_of _s) in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "encode" in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ := quote.__private.push_and (addr_of _s) in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of index)
                    (addr_of _s) in
                let* _ := quote.__private.push_comma (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_semi (addr_of _s) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Brace
                _s in
            let* _ :=
              let has_iter :=
                quote.__private.ThereIsNoIteratorInRepetition.Build in
              let* '(fields, i) := fields.["quote_into_iter"] in
              let* has_iter := has_iter.["bitor"] i in
              let _ := has_iter in
              loop
                (if (true : bool) then
                  let* fields :=
                    let* α0 := fields.["next"] in
                    match α0 with
                    | core.option.Option.Some _x =>
                      Pure (quote.__private.RepInterp.Build_t _x)
                    | core.option.Option.None => Break
                    end in
                  let* _ :=
                    let* _s := proc_macro2.TokenStream::["new"] in
                    let* _ :=
                      quote.to_tokens.ToTokens.to_tokens
                        (addr_of fields)
                        (addr_of _s) in
                    quote.__private.push_group
                      (addr_of _s)
                      proc_macro2.Delimiter.Brace
                      _s in
                  Pure tt
                else
                  let* _ := Break in
                  Pure tt) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Brace
              _s in
          Pure _s) in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "gen" in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.__private.push_at (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "inline" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "always" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "allow" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_ident (addr_of _s) "fn" in
      let* _ := quote.__private.push_ident (addr_of _s) "decode" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "scale" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Input" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "__input" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "mut" in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      let* _ := quote.__private.push_rarrow (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "core" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "result" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Result" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Self" in
      let* _ := quote.__private.push_comma (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "scale" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Error" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "result" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Result" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Ok" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "match" in
          let* _ := quote.__private.push_lt (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "core" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "primitive" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "u8" in
          let* _ := quote.__private.push_ident (addr_of _s) "as" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "storage" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "traits" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
          let* _ := quote.__private.push_gt (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "decode" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "__input" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_question (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of decode_body)
                (addr_of _s) in
            let* _ := quote.__private.push_underscore (addr_of _s) in
            let* _ := quote.__private.push_fat_arrow (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "unreachable" in
            let* _ := quote.__private.push_bang (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.__private.parse
                  (addr_of _s)
                  ""encountered invalid enum discriminant"" in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Brace
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "inline" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "always" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_pound (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "allow" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Bracket
          _s in
      let* _ := quote.__private.push_ident (addr_of _s) "fn" in
      let* _ := quote.__private.push_ident (addr_of _s) "encode" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "scale" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Output" in
      let* _ := quote.__private.push_add (addr_of _s) in
      let* _ := quote.__private.push_question (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "core" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "marker" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Sized" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "self" in
        let* _ := quote.__private.push_comma (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "mut" in
        let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "match" in
        let* _ := quote.__private.push_ident (addr_of _s) "self" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            let has_iter :=
              quote.__private.ThereIsNoIteratorInRepetition.Build in
            let* '(encode_body, i) := encode_body.["quote_into_iter"] in
            let* has_iter := has_iter.["bitor"] i in
            let _ := has_iter in
            loop
              (if (true : bool) then
                let* encode_body :=
                  let* α0 := encode_body.["next"] in
                  match α0 with
                  | core.option.Option.Some _x =>
                    Pure (quote.__private.RepInterp.Build_t _x)
                  | core.option.Option.None => Break
                  end in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of encode_body)
                    (addr_of _s) in
                Pure tt
              else
                let* _ := Break in
                Pure tt) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    s.["gen_impl"] _s.
  
  Definition storable_derive
      `{H : State.Trait}
      (s : synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["bind_with"] (fun _ => Pure synstructure.BindStyle.Move) in
      let* α1 := α0.["add_bounds"] synstructure.AddBounds.Fields in
      α1.["underscore_const"] true in
    let* α0 := s.["ast"] in
    match addr_of α0.["data"] with
    | syn.derive.Data.Struct _ =>
      ink_macro.storage.storable.storable_struct_derive (addr_of s)
    | syn.derive.Data.Enum _ =>
      ink_macro.storage.storable.storable_enum_derive (addr_of s)
    | _ =>
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of [ "cannot derive `Storable` for Rust `union` items" ]) in
      core.panicking.panic_fmt α0
    end.
End storable.

Definition storable_struct_derive
    `{H : State.Trait}
    (s : ref synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["len"] in
    match (addr_of α1, addr_of 1) with
    | (left_val, right_val) =>
      let* α0 := left_val.["deref"] in
      let* α1 := right_val.["deref"] in
      let* α2 := α0.["eq"] α1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let kind := core.panicking.AssertKind.Eq in
        let* _ :=
          let* α0 := left_val.["deref"] in
          let* α1 := right_val.["deref"] in
          let* α2 :=
            format_arguments::["new_const"]
              (addr_of [ "can only operate on structs" ]) in
          core.panicking.assert_failed
            kind
            (addr_of α0)
            (addr_of α1)
            (core.option.Option.Some α2) in
        Pure tt
      else
        Pure tt
    end in
  let* variant :=
    let* α0 := s.["variants"] in
    Pure (addr_of α0[0]) in
  let* decode_body :=
    variant.["construct"]
      (fun field _index =>
        let ty := addr_of field.["ty"] in
        let* span := ty.["span"] in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _span :=
          let* α0 := quote.__private.get_span span in
          α0.["__into_span"] in
        let* _ := quote.__private.push_lt_spanned (addr_of _s) _span in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
        let* _ := quote.__private.push_ident_spanned (addr_of _s) _span "as" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ := quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "storage" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "traits" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "Storable" in
        let* _ := quote.__private.push_gt_spanned (addr_of _s) _span in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "decode" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _span :=
            let* α0 := quote.__private.get_span _span in
            α0.["__into_span"] in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "__input" in
          quote.__private.push_group_spanned
            (addr_of _s)
            _span
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_question_spanned (addr_of _s) _span in
        Pure _s) in
  let* encode_body :=
    variant.["each"]
      (fun binding =>
        let* span :=
          let* α0 := binding.["ast"] in
          α0.["ty"].["span"] in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _span :=
          let* α0 := quote.__private.get_span span in
          α0.["__into_span"] in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ := quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "storage" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "traits" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "Storable" in
        let* _ := quote.__private.push_colon2_spanned (addr_of _s) _span in
        let* _ :=
          quote.__private.push_ident_spanned (addr_of _s) _span "encode" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _span :=
            let* α0 := quote.__private.get_span _span in
            α0.["__into_span"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of binding) (addr_of _s) in
          let* _ := quote.__private.push_comma_spanned (addr_of _s) _span in
          let* _ :=
            quote.__private.push_ident_spanned (addr_of _s) _span "__dest" in
          quote.__private.push_group_spanned
            (addr_of _s)
            _span
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_semi_spanned (addr_of _s) _span in
        Pure _s) in
  let* _s := proc_macro2.TokenStream::["new"] in
  let* _ := quote.__private.push_ident (addr_of _s) "gen" in
  let* _ := quote.__private.push_ident (addr_of _s) "impl" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "ink" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "storage" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "traits" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
  let* _ := quote.__private.push_ident (addr_of _s) "for" in
  let* _ := quote.__private.push_at (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Self" in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "inline" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "always" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "allow" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_ident (addr_of _s) "fn" in
    let* _ := quote.__private.push_ident (addr_of _s) "decode" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "scale" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Input" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "__input" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "mut" in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        _s in
    let* _ := quote.__private.push_rarrow (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "core" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "result" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Result" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ := quote.__private.push_comma (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "scale" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Error" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "core" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "result" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Result" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Ok" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of decode_body)
            (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "inline" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "always" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "allow" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_ident (addr_of _s) "fn" in
    let* _ := quote.__private.push_ident (addr_of _s) "encode" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "scale" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Output" in
    let* _ := quote.__private.push_add (addr_of _s) in
    let* _ := quote.__private.push_question (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "core" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "marker" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Sized" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "self" in
      let* _ := quote.__private.push_comma (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "mut" in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        _s in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "match" in
      let* _ := quote.__private.push_ident (addr_of _s) "self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of encode_body)
            (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
  s.["gen_impl"] _s.

Definition storable_enum_derive
    `{H : State.Trait}
    (s : ref synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["is_empty"] in
    let* α2 := α1.["not"] in
    let* α3 := α2.["not"] in
    if (α3 : bool) then
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of
            [ "encountered invalid empty enum type deriving Storable trait"
            ]) in
      core.panicking.panic_fmt α0
    else
      Pure tt in
  let* _ :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["len"] in
    let* α2 := α1.["gt"] 256 in
    if (α2 : bool) then
      let* α0 := s.["ast"] in
      let* α1 := α0.["span"] in
      let* α2 :=
        syn.error.Error::["new"]
          α1
          "Currently only enums with at most 256 variants are supported." in
      let* α3 := α2.["to_compile_error"] in
      Return α3
    else
      Pure tt in
  let* decode_body :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["iter"] in
    let* α2 :=
      α1.["map"]
        (fun variant =>
          variant.["construct"]
            (fun field _index =>
              let ty := addr_of field.["ty"] in
              let* span := ty.["span"] in
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _span :=
                let* α0 := quote.__private.get_span span in
                α0.["__into_span"] in
              let* _ := quote.__private.push_lt_spanned (addr_of _s) _span in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
              let* _ :=
                quote.__private.push_ident_spanned (addr_of _s) _span "as" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "storage" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "traits" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "Storable" in
              let* _ := quote.__private.push_gt_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "decode" in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _span :=
                  let* α0 := quote.__private.get_span _span in
                  α0.["__into_span"] in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "__input" in
                quote.__private.push_group_spanned
                  (addr_of _s)
                  _span
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ :=
                quote.__private.push_question_spanned (addr_of _s) _span in
              Pure _s)) in
    let* α3 := α2.["enumerate"] in
    let* α4 := proc_macro2.TokenStream::["new"] in
    α3.["fold"]
      α4
      (fun acc (index, variant) =>
        let index := cast index u8 in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of acc) (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of index) (addr_of _s) in
        let* _ := quote.__private.push_fat_arrow (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of variant) (addr_of _s) in
        let* _ := quote.__private.push_comma (addr_of _s) in
        Pure _s) in
  let* encode_body :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["iter"] in
    let* α2 := α1.["enumerate"] in
    α2.["map"]
      (fun (index, variant) =>
        let* pat := variant.["pat"] in
        let index := cast index u8 in
        let* fields :=
          let* α0 := variant.["bindings"] in
          let* α1 := α0.["iter"] in
          α1.["map"]
            (fun field =>
              let* span :=
                let* α0 := field.["ast"] in
                α0.["ty"].["span"] in
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _span :=
                let* α0 := quote.__private.get_span span in
                α0.["__into_span"] in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned (addr_of _s) _span "ink" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "storage" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "traits" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "Storable" in
              let* _ :=
                quote.__private.push_colon2_spanned (addr_of _s) _span in
              let* _ :=
                quote.__private.push_ident_spanned
                  (addr_of _s)
                  _span
                  "encode" in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _span :=
                  let* α0 := quote.__private.get_span _span in
                  α0.["__into_span"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of field)
                    (addr_of _s) in
                let* _ :=
                  quote.__private.push_comma_spanned (addr_of _s) _span in
                let* _ :=
                  quote.__private.push_ident_spanned
                    (addr_of _s)
                    _span
                    "__dest" in
                quote.__private.push_group_spanned
                  (addr_of _s)
                  _span
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_semi_spanned (addr_of _s) _span in
              Pure _s) in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of pat) (addr_of _s) in
        let* _ := quote.__private.push_fat_arrow (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_lt (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "core" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "primitive" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "u8" in
            let* _ := quote.__private.push_ident (addr_of _s) "as" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "storage" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "traits" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
            let* _ := quote.__private.push_gt (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "encode" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_and (addr_of _s) in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of index)
                  (addr_of _s) in
              let* _ := quote.__private.push_comma (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_semi (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Brace
              _s in
          let* _ :=
            let has_iter :=
              quote.__private.ThereIsNoIteratorInRepetition.Build in
            let* '(fields, i) := fields.["quote_into_iter"] in
            let* has_iter := has_iter.["bitor"] i in
            let _ := has_iter in
            loop
              (if (true : bool) then
                let* fields :=
                  let* α0 := fields.["next"] in
                  match α0 with
                  | core.option.Option.Some _x =>
                    Pure (quote.__private.RepInterp.Build_t _x)
                  | core.option.Option.None => Break
                  end in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of fields)
                      (addr_of _s) in
                  quote.__private.push_group
                    (addr_of _s)
                    proc_macro2.Delimiter.Brace
                    _s in
                Pure tt
              else
                let* _ := Break in
                Pure tt) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        Pure _s) in
  let* _s := proc_macro2.TokenStream::["new"] in
  let* _ := quote.__private.push_ident (addr_of _s) "gen" in
  let* _ := quote.__private.push_ident (addr_of _s) "impl" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "ink" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "storage" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "traits" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
  let* _ := quote.__private.push_ident (addr_of _s) "for" in
  let* _ := quote.__private.push_at (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Self" in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "inline" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "always" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "allow" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_ident (addr_of _s) "fn" in
    let* _ := quote.__private.push_ident (addr_of _s) "decode" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "scale" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Input" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "__input" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "mut" in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_I" in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        _s in
    let* _ := quote.__private.push_rarrow (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "core" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "result" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Result" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ := quote.__private.push_comma (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "scale" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Error" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "core" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "result" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Result" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Ok" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "match" in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "core" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "primitive" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "u8" in
        let* _ := quote.__private.push_ident (addr_of _s) "as" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Storable" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "decode" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "__input" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_question (addr_of _s) in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens
              (addr_of decode_body)
              (addr_of _s) in
          let* _ := quote.__private.push_underscore (addr_of _s) in
          let* _ := quote.__private.push_fat_arrow (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "unreachable" in
          let* _ := quote.__private.push_bang (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.__private.parse
                (addr_of _s)
                ""encountered invalid enum discriminant"" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_comma (addr_of _s) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "inline" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "always" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_pound (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "allow" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.__private.push_ident (addr_of _s) "non_camel_case_types" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Bracket
        _s in
    let* _ := quote.__private.push_ident (addr_of _s) "fn" in
    let* _ := quote.__private.push_ident (addr_of _s) "encode" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "scale" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Output" in
    let* _ := quote.__private.push_add (addr_of _s) in
    let* _ := quote.__private.push_question (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "core" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "marker" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Sized" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "self" in
      let* _ := quote.__private.push_comma (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "__dest" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "mut" in
      let* _ := quote.__private.push_ident (addr_of _s) "__ink_O" in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        _s in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "match" in
      let* _ := quote.__private.push_ident (addr_of _s) "self" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          let has_iter := quote.__private.ThereIsNoIteratorInRepetition.Build in
          let* '(encode_body, i) := encode_body.["quote_into_iter"] in
          let* has_iter := has_iter.["bitor"] i in
          let _ := has_iter in
          loop
            (if (true : bool) then
              let* encode_body :=
                let* α0 := encode_body.["next"] in
                match α0 with
                | core.option.Option.Some _x =>
                  Pure (quote.__private.RepInterp.Build_t _x)
                | core.option.Option.None => Break
                end in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of encode_body)
                  (addr_of _s) in
              Pure tt
            else
              let* _ := Break in
              Pure tt) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
  s.["gen_impl"] _s.

Definition storable_derive
    `{H : State.Trait}
    (s : synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["bind_with"] (fun _ => Pure synstructure.BindStyle.Move) in
    let* α1 := α0.["add_bounds"] synstructure.AddBounds.Fields in
    α1.["underscore_const"] true in
  let* α0 := s.["ast"] in
  match addr_of α0.["data"] with
  | syn.derive.Data.Struct _ =>
    ink_macro.storage.storable.storable_struct_derive (addr_of s)
  | syn.derive.Data.Enum _ =>
    ink_macro.storage.storable.storable_enum_derive (addr_of s)
  | _ =>
    let* α0 :=
      format_arguments::["new_const"]
        (addr_of [ "cannot derive `Storable` for Rust `union` items" ]) in
    core.panicking.panic_fmt α0
  end.

Module storable_hint.
  Definition storable_hint_inner
      `{H : State.Trait}
      (s : synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* ident :=
      let* α0 := s.["ast"] in
      α0.["ident"].["clone"] in
    let* salt_ident :=
      let* res :=
        let* α0 :=
          format_arguments::["new_const"] (addr_of [ "__ink_generic_salt" ]) in
        alloc.fmt.format α0 in
      quote.__private.mk_ident (addr_of res) core.option.Option.None in
    let* generics :=
      let* α0 := s.["ast"] in
      α0.["generics"].["clone"] in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of salt_ident) (addr_of _s) in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
      let* α0 := syn.parse2 _s in
      let* α1 := α0.["unwrap"] in
      generics.["params"].["push"] α1 in
    let* '(impl_generics, _, where_clause) := generics.["split_for_impl"] in
    let* '(_, ty_generics_original, _) :=
      let* α0 := s.["ast"] in
      α0.["generics"].["split_for_impl"] in
    let* α0 := s.["ast"] in
    let* α1 := ink_ir.ir.utils.find_storage_key_salt α0 in
    match α1 with
    | core.option.Option.Some inner_salt_ident =>
      let* inner_salt_ident := inner_salt_ident.["ident"].["to_token_stream"] in
      let* ty_generics :=
        let* α0 := s.["ast"] in
        let* α1 := α0.["generics"].["params"].["clone"] in
        let* α2 := α1.["into_iter"] in
        let* α3 :=
          α2.["map"]
            (fun param =>
              let* ident :=
                match param with
                | syn.generics.GenericParam.Type t =>
                  t.["ident"].["to_token_stream"]
                | syn.generics.GenericParam.Lifetime l =>
                  l.["lifetime"].["to_token_stream"]
                | syn.generics.GenericParam.Const c =>
                  c.["ident"].["to_token_stream"]
                end in
              let* α0 := inner_salt_ident.["to_string"] in
              let* α1 := ident.["to_string"] in
              let* α2 := α0.["eq"] α1 in
              if (α2 : bool) then
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of salt_ident)
                    (addr_of _s) in
                Pure (core.option.Option.Some _s)
              else
                Pure (core.option.Option.Some ident)) in
        α3.["collect"] in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of impl_generics)
          (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorableHint" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of salt_ident) (addr_of _s) in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of ty_generics_original)
          (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of where_clause)
          (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "type" in
        let* _ := quote.__private.push_ident (addr_of _s) "Type" in
        let* _ := quote.__private.push_eq (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ :=
          let _i := 0 in
          let has_iter := quote.__private.ThereIsNoIteratorInRepetition.Build in
          let* '(ty_generics, i) := ty_generics.["quote_into_iter"] in
          let* has_iter := has_iter.["bitor"] i in
          let _ := has_iter in
          loop
            (if (true : bool) then
              let* ty_generics :=
                let* α0 := ty_generics.["next"] in
                match α0 with
                | core.option.Option.Some _x =>
                  Pure (quote.__private.RepInterp.Build_t _x)
                | core.option.Option.None => Break
                end in
              let* _ :=
                let* α0 := _i.["gt"] 0 in
                if (α0 : bool) then
                  let* _ := quote.__private.push_comma (addr_of _s) in
                  Pure tt
                else
                  Pure tt in
              let* _ := _i.["add_assign"] 1 in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of ty_generics)
                  (addr_of _s) in
              Pure tt
            else
              let* _ := Break in
              Pure tt) in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ := quote.__private.push_semi (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "type" in
        let* _ := quote.__private.push_ident (addr_of _s) "PreferredKey" in
        let* _ := quote.__private.push_eq (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of inner_salt_ident)
            (addr_of _s) in
        let* _ := quote.__private.push_semi (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      Pure _s
    | _ =>
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "impl" in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of impl_generics)
          (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorableHint" in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of salt_ident) (addr_of _s) in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "for" in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of ty_generics_original)
          (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of where_clause)
          (addr_of _s) in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "type" in
        let* _ := quote.__private.push_ident (addr_of _s) "Type" in
        let* _ := quote.__private.push_eq (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens
            (addr_of ty_generics_original)
            (addr_of _s) in
        let* _ := quote.__private.push_semi (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "type" in
        let* _ := quote.__private.push_ident (addr_of _s) "PreferredKey" in
        let* _ := quote.__private.push_eq (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "AutoKey" in
        let* _ := quote.__private.push_semi (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      Pure _s
    end.
  
  Definition storable_hint_derive
      `{H : State.Trait}
      (s : synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* derive := ink_macro.storage.storable_hint.storable_hint_inner s in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "const" in
    let* _ := quote.__private.push_underscore (addr_of _s) in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ :=
      let* α0 := proc_macro2.TokenStream::["new"] in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        α0 in
    let* _ := quote.__private.push_eq (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of derive) (addr_of _s) in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    let* _ := quote.__private.push_semi (addr_of _s) in
    Pure _s.
End storable_hint.

Definition storable_hint_inner
    `{H : State.Trait}
    (s : synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* ident :=
    let* α0 := s.["ast"] in
    α0.["ident"].["clone"] in
  let* salt_ident :=
    let* res :=
      let* α0 :=
        format_arguments::["new_const"] (addr_of [ "__ink_generic_salt" ]) in
      alloc.fmt.format α0 in
    quote.__private.mk_ident (addr_of res) core.option.Option.None in
  let* generics :=
    let* α0 := s.["ast"] in
    α0.["generics"].["clone"] in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of salt_ident) (addr_of _s) in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
    let* α0 := syn.parse2 _s in
    let* α1 := α0.["unwrap"] in
    generics.["params"].["push"] α1 in
  let* '(impl_generics, _, where_clause) := generics.["split_for_impl"] in
  let* '(_, ty_generics_original, _) :=
    let* α0 := s.["ast"] in
    α0.["generics"].["split_for_impl"] in
  let* α0 := s.["ast"] in
  let* α1 := ink_ir.ir.utils.find_storage_key_salt α0 in
  match α1 with
  | core.option.Option.Some inner_salt_ident =>
    let* inner_salt_ident := inner_salt_ident.["ident"].["to_token_stream"] in
    let* ty_generics :=
      let* α0 := s.["ast"] in
      let* α1 := α0.["generics"].["params"].["clone"] in
      let* α2 := α1.["into_iter"] in
      let* α3 :=
        α2.["map"]
          (fun param =>
            let* ident :=
              match param with
              | syn.generics.GenericParam.Type t =>
                t.["ident"].["to_token_stream"]
              | syn.generics.GenericParam.Lifetime l =>
                l.["lifetime"].["to_token_stream"]
              | syn.generics.GenericParam.Const c =>
                c.["ident"].["to_token_stream"]
              end in
            let* α0 := inner_salt_ident.["to_string"] in
            let* α1 := ident.["to_string"] in
            let* α2 := α0.["eq"] α1 in
            if (α2 : bool) then
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of salt_ident)
                  (addr_of _s) in
              Pure (core.option.Option.Some _s)
            else
              Pure (core.option.Option.Some ident)) in
      α3.["collect"] in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of impl_generics) (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorableHint" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of salt_ident) (addr_of _s) in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens
        (addr_of ty_generics_original)
        (addr_of _s) in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of where_clause) (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "type" in
      let* _ := quote.__private.push_ident (addr_of _s) "Type" in
      let* _ := quote.__private.push_eq (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ :=
        let _i := 0 in
        let has_iter := quote.__private.ThereIsNoIteratorInRepetition.Build in
        let* '(ty_generics, i) := ty_generics.["quote_into_iter"] in
        let* has_iter := has_iter.["bitor"] i in
        let _ := has_iter in
        loop
          (if (true : bool) then
            let* ty_generics :=
              let* α0 := ty_generics.["next"] in
              match α0 with
              | core.option.Option.Some _x =>
                Pure (quote.__private.RepInterp.Build_t _x)
              | core.option.Option.None => Break
              end in
            let* _ :=
              let* α0 := _i.["gt"] 0 in
              if (α0 : bool) then
                let* _ := quote.__private.push_comma (addr_of _s) in
                Pure tt
              else
                Pure tt in
            let* _ := _i.["add_assign"] 1 in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of ty_generics)
                (addr_of _s) in
            Pure tt
          else
            let* _ := Break in
            Pure tt) in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ := quote.__private.push_semi (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "type" in
      let* _ := quote.__private.push_ident (addr_of _s) "PreferredKey" in
      let* _ := quote.__private.push_eq (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of inner_salt_ident)
          (addr_of _s) in
      let* _ := quote.__private.push_semi (addr_of _s) in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    Pure _s
  | _ =>
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of impl_generics) (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorableHint" in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of salt_ident) (addr_of _s) in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens
        (addr_of ty_generics_original)
        (addr_of _s) in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of where_clause) (addr_of _s) in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "type" in
      let* _ := quote.__private.push_ident (addr_of _s) "Type" in
      let* _ := quote.__private.push_eq (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens
          (addr_of ty_generics_original)
          (addr_of _s) in
      let* _ := quote.__private.push_semi (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "type" in
      let* _ := quote.__private.push_ident (addr_of _s) "PreferredKey" in
      let* _ := quote.__private.push_eq (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "AutoKey" in
      let* _ := quote.__private.push_semi (addr_of _s) in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    Pure _s
  end.

Definition storable_hint_derive
    `{H : State.Trait}
    (s : synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* derive := ink_macro.storage.storable_hint.storable_hint_inner s in
  let* _s := proc_macro2.TokenStream::["new"] in
  let* _ := quote.__private.push_ident (addr_of _s) "const" in
  let* _ := quote.__private.push_underscore (addr_of _s) in
  let* _ := quote.__private.push_colon (addr_of _s) in
  let* _ :=
    let* α0 := proc_macro2.TokenStream::["new"] in
    quote.__private.push_group
      (addr_of _s)
      proc_macro2.Delimiter.Parenthesis
      α0 in
  let* _ := quote.__private.push_eq (addr_of _s) in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ :=
      quote.to_tokens.ToTokens.to_tokens (addr_of derive) (addr_of _s) in
    quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
  let* _ := quote.__private.push_semi (addr_of _s) in
  Pure _s.

Module storage_key.
  Definition storage_key_derive
      `{H : State.Trait}
      (s : synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["add_bounds"] synstructure.AddBounds.None in
      α0.["underscore_const"] true in
    let* salt :=
      let* α0 := s.["ast"] in
      let* α1 := ink_ir.ir.utils.find_storage_key_salt α0 in
      match α1 with
      | core.option.Option.Some param => param.["ident"].["to_token_stream"]
      | _ =>
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          let* α0 := proc_macro2.TokenStream::["new"] in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            α0 in
        Pure _s
      end in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "gen" in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.__private.push_at (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "const" in
      let* _ := quote.__private.push_ident (addr_of _s) "KEY" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Key" in
      let* _ := quote.__private.push_eq (addr_of _s) in
      let* _ := quote.__private.push_lt (addr_of _s) in
      let* _ :=
        quote.to_tokens.ToTokens.to_tokens (addr_of salt) (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "as" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "storage" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "traits" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
      let* _ := quote.__private.push_gt (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "KEY" in
      let* _ := quote.__private.push_semi (addr_of _s) in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    s.["gen_impl"] _s.
End storage_key.

Definition storage_key_derive
    `{H : State.Trait}
    (s : synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["add_bounds"] synstructure.AddBounds.None in
    α0.["underscore_const"] true in
  let* salt :=
    let* α0 := s.["ast"] in
    let* α1 := ink_ir.ir.utils.find_storage_key_salt α0 in
    match α1 with
    | core.option.Option.Some param => param.["ident"].["to_token_stream"]
    | _ =>
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ :=
        let* α0 := proc_macro2.TokenStream::["new"] in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          α0 in
      Pure _s
    end in
  let* _s := proc_macro2.TokenStream::["new"] in
  let* _ := quote.__private.push_ident (addr_of _s) "gen" in
  let* _ := quote.__private.push_ident (addr_of _s) "impl" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "ink" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "storage" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "traits" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
  let* _ := quote.__private.push_ident (addr_of _s) "for" in
  let* _ := quote.__private.push_at (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Self" in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "const" in
    let* _ := quote.__private.push_ident (addr_of _s) "KEY" in
    let* _ := quote.__private.push_colon (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Key" in
    let* _ := quote.__private.push_eq (addr_of _s) in
    let* _ := quote.__private.push_lt (addr_of _s) in
    let* _ := quote.to_tokens.ToTokens.to_tokens (addr_of salt) (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "as" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorageKey" in
    let* _ := quote.__private.push_gt (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "KEY" in
    let* _ := quote.__private.push_semi (addr_of _s) in
    quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
  s.["gen_impl"] _s.

Module storage_layout.
  Definition field_layout
      `{H : State.Trait}
      (variant : ref synstructure.VariantInfo)
      : M (H := H) OpaqueDef :=
    let* α0 := variant.["ast"] in
    let* α1 := α0.["fields"].["iter"] in
    let* α2 := α1.["enumerate"] in
    α2.["map"]
      (fun (i, field) =>
        let* ident :=
          let* α0 := field.["ident"].["as_ref"] in
          match α0 with
          | core.option.Option.Some ident =>
            let* ident_str := ident.["to_string"] in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of ident_str)
                (addr_of _s) in
            Pure _s
          | core.option.Option.None =>
            let* index := i.["to_string"] in
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens (addr_of index) (addr_of _s) in
            Pure _s
          end in
        let ty := addr_of field.["ty"] in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "FieldLayout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "new" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
          let* _ := quote.__private.push_comma (addr_of _s) in
          let* _ := quote.__private.push_lt (addr_of _s) in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "as" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "storage" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "traits" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
          let* _ := quote.__private.push_gt (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "__key" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_comma (addr_of _s) in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        Pure _s).
  
  Definition storage_layout_struct
      `{H : State.Trait}
      (s : ref synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["ast"] in
      let* α1 :=
        match α0.["data"] with
        | syn.derive.Data.Struct _ => Pure true
        | _ => Pure false
        end in
      let* α2 := α1.["not"] in
      if (α2 : bool) then
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "s must be a struct item" ]) in
        core.panicking.panic_fmt α0
      else
        Pure tt in
    let* _ :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["len"] in
      let* α2 := α1.["eq"] 1 in
      let* α3 := α2.["not"] in
      if (α3 : bool) then
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "structs must have at most one variant" ]) in
        core.panicking.panic_fmt α0
      else
        Pure tt in
    let* struct_ident :=
      let* α0 := s.["ast"] in
      α0.["ident"].["clone"] in
    let* variant :=
      let* α0 := s.["variants"] in
      Pure (addr_of α0[0]) in
    let* field_layouts :=
      ink_macro.storage.storage_layout.field_layout variant in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "gen" in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.__private.push_at (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "fn" in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "__key" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Key" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      let* _ := quote.__private.push_rarrow (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Struct" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "StructLayout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "new" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "core" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
            let* _ := quote.__private.push_bang (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of struct_ident)
                  (addr_of _s) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                let has_iter :=
                  quote.__private.ThereIsNoIteratorInRepetition.Build in
                let* '(field_layouts, i) := field_layouts.["quote_into_iter"] in
                let* has_iter := has_iter.["bitor"] i in
                let _ := has_iter in
                loop
                  (if (true : bool) then
                    let* field_layouts :=
                      let* α0 := field_layouts.["next"] in
                      match α0 with
                      | core.option.Option.Some _x =>
                        Pure (quote.__private.RepInterp.Build_t _x)
                      | core.option.Option.None => Break
                      end in
                    let* _ :=
                      quote.to_tokens.ToTokens.to_tokens
                        (addr_of field_layouts)
                        (addr_of _s) in
                    let* _ := quote.__private.push_comma (addr_of _s) in
                    Pure tt
                  else
                    let* _ := Break in
                    Pure tt) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Bracket
                _s in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    s.["gen_impl"] _s.
  
  Definition storage_layout_enum
      `{H : State.Trait}
      (s : ref synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["ast"] in
      let* α1 :=
        match α0.["data"] with
        | syn.derive.Data.Enum _ => Pure true
        | _ => Pure false
        end in
      let* α2 := α1.["not"] in
      if (α2 : bool) then
        let* α0 :=
          format_arguments::["new_const"]
            (addr_of [ "s must be an enum item" ]) in
        core.panicking.panic_fmt α0
      else
        Pure tt in
    let* _ :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["len"] in
      let* α2 := α1.["gt"] 256 in
      if (α2 : bool) then
        let* α0 := s.["ast"] in
        let* α1 := α0.["span"] in
        let* α2 :=
          syn.error.Error::["new"]
            α1
            "Currently only enums with at most 256 variants are supported." in
        let* α3 := α2.["to_compile_error"] in
        Return α3
      else
        Pure tt in
    let* variant_layouts :=
      let* α0 := s.["variants"] in
      let* α1 := α0.["iter"] in
      let* α2 := α1.["enumerate"] in
      α2.["map"]
        (fun (n, variant) =>
          let* variant_ident :=
            let* α0 := variant.["ast"] in
            Pure α0.["ident"] in
          let* discriminant :=
            let* α0 := variant.["ast"] in
            let* α1 := α0.["discriminant"].["as_ref"] in
            let* α2 :=
              α1.["map"]
                (fun (_, expr) =>
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of expr)
                      (addr_of _s) in
                  Pure _s) in
            α2.["unwrap_or_else"]
              (fun  =>
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens (addr_of n) (addr_of _s) in
                Pure _s) in
          let* field_layouts :=
            ink_macro.storage.storage_layout.field_layout variant in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "ink" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "layout" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ :=
                quote.__private.push_ident (addr_of _s) "Discriminant" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "from" in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of discriminant)
                    (addr_of _s) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "ink" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "layout" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ :=
                quote.__private.push_ident (addr_of _s) "StructLayout" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "new" in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "core" in
                let* _ := quote.__private.push_colon2 (addr_of _s) in
                let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
                let* _ := quote.__private.push_bang (addr_of _s) in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of variant_ident)
                      (addr_of _s) in
                  quote.__private.push_group
                    (addr_of _s)
                    proc_macro2.Delimiter.Parenthesis
                    _s in
                let* _ := quote.__private.push_comma (addr_of _s) in
                let* _ :=
                  let* _s := proc_macro2.TokenStream::["new"] in
                  let* _ :=
                    let has_iter :=
                      quote.__private.ThereIsNoIteratorInRepetition.Build in
                    let* '(field_layouts, i) :=
                      field_layouts.["quote_into_iter"] in
                    let* has_iter := has_iter.["bitor"] i in
                    let _ := has_iter in
                    loop
                      (if (true : bool) then
                        let* field_layouts :=
                          let* α0 := field_layouts.["next"] in
                          match α0 with
                          | core.option.Option.Some _x =>
                            Pure (quote.__private.RepInterp.Build_t _x)
                          | core.option.Option.None => Break
                          end in
                        let* _ :=
                          quote.to_tokens.ToTokens.to_tokens
                            (addr_of field_layouts)
                            (addr_of _s) in
                        let* _ := quote.__private.push_comma (addr_of _s) in
                        Pure tt
                      else
                        let* _ := Break in
                        Pure tt) in
                  quote.__private.push_group
                    (addr_of _s)
                    proc_macro2.Delimiter.Bracket
                    _s in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Brace
              _s in
          Pure _s) in
    let* enum_ident :=
      let* α0 := s.["ast"] in
      α0.["ident"].["clone"] in
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "gen" in
    let* _ := quote.__private.push_ident (addr_of _s) "impl" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "storage" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "traits" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
    let* _ := quote.__private.push_ident (addr_of _s) "for" in
    let* _ := quote.__private.push_at (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Self" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "fn" in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_ident (addr_of _s) "__key" in
        let* _ := quote.__private.push_colon (addr_of _s) in
        let* _ := quote.__private.push_and (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Key" in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      let* _ := quote.__private.push_rarrow (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "Enum" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "EnumLayout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "new" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "core" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
            let* _ := quote.__private.push_bang (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of enum_ident)
                  (addr_of _s) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "layout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "LayoutKey" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "from" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_ident (addr_of _s) "__key" in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                let has_iter :=
                  quote.__private.ThereIsNoIteratorInRepetition.Build in
                let* '(variant_layouts, i) :=
                  variant_layouts.["quote_into_iter"] in
                let* has_iter := has_iter.["bitor"] i in
                let _ := has_iter in
                loop
                  (if (true : bool) then
                    let* variant_layouts :=
                      let* α0 := variant_layouts.["next"] in
                      match α0 with
                      | core.option.Option.Some _x =>
                        Pure (quote.__private.RepInterp.Build_t _x)
                      | core.option.Option.None => Break
                      end in
                    let* _ :=
                      quote.to_tokens.ToTokens.to_tokens
                        (addr_of variant_layouts)
                        (addr_of _s) in
                    let* _ := quote.__private.push_comma (addr_of _s) in
                    Pure tt
                  else
                    let* _ := Break in
                    Pure tt) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Bracket
                _s in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Brace
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    s.["gen_impl"] _s.
  
  Definition storage_layout_derive
      `{H : State.Trait}
      (s : synstructure.Structure)
      : M (H := H) proc_macro2.TokenStream :=
    let* _ :=
      let* α0 := s.["bind_with"] (fun _ => Pure synstructure.BindStyle.Move) in
      let* α1 := α0.["add_bounds"] synstructure.AddBounds.Fields in
      α1.["underscore_const"] true in
    let* α0 := s.["ast"] in
    match addr_of α0.["data"] with
    | syn.derive.Data.Struct _ =>
      ink_macro.storage.storage_layout.storage_layout_struct (addr_of s)
    | syn.derive.Data.Enum _ =>
      ink_macro.storage.storage_layout.storage_layout_enum (addr_of s)
    | _ =>
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of
            [ "cannot derive `StorageLayout` for Rust `union` items" ]) in
      core.panicking.panic_fmt α0
    end.
End storage_layout.

Definition field_layout
    `{H : State.Trait}
    (variant : ref synstructure.VariantInfo)
    : M (H := H) OpaqueDef :=
  let* α0 := variant.["ast"] in
  let* α1 := α0.["fields"].["iter"] in
  let* α2 := α1.["enumerate"] in
  α2.["map"]
    (fun (i, field) =>
      let* ident :=
        let* α0 := field.["ident"].["as_ref"] in
        match α0 with
        | core.option.Option.Some ident =>
          let* ident_str := ident.["to_string"] in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens
              (addr_of ident_str)
              (addr_of _s) in
          Pure _s
        | core.option.Option.None =>
          let* index := i.["to_string"] in
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            quote.to_tokens.ToTokens.to_tokens (addr_of index) (addr_of _s) in
          Pure _s
        end in
      let ty := addr_of field.["ty"] in
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "FieldLayout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "new" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ident) (addr_of _s) in
        let* _ := quote.__private.push_comma (addr_of _s) in
        let* _ := quote.__private.push_lt (addr_of _s) in
        let* _ :=
          quote.to_tokens.ToTokens.to_tokens (addr_of ty) (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "as" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "storage" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "traits" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
        let* _ := quote.__private.push_gt (addr_of _s) in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_ident (addr_of _s) "__key" in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        let* _ := quote.__private.push_comma (addr_of _s) in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      Pure _s).

Error OpaqueTy.

Definition storage_layout_struct
    `{H : State.Trait}
    (s : ref synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["ast"] in
    let* α1 :=
      match α0.["data"] with
      | syn.derive.Data.Struct _ => Pure true
      | _ => Pure false
      end in
    let* α2 := α1.["not"] in
    if (α2 : bool) then
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of [ "s must be a struct item" ]) in
      core.panicking.panic_fmt α0
    else
      Pure tt in
  let* _ :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["len"] in
    let* α2 := α1.["eq"] 1 in
    let* α3 := α2.["not"] in
    if (α3 : bool) then
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of [ "structs must have at most one variant" ]) in
      core.panicking.panic_fmt α0
    else
      Pure tt in
  let* struct_ident :=
    let* α0 := s.["ast"] in
    α0.["ident"].["clone"] in
  let* variant :=
    let* α0 := s.["variants"] in
    Pure (addr_of α0[0]) in
  let* field_layouts := ink_macro.storage.storage_layout.field_layout variant in
  let* _s := proc_macro2.TokenStream::["new"] in
  let* _ := quote.__private.push_ident (addr_of _s) "gen" in
  let* _ := quote.__private.push_ident (addr_of _s) "impl" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "ink" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "storage" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "traits" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
  let* _ := quote.__private.push_ident (addr_of _s) "for" in
  let* _ := quote.__private.push_at (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Self" in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "fn" in
    let* _ := quote.__private.push_ident (addr_of _s) "layout" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "__key" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Key" in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        _s in
    let* _ := quote.__private.push_rarrow (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "layout" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Struct" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "StructLayout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "new" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "core" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
          let* _ := quote.__private.push_bang (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of struct_ident)
                (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_comma (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              let has_iter :=
                quote.__private.ThereIsNoIteratorInRepetition.Build in
              let* '(field_layouts, i) := field_layouts.["quote_into_iter"] in
              let* has_iter := has_iter.["bitor"] i in
              let _ := has_iter in
              loop
                (if (true : bool) then
                  let* field_layouts :=
                    let* α0 := field_layouts.["next"] in
                    match α0 with
                    | core.option.Option.Some _x =>
                      Pure (quote.__private.RepInterp.Build_t _x)
                    | core.option.Option.None => Break
                    end in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of field_layouts)
                      (addr_of _s) in
                  let* _ := quote.__private.push_comma (addr_of _s) in
                  Pure tt
                else
                  let* _ := Break in
                  Pure tt) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Bracket
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
  s.["gen_impl"] _s.

Definition storage_layout_enum
    `{H : State.Trait}
    (s : ref synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["ast"] in
    let* α1 :=
      match α0.["data"] with
      | syn.derive.Data.Enum _ => Pure true
      | _ => Pure false
      end in
    let* α2 := α1.["not"] in
    if (α2 : bool) then
      let* α0 :=
        format_arguments::["new_const"]
          (addr_of [ "s must be an enum item" ]) in
      core.panicking.panic_fmt α0
    else
      Pure tt in
  let* _ :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["len"] in
    let* α2 := α1.["gt"] 256 in
    if (α2 : bool) then
      let* α0 := s.["ast"] in
      let* α1 := α0.["span"] in
      let* α2 :=
        syn.error.Error::["new"]
          α1
          "Currently only enums with at most 256 variants are supported." in
      let* α3 := α2.["to_compile_error"] in
      Return α3
    else
      Pure tt in
  let* variant_layouts :=
    let* α0 := s.["variants"] in
    let* α1 := α0.["iter"] in
    let* α2 := α1.["enumerate"] in
    α2.["map"]
      (fun (n, variant) =>
        let* variant_ident :=
          let* α0 := variant.["ast"] in
          Pure α0.["ident"] in
        let* discriminant :=
          let* α0 := variant.["ast"] in
          let* α1 := α0.["discriminant"].["as_ref"] in
          let* α2 :=
            α1.["map"]
              (fun (_, expr) =>
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of expr)
                    (addr_of _s) in
                Pure _s) in
          α2.["unwrap_or_else"]
            (fun  =>
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens (addr_of n) (addr_of _s) in
              Pure _s) in
        let* field_layouts :=
          ink_macro.storage.storage_layout.field_layout variant in
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "layout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "Discriminant" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "from" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ :=
                quote.to_tokens.ToTokens.to_tokens
                  (addr_of discriminant)
                  (addr_of _s) in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "ink" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "layout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "StructLayout" in
            let* _ := quote.__private.push_colon2 (addr_of _s) in
            let* _ := quote.__private.push_ident (addr_of _s) "new" in
            let* _ :=
              let* _s := proc_macro2.TokenStream::["new"] in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "core" in
              let* _ := quote.__private.push_colon2 (addr_of _s) in
              let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
              let* _ := quote.__private.push_bang (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  quote.to_tokens.ToTokens.to_tokens
                    (addr_of variant_ident)
                    (addr_of _s) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Parenthesis
                  _s in
              let* _ := quote.__private.push_comma (addr_of _s) in
              let* _ :=
                let* _s := proc_macro2.TokenStream::["new"] in
                let* _ :=
                  let has_iter :=
                    quote.__private.ThereIsNoIteratorInRepetition.Build in
                  let* '(field_layouts, i) :=
                    field_layouts.["quote_into_iter"] in
                  let* has_iter := has_iter.["bitor"] i in
                  let _ := has_iter in
                  loop
                    (if (true : bool) then
                      let* field_layouts :=
                        let* α0 := field_layouts.["next"] in
                        match α0 with
                        | core.option.Option.Some _x =>
                          Pure (quote.__private.RepInterp.Build_t _x)
                        | core.option.Option.None => Break
                        end in
                      let* _ :=
                        quote.to_tokens.ToTokens.to_tokens
                          (addr_of field_layouts)
                          (addr_of _s) in
                      let* _ := quote.__private.push_comma (addr_of _s) in
                      Pure tt
                    else
                      let* _ := Break in
                      Pure tt) in
                quote.__private.push_group
                  (addr_of _s)
                  proc_macro2.Delimiter.Bracket
                  _s in
              quote.__private.push_group
                (addr_of _s)
                proc_macro2.Delimiter.Parenthesis
                _s in
            let* _ := quote.__private.push_comma (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Brace
            _s in
        Pure _s) in
  let* enum_ident :=
    let* α0 := s.["ast"] in
    α0.["ident"].["clone"] in
  let* _s := proc_macro2.TokenStream::["new"] in
  let* _ := quote.__private.push_ident (addr_of _s) "gen" in
  let* _ := quote.__private.push_ident (addr_of _s) "impl" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "ink" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "storage" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "traits" in
  let* _ := quote.__private.push_colon2 (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "StorageLayout" in
  let* _ := quote.__private.push_ident (addr_of _s) "for" in
  let* _ := quote.__private.push_at (addr_of _s) in
  let* _ := quote.__private.push_ident (addr_of _s) "Self" in
  let* _ :=
    let* _s := proc_macro2.TokenStream::["new"] in
    let* _ := quote.__private.push_ident (addr_of _s) "fn" in
    let* _ := quote.__private.push_ident (addr_of _s) "layout" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_ident (addr_of _s) "__key" in
      let* _ := quote.__private.push_colon (addr_of _s) in
      let* _ := quote.__private.push_and (addr_of _s) in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "primitives" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Key" in
      quote.__private.push_group
        (addr_of _s)
        proc_macro2.Delimiter.Parenthesis
        _s in
    let* _ := quote.__private.push_rarrow (addr_of _s) in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "ink" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "layout" in
    let* _ := quote.__private.push_colon2 (addr_of _s) in
    let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
    let* _ :=
      let* _s := proc_macro2.TokenStream::["new"] in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "ink" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Layout" in
      let* _ := quote.__private.push_colon2 (addr_of _s) in
      let* _ := quote.__private.push_ident (addr_of _s) "Enum" in
      let* _ :=
        let* _s := proc_macro2.TokenStream::["new"] in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "ink" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "layout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "EnumLayout" in
        let* _ := quote.__private.push_colon2 (addr_of _s) in
        let* _ := quote.__private.push_ident (addr_of _s) "new" in
        let* _ :=
          let* _s := proc_macro2.TokenStream::["new"] in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "core" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "stringify" in
          let* _ := quote.__private.push_bang (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              quote.to_tokens.ToTokens.to_tokens
                (addr_of enum_ident)
                (addr_of _s) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_comma (addr_of _s) in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "ink" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "metadata" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "layout" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "LayoutKey" in
          let* _ := quote.__private.push_colon2 (addr_of _s) in
          let* _ := quote.__private.push_ident (addr_of _s) "from" in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ := quote.__private.push_ident (addr_of _s) "__key" in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Parenthesis
              _s in
          let* _ := quote.__private.push_comma (addr_of _s) in
          let* _ :=
            let* _s := proc_macro2.TokenStream::["new"] in
            let* _ :=
              let has_iter :=
                quote.__private.ThereIsNoIteratorInRepetition.Build in
              let* '(variant_layouts, i) :=
                variant_layouts.["quote_into_iter"] in
              let* has_iter := has_iter.["bitor"] i in
              let _ := has_iter in
              loop
                (if (true : bool) then
                  let* variant_layouts :=
                    let* α0 := variant_layouts.["next"] in
                    match α0 with
                    | core.option.Option.Some _x =>
                      Pure (quote.__private.RepInterp.Build_t _x)
                    | core.option.Option.None => Break
                    end in
                  let* _ :=
                    quote.to_tokens.ToTokens.to_tokens
                      (addr_of variant_layouts)
                      (addr_of _s) in
                  let* _ := quote.__private.push_comma (addr_of _s) in
                  Pure tt
                else
                  let* _ := Break in
                  Pure tt) in
            quote.__private.push_group
              (addr_of _s)
              proc_macro2.Delimiter.Bracket
              _s in
          quote.__private.push_group
            (addr_of _s)
            proc_macro2.Delimiter.Parenthesis
            _s in
        quote.__private.push_group
          (addr_of _s)
          proc_macro2.Delimiter.Parenthesis
          _s in
      quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
    quote.__private.push_group (addr_of _s) proc_macro2.Delimiter.Brace _s in
  s.["gen_impl"] _s.

Definition storage_layout_derive
    `{H : State.Trait}
    (s : synstructure.Structure)
    : M (H := H) proc_macro2.TokenStream :=
  let* _ :=
    let* α0 := s.["bind_with"] (fun _ => Pure synstructure.BindStyle.Move) in
    let* α1 := α0.["add_bounds"] synstructure.AddBounds.Fields in
    α1.["underscore_const"] true in
  let* α0 := s.["ast"] in
  match addr_of α0.["data"] with
  | syn.derive.Data.Struct _ =>
    ink_macro.storage.storage_layout.storage_layout_struct (addr_of s)
  | syn.derive.Data.Enum _ =>
    ink_macro.storage.storage_layout.storage_layout_enum (addr_of s)
  | _ =>
    let* α0 :=
      format_arguments::["new_const"]
        (addr_of [ "cannot derive `StorageLayout` for Rust `union` items" ]) in
    core.panicking.panic_fmt α0
  end.

Module storage_item.
  Definition generate
      `{H : State.Trait}
      (config : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.storage_item.generate_or_err config input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition generate_or_err
      `{H : State.Trait}
      (config : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* storage_item :=
      let* α0 := ink_ir.ir.storage_item.StorageItem::["new"] config input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of storage_item) in
    Pure (core.result.Result.Ok α0).
End storage_item.

Definition generate
    `{H : State.Trait}
    (config : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.storage_item.generate_or_err config input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition generate_or_err
    `{H : State.Trait}
    (config : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* storage_item :=
    let* α0 := ink_ir.ir.storage_item.StorageItem::["new"] config input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of storage_item) in
  Pure (core.result.Result.Ok α0).

Module trait_def.
  Definition analyze
      `{H : State.Trait}
      (config : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) proc_macro2.TokenStream :=
    let* α0 := ink_macro.trait_def.analyze_or_err config input in
    match α0 with
    | core.result.Result.Ok tokens => Pure tokens
    | core.result.Result.Err err => err.["to_compile_error"]
    end.
  
  Definition analyze_or_err
      `{H : State.Trait}
      (config : proc_macro2.TokenStream)
      (input : proc_macro2.TokenStream)
      : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
    let* trait_definition :=
      let* α0 := ink_ir.ir.trait_def.InkTraitDefinition::["new"] config input in
      let* α1 := α0.["branch"] in
      match α1 with
      | LanguageItem.Break residual =>
        let* α0 := residual.["from_residual"] in
        Return α0
      | LanguageItem.Continue val => Pure val
      end in
    let* α0 := ink_codegen.generate_code (addr_of trait_definition) in
    Pure (core.result.Result.Ok α0).
End trait_def.

Definition analyze
    `{H : State.Trait}
    (config : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) proc_macro2.TokenStream :=
  let* α0 := ink_macro.trait_def.analyze_or_err config input in
  match α0 with
  | core.result.Result.Ok tokens => Pure tokens
  | core.result.Result.Err err => err.["to_compile_error"]
  end.

Definition analyze_or_err
    `{H : State.Trait}
    (config : proc_macro2.TokenStream)
    (input : proc_macro2.TokenStream)
    : M (H := H) (syn.error.Result proc_macro2.TokenStream) :=
  let* trait_definition :=
    let* α0 := ink_ir.ir.trait_def.InkTraitDefinition::["new"] config input in
    let* α1 := α0.["branch"] in
    match α1 with
    | LanguageItem.Break residual =>
      let* α0 := residual.["from_residual"] in
      Return α0
    | LanguageItem.Continue val => Pure val
    end in
  let* α0 := ink_codegen.generate_code (addr_of trait_definition) in
  Pure (core.result.Result.Ok α0).

Definition blake2x256
    `{H : State.Trait}
    (input : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := input.["into"] in
  let* α1 := ink_macro.blake2b.generate_blake2x256_hash α0 in
  α1.["into"].

Definition selector_id
    `{H : State.Trait}
    (input : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := input.["into"] in
  let* α1 := ink_macro.selector.generate_selector_id α0 in
  α1.["into"].

Definition selector_bytes
    `{H : State.Trait}
    (input : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := input.["into"] in
  let* α1 := ink_macro.selector.generate_selector_bytes α0 in
  α1.["into"].

Definition contract
    `{H : State.Trait}
    (attr : proc_macro.TokenStream)
    (item : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := attr.["into"] in
  let* α1 := item.["into"] in
  let* α2 := ink_macro.contract.generate α0 α1 in
  α2.["into"].

Definition trait_definition
    `{H : State.Trait}
    (attr : proc_macro.TokenStream)
    (item : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := attr.["into"] in
  let* α1 := item.["into"] in
  let* α2 := ink_macro.trait_def.analyze α0 α1 in
  α2.["into"].

Definition storage_item
    `{H : State.Trait}
    (attr : proc_macro.TokenStream)
    (item : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := attr.["into"] in
  let* α1 := item.["into"] in
  let* α2 := ink_macro.storage_item.generate α0 α1 in
  α2.["into"].

Definition test
    `{H : State.Trait}
    (attr : proc_macro.TokenStream)
    (item : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := attr.["into"] in
  let* α1 := item.["into"] in
  let* α2 := ink_macro.ink_test.generate α0 α1 in
  α2.["into"].

Definition chain_extension
    `{H : State.Trait}
    (attr : proc_macro.TokenStream)
    (item : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := attr.["into"] in
  let* α1 := item.["into"] in
  let* α2 := ink_macro.chain_extension.generate α0 α1 in
  α2.["into"].

Definition Storable
    `{H : State.Trait}
    (i : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := syn.parse i in
  match α0 with
  | core.result.Result.Ok p =>
    let* α0 := synstructure.Structure::["try_new"] (addr_of p) in
    match α0 with
    | core.result.Result.Ok s =>
      let* α0 := ink_macro.storage.storable.storable_derive s in
      synstructure.MacroResult.into_stream α0
    | core.result.Result.Err e =>
      let* α0 := e.["to_compile_error"] in
      core.convert.Into.into α0
    end
  | core.result.Result.Err e =>
    let* α0 := e.["to_compile_error"] in
    core.convert.Into.into α0
  end.

Definition StorableHint
    `{H : State.Trait}
    (i : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := syn.parse i in
  match α0 with
  | core.result.Result.Ok p =>
    let* α0 := synstructure.Structure::["try_new"] (addr_of p) in
    match α0 with
    | core.result.Result.Ok s =>
      let* α0 := ink_macro.storage.storable_hint.storable_hint_derive s in
      synstructure.MacroResult.into_stream α0
    | core.result.Result.Err e =>
      let* α0 := e.["to_compile_error"] in
      core.convert.Into.into α0
    end
  | core.result.Result.Err e =>
    let* α0 := e.["to_compile_error"] in
    core.convert.Into.into α0
  end.

Definition StorageKey
    `{H : State.Trait}
    (i : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := syn.parse i in
  match α0 with
  | core.result.Result.Ok p =>
    let* α0 := synstructure.Structure::["try_new"] (addr_of p) in
    match α0 with
    | core.result.Result.Ok s =>
      let* α0 := ink_macro.storage.storage_key.storage_key_derive s in
      synstructure.MacroResult.into_stream α0
    | core.result.Result.Err e =>
      let* α0 := e.["to_compile_error"] in
      core.convert.Into.into α0
    end
  | core.result.Result.Err e =>
    let* α0 := e.["to_compile_error"] in
    core.convert.Into.into α0
  end.

Definition StorageLayout
    `{H : State.Trait}
    (i : proc_macro.TokenStream)
    : M (H := H) proc_macro.TokenStream :=
  let* α0 := syn.parse i in
  match α0 with
  | core.result.Result.Ok p =>
    let* α0 := synstructure.Structure::["try_new"] (addr_of p) in
    match α0 with
    | core.result.Result.Ok s =>
      let* α0 := ink_macro.storage.storage_layout.storage_layout_derive s in
      synstructure.MacroResult.into_stream α0
    | core.result.Result.Err e =>
      let* α0 := e.["to_compile_error"] in
      core.convert.Into.into α0
    end
  | core.result.Result.Err e =>
    let* α0 := e.["to_compile_error"] in
    core.convert.Into.into α0
  end.

Definition
    _DECLS
    `{H : State.Trait} :
    ref (Slice proc_macro.bridge.client.ProcMacro) :=
  run
    (let* α0 :=
      proc_macro.bridge.client.ProcMacro::["bang"]
        "blake2x256"
        ink_macro.blake2x256 in
    let* α1 :=
      proc_macro.bridge.client.ProcMacro::["bang"]
        "selector_id"
        ink_macro.selector_id in
    let* α2 :=
      proc_macro.bridge.client.ProcMacro::["bang"]
        "selector_bytes"
        ink_macro.selector_bytes in
    let* α3 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "contract"
        ink_macro.contract in
    let* α4 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "trait_definition"
        ink_macro.trait_definition in
    let* α5 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "storage_item"
        ink_macro.storage_item in
    let* α6 :=
      proc_macro.bridge.client.ProcMacro::["attr"] "test" ink_macro.test in
    let* α7 :=
      proc_macro.bridge.client.ProcMacro::["attr"]
        "chain_extension"
        ink_macro.chain_extension in
    let* α8 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "Storable"
        (addr_of [ ])
        ink_macro.Storable in
    let* α9 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "StorableHint"
        (addr_of [ ])
        ink_macro.StorableHint in
    let* α10 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "StorageKey"
        (addr_of [ ])
        ink_macro.StorageKey in
    let* α11 :=
      proc_macro.bridge.client.ProcMacro::["custom_derive"]
        "StorageLayout"
        (addr_of [ ])
        ink_macro.StorageLayout in
    Pure (addr_of [ α0; α1; α2; α3; α4; α5; α6; α7; α8; α9; α10; α11 ])).
