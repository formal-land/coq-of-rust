(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module key.
  Definition Key : Set := u32.
  
  Module KeyComposer.
    Inductive t : Set := Build.
  End KeyComposer.
  Definition KeyComposer := @KeyComposer.t.
  
  Module Error.
    Inductive t : Set :=
    | StructNameIsEmpty
    | FieldNameIsEmpty.
  End Error.
  Definition Error := Error.t.
End key.

Definition Key : Set := u32.

Module KeyComposer.
  Inductive t : Set := Build.
End KeyComposer.
Definition KeyComposer := @KeyComposer.t.

Module Error.
  Inductive t : Set :=
  | StructNameIsEmpty
  | FieldNameIsEmpty.
End Error.
Definition Error := Error.t.

Module types.
  Module AccountId.
    Unset Primitive Projections.
    Record t : Set := {
      _ : list u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End AccountId.
  Definition AccountId := @AccountId.t.
  
  Module Hash.
    Unset Primitive Projections.
    Record t : Set := {
      _ : list u8;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Hash.
  Definition Hash := @Hash.t.
  
  Module Clear.
    Class Trait (Self : Set) : Set := {
      CLEAR_HASH `{H : State.Trait} : Self;
      is_clear `{H : State.Trait} : (ref Self) -> (M (H := H) bool);
    }.
    
    Global Instance Method_CLEAR_HASH `{H : State.Trait} `(Trait)
      : Notation.Dot "CLEAR_HASH" := {
      Notation.dot := @CLEAR_HASH;
    }.
    Global Instance Method_is_clear `{H : State.Trait} `(Trait)
      : Notation.Dot "is_clear" := {
      Notation.dot := @is_clear;
    }.
  End Clear.
End types.

Module AccountId.
  Unset Primitive Projections.
  Record t : Set := {
    _ : list u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End AccountId.
Definition AccountId := @AccountId.t.

Module Visitor.
  Unset Primitive Projections.
  Record t : Set := {
    _ : core.marker.PhantomData unit;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Visitor.
Definition Visitor := @Visitor.t.

Module Hash.
  Unset Primitive Projections.
  Record t : Set := {
    _ : list u8;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Hash.
Definition Hash := @Hash.t.

Module Clear.
  Class Trait (Self : Set) : Set := {
    CLEAR_HASH `{H : State.Trait} : Self;
    is_clear `{H : State.Trait} : (ref Self) -> (M (H := H) bool);
  }.
  
  Global Instance Method_CLEAR_HASH `{H : State.Trait} `(Trait)
    : Notation.Dot "CLEAR_HASH" := {
    Notation.dot := @CLEAR_HASH;
  }.
  Global Instance Method_is_clear `{H : State.Trait} `(Trait)
    : Notation.Dot "is_clear" := {
    Notation.dot := @is_clear;
  }.
End Clear.

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.
Definition LangError := LangError.t.

Definition MessageResult (T : Set) : Set := core.result.Result T ink_primitives.LangError.

Definition ConstructorResult (T : Set) : Set :=
  core.result.Result T ink_primitives.LangError.
