(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module key.
  Definition XXH32_SEED `{H : State.Trait} : u32 := run (Pure 0).
  
  Definition Key : Set := u32.
  
  Module KeyComposer.
    Inductive t : Set := Build.
  End KeyComposer.
  Definition KeyComposer := KeyComposer.t.
  
  Module Impl_ink_primitives_key_KeyComposer.
    Definition Self := ink_primitives.key.KeyComposer.
    
    Parameter concat : forall `{H : State.Trait}, ink_primitives.key.Key->
        ink_primitives.key.Key
        -> M (H := H) ink_primitives.key.Key.
    
    Global Instance AssociatedFunction_concat `{H : State.Trait} :
      Notation.DoubleColon Self "concat" := {
      Notation.double_colon := concat;
    }.
    
    Parameter from_str : forall `{H : State.Trait}, ref str
        -> M (H := H) ink_primitives.key.Key.
    
    Global Instance AssociatedFunction_from_str `{H : State.Trait} :
      Notation.DoubleColon Self "from_str" := {
      Notation.double_colon := from_str;
    }.
    
    Parameter from_bytes : forall `{H : State.Trait}, ref Slice
        -> M (H := H) ink_primitives.key.Key.
    
    Global Instance AssociatedFunction_from_bytes `{H : State.Trait} :
      Notation.DoubleColon Self "from_bytes" := {
      Notation.double_colon := from_bytes;
    }.
    
    Parameter compute_key : forall `{H : State.Trait}, ref str->
        ref str->
        ref str
        ->
          M (H := H)
            (core.result.Result
              ink_primitives.key.Key
              ink_primitives.key.Error).
    
    Global Instance AssociatedFunction_compute_key `{H : State.Trait} :
      Notation.DoubleColon Self "compute_key" := {
      Notation.double_colon := compute_key;
    }.
  End Impl_ink_primitives_key_KeyComposer.
  
  Module Error.
    Inductive t : Set :=
    | StructNameIsEmpty
    | FieldNameIsEmpty.
  End Error.
  Definition Error := Error.t.
  
  Module Impl_core_fmt_Debug_for_ink_primitives_key_Error.
    Definition Self := ink_primitives.key.Error.
    
    Parameter fmt : forall `{H : State.Trait}, ref Self->
        mut_ref core.fmt.Formatter
        -> M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_primitives_key_Error.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.
    Definition Self := ink_primitives.key.Error.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.
  
  Module Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.
    Definition Self := ink_primitives.key.Error.
    
    Parameter eq : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.key.Error
        -> M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.
  
  Module Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.
    Definition Self := ink_primitives.key.Error.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.
  
  Module Impl_core_cmp_Eq_for_ink_primitives_key_Error.
    Definition Self := ink_primitives.key.Error.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
        -> M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_primitives_key_Error.
End key.

Definition XXH32_SEED `{H : State.Trait} : u32 := run (Pure 0).

Definition Key : Set := u32.

Module KeyComposer.
  Inductive t : Set := Build.
End KeyComposer.
Definition KeyComposer := KeyComposer.t.

Module Impl_ink_primitives_key_KeyComposer_2.
  Definition Self := ink_primitives.key.KeyComposer.
  
  Parameter concat : forall `{H : State.Trait}, ink_primitives.key.Key->
      ink_primitives.key.Key
      -> M (H := H) ink_primitives.key.Key.
  
  Global Instance AssociatedFunction_concat `{H : State.Trait} :
    Notation.DoubleColon Self "concat" := {
    Notation.double_colon := concat;
  }.
  
  Parameter from_str : forall `{H : State.Trait}, ref str
      -> M (H := H) ink_primitives.key.Key.
  
  Global Instance AssociatedFunction_from_str `{H : State.Trait} :
    Notation.DoubleColon Self "from_str" := {
    Notation.double_colon := from_str;
  }.
  
  Parameter from_bytes : forall `{H : State.Trait}, ref Slice
      -> M (H := H) ink_primitives.key.Key.
  
  Global Instance AssociatedFunction_from_bytes `{H : State.Trait} :
    Notation.DoubleColon Self "from_bytes" := {
    Notation.double_colon := from_bytes;
  }.
  
  Parameter compute_key : forall `{H : State.Trait}, ref str->
      ref str->
      ref str
      ->
        M (H := H)
          (core.result.Result ink_primitives.key.Key ink_primitives.key.Error).
  
  Global Instance AssociatedFunction_compute_key `{H : State.Trait} :
    Notation.DoubleColon Self "compute_key" := {
    Notation.double_colon := compute_key;
  }.
End Impl_ink_primitives_key_KeyComposer_2.

Module Error.
  Inductive t : Set :=
  | StructNameIsEmpty
  | FieldNameIsEmpty.
End Error.
Definition Error := Error.t.

Module Impl_core_fmt_Debug_for_ink_primitives_key_Error.
  Definition Self := ink_primitives.key.Error.
  
  Parameter fmt : forall `{H : State.Trait}, ref Self->
      mut_ref core.fmt.Formatter
      -> M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_primitives_key_Error.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.
  Definition Self := ink_primitives.key.Error.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_key_Error.

Module Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.
  Definition Self := ink_primitives.key.Error.
  
  Parameter eq : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.key.Error
      -> M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_primitives_key_Error.

Module Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.
  Definition Self := ink_primitives.key.Error.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_primitives_key_Error.

Module Impl_core_cmp_Eq_for_ink_primitives_key_Error.
  Definition Self := ink_primitives.key.Error.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
      -> M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_primitives_key_Error.

Module types.
  Module AccountId.
    Record t : Set := { _ : list u8;}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End AccountId.
  Definition AccountId := AccountId.t.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter encode_as_type_to : forall `{H : State.Trait}, ref Self->
        u32->
        ref scale_info.portable.PortableRegistry->
        mut_ref (alloc.vec.Vec u8)
        -> M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter encode_as_fields_to : forall `{H : State.Trait}, ref Self->
        ref Slice->
        ref scale_info.portable.PortableRegistry->
        mut_ref (alloc.vec.Vec u8)
        -> M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to
        `{H : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.
  
  Module Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter fmt : forall `{H : State.Trait}, ref Self->
        mut_ref core.fmt.Formatter
        -> M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.
  
  Module Impl_core_marker_Copy_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_primitives_types_AccountId.
  
  Module Impl_core_clone_Clone_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter clone : forall `{H : State.Trait}, ref Self
        -> M (H := H) ink_primitives.types.AccountId.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_primitives_types_AccountId.
  
  Module
    Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter eq : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.types.AccountId
        -> M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
        -> M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter cmp : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.types.AccountId
        -> M (H := H) core.cmp.Ordering.
    
    Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp `{H : State.Trait} := cmp;
    }.
  End Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.
  
  Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter partial_cmp : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.types.AccountId
        -> M (H := H) (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{H : State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.
  
  Module Impl_core_hash_Hash_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter hash : forall `{H : State.Trait}, ref Self->
        mut_ref __H
        -> M (H := H) unit.
    
    Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
    
    Global Instance I : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash `{H : State.Trait} := hash;
    }.
  End Impl_core_hash_Hash_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_From_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter from : forall `{H : State.Trait}, list u8
        -> M (H := H) ink_primitives.types.AccountId.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := list u8) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter as_ref : forall `{H : State.Trait}, ref Self
        -> M (H := H) (ref list u8).
    
    Global Instance Method_as_ref `{H : State.Trait} :
      Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I : core.convert.AsRef.Trait Self (T := list u8) := {
      core.convert.AsRef.as_ref `{H : State.Trait} := as_ref;
    }.
  End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter as_mut : forall `{H : State.Trait}, mut_ref Self
        -> M (H := H) (mut_ref list u8).
    
    Global Instance Method_as_mut `{H : State.Trait} :
      Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I : core.convert.AsMut.Trait Self (T := list u8) := {
      core.convert.AsMut.as_mut `{H : State.Trait} := as_mut;
    }.
  End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter as_ref : forall `{H : State.Trait}, ref Self
        -> M (H := H) (ref Slice).
    
    Global Instance Method_as_ref `{H : State.Trait} :
      Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I : core.convert.AsRef.Trait Self (T := Slice) := {
      core.convert.AsRef.as_ref `{H : State.Trait} := as_ref;
    }.
  End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Parameter as_mut : forall `{H : State.Trait}, mut_ref Self
        -> M (H := H) (mut_ref Slice).
    
    Global Instance Method_as_mut `{H : State.Trait} :
      Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I : core.convert.AsMut.Trait Self (T := Slice) := {
      core.convert.AsMut.as_mut `{H : State.Trait} := as_mut;
    }.
  End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
  
  Module Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.
    Definition Self := ink_primitives.types.AccountId.
    
    Definition Error : Set := core.array.TryFromSliceError.
    
    Parameter try_from : forall `{H : State.Trait}, ref Slice
        -> M (H := H) (core.result.Result Self core.array.TryFromSliceError).
    
    Global Instance AssociatedFunction_try_from `{H : State.Trait} :
      Notation.DoubleColon Self "try_from" := {
      Notation.double_colon := try_from;
    }.
    
    Global Instance I : core.convert.TryFrom.Trait Self (T := ref Slice) := {
      core.convert.TryFrom.try_from `{H : State.Trait} := try_from;
    }.
  End Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.
  
  Module Hash.
    Record t : Set := { _ : list u8;}.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Hash.
  Definition Hash := Hash.t.
  
  Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter encode_as_type_to : forall `{H : State.Trait}, ref Self->
        u32->
        ref scale_info.portable.PortableRegistry->
        mut_ref (alloc.vec.Vec u8)
        -> M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_type_to `{H : State.Trait} :
      Notation.Dot "encode_as_type_to" := {
      Notation.dot := encode_as_type_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsType.Trait Self := {
      scale_encode.EncodeAsType.encode_as_type_to
        `{H : State.Trait}
        :=
        encode_as_type_to;
    }.
  End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.
  
  Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter encode_as_fields_to : forall `{H : State.Trait}, ref Self->
        ref Slice->
        ref scale_info.portable.PortableRegistry->
        mut_ref (alloc.vec.Vec u8)
        -> M (H := H) (core.result.Result unit scale_encode.error.Error).
    
    Global Instance Method_encode_as_fields_to `{H : State.Trait} :
      Notation.Dot "encode_as_fields_to" := {
      Notation.dot := encode_as_fields_to;
    }.
    
    Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
      scale_encode.EncodeAsFields.encode_as_fields_to
        `{H : State.Trait}
        :=
        encode_as_fields_to;
    }.
  End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.
  
  Module Impl_core_fmt_Debug_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter fmt : forall `{H : State.Trait}, ref Self->
        mut_ref core.fmt.Formatter
        -> M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_primitives_types_Hash.
  
  Module Impl_core_marker_Copy_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Global Instance I : core.marker.Copy.Trait Self :=
      core.marker.Copy.Build_Trait _.
  End Impl_core_marker_Copy_for_ink_primitives_types_Hash.
  
  Module Impl_core_clone_Clone_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter clone : forall `{H : State.Trait}, ref Self
        -> M (H := H) ink_primitives.types.Hash.
    
    Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
      Notation.dot := clone;
    }.
    
    Global Instance I : core.clone.Clone.Trait Self := {
      core.clone.Clone.clone `{H : State.Trait} := clone;
    }.
  End Impl_core_clone_Clone_for_ink_primitives_types_Hash.
  
  Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
      core.marker.StructuralPartialEq.Build_Trait _.
  End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter eq : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.types.Hash
        -> M (H := H) bool.
    
    Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
      Notation.dot := eq;
    }.
    
    Global Instance I : core.cmp.PartialEq.Trait Self := {
      core.cmp.PartialEq.eq `{H : State.Trait} := eq;
    }.
  End Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.
  
  Module Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Global Instance I : core.marker.StructuralEq.Trait Self :=
      core.marker.StructuralEq.Build_Trait _.
  End Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_Eq_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
        -> M (H := H) unit.
    
    Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
      Notation.Dot "assert_receiver_is_total_eq" := {
      Notation.dot := assert_receiver_is_total_eq;
    }.
    
    Global Instance I : core.cmp.Eq.Trait Self := {
    }.
  End Impl_core_cmp_Eq_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_Ord_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter cmp : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.types.Hash
        -> M (H := H) core.cmp.Ordering.
    
    Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
      Notation.dot := cmp;
    }.
    
    Global Instance I : core.cmp.Ord.Trait Self := {
      core.cmp.Ord.cmp `{H : State.Trait} := cmp;
    }.
  End Impl_core_cmp_Ord_for_ink_primitives_types_Hash.
  
  Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter partial_cmp : forall `{H : State.Trait}, ref Self->
        ref ink_primitives.types.Hash
        -> M (H := H) (core.option.Option core.cmp.Ordering).
    
    Global Instance Method_partial_cmp `{H : State.Trait} :
      Notation.Dot "partial_cmp" := {
      Notation.dot := partial_cmp;
    }.
    
    Global Instance I : core.cmp.PartialOrd.Trait Self := {
      core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
    }.
  End Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.
  
  Module Impl_core_hash_Hash_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter hash : forall `{H : State.Trait}, ref Self->
        mut_ref __H
        -> M (H := H) unit.
    
    Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
      Notation.dot := hash;
    }.
    
    Global Instance I : core.hash.Hash.Trait Self := {
      core.hash.Hash.hash `{H : State.Trait} := hash;
    }.
  End Impl_core_hash_Hash_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_From_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter from : forall `{H : State.Trait}, list u8
        -> M (H := H) ink_primitives.types.Hash.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I : core.convert.From.Trait Self (T := list u8) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_ink_primitives_types_Hash.
  
  Module Impl_core_default_Default_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter default : forall `{H : State.Trait}, unit
        -> M (H := H) ink_primitives.types.Hash.
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Definition Error : Set := core.array.TryFromSliceError.
    
    Parameter try_from : forall `{H : State.Trait}, ref Slice
        -> M (H := H) (core.result.Result Self core.array.TryFromSliceError).
    
    Global Instance AssociatedFunction_try_from `{H : State.Trait} :
      Notation.DoubleColon Self "try_from" := {
      Notation.double_colon := try_from;
    }.
    
    Global Instance I : core.convert.TryFrom.Trait Self (T := ref Slice) := {
      core.convert.TryFrom.try_from `{H : State.Trait} := try_from;
    }.
  End Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_AsRef_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter as_ref : forall `{H : State.Trait}, ref Self
        -> M (H := H) (ref Slice).
    
    Global Instance Method_as_ref `{H : State.Trait} :
      Notation.Dot "as_ref" := {
      Notation.dot := as_ref;
    }.
    
    Global Instance I : core.convert.AsRef.Trait Self (T := Slice) := {
      core.convert.AsRef.as_ref `{H : State.Trait} := as_ref;
    }.
  End Impl_core_convert_AsRef_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_AsMut_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Parameter as_mut : forall `{H : State.Trait}, mut_ref Self
        -> M (H := H) (mut_ref Slice).
    
    Global Instance Method_as_mut `{H : State.Trait} :
      Notation.Dot "as_mut" := {
      Notation.dot := as_mut;
    }.
    
    Global Instance I : core.convert.AsMut.Trait Self (T := Slice) := {
      core.convert.AsMut.as_mut `{H : State.Trait} := as_mut;
    }.
  End Impl_core_convert_AsMut_for_ink_primitives_types_Hash.
  
  Module Impl_core_convert_From_for_Array_u8.
    Definition Self := list u8.
    
    Parameter from : forall `{H : State.Trait}, ink_primitives.types.Hash
        -> M (H := H) Self.
    
    Global Instance AssociatedFunction_from `{H : State.Trait} :
      Notation.DoubleColon Self "from" := {
      Notation.double_colon := from;
    }.
    
    Global Instance I :
        core.convert.From.Trait Self (T := ink_primitives.types.Hash) := {
      core.convert.From.from `{H : State.Trait} := from;
    }.
  End Impl_core_convert_From_for_Array_u8.
  
  Module Clear.
    Class Trait (Self : Set) : Set := {
      CLEAR_HASH `{H : State.Trait} : Self;
      is_clear `{H : State.Trait} : (ref Self) -> (M (H := H) bool);
    }.
    
    Global Instance Method_CLEAR_HASH `{H : State.Trait} `(Trait)
      : Notation.Dot "CLEAR_HASH" := {
      Notation.dot := CLEAR_HASH;
    }.
    Global Instance Method_is_clear `{H : State.Trait} `(Trait)
      : Notation.Dot "is_clear" := {
      Notation.dot := is_clear;
    }.
  End Clear.
  
  Module Impl_ink_primitives_types_Clear_for_Array_u8.
    Definition Self := list u8.
    
    Definition CLEAR_HASH := repeat 0.
    
    Global Instance AssociatedFunction_CLEAR_HASH `{H : State.Trait} :
      Notation.DoubleColon Self "CLEAR_HASH" := {
      Notation.double_colon := CLEAR_HASH;
    }.
    
    Parameter is_clear : forall `{H : State.Trait}, ref Self -> M (H := H) bool.
    
    Global Instance Method_is_clear `{H : State.Trait} :
      Notation.Dot "is_clear" := {
      Notation.dot := is_clear;
    }.
    
    Global Instance I : ink_primitives.types.Clear.Trait Self := {
      ink_primitives.types.Clear.CLEAR_HASH `{H : State.Trait} := CLEAR_HASH;
      ink_primitives.types.Clear.is_clear `{H : State.Trait} := is_clear;
    }.
  End Impl_ink_primitives_types_Clear_for_Array_u8.
  
  Module Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash.
    Definition Self := ink_primitives.types.Hash.
    
    Definition CLEAR_HASH := Self ink_primitives.types.Clear.CLEAR_HASH.
    
    Global Instance AssociatedFunction_CLEAR_HASH `{H : State.Trait} :
      Notation.DoubleColon Self "CLEAR_HASH" := {
      Notation.double_colon := CLEAR_HASH;
    }.
    
    Parameter is_clear : forall `{H : State.Trait}, ref Self -> M (H := H) bool.
    
    Global Instance Method_is_clear `{H : State.Trait} :
      Notation.Dot "is_clear" := {
      Notation.dot := is_clear;
    }.
    
    Global Instance I : ink_primitives.types.Clear.Trait Self := {
      ink_primitives.types.Clear.CLEAR_HASH `{H : State.Trait} := CLEAR_HASH;
      ink_primitives.types.Clear.is_clear `{H : State.Trait} := is_clear;
    }.
  End Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash.
End types.

Module AccountId.
  Record t : Set := { _ : list u8;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End AccountId.
Definition AccountId := AccountId.t.

Module Impl_scale_info_TypeInfo_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Definition Identity : Set := Self.
  
  Parameter type_info : forall `{H : State.Trait}, unit
      -> M (H := H) scale_info.ty.Type.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_primitives_types_AccountId.

Module Visitor.
  Record t : Set := { _ : core.marker.PhantomData unit;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Visitor.
Definition Visitor := Visitor.t.

Module Impl_scale_decode_IntoVisitor_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Definition Visitor : Set := ink_primitives.types._.Visitor.
  
  Parameter into_visitor : forall `{H : State.Trait}, unit
      -> M (H := H) ImplSelf.Visitor.
  
  Global Instance AssociatedFunction_into_visitor `{H : State.Trait} :
    Notation.DoubleColon Self "into_visitor" := {
    Notation.double_colon := into_visitor;
  }.
  
  Global Instance I : scale_decode.IntoVisitor.Trait Self := {
    scale_decode.IntoVisitor.into_visitor `{H : State.Trait} := into_visitor;
  }.
End Impl_scale_decode_IntoVisitor_for_ink_primitives_types_AccountId.

Module Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor.
  Definition Self := ink_primitives.types._.Visitor.
  
  Definition Error : Set := scale_decode.error.Error.
  
  Definition Value : Set := ink_primitives.types.AccountId.
  
  Parameter visit_composite : forall `{H : State.Trait}, Self->
      mut_ref scale_decode.visitor.types.composite.Composite->
      scale_decode.visitor.TypeId
      -> M (H := H) (core.result.Result ImplSelf.Value ImplSelf.Error).
  
  Global Instance Method_visit_composite `{H : State.Trait} :
    Notation.Dot "visit_composite" := {
    Notation.dot := visit_composite;
  }.
  
  Parameter visit_tuple : forall `{H : State.Trait}, Self->
      mut_ref scale_decode.visitor.types.tuple.Tuple->
      scale_decode.visitor.TypeId
      -> M (H := H) (core.result.Result ImplSelf.Value ImplSelf.Error).
  
  Global Instance Method_visit_tuple `{H : State.Trait} :
    Notation.Dot "visit_tuple" := {
    Notation.dot := visit_tuple;
  }.
  
  Global Instance I : scale_decode.visitor.Visitor.Trait Self := {
  }.
End Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor.

Module Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter decode_as_fields : forall `{H : State.Trait}, mut_ref (ref Slice)->
      ref Slice->
      ref scale_info.portable.PortableRegistry
      -> M (H := H) (core.result.Result Self scale_decode.error.Error).
  
  Global Instance AssociatedFunction_decode_as_fields `{H : State.Trait} :
    Notation.DoubleColon Self "decode_as_fields" := {
    Notation.double_colon := decode_as_fields;
  }.
  
  Global Instance I : scale_decode.DecodeAsFields.Trait Self := {
    scale_decode.DecodeAsFields.decode_as_fields
      `{H : State.Trait}
      :=
      decode_as_fields;
  }.
End Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_AccountId.

Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter encode_as_type_to : forall `{H : State.Trait}, ref Self->
      u32->
      ref scale_info.portable.PortableRegistry->
      mut_ref (alloc.vec.Vec u8)
      -> M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_AccountId.

Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter encode_as_fields_to : forall `{H : State.Trait}, ref Self->
      ref Slice->
      ref scale_info.portable.PortableRegistry->
      mut_ref (alloc.vec.Vec u8)
      -> M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{H : State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to
      `{H : State.Trait}
      :=
      encode_as_fields_to;
  }.
End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_AccountId.

Module Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter fmt : forall `{H : State.Trait}, ref Self->
      mut_ref core.fmt.Formatter
      -> M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_primitives_types_AccountId.

Module Impl_core_marker_Copy_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_primitives_types_AccountId.

Module Impl_core_clone_Clone_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter clone : forall `{H : State.Trait}, ref Self
      -> M (H := H) ink_primitives.types.AccountId.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_primitives_types_AccountId.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter eq : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.types.AccountId
      -> M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_primitives_types_AccountId.

Module Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
      -> M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter cmp : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.types.AccountId
      -> M (H := H) core.cmp.Ordering.
  
  Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp `{H : State.Trait} := cmp;
  }.
End Impl_core_cmp_Ord_for_ink_primitives_types_AccountId.

Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter partial_cmp : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.types.AccountId
      -> M (H := H) (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{H : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_ink_primitives_types_AccountId.

Module Impl_core_hash_Hash_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter hash : forall `{H : State.Trait}, ref Self->
      mut_ref __H
      -> M (H := H) unit.
  
  Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash `{H : State.Trait} := hash;
  }.
End Impl_core_hash_Hash_for_ink_primitives_types_AccountId.

Module Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter decode : forall `{H : State.Trait}, mut_ref __CodecInputEdqy
      -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
  }.
End Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_AccountId.

Module Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter encode_to : forall `{H : State.Trait}, ref Self->
      mut_ref __CodecOutputEdqy
      -> M (H := H) unit.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Parameter encode : forall `{H : State.Trait}, ref Self
      -> M (H := H) (alloc.vec.Vec Root.core.primitive.u8).
  
  Global Instance Method_encode `{H : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter using_encoded : forall `{H : State.Trait}, ref Self->
      F
      -> M (H := H) R.
  
  Global Instance Method_using_encoded `{H : State.Trait} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_AccountId.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Global Instance I : parity_scale_codec.encode_like.EncodeLike.Trait Self :=
    parity_scale_codec.encode_like.EncodeLike.Build_Trait _.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_AccountId.

Module Impl_core_convert_From_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter from : forall `{H : State.Trait}, list u8
      -> M (H := H) ink_primitives.types.AccountId.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := list u8) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_primitives_types_AccountId.

Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter as_ref : forall `{H : State.Trait}, ref Self
      -> M (H := H) (ref list u8).
  
  Global Instance Method_as_ref `{H : State.Trait} : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I : core.convert.AsRef.Trait Self (T := list u8) := {
    core.convert.AsRef.as_ref `{H : State.Trait} := as_ref;
  }.
End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.

Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter as_mut : forall `{H : State.Trait}, mut_ref Self
      -> M (H := H) (mut_ref list u8).
  
  Global Instance Method_as_mut `{H : State.Trait} : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I : core.convert.AsMut.Trait Self (T := list u8) := {
    core.convert.AsMut.as_mut `{H : State.Trait} := as_mut;
  }.
End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.

Module Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter as_ref : forall `{H : State.Trait}, ref Self
      -> M (H := H) (ref Slice).
  
  Global Instance Method_as_ref `{H : State.Trait} : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I : core.convert.AsRef.Trait Self (T := Slice) := {
    core.convert.AsRef.as_ref `{H : State.Trait} := as_ref;
  }.
End Impl_core_convert_AsRef_for_ink_primitives_types_AccountId.

Module Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Parameter as_mut : forall `{H : State.Trait}, mut_ref Self
      -> M (H := H) (mut_ref Slice).
  
  Global Instance Method_as_mut `{H : State.Trait} : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I : core.convert.AsMut.Trait Self (T := Slice) := {
    core.convert.AsMut.as_mut `{H : State.Trait} := as_mut;
  }.
End Impl_core_convert_AsMut_for_ink_primitives_types_AccountId.

Module Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.
  Definition Self := ink_primitives.types.AccountId.
  
  Definition Error : Set := core.array.TryFromSliceError.
  
  Parameter try_from : forall `{H : State.Trait}, ref Slice
      -> M (H := H) (core.result.Result Self core.array.TryFromSliceError).
  
  Global Instance AssociatedFunction_try_from `{H : State.Trait} :
    Notation.DoubleColon Self "try_from" := {
    Notation.double_colon := try_from;
  }.
  
  Global Instance I : core.convert.TryFrom.Trait Self (T := ref Slice) := {
    core.convert.TryFrom.try_from `{H : State.Trait} := try_from;
  }.
End Impl_core_convert_TryFrom_for_ink_primitives_types_AccountId.

Module Hash.
  Record t : Set := { _ : list u8;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Hash.
Definition Hash := Hash.t.

Module Impl_scale_info_TypeInfo_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Definition Identity : Set := Self.
  
  Parameter type_info : forall `{H : State.Trait}, unit
      -> M (H := H) scale_info.ty.Type.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_primitives_types_Hash.

Module Visitor.
  Record t : Set := { _ : core.marker.PhantomData unit;}.
  
  Global Instance Get_0 : Notation.Dot 0 := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Visitor.
Definition Visitor := Visitor.t.

Module Impl_scale_decode_IntoVisitor_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Definition Visitor : Set := ink_primitives.types._.Visitor.
  
  Parameter into_visitor : forall `{H : State.Trait}, unit
      -> M (H := H) ImplSelf.Visitor.
  
  Global Instance AssociatedFunction_into_visitor `{H : State.Trait} :
    Notation.DoubleColon Self "into_visitor" := {
    Notation.double_colon := into_visitor;
  }.
  
  Global Instance I : scale_decode.IntoVisitor.Trait Self := {
    scale_decode.IntoVisitor.into_visitor `{H : State.Trait} := into_visitor;
  }.
End Impl_scale_decode_IntoVisitor_for_ink_primitives_types_Hash.

Module Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor.
  Definition Self := ink_primitives.types._.Visitor.
  
  Definition Error : Set := scale_decode.error.Error.
  
  Definition Value : Set := ink_primitives.types.Hash.
  
  Parameter visit_composite : forall `{H : State.Trait}, Self->
      mut_ref scale_decode.visitor.types.composite.Composite->
      scale_decode.visitor.TypeId
      -> M (H := H) (core.result.Result ImplSelf.Value ImplSelf.Error).
  
  Global Instance Method_visit_composite `{H : State.Trait} :
    Notation.Dot "visit_composite" := {
    Notation.dot := visit_composite;
  }.
  
  Parameter visit_tuple : forall `{H : State.Trait}, Self->
      mut_ref scale_decode.visitor.types.tuple.Tuple->
      scale_decode.visitor.TypeId
      -> M (H := H) (core.result.Result ImplSelf.Value ImplSelf.Error).
  
  Global Instance Method_visit_tuple `{H : State.Trait} :
    Notation.Dot "visit_tuple" := {
    Notation.dot := visit_tuple;
  }.
  
  Global Instance I : scale_decode.visitor.Visitor.Trait Self := {
  }.
End Impl_scale_decode_visitor_Visitor_for_ink_primitives_types___Visitor.

Module Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter decode_as_fields : forall `{H : State.Trait}, mut_ref (ref Slice)->
      ref Slice->
      ref scale_info.portable.PortableRegistry
      -> M (H := H) (core.result.Result Self scale_decode.error.Error).
  
  Global Instance AssociatedFunction_decode_as_fields `{H : State.Trait} :
    Notation.DoubleColon Self "decode_as_fields" := {
    Notation.double_colon := decode_as_fields;
  }.
  
  Global Instance I : scale_decode.DecodeAsFields.Trait Self := {
    scale_decode.DecodeAsFields.decode_as_fields
      `{H : State.Trait}
      :=
      decode_as_fields;
  }.
End Impl_scale_decode_DecodeAsFields_for_ink_primitives_types_Hash.

Module Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter encode_as_type_to : forall `{H : State.Trait}, ref Self->
      u32->
      ref scale_info.portable.PortableRegistry->
      mut_ref (alloc.vec.Vec u8)
      -> M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_type_to `{H : State.Trait} :
    Notation.Dot "encode_as_type_to" := {
    Notation.dot := encode_as_type_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsType.Trait Self := {
    scale_encode.EncodeAsType.encode_as_type_to
      `{H : State.Trait}
      :=
      encode_as_type_to;
  }.
End Impl_scale_encode_EncodeAsType_for_ink_primitives_types_Hash.

Module Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter encode_as_fields_to : forall `{H : State.Trait}, ref Self->
      ref Slice->
      ref scale_info.portable.PortableRegistry->
      mut_ref (alloc.vec.Vec u8)
      -> M (H := H) (core.result.Result unit scale_encode.error.Error).
  
  Global Instance Method_encode_as_fields_to `{H : State.Trait} :
    Notation.Dot "encode_as_fields_to" := {
    Notation.dot := encode_as_fields_to;
  }.
  
  Global Instance I : scale_encode.EncodeAsFields.Trait Self := {
    scale_encode.EncodeAsFields.encode_as_fields_to
      `{H : State.Trait}
      :=
      encode_as_fields_to;
  }.
End Impl_scale_encode_EncodeAsFields_for_ink_primitives_types_Hash.

Module Impl_core_fmt_Debug_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter fmt : forall `{H : State.Trait}, ref Self->
      mut_ref core.fmt.Formatter
      -> M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_primitives_types_Hash.

Module Impl_core_marker_Copy_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_primitives_types_Hash.

Module Impl_core_clone_Clone_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter clone : forall `{H : State.Trait}, ref Self
      -> M (H := H) ink_primitives.types.Hash.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_primitives_types_Hash.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_types_Hash.

Module Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter eq : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.types.Hash
      -> M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_primitives_types_Hash.

Module Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_primitives_types_Hash.

Module Impl_core_cmp_Eq_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
      -> M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_primitives_types_Hash.

Module Impl_core_cmp_Ord_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter cmp : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.types.Hash
      -> M (H := H) core.cmp.Ordering.
  
  Global Instance Method_cmp `{H : State.Trait} : Notation.Dot "cmp" := {
    Notation.dot := cmp;
  }.
  
  Global Instance I : core.cmp.Ord.Trait Self := {
    core.cmp.Ord.cmp `{H : State.Trait} := cmp;
  }.
End Impl_core_cmp_Ord_for_ink_primitives_types_Hash.

Module Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter partial_cmp : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.types.Hash
      -> M (H := H) (core.option.Option core.cmp.Ordering).
  
  Global Instance Method_partial_cmp `{H : State.Trait} :
    Notation.Dot "partial_cmp" := {
    Notation.dot := partial_cmp;
  }.
  
  Global Instance I : core.cmp.PartialOrd.Trait Self := {
    core.cmp.PartialOrd.partial_cmp `{H : State.Trait} := partial_cmp;
  }.
End Impl_core_cmp_PartialOrd_for_ink_primitives_types_Hash.

Module Impl_core_hash_Hash_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter hash : forall `{H : State.Trait}, ref Self->
      mut_ref __H
      -> M (H := H) unit.
  
  Global Instance Method_hash `{H : State.Trait} : Notation.Dot "hash" := {
    Notation.dot := hash;
  }.
  
  Global Instance I : core.hash.Hash.Trait Self := {
    core.hash.Hash.hash `{H : State.Trait} := hash;
  }.
End Impl_core_hash_Hash_for_ink_primitives_types_Hash.

Module Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter decode : forall `{H : State.Trait}, mut_ref __CodecInputEdqy
      -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
  }.
End Impl_parity_scale_codec_codec_Decode_for_ink_primitives_types_Hash.

Module Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter encode_to : forall `{H : State.Trait}, ref Self->
      mut_ref __CodecOutputEdqy
      -> M (H := H) unit.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Parameter encode : forall `{H : State.Trait}, ref Self
      -> M (H := H) (alloc.vec.Vec Root.core.primitive.u8).
  
  Global Instance Method_encode `{H : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter using_encoded : forall `{H : State.Trait}, ref Self->
      F
      -> M (H := H) R.
  
  Global Instance Method_using_encoded `{H : State.Trait} :
    Notation.Dot "using_encoded" := {
    Notation.dot := using_encoded;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End Impl_parity_scale_codec_codec_Encode_for_ink_primitives_types_Hash.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Global Instance I : parity_scale_codec.encode_like.EncodeLike.Trait Self :=
    parity_scale_codec.encode_like.EncodeLike.Build_Trait _.
End
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_types_Hash.

Module Impl_core_convert_From_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter from : forall `{H : State.Trait}, list u8
      -> M (H := H) ink_primitives.types.Hash.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I : core.convert.From.Trait Self (T := list u8) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_ink_primitives_types_Hash.

Module Impl_core_default_Default_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter default : forall `{H : State.Trait}, unit
      -> M (H := H) ink_primitives.types.Hash.
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_primitives_types_Hash.

Module Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Definition Error : Set := core.array.TryFromSliceError.
  
  Parameter try_from : forall `{H : State.Trait}, ref Slice
      -> M (H := H) (core.result.Result Self core.array.TryFromSliceError).
  
  Global Instance AssociatedFunction_try_from `{H : State.Trait} :
    Notation.DoubleColon Self "try_from" := {
    Notation.double_colon := try_from;
  }.
  
  Global Instance I : core.convert.TryFrom.Trait Self (T := ref Slice) := {
    core.convert.TryFrom.try_from `{H : State.Trait} := try_from;
  }.
End Impl_core_convert_TryFrom_for_ink_primitives_types_Hash.

Module Impl_core_convert_AsRef_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter as_ref : forall `{H : State.Trait}, ref Self
      -> M (H := H) (ref Slice).
  
  Global Instance Method_as_ref `{H : State.Trait} : Notation.Dot "as_ref" := {
    Notation.dot := as_ref;
  }.
  
  Global Instance I : core.convert.AsRef.Trait Self (T := Slice) := {
    core.convert.AsRef.as_ref `{H : State.Trait} := as_ref;
  }.
End Impl_core_convert_AsRef_for_ink_primitives_types_Hash.

Module Impl_core_convert_AsMut_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Parameter as_mut : forall `{H : State.Trait}, mut_ref Self
      -> M (H := H) (mut_ref Slice).
  
  Global Instance Method_as_mut `{H : State.Trait} : Notation.Dot "as_mut" := {
    Notation.dot := as_mut;
  }.
  
  Global Instance I : core.convert.AsMut.Trait Self (T := Slice) := {
    core.convert.AsMut.as_mut `{H : State.Trait} := as_mut;
  }.
End Impl_core_convert_AsMut_for_ink_primitives_types_Hash.

Module Impl_core_convert_From_for_Array_u8.
  Definition Self := list u8.
  
  Parameter from : forall `{H : State.Trait}, ink_primitives.types.Hash
      -> M (H := H) Self.
  
  Global Instance AssociatedFunction_from `{H : State.Trait} :
    Notation.DoubleColon Self "from" := {
    Notation.double_colon := from;
  }.
  
  Global Instance I :
      core.convert.From.Trait Self (T := ink_primitives.types.Hash) := {
    core.convert.From.from `{H : State.Trait} := from;
  }.
End Impl_core_convert_From_for_Array_u8.

Module Clear.
  Class Trait (Self : Set) : Set := {
    CLEAR_HASH `{H : State.Trait} : Self;
    is_clear `{H : State.Trait} : (ref Self) -> (M (H := H) bool);
  }.
  
  Global Instance Method_CLEAR_HASH `{H : State.Trait} `(Trait)
    : Notation.Dot "CLEAR_HASH" := {
    Notation.dot := CLEAR_HASH;
  }.
  Global Instance Method_is_clear `{H : State.Trait} `(Trait)
    : Notation.Dot "is_clear" := {
    Notation.dot := is_clear;
  }.
End Clear.

Module Impl_ink_primitives_types_Clear_for_Array_u8.
  Definition Self := list u8.
  
  Definition CLEAR_HASH := repeat 0.
  
  Global Instance AssociatedFunction_CLEAR_HASH `{H : State.Trait} :
    Notation.DoubleColon Self "CLEAR_HASH" := {
    Notation.double_colon := CLEAR_HASH;
  }.
  
  Parameter is_clear : forall `{H : State.Trait}, ref Self -> M (H := H) bool.
  
  Global Instance Method_is_clear `{H : State.Trait} :
    Notation.Dot "is_clear" := {
    Notation.dot := is_clear;
  }.
  
  Global Instance I : ink_primitives.types.Clear.Trait Self := {
    ink_primitives.types.Clear.CLEAR_HASH `{H : State.Trait} := CLEAR_HASH;
    ink_primitives.types.Clear.is_clear `{H : State.Trait} := is_clear;
  }.
End Impl_ink_primitives_types_Clear_for_Array_u8.

Module Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash.
  Definition Self := ink_primitives.types.Hash.
  
  Definition CLEAR_HASH := Self ink_primitives.types.Clear.CLEAR_HASH.
  
  Global Instance AssociatedFunction_CLEAR_HASH `{H : State.Trait} :
    Notation.DoubleColon Self "CLEAR_HASH" := {
    Notation.double_colon := CLEAR_HASH;
  }.
  
  Parameter is_clear : forall `{H : State.Trait}, ref Self -> M (H := H) bool.
  
  Global Instance Method_is_clear `{H : State.Trait} :
    Notation.Dot "is_clear" := {
    Notation.dot := is_clear;
  }.
  
  Global Instance I : ink_primitives.types.Clear.Trait Self := {
    ink_primitives.types.Clear.CLEAR_HASH `{H : State.Trait} := CLEAR_HASH;
    ink_primitives.types.Clear.is_clear `{H : State.Trait} := is_clear;
  }.
End Impl_ink_primitives_types_Clear_for_ink_primitives_types_Hash.

Module LangError.
  Inductive t : Set :=
  | CouldNotReadInput.
End LangError.
Definition LangError := LangError.t.

Module Impl_scale_info_TypeInfo_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Definition Identity : Set := Self.
  
  Parameter type_info : forall `{H : State.Trait}, unit
      -> M (H := H) scale_info.ty.Type.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_primitives_LangError.

Module Impl_core_fmt_Debug_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Parameter fmt : forall `{H : State.Trait}, ref Self->
      mut_ref core.fmt.Formatter
      -> M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_primitives_LangError.

Module Impl_core_marker_Copy_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Global Instance I : core.marker.Copy.Trait Self :=
    core.marker.Copy.Build_Trait _.
End Impl_core_marker_Copy_for_ink_primitives_LangError.

Module Impl_core_clone_Clone_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Parameter clone : forall `{H : State.Trait}, ref Self
      -> M (H := H) ink_primitives.LangError.
  
  Global Instance Method_clone `{H : State.Trait} : Notation.Dot "clone" := {
    Notation.dot := clone;
  }.
  
  Global Instance I : core.clone.Clone.Trait Self := {
    core.clone.Clone.clone `{H : State.Trait} := clone;
  }.
End Impl_core_clone_Clone_for_ink_primitives_LangError.

Module Impl_core_marker_StructuralPartialEq_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Global Instance I : core.marker.StructuralPartialEq.Trait Self :=
    core.marker.StructuralPartialEq.Build_Trait _.
End Impl_core_marker_StructuralPartialEq_for_ink_primitives_LangError.

Module Impl_core_cmp_PartialEq_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Parameter eq : forall `{H : State.Trait}, ref Self->
      ref ink_primitives.LangError
      -> M (H := H) bool.
  
  Global Instance Method_eq `{H : State.Trait} : Notation.Dot "eq" := {
    Notation.dot := eq;
  }.
  
  Global Instance I : core.cmp.PartialEq.Trait Self := {
    core.cmp.PartialEq.eq `{H : State.Trait} := eq;
  }.
End Impl_core_cmp_PartialEq_for_ink_primitives_LangError.

Module Impl_core_marker_StructuralEq_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Global Instance I : core.marker.StructuralEq.Trait Self :=
    core.marker.StructuralEq.Build_Trait _.
End Impl_core_marker_StructuralEq_for_ink_primitives_LangError.

Module Impl_core_cmp_Eq_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Parameter assert_receiver_is_total_eq : forall `{H : State.Trait}, ref Self
      -> M (H := H) unit.
  
  Global Instance Method_assert_receiver_is_total_eq `{H : State.Trait} :
    Notation.Dot "assert_receiver_is_total_eq" := {
    Notation.dot := assert_receiver_is_total_eq;
  }.
  
  Global Instance I : core.cmp.Eq.Trait Self := {
  }.
End Impl_core_cmp_Eq_for_ink_primitives_LangError.

Module Impl_parity_scale_codec_codec_Encode_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Parameter encode_to : forall `{H : State.Trait}, ref Self->
      mut_ref __CodecOutputEdqy
      -> M (H := H) unit.
  
  Global Instance Method_encode_to `{H : State.Trait} :
    Notation.Dot "encode_to" := {
    Notation.dot := encode_to;
  }.
  
  Global Instance I : parity_scale_codec.codec.Encode.Trait Self := {
  }.
End Impl_parity_scale_codec_codec_Encode_for_ink_primitives_LangError.

Module
  Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Global Instance I : parity_scale_codec.encode_like.EncodeLike.Trait Self :=
    parity_scale_codec.encode_like.EncodeLike.Build_Trait _.
End Impl_parity_scale_codec_encode_like_EncodeLike_for_ink_primitives_LangError.

Module Impl_parity_scale_codec_codec_Decode_for_ink_primitives_LangError.
  Definition Self := ink_primitives.LangError.
  
  Parameter decode : forall `{H : State.Trait}, mut_ref __CodecInputEdqy
      -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : parity_scale_codec.codec.Decode.Trait Self := {
    parity_scale_codec.codec.Decode.decode `{H : State.Trait} := decode;
  }.
End Impl_parity_scale_codec_codec_Decode_for_ink_primitives_LangError.

Definition MessageResult : Set := core.result.Result T ink_primitives.LangError.

Definition ConstructorResult : Set :=
  core.result.Result T ink_primitives.LangError.
