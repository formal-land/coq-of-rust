(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - module was ignored by the compiler *)
Module lazy.
  Module mapping.
    Module Mapping.
      Record t : Set := {
        _marker : core.marker.PhantomData (unit -> (K * V * KeyType));
      }.
      
      Global Instance Get__marker : Notation.Dot "_marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Mapping.
    Definition Mapping : Set := Mapping.t.
    
    Module
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
<<<<<<< HEAD
      Parameter default : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
      Definition default  : M Self := Self::["new"] tt.
>>>>>>> fa97985 (Update ink submodule)
      
      Global Instance AssociatedFunction_default `{H : State.Trait} :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default `{H : State.Trait} := default;
      }.
    End
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
<<<<<<< HEAD
      Parameter new : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
      Definition new  : M Self :=
        Pure {| Self._marker := core.marker.PhantomData.Build; |}.
>>>>>>> fa97985 (Update ink submodule)
      
      Global Instance AssociatedFunction_new `{H : State.Trait} :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
    End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Parameter fmt : forall `{H : State.Trait}, ref Self->
          mut_ref core.fmt.Formatter
          -> M (H := H) core.fmt.Result.
      
      Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt `{H : State.Trait} := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_2.
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Parameter insert : forall `{H : State.Trait}, mut_ref Self->
          Q->
          ref R
          -> M (H := H) (core.option.Option u32).
      
      Global Instance Method_insert `{H : State.Trait} :
        Notation.Dot "insert" := {
        Notation.dot := insert;
      }.
      
      Parameter get : forall `{H : State.Trait}, ref Self->
          Q
          -> M (H := H) (core.option.Option V).
      
      Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
        Notation.dot := get;
      }.
      
      Parameter take : forall `{H : State.Trait}, ref Self->
          Q
          -> M (H := H) (core.option.Option V).
      
      Global Instance Method_take `{H : State.Trait} : Notation.Dot "take" := {
        Notation.dot := take;
      }.
      
      Parameter size : forall `{H : State.Trait}, ref Self->
          Q
          -> M (H := H) (core.option.Option u32).
      
      Global Instance Method_size `{H : State.Trait} : Notation.Dot "size" := {
        Notation.dot := size;
      }.
      
      Parameter contains : forall `{H : State.Trait}, ref Self->
          Q
          -> M (H := H) bool.
      
      Global Instance Method_contains `{H : State.Trait} :
        Notation.Dot "contains" := {
        Notation.dot := contains;
      }.
      
      Parameter remove : forall `{H : State.Trait}, ref Self->
          Q
          -> M (H := H) unit.
      
      Global Instance Method_remove `{H : State.Trait} :
        Notation.Dot "remove" := {
        Notation.dot := remove;
      }.
    End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_2.
    
    Module
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Parameter encode : forall `{H : State.Trait}, ref Self->
          mut_ref T
          -> M (H := H) unit.
      
      Global Instance Method_encode `{H : State.Trait} :
        Notation.Dot "encode" := {
        Notation.dot := encode;
      }.
      
      Parameter decode : forall `{H : State.Trait}, mut_ref I
          ->
            M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
      
      Global Instance AssociatedFunction_decode `{H : State.Trait} :
        Notation.DoubleColon Self "decode" := {
        Notation.double_colon := decode;
      }.
      
      Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
        ink_storage_traits.storage.Storable.encode `{H : State.Trait} := encode;
        ink_storage_traits.storage.Storable.decode `{H : State.Trait} := decode;
      }.
    End
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    Section
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
      Context {K V Key InnerKey : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V InnerKey.
      
      Definition Type : Set := ink_storage.lazy.mapping.Mapping K V Key.
      
      Definition PreferredKey : Set := InnerKey.
      
      Global Instance I :
          ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
      }.
    End
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    End
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    
    Module
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition KEY := Pure KeyType::["KEY"].
      
      Global Instance AssociatedFunction_KEY `{H : State.Trait} :
        Notation.DoubleColon Self "KEY" := {
        Notation.double_colon := KEY;
      }.
      
      Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
        ink_storage_traits.storage.StorageKey.KEY `{H : State.Trait} := KEY;
      }.
    End
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End mapping.
  
  Module Lazy.
    Record t : Set := {
      _marker : core.marker.PhantomData (unit -> (V * KeyType));
    }.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Lazy.
  Definition Lazy : Set := Lazy.t.
  
  Module Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  Section Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
<<<<<<< HEAD
    Parameter default : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
    Definition default  : M Self := Self::["new"] tt.
>>>>>>> fa97985 (Update ink submodule)
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  
  Module Impl_ink_storage_lazy_Lazy_V_KeyType.
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
<<<<<<< HEAD
    Parameter new : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
    Definition new  : M Self :=
      Pure {| Self._marker := core.marker.PhantomData.Build; |}.
>>>>>>> fa97985 (Update ink submodule)
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_storage_lazy_Lazy_V_KeyType.
  
  Module Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  Section Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Parameter fmt : forall `{H : State.Trait}, ref Self->
        mut_ref core.fmt.Formatter
        -> M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  
  Module Impl_ink_storage_lazy_Lazy_V_KeyType_2.
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Parameter get : forall `{H : State.Trait}, ref Self
        -> M (H := H) (core.option.Option V).
    
    Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
      Notation.dot := get;
    }.
    
    Parameter set : forall `{H : State.Trait}, mut_ref Self->
        ref V
        -> M (H := H) unit.
    
    Global Instance Method_set `{H : State.Trait} : Notation.Dot "set" := {
      Notation.dot := set;
    }.
  End Impl_ink_storage_lazy_Lazy_V_KeyType_2.
  
  Module Impl_ink_storage_lazy_Lazy_V_KeyType_3.
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Parameter get_or_default : forall `{H : State.Trait}, ref Self
        -> M (H := H) V.
    
    Global Instance Method_get_or_default `{H : State.Trait} :
      Notation.Dot "get_or_default" := {
      Notation.dot := get_or_default;
    }.
  End Impl_ink_storage_lazy_Lazy_V_KeyType_3.
  
  Module
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Parameter encode : forall `{H : State.Trait}, ref Self->
        mut_ref T
        -> M (H := H) unit.
    
    Global Instance Method_encode `{H : State.Trait} :
      Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    
    Parameter decode : forall `{H : State.Trait}, mut_ref I
        -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode `{H : State.Trait} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
      ink_storage_traits.storage.Storable.encode `{H : State.Trait} := encode;
      ink_storage_traits.storage.Storable.decode `{H : State.Trait} := decode;
    }.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  
  Module
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  Section
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
    Context {V Key InnerKey : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V InnerKey.
    
    Definition Type : Set := ink_storage.lazy.Lazy ImplV.Type Key.
    
    Definition PreferredKey : Set := InnerKey.
    
    Global Instance I :
        ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
    }.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  
  Module
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition KEY := Pure KeyType::["KEY"].
    
    Global Instance AssociatedFunction_KEY `{H : State.Trait} :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
      ink_storage_traits.storage.StorageKey.KEY `{H : State.Trait} := KEY;
    }.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
End lazy.

Module mapping.
  Module Mapping.
    Record t : Set := {
      _marker : core.marker.PhantomData (unit -> (K * V * KeyType));
    }.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Mapping.
  Definition Mapping : Set := Mapping.t.
  
  Module
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
<<<<<<< HEAD
    Parameter default : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
    Definition default  : M Self := Self::["new"] tt.
>>>>>>> fa97985 (Update ink submodule)
    
    Global Instance AssociatedFunction_default `{H : State.Trait} :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default `{H : State.Trait} := default;
    }.
  End
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  
  Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_3.
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
<<<<<<< HEAD
    Parameter new : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
    Definition new  : M Self :=
      Pure {| Self._marker := core.marker.PhantomData.Build; |}.
>>>>>>> fa97985 (Update ink submodule)
    
    Global Instance AssociatedFunction_new `{H : State.Trait} :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_3.
  
  Module Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Parameter fmt : forall `{H : State.Trait}, ref Self->
        mut_ref core.fmt.Formatter
        -> M (H := H) core.fmt.Result.
    
    Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt `{H : State.Trait} := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  
  Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_4.
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Parameter insert : forall `{H : State.Trait}, mut_ref Self->
        Q->
        ref R
        -> M (H := H) (core.option.Option u32).
    
    Global Instance Method_insert `{H : State.Trait} :
      Notation.Dot "insert" := {
      Notation.dot := insert;
    }.
    
    Parameter get : forall `{H : State.Trait}, ref Self->
        Q
        -> M (H := H) (core.option.Option V).
    
    Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
      Notation.dot := get;
    }.
    
    Parameter take : forall `{H : State.Trait}, ref Self->
        Q
        -> M (H := H) (core.option.Option V).
    
    Global Instance Method_take `{H : State.Trait} : Notation.Dot "take" := {
      Notation.dot := take;
    }.
    
    Parameter size : forall `{H : State.Trait}, ref Self->
        Q
        -> M (H := H) (core.option.Option u32).
    
    Global Instance Method_size `{H : State.Trait} : Notation.Dot "size" := {
      Notation.dot := size;
    }.
    
    Parameter contains : forall `{H : State.Trait}, ref Self->
        Q
        -> M (H := H) bool.
    
    Global Instance Method_contains `{H : State.Trait} :
      Notation.Dot "contains" := {
      Notation.dot := contains;
    }.
    
    Parameter remove : forall `{H : State.Trait}, ref Self->
        Q
        -> M (H := H) unit.
    
    Global Instance Method_remove `{H : State.Trait} :
      Notation.Dot "remove" := {
      Notation.dot := remove;
    }.
  End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_4.
  
  Module
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Parameter encode : forall `{H : State.Trait}, ref Self->
        mut_ref T
        -> M (H := H) unit.
    
    Global Instance Method_encode `{H : State.Trait} :
      Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    
    Parameter decode : forall `{H : State.Trait}, mut_ref I
        -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
    
    Global Instance AssociatedFunction_decode `{H : State.Trait} :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
      ink_storage_traits.storage.Storable.encode `{H : State.Trait} := encode;
      ink_storage_traits.storage.Storable.decode `{H : State.Trait} := decode;
    }.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  
  Module
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  Section
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    Context {K V Key InnerKey : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V InnerKey.
    
    Definition Type : Set := ink_storage.lazy.mapping.Mapping K V Key.
    
    Definition PreferredKey : Set := InnerKey.
    
    Global Instance I :
        ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
    }.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  
  Module
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition KEY := Pure KeyType::["KEY"].
    
    Global Instance AssociatedFunction_KEY `{H : State.Trait} :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
      ink_storage_traits.storage.StorageKey.KEY `{H : State.Trait} := KEY;
    }.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End mapping.

Module Mapping.
  Record t : Set := {
    _marker : core.marker.PhantomData (unit -> (K * V * KeyType));
  }.
  
  Global Instance Get__marker : Notation.Dot "_marker" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Mapping.
Definition Mapping : Set := Mapping.t.

Module
  Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition Identity : Set := Self.
  
<<<<<<< HEAD
  Parameter type_info : forall `{H : State.Trait}, unit
      -> M (H := H) scale_info.ty.Type.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
=======
  Definition type_info  : M scale_info.ty.Type :=
    let* α0 := scale_info.ty.Type::["builder"] tt in
    let* α1 :=
      scale_info.ty.path.Path::["new"] "Mapping" "ink_storage::lazy::mapping" in
    let* α2 := α0.["path"] α1 in
    let* α3 := scale_info.meta_type tt in
    let* α4 :=
      scale_info.ty.TypeParameter::["new"] "K" (core.option.Option.Some α3) in
    let* α5 := scale_info.meta_type tt in
    let* α6 :=
      scale_info.ty.TypeParameter::["new"] "V" (core.option.Option.Some α5) in
    let* α7 := scale_info.meta_type tt in
    let* α8 :=
      scale_info.ty.TypeParameter::["new"]
        "KeyType"
        (core.option.Option.Some α7) in
    let* α9 := alloc.boxed.Box::["new"] [ α4; α6; α8 ] in
    let* α10 := Slice::["into_vec"] α9 in
    let* α11 := α2.["type_params"] α10 in
    let* α12 :=
      α11.["docs"]
        (addr_of
          [
            "A mapping of key-value pairs directly into contract storage.";
            "";
            "# Important";
            "";
            "The mapping requires its own pre-defined storage key where to store values. By";
            "default, the is automatically calculated using [`AutoKey`](crate::traits::AutoKey)";
            "during compilation. However, anyone can specify a storage key using";
            "[`ManualKey`](crate::traits::ManualKey). Specifying the storage key can be helpful for";
            "upgradeable contracts or you want to be resistant to future changes of storage key";
            "calculation strategy.";
            "";
            "This is an example of how you can do this:";
            "```rust";
            "# use ink::env::{";
            "#     Environment,";
            "#     DefaultEnvironment,";
            "# };";
            "# type AccountId = <DefaultEnvironment as Environment>::AccountId;";
            "";
            "# #[ink::contract]";
            "# mod my_module {";
            "use ink::storage::{";
            "    traits::ManualKey,";
            "    Mapping,";
            "};";
            "";
            "#[ink(storage)]";
            "#[derive(Default)]";
            "pub struct MyContract {";
            "    balances: Mapping<AccountId, Balance, ManualKey<123>>,";
            "}";
            "";
            "impl MyContract {";
            "    #[ink(constructor)]";
            "    pub fn new() -> Self {";
            "        let mut instance = Self::default();";
            "        let caller = Self::env().caller();";
            "        let value: Balance = Default::default();";
            "        instance.balances.insert(&caller, &value);";
            "        instance";
            "    }";
            "";
            "#   #[ink(message)]";
            "#   pub fn my_message(&self) { }";
            "}";
            "# }";
            "```";
            "";
            "More usage examples can be found [in the ink! examples](https://github.com/paritytech/ink-examples)."
          ]) in
    let* α13 := scale_info.build.Fields::["named"] tt in
    let* α14 :=
      α13.["field"]
        (fun f =>
          let* α0 := f.["ty"] in
          let* α1 := α0.["name"] "_marker" in
          α1.["type_name"] "PhantomData<fn() ->(K, V, KeyType)>") in
    α12.["composite"] α14.
  
  Global Instance AssociatedFunction_type_info :
>>>>>>> fa97985 (Update ink submodule)
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module
  Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
<<<<<<< HEAD
  Parameter default : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
  Definition default  : M Self := Self::["new"] tt.
>>>>>>> fa97985 (Update ink submodule)
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_5.
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
<<<<<<< HEAD
  Parameter new : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
  Definition new  : M Self :=
    Pure {| Self._marker := core.marker.PhantomData.Build; |}.
>>>>>>> fa97985 (Update ink submodule)
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_5.

Module Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Parameter fmt : forall `{H : State.Trait}, ref Self->
      mut_ref core.fmt.Formatter
      -> M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_6.
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Parameter insert : forall `{H : State.Trait}, mut_ref Self->
      Q->
      ref R
      -> M (H := H) (core.option.Option u32).
  
  Global Instance Method_insert `{H : State.Trait} : Notation.Dot "insert" := {
    Notation.dot := insert;
  }.
  
  Parameter get : forall `{H : State.Trait}, ref Self->
      Q
      -> M (H := H) (core.option.Option V).
  
  Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Parameter take : forall `{H : State.Trait}, ref Self->
      Q
      -> M (H := H) (core.option.Option V).
  
  Global Instance Method_take `{H : State.Trait} : Notation.Dot "take" := {
    Notation.dot := take;
  }.
  
  Parameter size : forall `{H : State.Trait}, ref Self->
      Q
      -> M (H := H) (core.option.Option u32).
  
  Global Instance Method_size `{H : State.Trait} : Notation.Dot "size" := {
    Notation.dot := size;
  }.
  
  Parameter contains : forall `{H : State.Trait}, ref Self->
      Q
      -> M (H := H) bool.
  
  Global Instance Method_contains `{H : State.Trait} :
    Notation.Dot "contains" := {
    Notation.dot := contains;
  }.
  
  Parameter remove : forall `{H : State.Trait}, ref Self-> Q -> M (H := H) unit.
  
  Global Instance Method_remove `{H : State.Trait} : Notation.Dot "remove" := {
    Notation.dot := remove;
  }.
End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_6.

Module
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Parameter encode : forall `{H : State.Trait}, ref Self->
      mut_ref T
      -> M (H := H) unit.
  
  Global Instance Method_encode `{H : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter decode : forall `{H : State.Trait}, mut_ref I
      -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
    ink_storage_traits.storage.Storable.encode `{H : State.Trait} := encode;
    ink_storage_traits.storage.Storable.decode `{H : State.Trait} := decode;
  }.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
Section
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  Context {K V Key InnerKey : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V InnerKey.
  
  Definition Type : Set := ink_storage.lazy.mapping.Mapping K V Key.
  
  Definition PreferredKey : Set := InnerKey.
  
  Global Instance I :
      ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
  }.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.

Module
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition KEY := Pure KeyType::["KEY"].
  
  Global Instance AssociatedFunction_KEY `{H : State.Trait} :
    Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
    ink_storage_traits.storage.StorageKey.KEY `{H : State.Trait} := KEY;
  }.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Parameter layout : forall `{H : State.Trait}, ref ink_primitives.key.Key
      -> M (H := H) ink_metadata.layout.Layout.
  
  Global Instance AssociatedFunction_layout `{H : State.Trait} :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout `{H : State.Trait} := layout;
  }.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module Lazy.
  Record t : Set := {
    _marker : core.marker.PhantomData (unit -> (V * KeyType));
  }.
  
  Global Instance Get__marker : Notation.Dot "_marker" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Lazy.
Definition Lazy : Set := Lazy.t.

Module Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.
Section Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition Identity : Set := Self.
  
<<<<<<< HEAD
  Parameter type_info : forall `{H : State.Trait}, unit
      -> M (H := H) scale_info.ty.Type.
  
  Global Instance AssociatedFunction_type_info `{H : State.Trait} :
=======
  Definition type_info  : M scale_info.ty.Type :=
    let* α0 := scale_info.ty.Type::["builder"] tt in
    let* α1 := scale_info.ty.path.Path::["new"] "Lazy" "ink_storage::lazy" in
    let* α2 := α0.["path"] α1 in
    let* α3 := scale_info.meta_type tt in
    let* α4 :=
      scale_info.ty.TypeParameter::["new"] "V" (core.option.Option.Some α3) in
    let* α5 := scale_info.meta_type tt in
    let* α6 :=
      scale_info.ty.TypeParameter::["new"]
        "KeyType"
        (core.option.Option.Some α5) in
    let* α7 := alloc.boxed.Box::["new"] [ α4; α6 ] in
    let* α8 := Slice::["into_vec"] α7 in
    let* α9 := α2.["type_params"] α8 in
    let* α10 :=
      α9.["docs"]
        (addr_of
          [
            "A simple wrapper around a type to store it in a separate storage cell under its own";
            "storage key. If you want to update the value, first you need to";
            "[`get`](crate::Lazy::get) it, update the value, and then call";
            "[`set`](crate::Lazy::set) with the new value.";
            "";
            "# Important";
            "";
            "The wrapper requires its own pre-defined storage key in order to determine where it";
            "stores value. By default, the is automatically calculated using";
            "[`AutoKey`](crate::traits::AutoKey) during compilation. However, anyone can specify a";
            "storage key using [`ManualKey`](crate::traits::ManualKey). Specifying the storage key";
            "can be helpful for upgradeable contracts or you want to be resistant to future changes";
            "of storage key calculation strategy.";
            "";
            "# Note";
            "";
            "If the contract has two or more `Lazy` with the same storage key, modifying the value";
            "of one of them will modify others.";
            "";
            "This is an example of how you can do this:";
            "```rust";
            "# use ink::env::{";
            "#     Environment,";
            "#     DefaultEnvironment,";
            "# };";
            "# type AccountId = <DefaultEnvironment as Environment>::AccountId;";
            "";
            "# #[ink::contract]";
            "# mod my_module {";
            "use ink::storage::{";
            "    traits::ManualKey,";
            "    Lazy,";
            "};";
            "";
            "#[ink(storage)]";
            "#[derive(Default)]";
            "pub struct MyContract {";
            "    owner: Lazy<AccountId>,";
            "    balance: Lazy<Balance, ManualKey<123>>,";
            "}";
            "";
            "impl MyContract {";
            "    #[ink(constructor)]";
            "    pub fn new() -> Self {";
            "        let mut instance = Self::default();";
            "        let caller = Self::env().caller();";
            "        instance.owner.set(&caller);";
            "        instance.balance.set(&123456);";
            "        instance";
            "    }";
            "";
            "#   #[ink(message)]";
            "#   pub fn my_message(&self) { }";
            "}";
            "# }";
            "```"
          ]) in
    let* α11 := scale_info.build.Fields::["named"] tt in
    let* α12 :=
      α11.["field"]
        (fun f =>
          let* α0 := f.["ty"] in
          let* α1 := α0.["name"] "_marker" in
          α1.["type_name"] "PhantomData<fn() ->(V, KeyType)>") in
    α10.["composite"] α12.
  
  Global Instance AssociatedFunction_type_info :
>>>>>>> fa97985 (Update ink submodule)
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info `{H : State.Trait} := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.

Module Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
Section Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
<<<<<<< HEAD
  Parameter default : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
  Definition default  : M Self := Self::["new"] tt.
>>>>>>> fa97985 (Update ink submodule)
  
  Global Instance AssociatedFunction_default `{H : State.Trait} :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default `{H : State.Trait} := default;
  }.
End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.

Module Impl_ink_storage_lazy_Lazy_V_KeyType_4.
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
<<<<<<< HEAD
  Parameter new : forall `{H : State.Trait}, unit -> M (H := H) Self.
=======
  Definition new  : M Self :=
    Pure {| Self._marker := core.marker.PhantomData.Build; |}.
>>>>>>> fa97985 (Update ink submodule)
  
  Global Instance AssociatedFunction_new `{H : State.Trait} :
    Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_storage_lazy_Lazy_V_KeyType_4.

Module Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
Section Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Parameter fmt : forall `{H : State.Trait}, ref Self->
      mut_ref core.fmt.Formatter
      -> M (H := H) core.fmt.Result.
  
  Global Instance Method_fmt `{H : State.Trait} : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt `{H : State.Trait} := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.

Module Impl_ink_storage_lazy_Lazy_V_KeyType_5.
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Parameter get : forall `{H : State.Trait}, ref Self
      -> M (H := H) (core.option.Option V).
  
  Global Instance Method_get `{H : State.Trait} : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Parameter set : forall `{H : State.Trait}, mut_ref Self->
      ref V
      -> M (H := H) unit.
  
  Global Instance Method_set `{H : State.Trait} : Notation.Dot "set" := {
    Notation.dot := set;
  }.
End Impl_ink_storage_lazy_Lazy_V_KeyType_5.

Module Impl_ink_storage_lazy_Lazy_V_KeyType_6.
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Parameter get_or_default : forall `{H : State.Trait}, ref Self
      -> M (H := H) V.
  
  Global Instance Method_get_or_default `{H : State.Trait} :
    Notation.Dot "get_or_default" := {
    Notation.dot := get_or_default;
  }.
End Impl_ink_storage_lazy_Lazy_V_KeyType_6.

Module
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
Section
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Parameter encode : forall `{H : State.Trait}, ref Self->
      mut_ref T
      -> M (H := H) unit.
  
  Global Instance Method_encode `{H : State.Trait} : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Parameter decode : forall `{H : State.Trait}, mut_ref I
      -> M (H := H) (core.result.Result Self parity_scale_codec.error.Error).
  
  Global Instance AssociatedFunction_decode `{H : State.Trait} :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
    ink_storage_traits.storage.Storable.encode `{H : State.Trait} := encode;
    ink_storage_traits.storage.Storable.decode `{H : State.Trait} := decode;
  }.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.

Module
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
Section
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  Context {V Key InnerKey : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V InnerKey.
  
  Definition Type : Set := ink_storage.lazy.Lazy ImplV.Type Key.
  
  Definition PreferredKey : Set := InnerKey.
  
  Global Instance I :
      ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
  }.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.

Module
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
Section
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition KEY := Pure KeyType::["KEY"].
  
  Global Instance AssociatedFunction_KEY `{H : State.Trait} :
    Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
    ink_storage_traits.storage.StorageKey.KEY `{H : State.Trait} := KEY;
  }.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.

Module
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
Section
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Parameter layout : forall `{H : State.Trait}, ref ink_primitives.key.Key
      -> M (H := H) ink_metadata.layout.Layout.
  
  Global Instance AssociatedFunction_layout `{H : State.Trait} :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout `{H : State.Trait} := layout;
  }.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
