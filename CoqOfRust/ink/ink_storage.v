(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(* #[allow(dead_code)] - module was ignored by the compiler *)
Module lazy.
  Module mapping.
    Module Mapping.
      Record t : Set := {
        _marker : core.marker.PhantomData (unit -> (K * V * KeyType));
      }.
      
      Global Instance Get__marker : Notation.Dot "_marker" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Mapping.
    Definition Mapping : Set := Mapping.t.
    
    Module
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition default  : M Self := Self::["new"] .
      
      Global Instance AssociatedFunction_default :
        Notation.DoubleColon Self "default" := {
        Notation.double_colon := default;
      }.
      
      Global Instance I : core.default.Default.Trait Self := {
        core.default.Default.default := default;
      }.
    End
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End
      Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition new  : M Self :=
        Pure {| Self._marker := core.marker.PhantomData.Build; |}.
      
      Global Instance AssociatedFunction_new :
        Notation.DoubleColon Self "new" := {
        Notation.double_colon := new;
      }.
    End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition fmt
          (self : ref Self)
          (f : mut_ref core.fmt.Formatter)
          : M core.fmt.Result :=
        let* α0 := f.["debug_struct"] "Mapping" in
        let* α1 := α0.["field"] "key" (addr_of KeyType::["KEY"]) in
        α1.["finish"].
      
      Global Instance Method_fmt : Notation.Dot "fmt" := {
        Notation.dot := fmt;
      }.
      
      Global Instance I : core.fmt.Debug.Trait Self := {
        core.fmt.Debug.fmt := fmt;
      }.
    End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_2.
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition insert
          (self : mut_ref Self)
          (key : Q)
          (value : ref R)
          : M (core.option.Option u32) :=
        ink_env.api.set_contract_storage
          (addr_of (addr_of KeyType::["KEY"], key))
          value.
      
      Global Instance Method_insert : Notation.Dot "insert" := {
        Notation.dot := insert;
      }.
      
      Definition get (self : ref Self) (key : Q) : M (core.option.Option V) :=
        let* α0 :=
          ink_env.api.get_contract_storage
            (addr_of (addr_of KeyType::["KEY"], key)) in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Failed to get value in Mapping: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_get : Notation.Dot "get" := {
        Notation.dot := get;
      }.
      
      Definition take (self : ref Self) (key : Q) : M (core.option.Option V) :=
        let* α0 :=
          ink_env.api.take_contract_storage
            (addr_of (addr_of KeyType::["KEY"], key)) in
        α0.["unwrap_or_else"]
          (fun error =>
            let* α0 := format_argument::["new_debug"] (addr_of error) in
            let* α1 :=
              format_arguments::["new_v1"]
                (addr_of [ "Failed to take value in Mapping: " ])
                (addr_of [ α0 ]) in
            core.panicking.panic_fmt α1).
      
      Global Instance Method_take : Notation.Dot "take" := {
        Notation.dot := take;
      }.
      
      Definition size
          (self : ref Self)
          (key : Q)
          : M (core.option.Option u32) :=
        ink_env.api.contains_contract_storage
          (addr_of (addr_of KeyType::["KEY"], key)).
      
      Global Instance Method_size : Notation.Dot "size" := {
        Notation.dot := size;
      }.
      
      Definition contains (self : ref Self) (key : Q) : M bool :=
        let* α0 :=
          ink_env.api.contains_contract_storage
            (addr_of (addr_of KeyType::["KEY"], key)) in
        α0.["is_some"].
      
      Global Instance Method_contains : Notation.Dot "contains" := {
        Notation.dot := contains;
      }.
      
      Definition remove (self : ref Self) (key : Q) : M unit :=
        let* _ :=
          ink_env.api.clear_contract_storage
            (addr_of (addr_of KeyType::["KEY"], key)) in
        Pure tt.
      
      Global Instance Method_remove : Notation.Dot "remove" := {
        Notation.dot := remove;
      }.
    End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_2.
    
    Module
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition encode (self : ref Self) (_dest : mut_ref T) : M unit :=
        Pure tt.
      
      Global Instance Method_encode : Notation.Dot "encode" := {
        Notation.dot := encode;
      }.
      
      Definition decode
          (_input : mut_ref I)
          : M (core.result.Result Self parity_scale_codec.error.Error) :=
        let* α0 := core.default.Default.default  in
        Pure (core.result.Result.Ok α0).
      
      Global Instance AssociatedFunction_decode :
        Notation.DoubleColon Self "decode" := {
        Notation.double_colon := decode;
      }.
      
      Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
        ink_storage_traits.storage.Storable.encode := encode;
        ink_storage_traits.storage.Storable.decode := decode;
      }.
    End
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End
      Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    
    Module
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    Section
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
      Context {K V Key InnerKey : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V InnerKey.
      
      Definition Type : Set := ink_storage.lazy.mapping.Mapping K V Key.
      
      Definition PreferredKey : Set := InnerKey.
      
      Global Instance I :
          ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
      }.
    End
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    End
      Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    
    Module
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Section
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
      Context {K V KeyType : Set}.
      
      Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
      
      Definition KEY := Pure KeyType::["KEY"].
      
      Global Instance AssociatedFunction_KEY :
        Notation.DoubleColon Self "KEY" := {
        Notation.double_colon := KEY;
      }.
      
      Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
        ink_storage_traits.storage.StorageKey.KEY := KEY;
      }.
    End
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    End
      Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End mapping.
  
  Module Lazy.
    Record t : Set := {
      _marker : core.marker.PhantomData (unit -> (V * KeyType));
    }.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Lazy.
  Definition Lazy : Set := Lazy.t.
  
  Module Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  Section Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition default  : M Self := Self::["new"] .
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  
  Module Impl_ink_storage_lazy_Lazy_V_KeyType.
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition new  : M Self :=
      Pure {| Self._marker := core.marker.PhantomData.Build; |}.
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_storage_lazy_Lazy_V_KeyType.
  
  Module Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  Section Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M core.fmt.Result :=
      let* α0 := f.["debug_struct"] "Lazy" in
      let* α1 := α0.["field"] "key" (addr_of KeyType::["KEY"]) in
      α1.["finish"].
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  
  Module Impl_ink_storage_lazy_Lazy_V_KeyType_2.
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition get (self : ref Self) : M (core.option.Option V) :=
      let* α0 := ink_env.api.get_contract_storage (addr_of KeyType::["KEY"]) in
      match α0 with
      | core.result.Result.Ok core.option.Option.Some value =>
        Pure (core.option.Option.Some value)
      | _ => Pure core.option.Option.None
      end.
    
    Global Instance Method_get : Notation.Dot "get" := {
      Notation.dot := get;
    }.
    
    Definition set (self : mut_ref Self) (value : ref V) : M unit :=
      let* _ :=
        ink_env.api.set_contract_storage (addr_of KeyType::["KEY"]) value in
      Pure tt.
    
    Global Instance Method_set : Notation.Dot "set" := {
      Notation.dot := set;
    }.
  End Impl_ink_storage_lazy_Lazy_V_KeyType_2.
  
  Module Impl_ink_storage_lazy_Lazy_V_KeyType_3.
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition get_or_default (self : ref Self) : M V :=
      let* α0 := ink_env.api.get_contract_storage (addr_of KeyType::["KEY"]) in
      match α0 with
      | core.result.Result.Ok core.option.Option.Some value => Pure value
      | _ => core.default.Default.default 
      end.
    
    Global Instance Method_get_or_default : Notation.Dot "get_or_default" := {
      Notation.dot := get_or_default;
    }.
  End Impl_ink_storage_lazy_Lazy_V_KeyType_3.
  
  Module
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition encode (self : ref Self) (_dest : mut_ref T) : M unit := Pure tt.
    
    Global Instance Method_encode : Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    
    Definition decode
        (_input : mut_ref I)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := core.default.Default.default  in
      Pure (core.result.Result.Ok α0).
    
    Global Instance AssociatedFunction_decode :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
      ink_storage_traits.storage.Storable.encode := encode;
      ink_storage_traits.storage.Storable.decode := decode;
    }.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  
  Module
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  Section
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
    Context {V Key InnerKey : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V InnerKey.
    
    Definition Type : Set := ink_storage.lazy.Lazy ImplV.Type Key.
    
    Definition PreferredKey : Set := InnerKey.
    
    Global Instance I :
        ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
    }.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  
  Module
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
    Context {V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.Lazy V KeyType.
    
    Definition KEY := Pure KeyType::["KEY"].
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
      ink_storage_traits.storage.StorageKey.KEY := KEY;
    }.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
End lazy.

Module mapping.
  Module Mapping.
    Record t : Set := {
      _marker : core.marker.PhantomData (unit -> (K * V * KeyType));
    }.
    
    Global Instance Get__marker : Notation.Dot "_marker" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Mapping.
  Definition Mapping : Set := Mapping.t.
  
  Module
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition default  : M Self := Self::["new"] .
    
    Global Instance AssociatedFunction_default :
      Notation.DoubleColon Self "default" := {
      Notation.double_colon := default;
    }.
    
    Global Instance I : core.default.Default.Trait Self := {
      core.default.Default.default := default;
    }.
  End
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End
    Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  
  Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_3.
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition new  : M Self :=
      Pure {| Self._marker := core.marker.PhantomData.Build; |}.
    
    Global Instance AssociatedFunction_new :
      Notation.DoubleColon Self "new" := {
      Notation.double_colon := new;
    }.
  End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_3.
  
  Module Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition fmt
        (self : ref Self)
        (f : mut_ref core.fmt.Formatter)
        : M core.fmt.Result :=
      let* α0 := f.["debug_struct"] "Mapping" in
      let* α1 := α0.["field"] "key" (addr_of KeyType::["KEY"]) in
      α1.["finish"].
    
    Global Instance Method_fmt : Notation.Dot "fmt" := {
      Notation.dot := fmt;
    }.
    
    Global Instance I : core.fmt.Debug.Trait Self := {
      core.fmt.Debug.fmt := fmt;
    }.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  
  Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_4.
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition insert
        (self : mut_ref Self)
        (key : Q)
        (value : ref R)
        : M (core.option.Option u32) :=
      ink_env.api.set_contract_storage
        (addr_of (addr_of KeyType::["KEY"], key))
        value.
    
    Global Instance Method_insert : Notation.Dot "insert" := {
      Notation.dot := insert;
    }.
    
    Definition get (self : ref Self) (key : Q) : M (core.option.Option V) :=
      let* α0 :=
        ink_env.api.get_contract_storage
          (addr_of (addr_of KeyType::["KEY"], key)) in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Failed to get value in Mapping: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_get : Notation.Dot "get" := {
      Notation.dot := get;
    }.
    
    Definition take (self : ref Self) (key : Q) : M (core.option.Option V) :=
      let* α0 :=
        ink_env.api.take_contract_storage
          (addr_of (addr_of KeyType::["KEY"], key)) in
      α0.["unwrap_or_else"]
        (fun error =>
          let* α0 := format_argument::["new_debug"] (addr_of error) in
          let* α1 :=
            format_arguments::["new_v1"]
              (addr_of [ "Failed to take value in Mapping: " ])
              (addr_of [ α0 ]) in
          core.panicking.panic_fmt α1).
    
    Global Instance Method_take : Notation.Dot "take" := {
      Notation.dot := take;
    }.
    
    Definition size (self : ref Self) (key : Q) : M (core.option.Option u32) :=
      ink_env.api.contains_contract_storage
        (addr_of (addr_of KeyType::["KEY"], key)).
    
    Global Instance Method_size : Notation.Dot "size" := {
      Notation.dot := size;
    }.
    
    Definition contains (self : ref Self) (key : Q) : M bool :=
      let* α0 :=
        ink_env.api.contains_contract_storage
          (addr_of (addr_of KeyType::["KEY"], key)) in
      α0.["is_some"].
    
    Global Instance Method_contains : Notation.Dot "contains" := {
      Notation.dot := contains;
    }.
    
    Definition remove (self : ref Self) (key : Q) : M unit :=
      let* _ :=
        ink_env.api.clear_contract_storage
          (addr_of (addr_of KeyType::["KEY"], key)) in
      Pure tt.
    
    Global Instance Method_remove : Notation.Dot "remove" := {
      Notation.dot := remove;
    }.
  End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_4.
  
  Module
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition encode (self : ref Self) (_dest : mut_ref T) : M unit := Pure tt.
    
    Global Instance Method_encode : Notation.Dot "encode" := {
      Notation.dot := encode;
    }.
    
    Definition decode
        (_input : mut_ref I)
        : M (core.result.Result Self parity_scale_codec.error.Error) :=
      let* α0 := core.default.Default.default  in
      Pure (core.result.Result.Ok α0).
    
    Global Instance AssociatedFunction_decode :
      Notation.DoubleColon Self "decode" := {
      Notation.double_colon := decode;
    }.
    
    Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
      ink_storage_traits.storage.Storable.encode := encode;
      ink_storage_traits.storage.Storable.decode := decode;
    }.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End
    Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  
  Module
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  Section
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
    Context {K V Key InnerKey : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V InnerKey.
    
    Definition Type : Set := ink_storage.lazy.mapping.Mapping K V Key.
    
    Definition PreferredKey : Set := InnerKey.
    
    Global Instance I :
        ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
    }.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  End
    Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  
  Module
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Section
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
    Context {K V KeyType : Set}.
    
    Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
    
    Definition KEY := Pure KeyType::["KEY"].
    
    Global Instance AssociatedFunction_KEY :
      Notation.DoubleColon Self "KEY" := {
      Notation.double_colon := KEY;
    }.
    
    Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
      ink_storage_traits.storage.StorageKey.KEY := KEY;
    }.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  End
    Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End mapping.

Module Mapping.
  Record t : Set := {
    _marker : core.marker.PhantomData (unit -> (K * V * KeyType));
  }.
  
  Global Instance Get__marker : Notation.Dot "_marker" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Mapping.
Definition Mapping : Set := Mapping.t.

Module
  Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition Identity : Set := Self.
  
  Definition type_info  : M scale_info.ty.Type :=
    let* α0 := scale_info.ty.Type::["builder"]  in
    let* α1 :=
      scale_info.ty.path.Path::["new"] "Mapping" "ink_storage::lazy::mapping" in
    let* α2 := α0.["path"] α1 in
    let* α3 := scale_info.meta_type  in
    let* α4 :=
      scale_info.ty.TypeParameter::["new"] "K" (core.option.Option.Some α3) in
    let* α5 := scale_info.meta_type  in
    let* α6 :=
      scale_info.ty.TypeParameter::["new"] "V" (core.option.Option.Some α5) in
    let* α7 := scale_info.meta_type  in
    let* α8 :=
      scale_info.ty.TypeParameter::["new"]
        "KeyType"
        (core.option.Option.Some α7) in
    let* α9 := alloc.boxed.Box::["new"] [ α4; α6; α8 ] in
    let* α10 := Slice::["into_vec"] α9 in
    let* α11 := α2.["type_params"] α10 in
    let* α12 :=
      α11.["docs"]
        (addr_of
          [
            "A mapping of key-value pairs directly into contract storage.";
            "";
            "# Important";
            "";
            "The mapping requires its own pre-defined storage key where to store values. By";
            "default, the is automatically calculated using [`AutoKey`](crate::traits::AutoKey)";
            "during compilation. However, anyone can specify a storage key using";
            "[`ManualKey`](crate::traits::ManualKey). Specifying the storage key can be helpful for";
            "upgradeable contracts or you want to be resistant to future changes of storage key";
            "calculation strategy.";
            "";
            "This is an example of how you can do this:";
            "```rust";
            "# use ink::env::{";
            "#     Environment,";
            "#     DefaultEnvironment,";
            "# };";
            "# type AccountId = <DefaultEnvironment as Environment>::AccountId;";
            "";
            "# #[ink::contract]";
            "# mod my_module {";
            "use ink::storage::{";
            "    traits::ManualKey,";
            "    Mapping,";
            "};";
            "";
            "#[ink(storage)]";
            "#[derive(Default)]";
            "pub struct MyContract {";
            "    balances: Mapping<AccountId, Balance, ManualKey<123>>,";
            "}";
            "";
            "impl MyContract {";
            "    #[ink(constructor)]";
            "    pub fn new() -> Self {";
            "        let mut instance = Self::default();";
            "        let caller = Self::env().caller();";
            "        let value: Balance = Default::default();";
            "        instance.balances.insert(&caller, &value);";
            "        instance";
            "    }";
            "";
            "#   #[ink(message)]";
            "#   pub fn my_message(&self) { }";
            "}";
            "# }";
            "```";
            "";
            "More usage examples can be found [in the ink! examples](https://github.com/paritytech/ink-examples)."
          ]) in
    let* α13 := scale_info.build.Fields::["named"]  in
    let* α14 :=
      α13.["field"]
        (fun f =>
          let* α0 := f.["ty"] in
          let* α1 := α0.["name"] "_marker" in
          α1.["type_name"] "PhantomData<fn() ->(K, V, KeyType)>") in
    α12.["composite"] α14.
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module
  Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition default  : M Self := Self::["new"] .
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End Impl_core_default_Default_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_5.
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition new  : M Self :=
    Pure {| Self._marker := core.marker.PhantomData.Build; |}.
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_5.

Module Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    let* α0 := f.["debug_struct"] "Mapping" in
    let* α1 := α0.["field"] "key" (addr_of KeyType::["KEY"]) in
    α1.["finish"].
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End Impl_core_fmt_Debug_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_6.
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition insert
      (self : mut_ref Self)
      (key : Q)
      (value : ref R)
      : M (core.option.Option u32) :=
    ink_env.api.set_contract_storage
      (addr_of (addr_of KeyType::["KEY"], key))
      value.
  
  Global Instance Method_insert : Notation.Dot "insert" := {
    Notation.dot := insert;
  }.
  
  Definition get (self : ref Self) (key : Q) : M (core.option.Option V) :=
    let* α0 :=
      ink_env.api.get_contract_storage
        (addr_of (addr_of KeyType::["KEY"], key)) in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Failed to get value in Mapping: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Definition take (self : ref Self) (key : Q) : M (core.option.Option V) :=
    let* α0 :=
      ink_env.api.take_contract_storage
        (addr_of (addr_of KeyType::["KEY"], key)) in
    α0.["unwrap_or_else"]
      (fun error =>
        let* α0 := format_argument::["new_debug"] (addr_of error) in
        let* α1 :=
          format_arguments::["new_v1"]
            (addr_of [ "Failed to take value in Mapping: " ])
            (addr_of [ α0 ]) in
        core.panicking.panic_fmt α1).
  
  Global Instance Method_take : Notation.Dot "take" := {
    Notation.dot := take;
  }.
  
  Definition size (self : ref Self) (key : Q) : M (core.option.Option u32) :=
    ink_env.api.contains_contract_storage
      (addr_of (addr_of KeyType::["KEY"], key)).
  
  Global Instance Method_size : Notation.Dot "size" := {
    Notation.dot := size;
  }.
  
  Definition contains (self : ref Self) (key : Q) : M bool :=
    let* α0 :=
      ink_env.api.contains_contract_storage
        (addr_of (addr_of KeyType::["KEY"], key)) in
    α0.["is_some"].
  
  Global Instance Method_contains : Notation.Dot "contains" := {
    Notation.dot := contains;
  }.
  
  Definition remove (self : ref Self) (key : Q) : M unit :=
    let* _ :=
      ink_env.api.clear_contract_storage
        (addr_of (addr_of KeyType::["KEY"], key)) in
    Pure tt.
  
  Global Instance Method_remove : Notation.Dot "remove" := {
    Notation.dot := remove;
  }.
End Impl_ink_storage_lazy_mapping_Mapping_K_V_KeyType_6.

Module
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition encode (self : ref Self) (_dest : mut_ref T) : M unit := Pure tt.
  
  Global Instance Method_encode : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Definition decode
      (_input : mut_ref I)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    let* α0 := core.default.Default.default  in
    Pure (core.result.Result.Ok α0).
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
    ink_storage_traits.storage.Storable.encode := encode;
    ink_storage_traits.storage.Storable.decode := decode;
  }.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
Section
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
  Context {K V Key InnerKey : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V InnerKey.
  
  Definition Type : Set := ink_storage.lazy.mapping.Mapping K V Key.
  
  Definition PreferredKey : Set := InnerKey.
  
  Global Instance I :
      ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
  }.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_mapping_Mapping_K_V_InnerKey.

Module
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition KEY := Pure KeyType::["KEY"].
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
    ink_storage_traits.storage.StorageKey.KEY := KEY;
  }.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
Section
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
  Context {K V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.mapping.Mapping K V KeyType.
  
  Definition layout
      (Pattern : ref ink_primitives.key.Key)
      : M ink_metadata.layout.Layout :=
    let* α0 :=
      ink_metadata.layout.LayoutKey::["from"] (addr_of KeyType::["KEY"]) in
    let* α1 :=
      ink_storage_traits.layout.StorageLayout.layout
        (addr_of KeyType::["KEY"]) in
    let* α2 := ink_metadata.layout.RootLayout::["new"] α0 α1 in
    Pure (ink_metadata.layout.Layout.Root α2).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout := layout;
  }.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_mapping_Mapping_K_V_KeyType.

Module Lazy.
  Record t : Set := {
    _marker : core.marker.PhantomData (unit -> (V * KeyType));
  }.
  
  Global Instance Get__marker : Notation.Dot "_marker" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End Lazy.
Definition Lazy : Set := Lazy.t.

Module Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.
Section Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition Identity : Set := Self.
  
  Definition type_info  : M scale_info.ty.Type :=
    let* α0 := scale_info.ty.Type::["builder"]  in
    let* α1 := scale_info.ty.path.Path::["new"] "Lazy" "ink_storage::lazy" in
    let* α2 := α0.["path"] α1 in
    let* α3 := scale_info.meta_type  in
    let* α4 :=
      scale_info.ty.TypeParameter::["new"] "V" (core.option.Option.Some α3) in
    let* α5 := scale_info.meta_type  in
    let* α6 :=
      scale_info.ty.TypeParameter::["new"]
        "KeyType"
        (core.option.Option.Some α5) in
    let* α7 := alloc.boxed.Box::["new"] [ α4; α6 ] in
    let* α8 := Slice::["into_vec"] α7 in
    let* α9 := α2.["type_params"] α8 in
    let* α10 :=
      α9.["docs"]
        (addr_of
          [
            "A simple wrapper around a type to store it in a separate storage cell under its own";
            "storage key. If you want to update the value, first you need to";
            "[`get`](crate::Lazy::get) it, update the value, and then call";
            "[`set`](crate::Lazy::set) with the new value.";
            "";
            "# Important";
            "";
            "The wrapper requires its own pre-defined storage key in order to determine where it";
            "stores value. By default, the is automatically calculated using";
            "[`AutoKey`](crate::traits::AutoKey) during compilation. However, anyone can specify a";
            "storage key using [`ManualKey`](crate::traits::ManualKey). Specifying the storage key";
            "can be helpful for upgradeable contracts or you want to be resistant to future changes";
            "of storage key calculation strategy.";
            "";
            "# Note";
            "";
            "If the contract has two or more `Lazy` with the same storage key, modifying the value";
            "of one of them will modify others.";
            "";
            "This is an example of how you can do this:";
            "```rust";
            "# use ink::env::{";
            "#     Environment,";
            "#     DefaultEnvironment,";
            "# };";
            "# type AccountId = <DefaultEnvironment as Environment>::AccountId;";
            "";
            "# #[ink::contract]";
            "# mod my_module {";
            "use ink::storage::{";
            "    traits::ManualKey,";
            "    Lazy,";
            "};";
            "";
            "#[ink(storage)]";
            "#[derive(Default)]";
            "pub struct MyContract {";
            "    owner: Lazy<AccountId>,";
            "    balance: Lazy<Balance, ManualKey<123>>,";
            "}";
            "";
            "impl MyContract {";
            "    #[ink(constructor)]";
            "    pub fn new() -> Self {";
            "        let mut instance = Self::default();";
            "        let caller = Self::env().caller();";
            "        instance.owner.set(&caller);";
            "        instance.balance.set(&123456);";
            "        instance";
            "    }";
            "";
            "#   #[ink(message)]";
            "#   pub fn my_message(&self) { }";
            "}";
            "# }";
            "```"
          ]) in
    let* α11 := scale_info.build.Fields::["named"]  in
    let* α12 :=
      α11.["field"]
        (fun f =>
          let* α0 := f.["ty"] in
          let* α1 := α0.["name"] "_marker" in
          α1.["type_name"] "PhantomData<fn() ->(V, KeyType)>") in
    α10.["composite"] α12.
  
  Global Instance AssociatedFunction_type_info :
    Notation.DoubleColon Self "type_info" := {
    Notation.double_colon := type_info;
  }.
  
  Global Instance I : scale_info.TypeInfo.Trait Self := {
    scale_info.TypeInfo.type_info := type_info;
  }.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.
End Impl_scale_info_TypeInfo_for_ink_storage_lazy_Lazy_V_KeyType.

Module Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
Section Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition default  : M Self := Self::["new"] .
  
  Global Instance AssociatedFunction_default :
    Notation.DoubleColon Self "default" := {
    Notation.double_colon := default;
  }.
  
  Global Instance I : core.default.Default.Trait Self := {
    core.default.Default.default := default;
  }.
End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.
End Impl_core_default_Default_for_ink_storage_lazy_Lazy_V_KeyType.

Module Impl_ink_storage_lazy_Lazy_V_KeyType_4.
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition new  : M Self :=
    Pure {| Self._marker := core.marker.PhantomData.Build; |}.
  
  Global Instance AssociatedFunction_new : Notation.DoubleColon Self "new" := {
    Notation.double_colon := new;
  }.
End Impl_ink_storage_lazy_Lazy_V_KeyType_4.

Module Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
Section Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition fmt
      (self : ref Self)
      (f : mut_ref core.fmt.Formatter)
      : M core.fmt.Result :=
    let* α0 := f.["debug_struct"] "Lazy" in
    let* α1 := α0.["field"] "key" (addr_of KeyType::["KEY"]) in
    α1.["finish"].
  
  Global Instance Method_fmt : Notation.Dot "fmt" := {
    Notation.dot := fmt;
  }.
  
  Global Instance I : core.fmt.Debug.Trait Self := {
    core.fmt.Debug.fmt := fmt;
  }.
End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.
End Impl_core_fmt_Debug_for_ink_storage_lazy_Lazy_V_KeyType.

Module Impl_ink_storage_lazy_Lazy_V_KeyType_5.
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition get (self : ref Self) : M (core.option.Option V) :=
    let* α0 := ink_env.api.get_contract_storage (addr_of KeyType::["KEY"]) in
    match α0 with
    | core.result.Result.Ok core.option.Option.Some value =>
      Pure (core.option.Option.Some value)
    | _ => Pure core.option.Option.None
    end.
  
  Global Instance Method_get : Notation.Dot "get" := {
    Notation.dot := get;
  }.
  
  Definition set (self : mut_ref Self) (value : ref V) : M unit :=
    let* _ :=
      ink_env.api.set_contract_storage (addr_of KeyType::["KEY"]) value in
    Pure tt.
  
  Global Instance Method_set : Notation.Dot "set" := {
    Notation.dot := set;
  }.
End Impl_ink_storage_lazy_Lazy_V_KeyType_5.

Module Impl_ink_storage_lazy_Lazy_V_KeyType_6.
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition get_or_default (self : ref Self) : M V :=
    let* α0 := ink_env.api.get_contract_storage (addr_of KeyType::["KEY"]) in
    match α0 with
    | core.result.Result.Ok core.option.Option.Some value => Pure value
    | _ => core.default.Default.default 
    end.
  
  Global Instance Method_get_or_default : Notation.Dot "get_or_default" := {
    Notation.dot := get_or_default;
  }.
End Impl_ink_storage_lazy_Lazy_V_KeyType_6.

Module
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
Section
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition encode (self : ref Self) (_dest : mut_ref T) : M unit := Pure tt.
  
  Global Instance Method_encode : Notation.Dot "encode" := {
    Notation.dot := encode;
  }.
  
  Definition decode
      (_input : mut_ref I)
      : M (core.result.Result Self parity_scale_codec.error.Error) :=
    let* α0 := core.default.Default.default  in
    Pure (core.result.Result.Ok α0).
  
  Global Instance AssociatedFunction_decode :
    Notation.DoubleColon Self "decode" := {
    Notation.double_colon := decode;
  }.
  
  Global Instance I : ink_storage_traits.storage.Storable.Trait Self := {
    ink_storage_traits.storage.Storable.encode := encode;
    ink_storage_traits.storage.Storable.decode := decode;
  }.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.
End
  Impl_ink_storage_traits_storage_Storable_for_ink_storage_lazy_Lazy_V_KeyType.

Module
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
Section
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
  Context {V Key InnerKey : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V InnerKey.
  
  Definition Type : Set := ink_storage.lazy.Lazy ImplV.Type Key.
  
  Definition PreferredKey : Set := InnerKey.
  
  Global Instance I :
      ink_storage_traits.storage.StorableHint.Trait Self (Key := Key) := {
  }.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.
End
  Impl_ink_storage_traits_storage_StorableHint_for_ink_storage_lazy_Lazy_V_InnerKey.

Module
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
Section
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition KEY := Pure KeyType::["KEY"].
  
  Global Instance AssociatedFunction_KEY : Notation.DoubleColon Self "KEY" := {
    Notation.double_colon := KEY;
  }.
  
  Global Instance I : ink_storage_traits.storage.StorageKey.Trait Self := {
    ink_storage_traits.storage.StorageKey.KEY := KEY;
  }.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.
End
  Impl_ink_storage_traits_storage_StorageKey_for_ink_storage_lazy_Lazy_V_KeyType.

Module
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
Section
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
  Context {V KeyType : Set}.
  
  Definition Self := ink_storage.lazy.Lazy V KeyType.
  
  Definition layout
      (Pattern : ref ink_primitives.key.Key)
      : M ink_metadata.layout.Layout :=
    let* α0 :=
      ink_metadata.layout.LayoutKey::["from"] (addr_of KeyType::["KEY"]) in
    let* α1 :=
      ink_storage_traits.layout.StorageLayout.layout
        (addr_of KeyType::["KEY"]) in
    let* α2 := ink_metadata.layout.RootLayout::["new"] α0 α1 in
    Pure (ink_metadata.layout.Layout.Root α2).
  
  Global Instance AssociatedFunction_layout :
    Notation.DoubleColon Self "layout" := {
    Notation.double_colon := layout;
  }.
  
  Global Instance I : ink_storage_traits.layout.StorageLayout.Trait Self := {
    ink_storage_traits.layout.StorageLayout.layout := layout;
  }.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
End
  Impl_ink_storage_traits_layout_StorageLayout_for_ink_storage_lazy_Lazy_V_KeyType.
