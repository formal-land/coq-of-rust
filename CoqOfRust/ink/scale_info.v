(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.
(*
Module build.
  Module state.
    Module PathNotAssigned.
      Inductive t : Set :=
      .
    End PathNotAssigned.
    Definition PathNotAssigned := PathNotAssigned.t.
    
    Module PathAssigned.
      Inductive t : Set :=
      .
    End PathAssigned.
    Definition PathAssigned := PathAssigned.t.
  End state.
  
  Module TypeBuilder.
    Section TypeBuilder.
      Context {F S : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        path : core.option.Option (scale_info.ty.path.Path F);
        type_params : alloc.vec.Vec (scale_info.ty.TypeParameter F);
        docs : alloc.vec.Vec F::type["String"];
        marker : core.marker.PhantomData ((F * S));
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_path : Notation.Dot "path" := {
        Notation.dot '(Build_t x0 _ _ _) := x0;
      }.
      Global Instance Get_type_params : Notation.Dot "type_params" := {
        Notation.dot '(Build_t _ x1 _ _) := x1;
      }.
      Global Instance Get_docs : Notation.Dot "docs" := {
        Notation.dot '(Build_t _ _ x2 _) := x2;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ _ _ x3) := x3;
      }.
    End TypeBuilder.
  End TypeBuilder.
  Definition TypeBuilder : Set := @TypeBuilder.t.
  
  Module NoFields.
    Inductive t : Set :=
    .
  End NoFields.
  Definition NoFields := NoFields.t.
  
  Module NamedFields.
    Inductive t : Set :=
    .
  End NamedFields.
  Definition NamedFields := NamedFields.t.
  
  Module UnnamedFields.
    Inductive t : Set :=
    .
  End UnnamedFields.
  Definition UnnamedFields := UnnamedFields.t.
  
  Module Fields.
    Section Fields.
      Context {F : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        _ : core.marker.PhantomData (F);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_0 : Notation.Dot 0 := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Fields.
  End Fields.
  Definition Fields := @Fields.t.
  
  Module FieldsBuilder.
    Section FieldsBuilder.
      Context {F T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        fields : alloc.vec.Vec (scale_info.ty.fields.Field F);
        marker : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_fields : Notation.Dot "fields" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End FieldsBuilder.
  End FieldsBuilder.
  Definition FieldsBuilder : Set := @FieldsBuilder.t.
  
  Module field_state.
    Module NameNotAssigned.
      Inductive t : Set :=
      .
    End NameNotAssigned.
    Definition NameNotAssigned := NameNotAssigned.t.
    
    Module NameAssigned.
      Inductive t : Set :=
      .
    End NameAssigned.
    Definition NameAssigned := NameAssigned.t.
    
    Module TypeNotAssigned.
      Inductive t : Set :=
      .
    End TypeNotAssigned.
    Definition TypeNotAssigned := TypeNotAssigned.t.
    
    Module TypeAssigned.
      Inductive t : Set :=
      .
    End TypeAssigned.
    Definition TypeAssigned := TypeAssigned.t.
  End field_state.
  
  Module FieldBuilder.
    Section FieldBuilder.
      Context {F N T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        name : core.option.Option F::type["String"];
        ty : core.option.Option F::type["Type_"];
        type_name : core.option.Option F::type["String"];
        docs : alloc.vec.Vec F::type["String"];
        marker : core.marker.PhantomData ((N * T));
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_name : Notation.Dot "name" := {
        Notation.dot '(Build_t x0 _ _ _ _) := x0;
      }.
      Global Instance Get_ty : Notation.Dot "ty" := {
        Notation.dot '(Build_t _ x1 _ _ _) := x1;
      }.
      Global Instance Get_type_name : Notation.Dot "type_name" := {
        Notation.dot '(Build_t _ _ x2 _ _) := x2;
      }.
      Global Instance Get_docs : Notation.Dot "docs" := {
        Notation.dot '(Build_t _ _ _ x3 _) := x3;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ _ _ _ x4) := x4;
      }.
    End FieldBuilder.
  End FieldBuilder.
  Definition FieldBuilder : Set := @FieldBuilder.t.
  
  Module Variants.
    Section Variants.
      Context {F : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        variants : alloc.vec.Vec (scale_info.ty.variant.Variant F);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_variants : Notation.Dot "variants" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Variants.
  End Variants.
  Definition Variants : Set := @Variants.t.
  
  Module variant_state.
    Module IndexNotAssigned.
      Inductive t : Set :=
      .
    End IndexNotAssigned.
    Definition IndexNotAssigned := IndexNotAssigned.t.
    
    Module IndexAssigned.
      Inductive t : Set :=
      .
    End IndexAssigned.
    Definition IndexAssigned := IndexAssigned.t.
  End variant_state.
  
  Module VariantBuilder.
    Section VariantBuilder.
      Context {F S : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        name : F::type["String"];
        index : core.option.Option u8;
        fields : alloc.vec.Vec (scale_info.ty.fields.Field F);
        discriminant : core.option.Option u64;
        docs : alloc.vec.Vec F::type["String"];
        marker : core.marker.PhantomData S;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_name : Notation.Dot "name" := {
        Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
      }.
      Global Instance Get_index : Notation.Dot "index" := {
        Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
      }.
      Global Instance Get_fields : Notation.Dot "fields" := {
        Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
      }.
      Global Instance Get_discriminant : Notation.Dot "discriminant" := {
        Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
      }.
      Global Instance Get_docs : Notation.Dot "docs" := {
        Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
      }.
    End VariantBuilder.
  End VariantBuilder.
  Definition VariantBuilder : Set := @VariantBuilder.t.
End build.

Module state.
  Module PathNotAssigned.
    Inductive t : Set :=
    .
  End PathNotAssigned.
  Definition PathNotAssigned := PathNotAssigned.t.
  
  Module PathAssigned.
    Inductive t : Set :=
    .
  End PathAssigned.
  Definition PathAssigned := PathAssigned.t.
End state.

Module PathNotAssigned.
  Inductive t : Set :=
  .
End PathNotAssigned.
Definition PathNotAssigned := PathNotAssigned.t.

Module PathAssigned.
  Inductive t : Set :=
  .
End PathAssigned.
Definition PathAssigned := PathAssigned.t.

Module TypeBuilder.
  Section TypeBuilder.
    Context {F S : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      path : core.option.Option (scale_info.ty.path.Path F);
      type_params : alloc.vec.Vec (scale_info.ty.TypeParameter F);
      docs : alloc.vec.Vec F::type["String"];
      marker : core.marker.PhantomData ((F * S));
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_path : Notation.Dot "path" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_type_params : Notation.Dot "type_params" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_docs : Notation.Dot "docs" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
  End TypeBuilder.
End TypeBuilder.
Definition TypeBuilder : Set := @TypeBuilder.t.

Module NoFields.
  Inductive t : Set :=
  .
End NoFields.
Definition NoFields := NoFields.t.

Module NamedFields.
  Inductive t : Set :=
  .
End NamedFields.
Definition NamedFields := NamedFields.t.

Module UnnamedFields.
  Inductive t : Set :=
  .
End UnnamedFields.
Definition UnnamedFields := UnnamedFields.t.

Module Fields.
  Section Fields.
    Context {F : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      _ : core.marker.PhantomData (F);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_0 : Notation.Dot 0 := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Fields.
End Fields.
Definition Fields := @Fields.t.

Module FieldsBuilder.
  Section FieldsBuilder.
    Context {F T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      fields : alloc.vec.Vec (scale_info.ty.fields.Field F);
      marker : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_fields : Notation.Dot "fields" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End FieldsBuilder.
End FieldsBuilder.
Definition FieldsBuilder : Set := @FieldsBuilder.t.

Module field_state.
  Module NameNotAssigned.
    Inductive t : Set :=
    .
  End NameNotAssigned.
  Definition NameNotAssigned := NameNotAssigned.t.
  
  Module NameAssigned.
    Inductive t : Set :=
    .
  End NameAssigned.
  Definition NameAssigned := NameAssigned.t.
  
  Module TypeNotAssigned.
    Inductive t : Set :=
    .
  End TypeNotAssigned.
  Definition TypeNotAssigned := TypeNotAssigned.t.
  
  Module TypeAssigned.
    Inductive t : Set :=
    .
  End TypeAssigned.
  Definition TypeAssigned := TypeAssigned.t.
End field_state.

Module NameNotAssigned.
  Inductive t : Set :=
  .
End NameNotAssigned.
Definition NameNotAssigned := NameNotAssigned.t.

Module NameAssigned.
  Inductive t : Set :=
  .
End NameAssigned.
Definition NameAssigned := NameAssigned.t.

Module TypeNotAssigned.
  Inductive t : Set :=
  .
End TypeNotAssigned.
Definition TypeNotAssigned := TypeNotAssigned.t.

Module TypeAssigned.
  Inductive t : Set :=
  .
End TypeAssigned.
Definition TypeAssigned := TypeAssigned.t.

Module FieldBuilder.
  Section FieldBuilder.
    Context {F N T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      name : core.option.Option F::type["String"];
      ty : core.option.Option F::type["Type_"];
      type_name : core.option.Option F::type["String"];
      docs : alloc.vec.Vec F::type["String"];
      marker : core.marker.PhantomData ((N * T));
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_name : Notation.Dot "name" := {
      Notation.dot '(Build_t x0 _ _ _ _) := x0;
    }.
    Global Instance Get_ty : Notation.Dot "ty" := {
      Notation.dot '(Build_t _ x1 _ _ _) := x1;
    }.
    Global Instance Get_type_name : Notation.Dot "type_name" := {
      Notation.dot '(Build_t _ _ x2 _ _) := x2;
    }.
    Global Instance Get_docs : Notation.Dot "docs" := {
      Notation.dot '(Build_t _ _ _ x3 _) := x3;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ _ _ _ x4) := x4;
    }.
  End FieldBuilder.
End FieldBuilder.
Definition FieldBuilder : Set := @FieldBuilder.t.

Module Variants.
  Section Variants.
    Context {F : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      variants : alloc.vec.Vec (scale_info.ty.variant.Variant F);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_variants : Notation.Dot "variants" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Variants.
End Variants.
Definition Variants : Set := @Variants.t.

Module variant_state.
  Module IndexNotAssigned.
    Inductive t : Set :=
    .
  End IndexNotAssigned.
  Definition IndexNotAssigned := IndexNotAssigned.t.
  
  Module IndexAssigned.
    Inductive t : Set :=
    .
  End IndexAssigned.
  Definition IndexAssigned := IndexAssigned.t.
End variant_state.

Module IndexNotAssigned.
  Inductive t : Set :=
  .
End IndexNotAssigned.
Definition IndexNotAssigned := IndexNotAssigned.t.

Module IndexAssigned.
  Inductive t : Set :=
  .
End IndexAssigned.
Definition IndexAssigned := IndexAssigned.t.

Module VariantBuilder.
  Section VariantBuilder.
    Context {F S : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      name : F::type["String"];
      index : core.option.Option u8;
      fields : alloc.vec.Vec (scale_info.ty.fields.Field F);
      discriminant : core.option.Option u64;
      docs : alloc.vec.Vec F::type["String"];
      marker : core.marker.PhantomData S;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_name : Notation.Dot "name" := {
      Notation.dot '(Build_t x0 _ _ _ _ _) := x0;
    }.
    Global Instance Get_index : Notation.Dot "index" := {
      Notation.dot '(Build_t _ x1 _ _ _ _) := x1;
    }.
    Global Instance Get_fields : Notation.Dot "fields" := {
      Notation.dot '(Build_t _ _ x2 _ _ _) := x2;
    }.
    Global Instance Get_discriminant : Notation.Dot "discriminant" := {
      Notation.dot '(Build_t _ _ _ x3 _ _) := x3;
    }.
    Global Instance Get_docs : Notation.Dot "docs" := {
      Notation.dot '(Build_t _ _ _ _ x4 _) := x4;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ _ _ _ _ x5) := x5;
    }.
  End VariantBuilder.
End VariantBuilder.
Definition VariantBuilder : Set := @VariantBuilder.t.
*)

Module interner.
  Module UntrackedSymbol.
    Section UntrackedSymbol.
      Context `{State.Trait} {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        id : u32;
        marker : core.marker.PhantomData (T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_id : Notation.Dot "id" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End UntrackedSymbol.
  End UntrackedSymbol.
  Definition UntrackedSymbol `{State.Trait} (T : Set) :=
    M.val (UntrackedSymbol.t (T := T)).
  
  Module Symbol.
    Section Symbol.
      Context `{State.Trait} {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        id : u32;
        marker : core.marker.PhantomData ((ref T));
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_id : Notation.Dot "id" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_marker : Notation.Dot "marker" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End Symbol.
  End Symbol.
  Definition Symbol `{State.Trait} (T : Set) :=
    M.val (Symbol.t (T := T)).
  (*
  Module Interner.
    Section Interner.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        map : alloc.collections.btree.map.BTreeMap T usize;
        vec : alloc.vec.Vec T;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_map : Notation.Dot "map" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_vec : Notation.Dot "vec" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End Interner.
  End Interner.
  Definition Interner : Set := @Interner.t.
  *)

  (* manual implementation *)
  Module Impl_PartialEq_for_UntrackedSymbol.
    Section Impl_PartialEq_for_UntrackedSymbol.
      Context `{State.Trait}.
      Global Instance I :
        core.cmp.PartialEq.Trait (UntrackedSymbol core.any.TypeId)
        (Rhs := UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_PartialEq_for_UntrackedSymbol.
  End Impl_PartialEq_for_UntrackedSymbol.

  (* manual implementation *)
  Module Impl_Eq_for_UntrackedSymbol.
    Section Impl_Eq_for_UntrackedSymbol.
      Context `{State.Trait}.
      Global Instance I : core.cmp.Eq.Trait (UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_Eq_for_UntrackedSymbol.
  End Impl_Eq_for_UntrackedSymbol.

  (* manual implementation *)
  Module Impl_PartialOrd_for_UntrackedSymbol.
    Section Impl_PartialOrd_for_UntrackedSymbol.
      Context `{State.Trait}.
      Global Instance I : core.cmp.PartialOrd.Trait
        (UntrackedSymbol core.any.TypeId)
        (Rhs := UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_PartialOrd_for_UntrackedSymbol.
  End Impl_PartialOrd_for_UntrackedSymbol.

  (* manual implementation *)
  Module Impl_PartialOrd_for_UntrackedSymbol'.
    Section Impl_PartialOrd_for_UntrackedSymbol'.
      Context `{State.Trait}.
      Global Instance I : core.cmp.PartialOrd.Trait
        (UntrackedSymbol core.any.TypeId)
        (Rhs := UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_PartialOrd_for_UntrackedSymbol'.
  End Impl_PartialOrd_for_UntrackedSymbol'.

  (* manual implementation *)
  Module Impl_Ord_for_UntrackedSymbol.
    Section Impl_Ord_for_UntrackedSymbol.
      Context `{State.Trait}.
      Global Instance I : core.cmp.Ord.Trait (UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_Ord_for_UntrackedSymbol.
  End Impl_Ord_for_UntrackedSymbol.

  (* manual implementation *)
  Module Impl_Clone_for_UntrackedSymbol.
    Section Impl_Clone_for_UntrackedSymbol.
      Context `{State.Trait}.
      Global Instance I :
        core.clone.Clone.Trait (UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_Clone_for_UntrackedSymbol.
  End Impl_Clone_for_UntrackedSymbol.

  (* manual implementation *)
  Module Impl_Debug_for_UntrackedSymbol.
    Section Impl_Debug_for_UntrackedSymbol.
      Context `{State.Trait}.
      Global Instance I :
        core.fmt.Debug.Trait (UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_Debug_for_UntrackedSymbol.
  End Impl_Debug_for_UntrackedSymbol.
End interner.

Module meta_type.
  Module MetaType.
    Parameter T_fn_type_info : Set.

    Unset Primitive Projections.
    Record t : Set := {
      (* fn_type_info : (scale_info.ty.Type_ scale_info.form.MetaForm); *)
      fn_type_info : T_fn_type_info;
      type_id : core.any.TypeId;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_fn_type_info : Notation.Dot "fn_type_info" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_type_id : Notation.Dot "type_id" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End MetaType.
  Definition MetaType : Set := @MetaType.t.
End meta_type.

Module form.
  Module JsonSchemaMaybe.
    Unset Primitive Projections.
    Class Trait (Self : Set) : Set := {
    }.
    Global Set Primitive Projections.
  End JsonSchemaMaybe.

  (* manual implementation *)
  Module Impl_JsonSchemaMaybe_for_UntrackedSymbol.
    Section Impl_JsonSchemaMaybe_for_UntrackedSymbol.
      Global Instance I `{State.Trait} :
        scale_info.form.JsonSchemaMaybe.Trait
          (interner.UntrackedSymbol core.any.TypeId).
      Admitted.
    End Impl_JsonSchemaMaybe_for_UntrackedSymbol.
  End Impl_JsonSchemaMaybe_for_UntrackedSymbol.

  Module Impl_JsonSchemaMaybe_for_str.
    Global Instance I `{State.Trait} :
      scale_info.form.JsonSchemaMaybe.Trait str := {}.
  End Impl_JsonSchemaMaybe_for_str.

  Module Form.
    Unset Primitive Projections.
    Class Trait `{State.Trait} (Self : Set) : Type := {
      Type_ : Set;
      _ :: core.cmp.PartialEq.Trait Type_ (Rhs := Type_);
      _ :: core.cmp.Eq.Trait Type_;
      _ :: core.cmp.PartialOrd.Trait Type_ (Rhs := Type_);
      _ :: core.cmp.Ord.Trait Type_;
      _ :: core.clone.Clone.Trait Type_;
      _ :: core.fmt.Debug.Trait Type_;
      _ :: scale_info.form.JsonSchemaMaybe.Trait Type_;
      String : Set;
      _ :: core.convert.AsRef.Trait String (T := str);
      _ :: core.cmp.PartialEq.Trait String (Rhs := String);
      _ :: core.cmp.Eq.Trait String;
      _ :: core.cmp.PartialOrd.Trait String (Rhs := String);
      _ :: core.cmp.Ord.Trait String;
      _ :: core.clone.Clone.Trait String;
      _ :: core.fmt.Debug.Trait String;
      _ :: scale_info.form.JsonSchemaMaybe.Trait String;
    }.
    Global Set Primitive Projections.

    Global Instance Method_Type_ `(Trait)
      : Notation.DoubleColonType Self "Type_" := {
      Notation.double_colon_type := form.Form.Type_;
    }.
    Global Instance Method_String `(Trait)
      : Notation.DoubleColonType Self "String" := {
      Notation.double_colon_type := form.Form.String;
    }.
  End Form.
  
  Module MetaForm.
    Inductive t : Set :=
    .
  End MetaForm.
  Definition MetaForm := MetaForm.t.

  Global Instance Form_for_MetaForm `{State.Trait} : form.Form.Trait MetaForm.
  Admitted.

  Global Instance Method_Type_ `{State.Trait}
    : Notation.DoubleColonType MetaForm "Type_" := {
    Notation.double_colon_type := form.Form.Type_ (Self := MetaForm);
  }.
  Global Instance Method_String `{State.Trait}
    : Notation.DoubleColonType MetaForm "String" := {
    Notation.double_colon_type := form.Form.String (Self := MetaForm);
  }.

  Module PortableForm.
    Inductive t : Set :=
    .
  End PortableForm.
  Definition PortableForm := PortableForm.t.

  (* manual implementation *)
  Module Impl_PartialEq_for_PortableForm.
    Global Instance I `{State.Trait} :
      core.cmp.PartialEq.Trait PortableForm (Rhs := PortableForm) := {|
      core.cmp.PartialEq.eq _ _ := M.alloc true;
    |}.
  End Impl_PartialEq_for_PortableForm.

  (* manual implementation *)
  Module Impl_Eq_for_PortableForm.
    Global Instance I `{State.Trait} : core.cmp.Eq.Trait PortableForm := {}.
  End Impl_Eq_for_PortableForm.

  (* manual implementation *)
  Module Impl_PartialOrd_for_PortableForm.
    Global Instance I `{State.Trait} :
      core.cmp.PartialOrd.Trait PortableForm (Rhs := PortableForm) := {|
      core.cmp.PartialOrd.partial_cmp _ _
        := Pure (option.Option.Some std.cmp.Ordering.Equal);
    |}.
  End Impl_PartialOrd_for_PortableForm.

  (* manual implementation *)
  Module Impl_Ord_for_PortableForm.
    Global Instance I `{State.Trait} : core.cmp.Ord.Trait PortableForm. Admitted.
  End Impl_Ord_for_PortableForm.

  (* manual implementation *)
  Module Impl_Clone_for_PortableForm.
    Global Instance I `{State.Trait} : core.clone.Clone.Trait PortableForm. Admitted.
  End Impl_Clone_for_PortableForm.

  (* manual implementation *)
  Module Impl_Debug_for_PortableForm.
    Global Instance I `{State.Trait} : core.fmt.Debug.Trait PortableForm. Admitted.
  End Impl_Debug_for_PortableForm.

  (* manual implementation *)
  Module Impl_JsonSchemaMaybe_for_PortableForm.
    Global Instance I `{State.Trait} : scale_info.form.JsonSchemaMaybe.Trait PortableForm := {
    }.
  End Impl_JsonSchemaMaybe_for_PortableForm.

  (* manual implementation *)
  Module Impl_Form_for_PortableForm.
    Global Instance I `{State.Trait} : scale_info.form.Form.Trait PortableForm.
    Admitted.
  End Impl_Form_for_PortableForm.
End form.
(*
Module JsonSchemaMaybe.
  Unset Primitive Projections.
  Class Trait (Self : Set) : Set := {
  }.
  Global Set Primitive Projections.
End JsonSchemaMaybe.

Module Form.
  Class Trait
      (Self : Set)
      {Type_ : Set}
      `{core.cmp.PartialEq.Trait Type_ (Rhs := None)}
      `{core.cmp.Eq.Trait Type_}
      `{core.cmp.PartialOrd.Trait Type_ (Rhs := None)}
      `{core.cmp.Ord.Trait Type_}
      `{core.clone.Clone.Trait Type_}
      `{core.fmt.Debug.Trait Type_}
      `{scale_info.form.JsonSchemaMaybe.Trait Type_}
      {String : Set}
      `{core.convert.AsRef.Trait String (T := str)}
      `{core.cmp.PartialEq.Trait String (Rhs := None)}
      `{core.cmp.Eq.Trait String}
      `{core.cmp.PartialOrd.Trait String (Rhs := None)}
      `{core.cmp.Ord.Trait String}
      `{core.clone.Clone.Trait String}
      `{core.fmt.Debug.Trait String}
      `{scale_info.form.JsonSchemaMaybe.Trait String} :
      Set := {
    Type_ := Type_;
    String := String;
  }.
  
  Global Instance
      Method_Type_
      `{H : State.Trait}
      {Type_}
      `(Trait
      (Type_ := Type_))
    : Notation.DoubleColonType Self "Type_" := {
    Notation.double_colon_type := Type_;
  }.
  Global Instance
      Method_String
      `{H : State.Trait}
      {String}
      `(Trait
      (String := String))
    : Notation.DoubleColonType Self "String" := {
    Notation.double_colon_type := String;
  }.
End Form.

Module MetaForm.
  Inductive t : Set :=
  .
End MetaForm.
Definition MetaForm := MetaForm.t.

Module PortableForm.
  Inductive t : Set :=
  .
End PortableForm.
Definition PortableForm := PortableForm.t.

(* moved Module interner. *)

Module UntrackedSymbol.
  Section UntrackedSymbol.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      id : u32;
      marker : core.marker.PhantomData (T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_id : Notation.Dot "id" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End UntrackedSymbol.
End UntrackedSymbol.
Definition UntrackedSymbol : Set := @UntrackedSymbol.t.

Module Symbol.
  Section Symbol.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      id : u32;
      marker : core.marker.PhantomData ((ref T));
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_id : Notation.Dot "id" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_marker : Notation.Dot "marker" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End Symbol.
End Symbol.
Definition Symbol : Set := @Symbol.t.

Module Interner.
  Section Interner.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      map : alloc.collections.btree.map.BTreeMap T usize;
      vec : alloc.vec.Vec T;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_map : Notation.Dot "map" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_vec : Notation.Dot "vec" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End Interner.
End Interner.
Definition Interner : Set := @Interner.t.

Module MetaType.
  Unset Primitive Projections.
  Record t : Set := {
    fn_type_info : (scale_info.ty.Type_ scale_info.form.MetaForm);
    type_id : core.any.TypeId;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_fn_type_info : Notation.Dot "fn_type_info" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_type_id : Notation.Dot "type_id" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End MetaType.
Definition MetaType : Set := @MetaType.t.
*)
(* reordered *)
Module ty.
  Module fields.
    Module Field.
      Section Field.
        Context `{State.Trait}.
        Context {T : Set}.
        Context {H0 : form.Form.Trait T}.

        Unset Primitive Projections.
        Record t : Set := {
          name : core.option.Option T::type["String"];
          ty : T::type["Type_"];
          type_name : core.option.Option T::type["String"];
          docs : alloc.vec.Vec T::type["String"] alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_name : Notation.Dot "name" := {
          Notation.dot '(Build_t x0 _ _ _) := x0;
        }.
        Global Instance Get_ty : Notation.Dot "ty" := {
          Notation.dot '(Build_t _ x1 _ _) := x1;
        }.
        Global Instance Get_type_name : Notation.Dot "type_name" := {
          Notation.dot '(Build_t _ _ x2 _) := x2;
        }.
        Global Instance Get_docs : Notation.Dot "docs" := {
          Notation.dot '(Build_t _ _ _ x3) := x3;
        }.
      End Field.
    End Field.
    Definition Field `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
      Field.t (T := T).
  End fields.

  Module composite.
    Module TypeDefComposite.
      Section TypeDefComposite.
        Context `{State.Trait}.
        Context {T : Set}.
        Context {H0 : form.Form.Trait T}.

        Record t : Set := {
          fields : alloc.vec.Vec (scale_info.ty.fields.Field T) alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_fields : Notation.Dot "fields" := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End TypeDefComposite.
    End TypeDefComposite.
    Definition TypeDefComposite `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
      TypeDefComposite.t (T := T).
  End composite.
  (* moved: Module TypeDef. *)
  
  Module path.
    Module Path.
      Section Path.
        Context `{State.Trait}.
        Context {T : Set}.
        Context {H0 : form.Form.Trait T}.

        Unset Primitive Projections.
        Record t : Set := {
          segments : alloc.vec.Vec T::type["String"] alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_segments : Notation.Dot "segments" := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End Path.
    End Path.
    Definition Path `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
      Path.t (T := T).
    
    Module PathError.
      Module InvalidIdentifier.
        Unset Primitive Projections.
        Record t `{State.Trait} : Set := {
          segment : usize;
        }.
        Global Set Primitive Projections.
      End InvalidIdentifier.
      
      Inductive t `{State.Trait} : Set :=
      | MissingSegments
      | InvalidIdentifier (_ : InvalidIdentifier.t).
    End PathError.
    Definition PathError `{State.Trait} := M.val PathError.t.
  End path.
  
  Module variant.
    Module Variant.
      Section Variant.
        Context `{State.Trait}.
        Context {T : Set}.
        Context {H0 : form.Form.Trait T}.

        Unset Primitive Projections.
        Record t : Set := {
          name : T::type["String"];
          fields : alloc.vec.Vec (scale_info.ty.fields.Field T) alloc.vec.Vec.Default.A;
          index : u8;
          docs : alloc.vec.Vec T::type["String"] alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_name : Notation.Dot "name" := {
          Notation.dot '(Build_t x0 _ _ _) := x0;
        }.
        Global Instance Get_fields : Notation.Dot "fields" := {
          Notation.dot '(Build_t _ x1 _ _) := x1;
        }.
        Global Instance Get_index : Notation.Dot "index" := {
          Notation.dot '(Build_t _ _ x2 _) := x2;
        }.
        Global Instance Get_docs : Notation.Dot "docs" := {
          Notation.dot '(Build_t _ _ _ x3) := x3;
        }.
      End Variant.
    End Variant.
    Definition Variant `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
      Variant.t (T := T).

    Module TypeDefVariant.
      Section TypeDefVariant.
        Context `{State.Trait}.
        Context {T : Set}.
        Context {H0 : form.Form.Trait T}.

        Unset Primitive Projections.
        Record t : Set := {
          variants :
            alloc.vec.Vec
              (scale_info.ty.variant.Variant T)
              alloc.vec.Vec.Default.A;
        }.
        Global Set Primitive Projections.
        
        Global Instance Get_variants : Notation.Dot "variants" := {
          Notation.dot '(Build_t x0) := x0;
        }.
      End TypeDefVariant.
    End TypeDefVariant.
    Definition TypeDefVariant `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
      TypeDefVariant.t (T := T).
    (* moved: Module Variant. *)
  End variant.
  
  Module TypeParameter.
    Section TypeParameter.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.

      Unset Primitive Projections.
      Record t : Set := {
        name : T::type["String"];
        ty : core.option.Option T::type["Type_"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_name : Notation.Dot "name" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_ty : Notation.Dot "ty" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End TypeParameter.
  End TypeParameter.
  Definition TypeParameter `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
    TypeParameter.t (T := T).

  Module TypeDefSequence.
    Section TypeDefSequence.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.

      Unset Primitive Projections.
      Record t : Set := {
        type_param : T::type["Type_"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_type_param : Notation.Dot "type_param" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End TypeDefSequence.
  End TypeDefSequence.
  Definition TypeDefSequence `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
    TypeDefSequence.t (T := T).
  
  Module TypeDefArray.
    Section TypeDefArray.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.
      Unset Primitive Projections.
      Record t : Set := {
        len : u32;
        type_param : T::type["Type_"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_len : Notation.Dot "len" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_type_param : Notation.Dot "type_param" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End TypeDefArray.
  End TypeDefArray.
  Definition TypeDefArray `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
    TypeDefArray.t (T := T).
  
  Module TypeDefTuple.
    Section TypeDefTuple.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.
      Unset Primitive Projections.
      Record t : Set := {
        fields : alloc.vec.Vec T::type["Type_"] alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_fields : Notation.Dot "fields" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End TypeDefTuple.
  End TypeDefTuple.
  Definition TypeDefTuple `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
    TypeDefTuple.t (T := T).

  Module TypeDefPrimitive.
    Inductive t : Set :=
    | Bool
    | Char
    | Str
    | U8
    | U16
    | U32
    | U64
    | U128
    | U256
    | I8
    | I16
    | I32
    | I64
    | I128
    | I256.
  End TypeDefPrimitive.
  Definition TypeDefPrimitive := TypeDefPrimitive.t.

  Module TypeDefCompact.
    Section TypeDefCompact.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.

      Unset Primitive Projections.
      Record t : Set := {
        type_param : T::type["Type_"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_type_param : Notation.Dot "type_param" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End TypeDefCompact.
  End TypeDefCompact.
  Definition TypeDefCompact `{State.Trait} (T : Set) {H0 : form.Form.Trait T} :=
    TypeDefCompact.t (T := T).
  
  Module TypeDefBitSequence.
    Section TypeDefBitSequence.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.

      Unset Primitive Projections.
      Record t : Set := {
        bit_store_type : T::type["Type_"];
        bit_order_type : T::type["Type_"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_bit_store_type : Notation.Dot "bit_store_type" := {
        Notation.dot '(Build_t x0 _) := x0;
      }.
      Global Instance Get_bit_order_type : Notation.Dot "bit_order_type" := {
        Notation.dot '(Build_t _ x1) := x1;
      }.
    End TypeDefBitSequence.
  End TypeDefBitSequence.
  Definition TypeDefBitSequence `{State.Trait} (T : Set) {H0 : form.Form.Trait T}
    := TypeDefBitSequence.t (T := T).

  Module TypeDef.
    Section TypeDef.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.

      Inductive t : Set :=
      | Composite (_ : scale_info.ty.composite.TypeDefComposite T)
      | Variant (_ : scale_info.ty.variant.TypeDefVariant T)
      | Sequence (_ : scale_info.ty.TypeDefSequence T)
      | Array (_ : scale_info.ty.TypeDefArray T)
      | Tuple (_ : scale_info.ty.TypeDefTuple T)
      | Primitive (_ : scale_info.ty.TypeDefPrimitive)
      | Compact (_ : scale_info.ty.TypeDefCompact T)
      | BitSequence (_ : scale_info.ty.TypeDefBitSequence T).
    End TypeDef.
  End TypeDef.
  Definition TypeDef `{State.Trait} (T : Set) {H0 : form.Form.Trait T} :=
    TypeDef.t (T := T).
  
  Module Type_.
    Section Type_.
      Context `{State.Trait}.
      Context {T : Set}.
      Context {H0 : form.Form.Trait T}.

      Unset Primitive Projections.
      Record t : Set := {
        path : scale_info.ty.path.Path T;
        type_params :
          alloc.vec.Vec
            (scale_info.ty.TypeParameter T)
            alloc.vec.Vec.Default.A;
        type_def : scale_info.ty.TypeDef T;
        docs :
          alloc.vec.Vec T::type["String"] alloc.vec.Vec.Default.A;
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_path : Notation.Dot "path" := {
        Notation.dot '(Build_t x0 _ _ _) := x0;
      }.
      Global Instance Get_type_params : Notation.Dot "type_params" := {
        Notation.dot '(Build_t _ x1 _ _) := x1;
      }.
      Global Instance Get_type_def : Notation.Dot "type_def" := {
        Notation.dot '(Build_t _ _ x2 _) := x2;
      }.
      Global Instance Get_docs : Notation.Dot "docs" := {
        Notation.dot '(Build_t _ _ _ x3) := x3;
      }.
    End Type_.

    Module Default.
      Definition T : Set := form.MetaForm.
    End Default.
  End Type_.
  Definition Type_ `{State.Trait} (T : Set) {H0 : form.Form.Trait T} : Set :=
    Type_.t (T := T).
  (* moved: Module TypeParameter. *)
  (* moved: Module TypeDef. *)
  (* moved: Module TypeDefPrimitive. *)
  (* moved: Module TypeDefArray. *)
  (* moved: Module TypeDefTuple. *)
  (* moved: Module TypeDef. *)
  (* moved: Module TypeDefCompact. *)
  (* moved: Module TypeDefBitSequence. *)
End ty.

Module portable.
  Module PortableType.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      id : u32;
      ty : scale_info.ty.Type_ scale_info.form.PortableForm;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_id `{State.Trait} : Notation.Dot "id" := {
      Notation.dot x := x.(id);
    }.
    Global Instance Get_ty `{State.Trait} : Notation.Dot "ty" := {
      Notation.dot x := x.(ty);
    }.
  End PortableType.
  Definition PortableType `{State.Trait} : Set := M.val PortableType.t.

  Module PortableRegistry.
    Unset Primitive Projections.
    Record t `{State.Trait} : Set := {
      types :
        alloc.vec.Vec
          scale_info.portable.PortableType
          alloc.vec.Vec.Default.A;
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_types `{State.Trait} : Notation.Dot "types" := {
      Notation.dot x := x.(types);
    }.
  End PortableRegistry.
  Definition PortableRegistry `{State.Trait} : Set := M.val PortableRegistry.t.

  (*
  Module PortableRegistryBuilder.
    Unset Primitive Projections.
    Record t : Set := {
      types
        :
        scale_info.interner.Interner
          (scale_info.ty.Type_ scale_info.form.PortableForm);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_types : Notation.Dot "types" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End PortableRegistryBuilder.
  Definition PortableRegistryBuilder : Set := @PortableRegistryBuilder.t.
  *)
End portable.

Definition PortableRegistry `{State.Trait} : Set := portable.PortableRegistry.

(*
Module PortableType.
  Unset Primitive Projections.
  Record t : Set := {
    id : u32;
    ty : scale_info.ty.Type_ scale_info.form.PortableForm;
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_id : Notation.Dot "id" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_ty : Notation.Dot "ty" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End PortableType.
Definition PortableType : Set := @PortableType.t.

Module PortableRegistryBuilder.
  Unset Primitive Projections.
  Record t : Set := {
    types
      :
      scale_info.interner.Interner
        (scale_info.ty.Type_ scale_info.form.PortableForm);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_types : Notation.Dot "types" := {
    Notation.dot '(Build_t x0) := x0;
  }.
End PortableRegistryBuilder.
Definition PortableRegistryBuilder : Set := @PortableRegistryBuilder.t.

Module registry.
  Module IntoPortable.
    Class Trait (Self : Set) {Output : Set} : Set := {
      Output := Output;
      into_portable
        `{H : State.Trait}
        :
        Self -> (mut_ref scale_info.registry.Registry) -> (M (H := H) Output);
    }.
    
    Global Instance
        Method_Output
        `{H : State.Trait}
        {Output}
        `(Trait
        (Output := Output))
      : Notation.DoubleColonType Self "Output" := {
      Notation.double_colon_type := Output;
    }.
    Global Instance Method_into_portable `{H : State.Trait} `(Trait)
      : Notation.Dot "into_portable" := {
      Notation.dot := @into_portable;
    }.
  End IntoPortable.
  
  Module Registry.
    Unset Primitive Projections.
    Record t : Set := {
      type_table : scale_info.interner.Interner core.any.TypeId;
      types
        :
        alloc.collections.btree.map.BTreeMap
          (scale_info.interner.UntrackedSymbol core.any.TypeId)
          (scale_info.ty.Type_ scale_info.form.PortableForm);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_type_table : Notation.Dot "type_table" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_types : Notation.Dot "types" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End Registry.
  Definition Registry : Set := @Registry.t.
End registry.

Module IntoPortable.
  Class Trait (Self : Set) {Output : Set} : Set := {
    Output := Output;
    into_portable
      `{H : State.Trait}
      :
      Self -> (mut_ref scale_info.registry.Registry) -> (M (H := H) Output);
  }.
  
  Global Instance
      Method_Output
      `{H : State.Trait}
      {Output}
      `(Trait
      (Output := Output))
    : Notation.DoubleColonType Self "Output" := {
    Notation.double_colon_type := Output;
  }.
  Global Instance Method_into_portable `{H : State.Trait} `(Trait)
    : Notation.Dot "into_portable" := {
    Notation.dot := @into_portable;
  }.
End IntoPortable.

Module Registry.
  Unset Primitive Projections.
  Record t : Set := {
    type_table : scale_info.interner.Interner core.any.TypeId;
    types
      :
      alloc.collections.btree.map.BTreeMap
        (scale_info.interner.UntrackedSymbol core.any.TypeId)
        (scale_info.ty.Type_ scale_info.form.PortableForm);
  }.
  Global Set Primitive Projections.
  
  Global Instance Get_type_table : Notation.Dot "type_table" := {
    Notation.dot '(Build_t x0 _) := x0;
  }.
  Global Instance Get_types : Notation.Dot "types" := {
    Notation.dot '(Build_t _ x1) := x1;
  }.
End Registry.
Definition Registry : Set := @Registry.t.
*)
(* moved: Module ty. *)
(*
Module composite.
  Module TypeDefComposite.
    Section TypeDefComposite.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        fields : alloc.vec.Vec (scale_info.ty.fields.Field T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_fields : Notation.Dot "fields" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End TypeDefComposite.
  End TypeDefComposite.
  Definition TypeDefComposite : Set := @TypeDefComposite.t.
End composite.

Module TypeDefComposite.
  Section TypeDefComposite.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      fields : alloc.vec.Vec (scale_info.ty.fields.Field T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_fields : Notation.Dot "fields" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TypeDefComposite.
End TypeDefComposite.
Definition TypeDefComposite : Set := @TypeDefComposite.t.

Module fields.
  Module Field.
    Section Field.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        name : core.option.Option T::type["String"];
        ty : T::type["Type_"];
        type_name : core.option.Option T::type["String"];
        docs : alloc.vec.Vec T::type["String"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_name : Notation.Dot "name" := {
        Notation.dot '(Build_t x0 _ _ _) := x0;
      }.
      Global Instance Get_ty : Notation.Dot "ty" := {
        Notation.dot '(Build_t _ x1 _ _) := x1;
      }.
      Global Instance Get_type_name : Notation.Dot "type_name" := {
        Notation.dot '(Build_t _ _ x2 _) := x2;
      }.
      Global Instance Get_docs : Notation.Dot "docs" := {
        Notation.dot '(Build_t _ _ _ x3) := x3;
      }.
    End Field.
  End Field.
  Definition Field : Set := @Field.t.
End fields.

Module Field.
  Section Field.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      name : core.option.Option T::type["String"];
      ty : T::type["Type_"];
      type_name : core.option.Option T::type["String"];
      docs : alloc.vec.Vec T::type["String"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_name : Notation.Dot "name" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_ty : Notation.Dot "ty" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_type_name : Notation.Dot "type_name" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_docs : Notation.Dot "docs" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
  End Field.
End Field.
Definition Field : Set := @Field.t.

Module path.
  Module Path.
    Section Path.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        segments : alloc.vec.Vec T::type["String"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_segments : Notation.Dot "segments" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End Path.
  End Path.
  Definition Path : Set := @Path.t.
  
  Module PathError.
    Module InvalidIdentifier.
      Unset Primitive Projections.
      Record t : Set := {
        segment : usize;
      }.
      Global Set Primitive Projections.
    End InvalidIdentifier.
    
    Inductive t : Set :=
    | MissingSegments
    | InvalidIdentifier (_ : InvalidIdentifier.t).
  End PathError.
  Definition PathError := PathError.t.
End path.

Module Path.
  Section Path.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      segments : alloc.vec.Vec T::type["String"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_segments : Notation.Dot "segments" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End Path.
End Path.
Definition Path : Set := @Path.t.

Module PathError.
  Module InvalidIdentifier.
    Unset Primitive Projections.
    Record t : Set := {
      segment : usize;
    }.
    Global Set Primitive Projections.
  End InvalidIdentifier.
  
  Inductive t : Set :=
  | MissingSegments
  | InvalidIdentifier (_ : InvalidIdentifier.t).
End PathError.
Definition PathError := PathError.t.

Module variant.
  Module TypeDefVariant.
    Section TypeDefVariant.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        variants : alloc.vec.Vec (scale_info.ty.variant.Variant T);
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_variants : Notation.Dot "variants" := {
        Notation.dot '(Build_t x0) := x0;
      }.
    End TypeDefVariant.
  End TypeDefVariant.
  Definition TypeDefVariant : Set := @TypeDefVariant.t.
  
  Module Variant.
    Section Variant.
      Context {T : Set}.
      Unset Primitive Projections.
      Record t : Set := {
        name : T::type["String"];
        fields : alloc.vec.Vec (scale_info.ty.fields.Field T);
        index : u8;
        docs : alloc.vec.Vec T::type["String"];
      }.
      Global Set Primitive Projections.
      
      Global Instance Get_name : Notation.Dot "name" := {
        Notation.dot '(Build_t x0 _ _ _) := x0;
      }.
      Global Instance Get_fields : Notation.Dot "fields" := {
        Notation.dot '(Build_t _ x1 _ _) := x1;
      }.
      Global Instance Get_index : Notation.Dot "index" := {
        Notation.dot '(Build_t _ _ x2 _) := x2;
      }.
      Global Instance Get_docs : Notation.Dot "docs" := {
        Notation.dot '(Build_t _ _ _ x3) := x3;
      }.
    End Variant.
  End Variant.
  Definition Variant : Set := @Variant.t.
End variant.

Module TypeDefVariant.
  Section TypeDefVariant.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      variants : alloc.vec.Vec (scale_info.ty.variant.Variant T);
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_variants : Notation.Dot "variants" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TypeDefVariant.
End TypeDefVariant.
Definition TypeDefVariant : Set := @TypeDefVariant.t.

Module Variant.
  Section Variant.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      name : T::type["String"];
      fields : alloc.vec.Vec (scale_info.ty.fields.Field T);
      index : u8;
      docs : alloc.vec.Vec T::type["String"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_name : Notation.Dot "name" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_fields : Notation.Dot "fields" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_index : Notation.Dot "index" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_docs : Notation.Dot "docs" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
  End Variant.
End Variant.
Definition Variant : Set := @Variant.t.

Module Type_.
  Section Type_.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      path : scale_info.ty.path.Path T;
      type_params : alloc.vec.Vec (scale_info.ty.TypeParameter T);
      type_def : scale_info.ty.TypeDef T;
      docs : alloc.vec.Vec T::type["String"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_path : Notation.Dot "path" := {
      Notation.dot '(Build_t x0 _ _ _) := x0;
    }.
    Global Instance Get_type_params : Notation.Dot "type_params" := {
      Notation.dot '(Build_t _ x1 _ _) := x1;
    }.
    Global Instance Get_type_def : Notation.Dot "type_def" := {
      Notation.dot '(Build_t _ _ x2 _) := x2;
    }.
    Global Instance Get_docs : Notation.Dot "docs" := {
      Notation.dot '(Build_t _ _ _ x3) := x3;
    }.
  End Type_.
End Type_.
Definition Type_ : Set := @Type_.t.

Module TypeParameter.
  Section TypeParameter.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      name : T::type["String"];
      ty : core.option.Option T::type["Type_"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_name : Notation.Dot "name" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_ty : Notation.Dot "ty" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End TypeParameter.
End TypeParameter.
Definition TypeParameter : Set := @TypeParameter.t.

Module TypeDef.
  Inductive t : Set :=
  | Composite (_ : scale_info.ty.composite.TypeDefComposite T)
  | Variant (_ : scale_info.ty.variant.TypeDefVariant T)
  | Sequence (_ : scale_info.ty.TypeDefSequence T)
  | Array (_ : scale_info.ty.TypeDefArray T)
  | Tuple (_ : scale_info.ty.TypeDefTuple T)
  | Primitive (_ : scale_info.ty.TypeDefPrimitive)
  | Compact (_ : scale_info.ty.TypeDefCompact T)
  | BitSequence (_ : scale_info.ty.TypeDefBitSequence T).
End TypeDef.
Definition TypeDef := TypeDef.t.

Module TypeDefPrimitive.
  Inductive t : Set :=
  | Bool
  | Char
  | Str
  | U8
  | U16
  | U32
  | U64
  | U128
  | U256
  | I8
  | I16
  | I32
  | I64
  | I128
  | I256.
End TypeDefPrimitive.
Definition TypeDefPrimitive := TypeDefPrimitive.t.

Module TypeDefArray.
  Section TypeDefArray.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      len : u32;
      type_param : T::type["Type_"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_len : Notation.Dot "len" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_type_param : Notation.Dot "type_param" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End TypeDefArray.
End TypeDefArray.
Definition TypeDefArray : Set := @TypeDefArray.t.

Module TypeDefTuple.
  Section TypeDefTuple.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      fields : alloc.vec.Vec T::type["Type_"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_fields : Notation.Dot "fields" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TypeDefTuple.
End TypeDefTuple.
Definition TypeDefTuple : Set := @TypeDefTuple.t.

Module TypeDefSequence.
  Section TypeDefSequence.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      type_param : T::type["Type_"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_type_param : Notation.Dot "type_param" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TypeDefSequence.
End TypeDefSequence.
Definition TypeDefSequence : Set := @TypeDefSequence.t.

Module TypeDefCompact.
  Section TypeDefCompact.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      type_param : T::type["Type_"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_type_param : Notation.Dot "type_param" := {
      Notation.dot '(Build_t x0) := x0;
    }.
  End TypeDefCompact.
End TypeDefCompact.
Definition TypeDefCompact : Set := @TypeDefCompact.t.

Module TypeDefBitSequence.
  Section TypeDefBitSequence.
    Context {T : Set}.
    Unset Primitive Projections.
    Record t : Set := {
      bit_store_type : T::type["Type_"];
      bit_order_type : T::type["Type_"];
    }.
    Global Set Primitive Projections.
    
    Global Instance Get_bit_store_type : Notation.Dot "bit_store_type" := {
      Notation.dot '(Build_t x0 _) := x0;
    }.
    Global Instance Get_bit_order_type : Notation.Dot "bit_order_type" := {
      Notation.dot '(Build_t _ x1) := x1;
    }.
  End TypeDefBitSequence.
End TypeDefBitSequence.
Definition TypeDefBitSequence : Set := @TypeDefBitSequence.t.

Module utils.
  Parameter is_rust_identifier : forall `{H : State.Trait},
      ref str ->
      M (H := H) bool.
End utils.

Parameter is_rust_identifier : forall `{H : State.Trait},
    ref str ->
    M (H := H) bool.
*)

Module TypeInfo.
  Class Trait `{State.Trait} (Self : Set) : Type := {
    Identity : Set;
    type_info :
      M (scale_info.ty.Type_ scale_info.ty.Type_.Default.T);
  }.
  
  Global Instance Method_Identity `(Trait)
    : Notation.DoubleColonType Self "Identity" := {
    Notation.double_colon_type := Identity;
  }.
  Global Instance Method_type_info `{H : State.Trait} `(Trait)
    : Notation.Dot "type_info" := {
    Notation.dot := @type_info;
  }.
End TypeInfo.

Module StaticTypeInfo.
  Unset Primitive Projections.
  Class Trait `{State.Trait} (Self : Set) {H0 : scale_info.TypeInfo.Trait Self} : Set := {
  }.
  Global Set Primitive Projections.
End StaticTypeInfo.

Parameter meta_type : forall `{State.Trait},
    forall {T : Set},
    forall {H0 : core.marker.Sized.Trait T},
    forall {H1 : scale_info.TypeInfo.Trait T},
      M scale_info.meta_type.MetaType.
