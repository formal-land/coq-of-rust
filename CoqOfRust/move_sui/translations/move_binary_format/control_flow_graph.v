(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module control_flow_graph.
  Axiom Map :
    forall (K V : Ty.t),
    (Ty.apply (Ty.path "move_binary_format::control_flow_graph::Map") [] [ K; V ]) =
      (Ty.apply
        (Ty.path "alloc::collections::btree::map::BTreeMap")
        []
        [ K; V; Ty.path "alloc::alloc::Global" ]).
  
  Axiom Set_ :
    forall (V : Ty.t),
    (Ty.apply (Ty.path "move_binary_format::control_flow_graph::Set") [] [ V ]) =
      (Ty.apply
        (Ty.path "alloc::collections::btree::set::BTreeSet")
        []
        [ V; Ty.path "alloc::alloc::Global" ]).
  
  Axiom BlockId : (Ty.path "move_binary_format::control_flow_graph::BlockId") = (Ty.path "u16").
  
  (* Trait *)
  (* Empty module 'ControlFlowGraph' *)
  
  (* StructRecord
    {
      name := "BasicBlock";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("exit", Ty.path "u16");
          ("successors",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  (* StructRecord
    {
      name := "VMControlFlowGraph";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("blocks",
            Ty.apply
              (Ty.path "alloc::collections::btree::map::BTreeMap")
              []
              [
                Ty.path "u16";
                Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                Ty.path "alloc::alloc::Global"
              ]);
          ("traversal_successors",
            Ty.apply
              (Ty.path "alloc::collections::btree::map::BTreeMap")
              []
              [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ]);
          ("loop_heads",
            Ty.apply
              (Ty.path "alloc::collections::btree::map::BTreeMap")
              []
              [
                Ty.path "u16";
                Ty.apply
                  (Ty.path "alloc::collections::btree::set::BTreeSet")
                  []
                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ])
        ];
    } *)
  
  Module Impl_move_binary_format_control_flow_graph_BasicBlock.
    Definition Self : Ty.t := Ty.path "move_binary_format::control_flow_graph::BasicBlock".
    
    (*
        pub fn display(&self, entry: BlockId) {
            println!("+=======================+");
            println!("| Enter:  {}            |", entry);
            println!("+-----------------------+");
            println!("==> Children: {:?}", self.successors);
            println!("+-----------------------+");
            println!("| Exit:   {}            |", self.exit);
            println!("+=======================+");
        }
    *)
    Definition display (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; entry ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let entry := M.alloc (| entry |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_const",
                          [ Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array [ mk_str (| "+=======================+
" |) ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_v1",
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array
                                    [ mk_str (| "| Enter:  " |); mk_str (| "            |
" |) ]
                                |)
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::rt::Argument",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [],
                                          [ Ty.path "u16" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.borrow (| Pointer.Kind.Ref, entry |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_const",
                          [ Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array [ mk_str (| "+-----------------------+
" |) ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_v1",
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array [ mk_str (| "==> Children: " |); mk_str (| "
" |) ]
                                |)
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::rt::Argument",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_debug",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "move_binary_format::control_flow_graph::BasicBlock",
                                                  "successors"
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_const",
                          [ Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array [ mk_str (| "+-----------------------+
" |) ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_v1",
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array
                                    [ mk_str (| "| Exit:   " |); mk_str (| "            |
" |) ]
                                |)
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::rt::Argument",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [],
                                          [ Ty.path "u16" ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "move_binary_format::control_flow_graph::BasicBlock",
                                                  "exit"
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_const",
                          [ Value.Integer IntegerKind.Usize 1 ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Value.Array [ mk_str (| "+=======================+
" |) ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_display : M.IsAssociatedFunction.C Self "display" display.
    Admitted.
    Global Typeclasses Opaque display.
  End Impl_move_binary_format_control_flow_graph_BasicBlock.
  
  Definition value_ENTRY_BLOCK_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U16 0 |))).
  
  Global Instance Instance_IsConstant_value_ENTRY_BLOCK_ID :
    M.IsFunction.C "move_binary_format::control_flow_graph::ENTRY_BLOCK_ID" value_ENTRY_BLOCK_ID.
  Admitted.
  Global Typeclasses Opaque value_ENTRY_BLOCK_ID.
  
  Module Impl_move_binary_format_control_flow_graph_VMControlFlowGraph.
    Definition Self : Ty.t := Ty.path "move_binary_format::control_flow_graph::VMControlFlowGraph".
    
    (*
        pub fn new(code: &[Bytecode]) -> Self {
            let code_len = code.len() as CodeOffset;
            // First go through and collect block ids, i.e., offsets that begin basic blocks.
            // Need to do this first in order to handle backwards edges.
            let mut block_ids = Set::new();
            block_ids.insert(ENTRY_BLOCK_ID);
            for pc in 0..code.len() {
                VMControlFlowGraph::record_block_ids(pc as CodeOffset, code, &mut block_ids);
            }
    
            // Create basic blocks
            let mut blocks = Map::new();
            let mut entry = 0;
            let mut exit_to_entry = Map::new();
            for pc in 0..code.len() {
                let co_pc = pc as CodeOffset;
    
                // Create a basic block
                if Self::is_end_of_block(co_pc, code, &block_ids) {
                    let exit = co_pc;
                    exit_to_entry.insert(exit, entry);
                    let successors = Bytecode::get_successors(co_pc, code);
                    let bb = BasicBlock { exit, successors };
                    blocks.insert(entry, bb);
                    entry = co_pc + 1;
                }
            }
            let blocks = blocks;
            assert_eq!(entry, code_len);
    
            // # Loop analysis
            //
            // This section identifies loops in the control-flow graph, picks a back edge and loop head
            // (the basic block the back edge returns to), and decides the order that blocks are
            // traversed during abstract interpretation (reverse post-order).
            //
            // The implementation is based on the algorithm for finding widening points in Section 4.1,
            // "Depth-first numbering" of Bourdoncle [1993], "Efficient chaotic iteration strategies
            // with widenings."
            //
            // NB. The comments below refer to a block's sub-graph -- the reflexive transitive closure
            // of its successor edges, modulo cycles.
    
            #[derive(Copy, Clone)]
            enum Exploration {
                InProgress,
                Done,
            }
    
            let mut exploration: Map<BlockId, Exploration> = Map::new();
            let mut stack = vec![ENTRY_BLOCK_ID];
    
            // For every loop in the CFG that is reachable from the entry block, there is an entry in
            // `loop_heads` mapping to all the back edges pointing to it, and vice versa.
            //
            // Entry in `loop_heads` implies loop in the CFG is justified by the comments in the loop
            // below.  Loop in the CFG implies entry in `loop_heads` is justified by considering the
            // point at which the first node in that loop, `F` is added to the `exploration` map:
            //
            // - By definition `F` is part of a loop, meaning there is a block `L` such that:
            //
            //     F - ... -> L -> F
            //
            // - `F` will not transition to `Done` until all the nodes reachable from it (including `L`)
            //   have been visited.
            // - Because `F` is the first node seen in the loop, all the other nodes in the loop
            //   (including `L`) will be visited while `F` is `InProgress`.
            // - Therefore, we will process the `L -> F` edge while `F` is `InProgress`.
            // - Therefore, we will record a back edge to it.
            let mut loop_heads: Map<BlockId, Set<BlockId>> = Map::new();
    
            // Blocks appear in `post_order` after all the blocks in their (non-reflexive) sub-graph.
            let mut post_order = Vec::with_capacity(blocks.len());
    
            while let Some(block) = stack.pop() {
                match exploration.entry(block) {
                    Entry::Vacant(entry) => {
                        // Record the fact that exploration of this block and its sub-graph has started.
                        entry.insert(Exploration::InProgress);
    
                        // Push the block back on the stack to finish processing it, and mark it as done
                        // once its sub-graph has been traversed.
                        stack.push(block);
    
                        for succ in &blocks[&block].successors {
                            match exploration.get(succ) {
                                // This successor has never been visited before, add it to the stack to
                                // be explored before `block` gets marked `Done`.
                                None => stack.push( *succ),
    
                                // This block's sub-graph was being explored, meaning it is a (reflexive
                                // transitive) predecessor of `block` as well as being a successor,
                                // implying a loop has been detected -- greedily choose the successor
                                // block as the loop head.
                                Some(Exploration::InProgress) => {
                                    loop_heads.entry( *succ).or_default().insert(block);
                                }
    
                                // Cross-edge detected, this block and its entire sub-graph (modulo
                                // cycles) has already been explored via a different path, and is
                                // already present in `post_order`.
                                Some(Exploration::Done) => { /* skip */ }
                            };
                        }
                    }
    
                    Entry::Occupied(mut entry) => match entry.get() {
                        // Already traversed the sub-graph reachable from this block, so skip it.
                        Exploration::Done => continue,
    
                        // Finish up the traversal by adding this block to the post-order traversal
                        // after its sub-graph (modulo cycles).
                        Exploration::InProgress => {
                            post_order.push(block);
                            entry.insert(Exploration::Done);
                        }
                    },
                }
            }
    
            let traversal_order = {
                // This reverse post order is akin to a topological sort (ignoring cycles) and is
                // different from a pre-order in the presence of diamond patterns in the graph.
                post_order.reverse();
                post_order
            };
    
            // build a mapping from a block id to the next block id in the traversal order
            let traversal_successors = traversal_order
                .windows(2)
                .map(|window| {
                    debug_assert!(window.len() == 2);
                    (window[0], window[1])
                })
                .collect();
    
            VMControlFlowGraph {
                blocks,
                traversal_successors,
                loop_heads,
            }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ code ] =>
        ltac:(M.monadic
          (let code := M.alloc (| code |) in
          M.read (|
            let~ code_len : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
              M.alloc (|
                M.cast
                  (Ty.path "u16")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.path "move_binary_format::file_format::Bytecode" ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| code |) |) |) ]
                  |))
              |) in
            let~ block_ids :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::set::BTreeSet")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                    "insert",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, block_ids |);
                    M.read (|
                      get_constant (|
                        "move_binary_format::control_flow_graph::ENTRY_BLOCK_ID",
                        Ty.path "u16"
                      |)
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          []
                          [ Ty.path "usize" ]
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "move_binary_format::file_format::Bytecode" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| code |) |) |) ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let pc := M.copy (| γ0_0 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path
                                                "move_binary_format::control_flow_graph::VMControlFlowGraph",
                                              "record_block_ids",
                                              [],
                                              []
                                            |),
                                            [
                                              M.cast (Ty.path "u16") (M.read (| pc |));
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| code |) |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, block_ids |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ blocks :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u16";
                      Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ entry : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
              M.alloc (| Value.Integer IntegerKind.U16 0 |) in
            let~ exit_to_entry :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        Value.StructRecord
                          "core::ops::range::Range"
                          []
                          [ Ty.path "usize" ]
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "move_binary_format::file_format::Bytecode" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| code |) |) |) ]
                              |))
                          ]
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let pc := M.copy (| γ0_0 |) in
                                      let~ co_pc : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
                                        M.alloc (| M.cast (Ty.path "u16") (M.read (| pc |)) |) in
                                      M.match_operator (|
                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "move_binary_format::control_flow_graph::VMControlFlowGraph",
                                                        "is_end_of_block",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| co_pc |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| code |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              block_ids
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              let~ exit :
                                                  Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
                                                M.copy (| co_pc |) in
                                              let~ _ :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "u16" ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "u16" ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        []
                                                        [
                                                          Ty.path "u16";
                                                          Ty.path "u16";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "insert",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        exit_to_entry
                                                      |);
                                                      M.read (| exit |);
                                                      M.read (| entry |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ successors :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.path "u16";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "u16";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "move_binary_format::file_format::Bytecode",
                                                      "get_successors",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| co_pc |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| code |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ bb :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.path
                                                        "move_binary_format::control_flow_graph::BasicBlock"
                                                    ] :=
                                                M.alloc (|
                                                  Value.StructRecord
                                                    "move_binary_format::control_flow_graph::BasicBlock"
                                                    []
                                                    []
                                                    [
                                                      ("exit", M.read (| exit |));
                                                      ("successors", M.read (| successors |))
                                                    ]
                                                |) in
                                              let~ _ :
                                                  Ty.apply
                                                    (Ty.path "*")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.path
                                                            "move_binary_format::control_flow_graph::BasicBlock"
                                                        ]
                                                    ] :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.path
                                                          "move_binary_format::control_flow_graph::BasicBlock"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        []
                                                        [
                                                          Ty.path "u16";
                                                          Ty.path
                                                            "move_binary_format::control_flow_graph::BasicBlock";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "insert",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, blocks |);
                                                      M.read (| entry |);
                                                      M.read (| bb |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                M.alloc (|
                                                  M.write (|
                                                    entry,
                                                    M.call_closure (|
                                                      Ty.path "u16",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.read (| co_pc |);
                                                        Value.Integer IntegerKind.U16 1
                                                      ]
                                                    |)
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ blocks :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.copy (| blocks |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  Value.Tuple
                    [
                      M.borrow (| Pointer.Kind.Ref, entry |);
                      M.borrow (| Pointer.Kind.Ref, code_len |)
                    ]
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let left_val := M.copy (| γ0_0 |) in
                      let right_val := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.eq,
                                        [
                                          M.read (| M.deref (| M.read (| left_val |) |) |);
                                          M.read (| M.deref (| M.read (| right_val |) |) |)
                                        ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "core::panicking::AssertKind" ] :=
                                      M.alloc (|
                                        Value.StructTuple "core::panicking::AssertKind::Eq" [] [] []
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "u16"; Ty.path "u16" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::None"
                                            []
                                            [ Ty.path "core::fmt::Arguments" ]
                                            []
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                ]
              |) in
            let~ exploration :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.path "move_binary_format::control_flow_graph::new::Exploration";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u16";
                      Ty.path "move_binary_format::control_flow_graph::new::Exploration";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.path "move_binary_format::control_flow_graph::new::Exploration";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ stack :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                    "into_vec",
                    [],
                    [ Ty.path "alloc::alloc::Global" ]
                  |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.read (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.path "u16" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ Ty.path "u16" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.alloc (|
                              Value.Array
                                [
                                  M.read (|
                                    get_constant (|
                                      "move_binary_format::control_flow_graph::ENTRY_BLOCK_ID",
                                      Ty.path "u16"
                                    |)
                                  |)
                                ]
                            |)
                          ]
                        |)
                      |))
                  ]
                |)
              |) in
            let~ loop_heads :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.apply
                          (Ty.path "alloc::collections::btree::set::BTreeSet")
                          []
                          [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u16";
                      Ty.apply
                        (Ty.path "alloc::collections::btree::set::BTreeSet")
                        []
                        [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.apply
                          (Ty.path "alloc::collections::btree::set::BTreeSet")
                          []
                          [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ post_order :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                    "with_capacity",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "u16";
                            Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                            Ty.path "alloc::alloc::Global"
                          ],
                        "len",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, blocks |) ]
                    |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                  "pop",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, stack |) ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let block := M.copy (| γ0_0 |) in
                          M.match_operator (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::entry::Entry")
                                  []
                                  [
                                    Ty.path "u16";
                                    Ty.path
                                      "move_binary_format::control_flow_graph::new::Exploration";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    []
                                    [
                                      Ty.path "u16";
                                      Ty.path
                                        "move_binary_format::control_flow_graph::new::Exploration";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "entry",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, exploration |);
                                  M.read (| block |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "alloc::collections::btree::map::entry::Entry::Vacant",
                                      0
                                    |) in
                                  let entry := M.copy (| γ0_0 |) in
                                  let~ _ :
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.path
                                                "move_binary_format::control_flow_graph::new::Exploration"
                                            ]
                                        ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.path
                                              "move_binary_format::control_flow_graph::new::Exploration"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "alloc::collections::btree::map::entry::VacantEntry")
                                            []
                                            [
                                              Ty.path "u16";
                                              Ty.path
                                                "move_binary_format::control_flow_graph::new::Exploration";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "insert",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| entry |);
                                          Value.StructTuple
                                            "move_binary_format::control_flow_graph::new::Exploration::InProgress"
                                            []
                                            []
                                            []
                                        ]
                                      |)
                                    |) in
                                  let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                          "push",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.MutRef, stack |);
                                          M.read (| block |)
                                        ]
                                      |)
                                    |) in
                                  M.use
                                    (M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "u16" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "move_binary_format::control_flow_graph::BasicBlock"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        []
                                                        [
                                                          Ty.path "u16";
                                                          Ty.path
                                                            "move_binary_format::control_flow_graph::BasicBlock";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ]
                                                      ],
                                                      "index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.Ref, blocks |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.Ref, block |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                "move_binary_format::control_flow_graph::BasicBlock",
                                                "successors"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter := M.copy (| γ |) in
                                            M.loop (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              ltac:(M.monadic
                                                (let~ _ :
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                                  M.match_operator (|
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u16" ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [ Ty.path "u16" ],
                                                          [],
                                                          [],
                                                          "next",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                iter
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.is_struct_tuple (|
                                                              γ,
                                                              "core::option::Option::None"
                                                            |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (| M.break (||) |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let succ := M.copy (| γ0_0 |) in
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ],
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "move_binary_format::control_flow_graph::new::Exploration"
                                                                        ]
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::btree::map::BTreeMap")
                                                                      []
                                                                      [
                                                                        Ty.path "u16";
                                                                        Ty.path
                                                                          "move_binary_format::control_flow_graph::new::Exploration";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "get",
                                                                    [],
                                                                    [ Ty.path "u16" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      exploration
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| succ |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            []
                                                                            [
                                                                              Ty.path "u16";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "push",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            stack
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| succ |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ0_0 := M.read (| γ0_0 |) in
                                                                    let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ0_0,
                                                                        "move_binary_format::control_flow_graph::new::Exploration::InProgress"
                                                                      |) in
                                                                    let~ _ :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.path "bool" ] :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::collections::btree::set::BTreeSet")
                                                                              []
                                                                              [
                                                                                Ty.path "u16";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "insert",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&mut")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::collections::btree::set::BTreeSet")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u16";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::collections::btree::map::entry::Entry")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u16";
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::collections::btree::set::BTreeSet")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "u16";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    "or_default",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::collections::btree::map::entry::Entry")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u16";
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::collections::btree::set::BTreeSet")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "u16";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::collections::btree::map::BTreeMap")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "u16";
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::collections::btree::set::BTreeSet")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u16";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        "entry",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          loop_heads
                                                                                        |);
                                                                                        M.read (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              succ
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (| block |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ0_0 := M.read (| γ0_0 |) in
                                                                    let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ0_0,
                                                                        "move_binary_format::control_flow_graph::new::Exploration::Done"
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)))
                                            |)))
                                      ]
                                    |))));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "alloc::collections::btree::map::entry::Entry::Occupied",
                                      0
                                    |) in
                                  let entry := M.copy (| γ0_0 |) in
                                  M.match_operator (|
                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.path
                                              "move_binary_format::control_flow_graph::new::Exploration"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "alloc::collections::btree::map::entry::OccupiedEntry")
                                            []
                                            [
                                              Ty.path "u16";
                                              Ty.path
                                                "move_binary_format::control_flow_graph::new::Exploration";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "get",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, entry |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.read (| γ |) in
                                          let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "move_binary_format::control_flow_graph::new::Exploration::Done"
                                            |) in
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.continue (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.read (| γ |) in
                                          let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "move_binary_format::control_flow_graph::new::Exploration::InProgress"
                                            |) in
                                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, post_order |);
                                                  M.read (| block |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ :
                                              Ty.apply
                                                (Ty.path "*")
                                                []
                                                [
                                                  Ty.path
                                                    "move_binary_format::control_flow_graph::new::Exploration"
                                                ] :=
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.path
                                                  "move_binary_format::control_flow_graph::new::Exploration",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::collections::btree::map::entry::OccupiedEntry")
                                                    []
                                                    [
                                                      Ty.path "u16";
                                                      Ty.path
                                                        "move_binary_format::control_flow_graph::new::Exploration";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "insert",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (| Pointer.Kind.MutRef, entry |);
                                                  Value.StructTuple
                                                    "move_binary_format::control_flow_graph::new::Exploration::Done"
                                                    []
                                                    []
                                                    []
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            let~ traversal_order :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.copy (|
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                        "reverse",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ],
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref_mut",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, post_order |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |) in
                post_order
              |) in
            let~ traversal_successors :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply (Ty.path "core::slice::iter::Windows") [] [ Ty.path "u16" ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ]
                              ]
                          ]
                          (Ty.tuple [ Ty.path "u16"; Ty.path "u16" ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::slice::iter::Windows") [] [ Ty.path "u16" ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ]
                                ]
                            ]
                            (Ty.tuple [ Ty.path "u16"; Ty.path "u16" ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Windows") [] [ Ty.path "u16" ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.tuple [ Ty.path "u16"; Ty.path "u16" ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ]
                                ]
                            ]
                            (Ty.tuple [ Ty.path "u16"; Ty.path "u16" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Windows") [] [ Ty.path "u16" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                            "windows",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, traversal_order |) ]
                                |)
                              |)
                            |);
                            Value.Integer IntegerKind.Usize 2
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.tuple [ Ty.path "u16"; Ty.path "u16" ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let window := M.copy (| γ |) in
                                          M.read (|
                                            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                              M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use (M.alloc (| Value.Bool true |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let~ _ :
                                                          Ty.apply
                                                            (Ty.path "*")
                                                            []
                                                            [ Ty.tuple [] ] :=
                                                        M.match_operator (|
                                                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u16" ],
                                                                                "len",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      window
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::panic",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        mk_str (|
                                                                          "assertion failed: window.len() == 2"
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (|
                                              Value.Tuple
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| window |) |),
                                                      Value.Integer IntegerKind.Usize 0
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_array_field (|
                                                      M.deref (| M.read (| window |) |),
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                ]
                                            |)
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              Value.StructRecord
                "move_binary_format::control_flow_graph::VMControlFlowGraph"
                []
                []
                [
                  ("blocks", M.read (| blocks |));
                  ("traversal_successors", M.read (| traversal_successors |));
                  ("loop_heads", M.read (| loop_heads |))
                ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn display(&self) {
            for (entry, block) in &self.blocks {
                block.display( *entry);
            }
            println!("Traversal: {:#?}", self.traversal_successors);
        }
    *)
    Definition display (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.use
                (M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::Iter")
                        []
                        [
                          Ty.path "u16";
                          Ty.path "move_binary_format::control_flow_graph::BasicBlock"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.path "u16";
                                Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "move_binary_format::control_flow_graph::VMControlFlowGraph",
                            "blocks"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          ltac:(M.monadic
                            (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                              M.match_operator (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u16" ];
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "move_binary_format::control_flow_graph::BasicBlock"
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::Iter")
                                        []
                                        [
                                          Ty.path "u16";
                                          Ty.path
                                            "move_binary_format::control_flow_graph::BasicBlock"
                                        ],
                                      [],
                                      [],
                                      "next",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                      M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                      let entry := M.copy (| γ1_0 |) in
                                      let block := M.copy (| γ1_1 |) in
                                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.path
                                                "move_binary_format::control_flow_graph::BasicBlock",
                                              "display",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| block |) |)
                                              |);
                                              M.read (| M.deref (| M.read (| entry |) |) |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.alloc (|
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_function (| "std::io::stdio::_print", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "core::fmt::Arguments",
                        M.get_associated_function (|
                          Ty.path "core::fmt::Arguments",
                          "new_v1_formatted",
                          [],
                          []
                        |),
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Value.Array [ mk_str (| "Traversal: " |); mk_str (| "
" |) ]
                                  |)
                                |)
                              |)
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                []
                                                [
                                                  Ty.path "u16";
                                                  Ty.path "u16";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "move_binary_format::control_flow_graph::VMControlFlowGraph",
                                                    "traversal_successors"
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Placeholder",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Placeholder",
                                            "new",
                                            [],
                                            []
                                          |),
                                          [
                                            Value.Integer IntegerKind.Usize 0;
                                            Value.UnicodeChar 32;
                                            Value.StructTuple
                                              "core::fmt::rt::Alignment::Unknown"
                                              []
                                              []
                                              [];
                                            Value.Integer IntegerKind.U32 4;
                                            Value.StructTuple
                                              "core::fmt::rt::Count::Implied"
                                              []
                                              []
                                              [];
                                            Value.StructTuple
                                              "core::fmt::rt::Count::Implied"
                                              []
                                              []
                                              []
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |));
                          M.call_closure (|
                            Ty.path "core::fmt::rt::UnsafeArg",
                            M.get_associated_function (|
                              Ty.path "core::fmt::rt::UnsafeArg",
                              "new",
                              [],
                              []
                            |),
                            []
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_display : M.IsAssociatedFunction.C Self "display" display.
    Admitted.
    Global Typeclasses Opaque display.
    
    (*
        fn is_end_of_block(pc: CodeOffset, code: &[Bytecode], block_ids: &Set<BlockId>) -> bool {
            pc + 1 == (code.len() as CodeOffset) || block_ids.contains(&(pc + 1))
        }
    *)
    Definition is_end_of_block (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pc; code; block_ids ] =>
        ltac:(M.monadic
          (let pc := M.alloc (| pc |) in
          let code := M.alloc (| code |) in
          let block_ids := M.alloc (| block_ids |) in
          LogicalOp.or (|
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [
                M.call_closure (|
                  Ty.path "u16",
                  BinOp.Wrap.add,
                  [ M.read (| pc |); Value.Integer IntegerKind.U16 1 ]
                |);
                M.cast
                  (Ty.path "u16")
                  (M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.path "move_binary_format::file_format::Bytecode" ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| code |) |) |) ]
                  |))
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::set::BTreeSet")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  "contains",
                  [],
                  [ Ty.path "u16" ]
                |),
                [
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| block_ids |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "u16",
                            BinOp.Wrap.add,
                            [ M.read (| pc |); Value.Integer IntegerKind.U16 1 ]
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_is_end_of_block :
      M.IsAssociatedFunction.C Self "is_end_of_block" is_end_of_block.
    Admitted.
    Global Typeclasses Opaque is_end_of_block.
    
    (*
        fn record_block_ids(pc: CodeOffset, code: &[Bytecode], block_ids: &mut Set<BlockId>) {
            let bytecode = &code[pc as usize];
    
            if let Some(offset) = bytecode.offset() {
                block_ids.insert( *offset);
            }
    
            if bytecode.is_branch() && pc + 1 < (code.len() as CodeOffset) {
                block_ids.insert(pc + 1);
            }
        }
    *)
    Definition record_block_ids (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ pc; code; block_ids ] =>
        ltac:(M.monadic
          (let pc := M.alloc (| pc |) in
          let code := M.alloc (| code |) in
          let block_ids := M.alloc (| block_ids |) in
          M.read (|
            let~ bytecode :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "move_binary_format::file_format::Bytecode" ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_array_field (|
                    M.deref (| M.read (| code |) |),
                    M.cast (Ty.path "usize") (M.read (| pc |))
                  |)
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                            M.get_associated_function (|
                              Ty.path "move_binary_format::file_format::Bytecode",
                              "offset",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytecode |) |) |) ]
                          |)
                        |) in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let offset := M.copy (| γ0_0 |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                        M.alloc (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::set::BTreeSet")
                                []
                                [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                              "insert",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| block_ids |) |)
                              |);
                              M.read (| M.deref (| M.read (| offset |) |) |)
                            ]
                          |)
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          LogicalOp.and (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.path "move_binary_format::file_format::Bytecode",
                                "is_branch",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| bytecode |) |) |)
                              ]
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "bool",
                                BinOp.lt,
                                [
                                  M.call_closure (|
                                    Ty.path "u16",
                                    BinOp.Wrap.add,
                                    [ M.read (| pc |); Value.Integer IntegerKind.U16 1 ]
                                  |);
                                  M.cast
                                    (Ty.path "u16")
                                    (M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "move_binary_format::file_format::Bytecode" ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| code |) |)
                                        |)
                                      ]
                                    |))
                                ]
                              |)))
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::set::BTreeSet")
                              []
                              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                            "insert",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.read (| block_ids |) |)
                            |);
                            M.call_closure (|
                              Ty.path "u16",
                              BinOp.Wrap.add,
                              [ M.read (| pc |); Value.Integer IntegerKind.U16 1 ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_record_block_ids :
      M.IsAssociatedFunction.C Self "record_block_ids" record_block_ids.
    Admitted.
    Global Typeclasses Opaque record_block_ids.
    
    (*
        fn traverse_by(&self, block_id: BlockId) -> Vec<BlockId> {
            let mut ret = Vec::new();
            // We use this index to keep track of our frontier.
            let mut index = 0;
            // Guard against cycles
            let mut seen = Set::new();
    
            ret.push(block_id);
            seen.insert(&block_id);
    
            while index < ret.len() {
                let block_id = ret[index];
                index += 1;
                let successors = self.successors(block_id);
                for block_id in successors.iter() {
                    if !seen.contains(&block_id) {
                        ret.push( *block_id);
                        seen.insert(block_id);
                    }
                }
            }
    
            ret
        }
    *)
    Definition traverse_by (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.read (|
            let~ ret :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ index : Ty.apply (Ty.path "*") [] [ Ty.path "usize" ] :=
              M.alloc (| Value.Integer IntegerKind.Usize 0 |) in
            let~ seen :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ]; Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::set::BTreeSet")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ]; Ty.path "alloc::alloc::Global" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ]; Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                    "push",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, ret |); M.read (| block_id |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.path "bool" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ]; Ty.path "alloc::alloc::Global"
                      ],
                    "insert",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, seen |);
                    M.borrow (| Pointer.Kind.Ref, block_id |)
                  ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.loop (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                ltac:(M.monadic
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.lt,
                                  [
                                    M.read (| index |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, ret |) ]
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let~ block_id : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
                            M.copy (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    [ Ty.path "usize" ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, ret |); M.read (| index |) ]
                                |)
                              |)
                            |) in
                          let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.alloc (|
                              let β := index in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |)
                            |) in
                          let~ successors :
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ] :=
                            M.alloc (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_trait_method (|
                                  "move_binary_format::control_flow_graph::ControlFlowGraph",
                                  Ty.path
                                    "move_binary_format::control_flow_graph::VMControlFlowGraph",
                                  [],
                                  [],
                                  "successors",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                  M.read (| block_id |)
                                ]
                              |)
                            |) in
                          M.use
                            (M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u16" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "u16" ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "u16" ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u16" ] ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| successors |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "u16" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let block_id := M.copy (| γ0_0 |) in
                                                  M.match_operator (|
                                                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::collections::btree::set::BTreeSet")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "u16" ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "contains",
                                                                      [],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u16" ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        seen
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            block_id
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.path "u16";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "push",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    ret
                                                                  |);
                                                                  M.read (|
                                                                    M.deref (|
                                                                      M.read (| block_id |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.path "bool" ] :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::collections::btree::set::BTreeSet")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u16" ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "insert",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    seen
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| block_id |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |))));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                  M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                M.alloc (| Value.Tuple [] |)
                              |)
                            |)
                          |)))
                    ]
                  |)))
              |) in
            ret
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_traverse_by :
      M.IsAssociatedFunction.C Self "traverse_by" traverse_by.
    Admitted.
    Global Typeclasses Opaque traverse_by.
    
    (*
        pub fn reachable_from(&self, block_id: BlockId) -> Vec<BlockId> {
            self.traverse_by(block_id)
        }
    *)
    Definition reachable_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
            M.get_associated_function (|
              Ty.path "move_binary_format::control_flow_graph::VMControlFlowGraph",
              "traverse_by",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
              M.read (| block_id |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_reachable_from :
      M.IsAssociatedFunction.C Self "reachable_from" reachable_from.
    Admitted.
    Global Typeclasses Opaque reachable_from.
  End Impl_move_binary_format_control_flow_graph_VMControlFlowGraph.
  
  Module Impl_move_binary_format_control_flow_graph_ControlFlowGraph_for_move_binary_format_control_flow_graph_VMControlFlowGraph.
    Definition Self : Ty.t := Ty.path "move_binary_format::control_flow_graph::VMControlFlowGraph".
    
    (*
        fn block_start(&self, block_id: BlockId) -> CodeOffset {
            block_id
        }
    *)
    Definition block_start (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.read (| block_id |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn block_end(&self, block_id: BlockId) -> CodeOffset {
            self.blocks[&block_id].exit
        }
    *)
    Definition block_end (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.read (|
            M.SubPointer.get_struct_record_field (|
              M.deref (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "move_binary_format::control_flow_graph::BasicBlock" ],
                  M.get_trait_method (|
                    "core::ops::index::Index",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u16";
                        Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                    "index",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "move_binary_format::control_flow_graph::VMControlFlowGraph",
                        "blocks"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, block_id |) |)
                    |)
                  ]
                |)
              |),
              "move_binary_format::control_flow_graph::BasicBlock",
              "exit"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn successors(&self, block_id: BlockId) -> &Vec<BlockId> {
            &self.blocks[&block_id].successors
        }
    *)
    Definition successors (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.borrow (|
            Pointer.Kind.Ref,
            M.deref (|
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "move_binary_format::control_flow_graph::BasicBlock" ],
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.path "u16";
                            Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                        "index",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "move_binary_format::control_flow_graph::VMControlFlowGraph",
                            "blocks"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, block_id |) |)
                        |)
                      ]
                    |)
                  |),
                  "move_binary_format::control_flow_graph::BasicBlock",
                  "successors"
                |)
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn next_block(&self, block_id: BlockId) -> Option<CodeOffset> {
            debug_assert!(self.blocks.contains_key(&block_id));
            self.traversal_successors.get(&block_id).copied()
        }
    *)
    Definition next_block (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                                              []
                                              [
                                                Ty.path "u16";
                                                Ty.path
                                                  "move_binary_format::control_flow_graph::BasicBlock";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "contains_key",
                                            [],
                                            [ Ty.path "u16" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "move_binary_format::control_flow_graph::VMControlFlowGraph",
                                                "blocks"
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.Ref, block_id |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic", [], [] |),
                                      [
                                        mk_str (|
                                          "assertion failed: self.blocks.contains_key(&block_id)"
                                        |)
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |) in
                      M.alloc (| Value.Tuple [] |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                  "copied",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [ Ty.path "u16"; Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                      "get",
                      [],
                      [ Ty.path "u16" ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "move_binary_format::control_flow_graph::VMControlFlowGraph",
                          "traversal_successors"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, block_id |) |)
                      |)
                    ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn instr_indexes(&self, block_id: BlockId) -> Box<dyn Iterator<Item = CodeOffset>> {
            Box::new(self.block_start(block_id)..=self.block_end(block_id))
        }
    *)
    Definition instr_indexes (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          (* Unsize *)
          M.pointer_coercion
            (* Unsize *)
            (M.pointer_coercion
              (M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::boxed::Box")
                  []
                  [
                    Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    []
                    [
                      Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u16" ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "u16",
                        M.get_trait_method (|
                          "move_binary_format::control_flow_graph::ControlFlowGraph",
                          Ty.path "move_binary_format::control_flow_graph::VMControlFlowGraph",
                          [],
                          [],
                          "block_start",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (| block_id |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "u16",
                        M.get_trait_method (|
                          "move_binary_format::control_flow_graph::ControlFlowGraph",
                          Ty.path "move_binary_format::control_flow_graph::VMControlFlowGraph",
                          [],
                          [],
                          "block_end",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (| block_id |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn blocks(&self) -> Vec<BlockId> {
            self.blocks.keys().cloned().collect()
        }
    *)
    Definition blocks (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::cloned::Cloned")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::Keys")
                    []
                    [ Ty.path "u16"; Ty.path "move_binary_format::control_flow_graph::BasicBlock" ]
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::cloned::Cloned")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::Keys")
                      []
                      [ Ty.path "u16"; Ty.path "move_binary_format::control_flow_graph::BasicBlock"
                      ]
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::Keys")
                    []
                    [ Ty.path "u16"; Ty.path "move_binary_format::control_flow_graph::BasicBlock" ],
                  [],
                  [],
                  "cloned",
                  [],
                  [ Ty.path "u16" ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::Keys")
                      []
                      [ Ty.path "u16"; Ty.path "move_binary_format::control_flow_graph::BasicBlock"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.path "u16";
                          Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "keys",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "move_binary_format::control_flow_graph::VMControlFlowGraph",
                          "blocks"
                        |)
                      |)
                    ]
                  |)
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn num_blocks(&self) -> u16 {
            self.blocks.len() as u16
        }
    *)
    Definition num_blocks (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.cast
            (Ty.path "u16")
            (M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  []
                  [
                    Ty.path "u16";
                    Ty.path "move_binary_format::control_flow_graph::BasicBlock";
                    Ty.path "alloc::alloc::Global"
                  ],
                "len",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "move_binary_format::control_flow_graph::VMControlFlowGraph",
                    "blocks"
                  |)
                |)
              ]
            |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn entry_block_id(&self) -> BlockId {
            ENTRY_BLOCK_ID
        }
    *)
    Definition entry_block_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            get_constant (|
              "move_binary_format::control_flow_graph::ENTRY_BLOCK_ID",
              Ty.path "u16"
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_loop_head(&self, block_id: BlockId) -> bool {
            self.loop_heads.contains_key(&block_id)
        }
    *)
    Definition is_loop_head (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; block_id ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let block_id := M.alloc (| block_id |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.apply
                (Ty.path "alloc::collections::btree::map::BTreeMap")
                []
                [
                  Ty.path "u16";
                  Ty.apply
                    (Ty.path "alloc::collections::btree::set::BTreeSet")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                  Ty.path "alloc::alloc::Global"
                ],
              "contains_key",
              [],
              [ Ty.path "u16" ]
            |),
            [
              M.borrow (|
                Pointer.Kind.Ref,
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "move_binary_format::control_flow_graph::VMControlFlowGraph",
                  "loop_heads"
                |)
              |);
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (| M.borrow (| Pointer.Kind.Ref, block_id |) |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn is_back_edge(&self, cur: BlockId, next: BlockId) -> bool {
            self.loop_heads
                .get(&next)
                .map_or(false, |back_edges| back_edges.contains(&cur))
        }
    *)
    Definition is_back_edge (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; cur; next ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let cur := M.alloc (| cur |) in
          let next := M.alloc (| next |) in
          M.call_closure (|
            Ty.path "bool",
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::set::BTreeSet")
                        []
                        [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                    ]
                ],
              "map_or",
              [],
              [
                Ty.path "bool";
                Ty.function
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::collections::btree::set::BTreeSet")
                              []
                              [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                          ]
                      ]
                  ]
                  (Ty.path "bool")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::set::BTreeSet")
                          []
                          [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                      ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u16";
                      Ty.apply
                        (Ty.path "alloc::collections::btree::set::BTreeSet")
                        []
                        [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "get",
                  [],
                  [ Ty.path "u16" ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "move_binary_format::control_flow_graph::VMControlFlowGraph",
                      "loop_heads"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, next |) |)
                  |)
                ]
              |);
              Value.Bool false;
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::set::BTreeSet")
                                            []
                                            [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                                (Ty.path "bool")
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let back_edges := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                                      []
                                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                    "contains",
                                    [],
                                    [ Ty.path "u16" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| back_edges |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, cur |) |)
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    (*
        fn num_back_edges(&self) -> usize {
            self.loop_heads
                .iter()
                .fold(0, |acc, (_, edges)| acc + edges.len())
        }
    *)
    Definition num_back_edges (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.path "usize",
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "alloc::collections::btree::map::Iter")
                []
                [
                  Ty.path "u16";
                  Ty.apply
                    (Ty.path "alloc::collections::btree::set::BTreeSet")
                    []
                    [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                ],
              [],
              [],
              "fold",
              [],
              [
                Ty.path "usize";
                Ty.function
                  [
                    Ty.tuple
                      [
                        Ty.path "usize";
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.path "u16" ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::set::BTreeSet")
                                  []
                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                      ]
                  ]
                  (Ty.path "usize")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::Iter")
                  []
                  [
                    Ty.path "u16";
                    Ty.apply
                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                      []
                      [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                  ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u16";
                      Ty.apply
                        (Ty.path "alloc::collections::btree::set::BTreeSet")
                        []
                        [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "iter",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "move_binary_format::control_flow_graph::VMControlFlowGraph",
                      "loop_heads"
                    |)
                  |)
                ]
              |);
              Value.Integer IntegerKind.Usize 0;
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0; α1 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ Ty.path "u16" ];
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::set::BTreeSet")
                                                []
                                                [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let acc := M.copy (| γ |) in
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "*")
                                    []
                                    [
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "u16" ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::set::BTreeSet")
                                                        []
                                                        [
                                                          Ty.path "u16";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.path "usize")
                                    ],
                                  M.alloc (| α1 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let edges := M.copy (| γ0_1 |) in
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.read (| acc |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::set::BTreeSet")
                                                  []
                                                  [ Ty.path "u16"; Ty.path "alloc::alloc::Global" ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| edges |) |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "move_binary_format::control_flow_graph::ControlFlowGraph"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [
          ("block_start", InstanceField.Method block_start);
          ("block_end", InstanceField.Method block_end);
          ("successors", InstanceField.Method successors);
          ("next_block", InstanceField.Method next_block);
          ("instr_indexes", InstanceField.Method instr_indexes);
          ("blocks", InstanceField.Method blocks);
          ("num_blocks", InstanceField.Method num_blocks);
          ("entry_block_id", InstanceField.Method entry_block_id);
          ("is_loop_head", InstanceField.Method is_loop_head);
          ("is_back_edge", InstanceField.Method is_back_edge);
          ("num_back_edges", InstanceField.Method num_back_edges)
        ].
  End Impl_move_binary_format_control_flow_graph_ControlFlowGraph_for_move_binary_format_control_flow_graph_VMControlFlowGraph.
End control_flow_graph.
