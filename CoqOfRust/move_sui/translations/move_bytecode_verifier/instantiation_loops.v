(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module instantiation_loops.
  (* StructTuple
    {
      name := "Node";
      const_params := [];
      ty_params := [];
      fields :=
        [ Ty.path "move_binary_format::file_format::FunctionDefinitionIndex"; Ty.path "u16" ];
    } *)
  
  Module Impl_core_cmp_Eq_for_move_bytecode_verifier_instantiation_loops_Node.
    Definition Self : Ty.t := Ty.path "move_bytecode_verifier::instantiation_loops::Node".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_move_bytecode_verifier_instantiation_loops_Node.
  
  Module Impl_core_marker_StructuralPartialEq_for_move_bytecode_verifier_instantiation_loops_Node.
    Definition Self : Ty.t := Ty.path "move_bytecode_verifier::instantiation_loops::Node".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_move_bytecode_verifier_instantiation_loops_Node.
  
  Module Impl_core_cmp_PartialEq_move_bytecode_verifier_instantiation_loops_Node_for_move_bytecode_verifier_instantiation_loops_Node.
    Definition Self : Ty.t := Ty.path "move_bytecode_verifier::instantiation_loops::Node".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          LogicalOp.and (|
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.path "move_binary_format::file_format::FunctionDefinitionIndex",
                [],
                [ Ty.path "move_binary_format::file_format::FunctionDefinitionIndex" ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| self |) |),
                    "move_bytecode_verifier::instantiation_loops::Node",
                    0
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (| M.read (| other |) |),
                    "move_bytecode_verifier::instantiation_loops::Node",
                    0
                  |)
                |)
              ]
            |),
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "move_bytecode_verifier::instantiation_loops::Node",
                      1
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| other |) |),
                      "move_bytecode_verifier::instantiation_loops::Node",
                      1
                    |)
                  |)
                ]
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *)
        [ Ty.path "move_bytecode_verifier::instantiation_loops::Node" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_move_bytecode_verifier_instantiation_loops_Node_for_move_bytecode_verifier_instantiation_loops_Node.
  
  Module Impl_core_hash_Hash_for_move_bytecode_verifier_instantiation_loops_Node.
    Definition Self : Ty.t := Ty.path "move_bytecode_verifier::instantiation_loops::Node".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "move_binary_format::file_format::FunctionDefinitionIndex",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "move_bytecode_verifier::instantiation_loops::Node",
                            0
                          |)
                        |)
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "u16",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_tuple_field (|
                          M.deref (| M.read (| self |) |),
                          "move_bytecode_verifier::instantiation_loops::Node",
                          1
                        |)
                      |)
                    |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_move_bytecode_verifier_instantiation_loops_Node.
  
  Module Impl_core_marker_Copy_for_move_bytecode_verifier_instantiation_loops_Node.
    Definition Self : Ty.t := Ty.path "move_bytecode_verifier::instantiation_loops::Node".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_move_bytecode_verifier_instantiation_loops_Node.
  
  Module Impl_core_clone_Clone_for_move_bytecode_verifier_instantiation_loops_Node.
    Definition Self : Ty.t := Ty.path "move_bytecode_verifier::instantiation_loops::Node".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.path "move_bytecode_verifier::instantiation_loops::Node" ],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "*")
                        []
                        [ Ty.path "move_bytecode_verifier::instantiation_loops::Node" ],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.deref (| M.read (| self |) |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_move_bytecode_verifier_instantiation_loops_Node.
  
  (*
  Enum Edge
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Identity";
          item := StructTuple [];
        };
        {
          name := "TyConApp";
          item :=
            StructTuple
              [
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "move_binary_format::file_format::SignatureToken" ]
              ];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_Edge_Identity :
    M.IsDiscriminant "move_bytecode_verifier::instantiation_loops::Edge::Identity" 0.
  Axiom IsDiscriminant_Edge_TyConApp :
    M.IsDiscriminant "move_bytecode_verifier::instantiation_loops::Edge::TyConApp" 1.
  
  (* StructRecord
    {
      name := "InstantiationLoopChecker";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("module",
            Ty.apply
              (Ty.path "&")
              []
              [ Ty.path "move_binary_format::file_format::CompiledModule" ]);
          ("graph",
            Ty.apply
              (Ty.path "petgraph::graph_impl::Graph")
              []
              [
                Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                Ty.path "petgraph::Directed";
                Ty.path "u32"
              ]);
          ("node_map",
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              []
              [
                Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                Ty.path "std::hash::random::RandomState"
              ]);
          ("func_handle_def_map",
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              []
              [
                Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                Ty.path "move_binary_format::file_format::FunctionDefinitionIndex";
                Ty.path "std::hash::random::RandomState"
              ])
        ];
    } *)
  
  Module Impl_move_bytecode_verifier_instantiation_loops_InstantiationLoopChecker.
    Definition Self : Ty.t :=
      Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker".
    
    (*
        fn new(module: &'a CompiledModule) -> Self {
            Self {
                module,
                graph: Graph::new(),
                node_map: HashMap::new(),
                func_handle_def_map: module
                    .function_defs()
                    .iter()
                    .enumerate()
                    .map(|(def_idx, def)| (def.function, FunctionDefinitionIndex::new(def_idx as u16)))
                    .collect(),
            }
        }
    *)
    Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ module ] =>
        ltac:(M.monadic
          (let module := M.alloc (| module |) in
          Value.StructRecord
            "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker"
            []
            []
            [
              ("module", M.read (| module |));
              ("graph",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "petgraph::graph_impl::Graph")
                    []
                    [
                      Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                      Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                      Ty.path "petgraph::Directed";
                      Ty.path "u32"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "petgraph::graph_impl::Graph")
                      []
                      [
                        Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                        Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                        Ty.path "petgraph::Directed";
                        Ty.path "u32"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |));
              ("node_map",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                      Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                      Ty.path "std::hash::random::RandomState"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                        Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |));
              ("func_handle_def_map",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                      Ty.path "move_binary_format::file_format::FunctionDefinitionIndex";
                      Ty.path "std::hash::random::RandomState"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "move_binary_format::file_format::FunctionDefinition"
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.tuple
                            [
                              Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                              Ty.path "move_binary_format::file_format::FunctionDefinitionIndex"
                            ])
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        []
                        [
                          Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                          Ty.path "move_binary_format::file_format::FunctionDefinitionIndex";
                          Ty.path "std::hash::random::RandomState"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "move_binary_format::file_format::FunctionDefinition"
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [
                                Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                                Ty.path "move_binary_format::file_format::FunctionDefinitionIndex"
                              ])
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                          ],
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.tuple
                            [
                              Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                              Ty.path "move_binary_format::file_format::FunctionDefinitionIndex"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "move_binary_format::file_format::FunctionDefinition"
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [
                                Ty.path "move_binary_format::file_format::FunctionHandleIndex";
                                Ty.path "move_binary_format::file_format::FunctionDefinitionIndex"
                              ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::FunctionDefinition" ],
                            [],
                            [],
                            "enumerate",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "move_binary_format::file_format::FunctionDefinition" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.path "move_binary_format::file_format::FunctionDefinition" ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.path
                                                "move_binary_format::file_format::FunctionDefinition"
                                            ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.path "move_binary_format::file_format::CompiledModule",
                                        "function_defs",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| module |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "*")
                                      []
                                      [
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "move_binary_format::file_format::FunctionDefinition"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.tuple
                                            [
                                              Ty.path
                                                "move_binary_format::file_format::FunctionHandleIndex";
                                              Ty.path
                                                "move_binary_format::file_format::FunctionDefinitionIndex"
                                            ])
                                      ],
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let def_idx := M.copy (| γ0_0 |) in
                                          let def := M.copy (| γ0_1 |) in
                                          Value.Tuple
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| def |) |),
                                                  "move_binary_format::file_format::FunctionDefinition",
                                                  "function"
                                                |)
                                              |);
                                              M.call_closure (|
                                                Ty.path
                                                  "move_binary_format::file_format::FunctionDefinitionIndex",
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "move_binary_format::file_format::FunctionDefinitionIndex",
                                                  "new",
                                                  [],
                                                  []
                                                |),
                                                [ M.cast (Ty.path "u16") (M.read (| def_idx |)) ]
                                              |)
                                            ]))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
    Admitted.
    Global Typeclasses Opaque new.
    
    (*
        pub fn verify_module(module: &'a CompiledModule) -> VMResult<()> {
            Self::verify_module_impl(module).map_err(|e| e.finish(Location::Module(module.self_id())))
        }
    *)
    Definition verify_module (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ module ] =>
        ltac:(M.monadic
          (let module := M.alloc (| module |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "move_binary_format::errors::VMError" ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ],
              "map_err",
              [],
              [
                Ty.path "move_binary_format::errors::VMError";
                Ty.function
                  [ Ty.tuple [ Ty.path "move_binary_format::errors::PartialVMError" ] ]
                  (Ty.path "move_binary_format::errors::VMError")
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ],
                M.get_associated_function (|
                  Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                  "verify_module_impl",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| module |) |) |) ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "*")
                            []
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.path "move_binary_format::errors::PartialVMError" ]
                                ]
                                (Ty.path "move_binary_format::errors::VMError")
                            ],
                          M.alloc (| α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let e := M.copy (| γ |) in
                                M.call_closure (|
                                  Ty.path "move_binary_format::errors::VMError",
                                  M.get_associated_function (|
                                    Ty.path "move_binary_format::errors::PartialVMError",
                                    "finish",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| e |);
                                    Value.StructTuple
                                      "move_binary_format::errors::Location::Module"
                                      []
                                      []
                                      [
                                        M.call_closure (|
                                          Ty.path "move_core_types::language_storage::ModuleId",
                                          M.get_associated_function (|
                                            Ty.path
                                              "move_binary_format::file_format::CompiledModule",
                                            "self_id",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| module |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_verify_module :
      M.IsAssociatedFunction.C Self "verify_module" verify_module.
    Admitted.
    Global Typeclasses Opaque verify_module.
    
    (*
        fn verify_module_impl(module: &'a CompiledModule) -> PartialVMResult<()> {
            let mut checker = Self::new(module);
            checker.build_graph();
            let mut components = checker.find_non_trivial_components();
    
            match components.pop() {
                None => Ok(()),
                Some((nodes, edges)) => {
                    let msg_edges = edges
                        .into_iter()
                        .filter_map(
                            |edge_idx| match checker.graph.edge_weight(edge_idx).unwrap() {
                                Edge::TyConApp(_) => Some(checker.format_edge(edge_idx)),
                                _ => None,
                            },
                        )
                        .collect::<Vec<_>>()
                        .join(", ");
                    let msg_nodes = nodes
                        .into_iter()
                        .map(|node_idx| checker.format_node(node_idx))
                        .collect::<Vec<_>>()
                        .join(", ");
                    let msg = format!(
                        "edges with constructors: [{}], nodes: [{}]",
                        msg_edges, msg_nodes
                    );
                    Err(PartialVMError::new(StatusCode::LOOP_IN_INSTANTIATION_GRAPH).with_message(msg))
                }
            }
        }
    *)
    Definition verify_module_impl (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ module ] =>
        ltac:(M.monadic
          (let module := M.alloc (| module |) in
          M.read (|
            let~ checker :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker"
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                  M.get_associated_function (|
                    Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                    "new",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| module |) |) |) ]
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                    "build_graph",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, checker |) ]
                |)
              |) in
            let~ components :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::EdgeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::EdgeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                    "find_non_trivial_components",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, checker |) ]
                |)
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ]
                ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::EdgeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::EdgeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "pop",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, components |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ := M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ]
                        [ Value.Tuple [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                    let nodes := M.copy (| γ1_0 |) in
                    let edges := M.copy (| γ1_1 |) in
                    let~ msg_edges :
                        Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "alloc::string::String" ],
                            "join",
                            [],
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.path "alloc::string::String" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "alloc::string::String";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path "alloc::string::String";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path
                                                "core::iter::adapters::filter_map::FilterMap")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::EdgeIndex")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ Ty.path "alloc::string::String" ])
                                              ],
                                            [],
                                            [],
                                            "collect",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path "alloc::string::String";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::filter_map::FilterMap")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                        []
                                                        [ Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "petgraph::graph_impl::EdgeIndex")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "alloc::string::String" ])
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "filter_map",
                                                [],
                                                [
                                                  Ty.path "alloc::string::String";
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "petgraph::graph_impl::EdgeIndex")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "alloc::string::String" ])
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                        []
                                                        [ Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::EdgeIndex")
                                                          []
                                                          [ Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| edges |) ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        ltac:(M.monadic
                                                          (M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "petgraph::graph_impl::EdgeIndex")
                                                                          []
                                                                          [ Ty.path "u32" ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "alloc::string::String"
                                                                    ])
                                                              ],
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let edge_idx := M.copy (| γ |) in
                                                                  M.read (|
                                                                    M.match_operator (|
                                                                      Ty.apply
                                                                        (Ty.path "*")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "alloc::string::String"
                                                                            ]
                                                                        ],
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "move_bytecode_verifier::instantiation_loops::Edge"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "move_bytecode_verifier::instantiation_loops::Edge"
                                                                                  ]
                                                                              ],
                                                                            "unwrap",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "move_bytecode_verifier::instantiation_loops::Edge"
                                                                                    ]
                                                                                ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "petgraph::graph_impl::Graph")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "move_bytecode_verifier::instantiation_loops::Node";
                                                                                    Ty.path
                                                                                      "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                    Ty.path
                                                                                      "petgraph::Directed";
                                                                                    Ty.path "u32"
                                                                                  ],
                                                                                "edge_weight",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    checker,
                                                                                    "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                                    "graph"
                                                                                  |)
                                                                                |);
                                                                                M.read (|
                                                                                  edge_idx
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.read (| γ |) in
                                                                            let γ1_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "move_bytecode_verifier::instantiation_loops::Edge::TyConApp",
                                                                                0
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.StructTuple
                                                                                "core::option::Option::Some"
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "alloc::string::String"
                                                                                ]
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path
                                                                                      "alloc::string::String",
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                                      "format_edge",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        checker
                                                                                      |);
                                                                                      M.read (|
                                                                                        edge_idx
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              Value.StructTuple
                                                                                "core::option::Option::None"
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "alloc::string::String"
                                                                                ]
                                                                                []
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)))
                                                      | _ =>
                                                        M.impossible "wrong number of arguments"
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| ", " |) |) |)
                          ]
                        |)
                      |) in
                    let~ msg_nodes :
                        Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ Ty.path "alloc::string::String" ],
                            "join",
                            [],
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.path "alloc::string::String" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "alloc::string::String";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path "alloc::string::String";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::NodeIndex")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ]
                                                  ]
                                                  (Ty.path "alloc::string::String")
                                              ],
                                            [],
                                            [],
                                            "collect",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path "alloc::string::String";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::NodeIndex")
                                                        []
                                                        [ Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "petgraph::graph_impl::NodeIndex")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ]
                                                    ]
                                                    (Ty.path "alloc::string::String")
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::NodeIndex")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "map",
                                                [],
                                                [
                                                  Ty.path "alloc::string::String";
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "petgraph::graph_impl::NodeIndex")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ]
                                                    ]
                                                    (Ty.path "alloc::string::String")
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::NodeIndex")
                                                        []
                                                        [ Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "into_iter",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| nodes |) ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        ltac:(M.monadic
                                                          (M.match_operator (|
                                                            Ty.apply
                                                              (Ty.path "*")
                                                              []
                                                              [
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "petgraph::graph_impl::NodeIndex")
                                                                          []
                                                                          [ Ty.path "u32" ]
                                                                      ]
                                                                  ]
                                                                  (Ty.path "alloc::string::String")
                                                              ],
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let node_idx := M.copy (| γ |) in
                                                                  M.call_closure (|
                                                                    Ty.path "alloc::string::String",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                      "format_node",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        checker
                                                                      |);
                                                                      M.read (| node_idx |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                      | _ =>
                                                        M.impossible "wrong number of arguments"
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| ", " |) |) |)
                          ]
                        |)
                      |) in
                    let~ msg : Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_function (|
                            "core::hint::must_use",
                            [],
                            [ Ty.path "alloc::string::String" ]
                          |),
                          [
                            M.read (|
                              let~ res :
                                  Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                                M.alloc (|
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_function (| "alloc::fmt::format", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::Arguments",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1",
                                          [
                                            Value.Integer IntegerKind.Usize 3;
                                            Value.Integer IntegerKind.Usize 2
                                          ],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      mk_str (| "edges with constructors: [" |);
                                                      mk_str (| "], nodes: [" |);
                                                      mk_str (| "]" |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_display",
                                                          [],
                                                          [ Ty.path "alloc::string::String" ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                msg_edges
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_display",
                                                          [],
                                                          [ Ty.path "alloc::string::String" ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                msg_nodes
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              res
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ]
                        [
                          M.call_closure (|
                            Ty.path "move_binary_format::errors::PartialVMError",
                            M.get_associated_function (|
                              Ty.path "move_binary_format::errors::PartialVMError",
                              "with_message",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.path "move_binary_format::errors::PartialVMError",
                                M.get_associated_function (|
                                  Ty.path "move_binary_format::errors::PartialVMError",
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  Value.StructTuple
                                    "move_core_types::vm_status::StatusCode::LOOP_IN_INSTANTIATION_GRAPH"
                                    []
                                    []
                                    []
                                ]
                              |);
                              M.read (| msg |)
                            ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_verify_module_impl :
      M.IsAssociatedFunction.C Self "verify_module_impl" verify_module_impl.
    Admitted.
    Global Typeclasses Opaque verify_module_impl.
    
    (*
        fn get_or_add_node(&mut self, node: Node) -> NodeIndex {
            match self.node_map.entry(node) {
                hash_map::Entry::Occupied(entry) => *entry.get(),
                hash_map::Entry::Vacant(entry) => {
                    let idx = self.graph.add_node(node);
                    entry.insert(idx);
                    idx
                }
            }
        }
    *)
    Definition get_or_add_node (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; node ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let node := M.alloc (| node |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [ Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ] ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "std::collections::hash::map::Entry")
                    []
                    [
                      Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                      Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                        Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "entry",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                        "node_map"
                      |)
                    |);
                    M.read (| node |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "std::collections::hash::map::Entry::Occupied",
                        0
                      |) in
                    let entry := M.copy (| γ0_0 |) in
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::collections::hash::map::OccupiedEntry")
                            []
                            [
                              Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ]
                            ],
                          "get",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, entry |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "std::collections::hash::map::Entry::Vacant",
                        0
                      |) in
                    let entry := M.copy (| γ0_0 |) in
                    let~ idx :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::Graph")
                              []
                              [
                                Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                                Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                                Ty.path "petgraph::Directed";
                                Ty.path "u32"
                              ],
                            "add_node",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                "graph"
                              |)
                            |);
                            M.read (| node |)
                          ]
                        |)
                      |) in
                    let~ _ :
                        Ty.apply
                          (Ty.path "*")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ]
                              ]
                          ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::map::VacantEntry")
                              []
                              [
                                Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ]
                              ],
                            "insert",
                            [],
                            []
                          |),
                          [ M.read (| entry |); M.read (| idx |) ]
                        |)
                      |) in
                    idx))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_get_or_add_node :
      M.IsAssociatedFunction.C Self "get_or_add_node" get_or_add_node.
    Admitted.
    Global Typeclasses Opaque get_or_add_node.
    
    (*
        fn extract_type_parameters(&self, ty: &SignatureToken) -> HashSet<TypeParameterIndex> {
            use SignatureToken::*;
    
            let mut type_params = HashSet::new();
    
            fn rec(type_params: &mut HashSet<TypeParameterIndex>, ty: &SignatureToken) {
                match ty {
                    Bool | Address | U8 | U16 | U32 | U64 | U128 | U256 | Signer | Struct(_) => (),
                    TypeParameter(idx) => {
                        type_params.insert( *idx);
                    }
                    Vector(ty) => rec(type_params, ty),
                    Reference(ty) | MutableReference(ty) => rec(type_params, ty),
                    StructInstantiation(struct_inst) => {
                        let (_, tys) = &**struct_inst;
                        for ty in tys {
                            rec(type_params, ty);
                        }
                    }
                }
            }
    
            rec(&mut type_params, ty);
            type_params
        }
    *)
    Definition extract_type_parameters (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; ty ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let ty := M.alloc (| ty |) in
          M.read (|
            let~ type_params :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      []
                      [ Ty.path "u16"; Ty.path "std::hash::random::RandomState" ]
                  ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "std::collections::hash::set::HashSet")
                    []
                    [ Ty.path "u16"; Ty.path "std::hash::random::RandomState" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      []
                      [ Ty.path "u16"; Ty.path "std::hash::random::RandomState" ],
                    "new",
                    [],
                    []
                  |),
                  []
                |)
              |) in
            let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (| Self, "rec.extract_type_parameters", [], [] |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.borrow (| Pointer.Kind.MutRef, type_params |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| ty |) |) |)
                  ]
                |)
              |) in
            type_params
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_extract_type_parameters :
      M.IsAssociatedFunction.C Self "extract_type_parameters" extract_type_parameters.
    Admitted.
    Global Typeclasses Opaque extract_type_parameters.
    
    (*
        fn add_edge(&mut self, node_from: Node, node_to: Node, edge: Edge<'a>) {
            let node_from_idx = self.get_or_add_node(node_from);
            let node_to_idx = self.get_or_add_node(node_to);
            self.graph.add_edge(node_from_idx, node_to_idx, edge);
        }
    *)
    Definition add_edge (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; node_from; node_to; edge ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let node_from := M.alloc (| node_from |) in
          let node_to := M.alloc (| node_to |) in
          let edge := M.alloc (| edge |) in
          M.read (|
            let~ node_from_idx :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ],
                  M.get_associated_function (|
                    Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                    "get_or_add_node",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| node_from |)
                  ]
                |)
              |) in
            let~ node_to_idx :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ],
                  M.get_associated_function (|
                    Ty.path "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                    "get_or_add_node",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| node_to |)
                  ]
                |)
              |) in
            let~ _ :
                Ty.apply
                  (Ty.path "*")
                  []
                  [ Ty.apply (Ty.path "petgraph::graph_impl::EdgeIndex") [] [ Ty.path "u32" ] ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.apply (Ty.path "petgraph::graph_impl::EdgeIndex") [] [ Ty.path "u32" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "petgraph::graph_impl::Graph")
                      []
                      [
                        Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                        Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                        Ty.path "petgraph::Directed";
                        Ty.path "u32"
                      ],
                    "add_edge",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                        "graph"
                      |)
                    |);
                    M.read (| node_from_idx |);
                    M.read (| node_to_idx |);
                    M.read (| edge |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_add_edge : M.IsAssociatedFunction.C Self "add_edge" add_edge.
    Admitted.
    Global Typeclasses Opaque add_edge.
    
    (*
        fn build_graph_call(
            &mut self,
            caller_idx: FunctionDefinitionIndex,
            callee_idx: FunctionDefinitionIndex,
            type_actuals_idx: SignatureIndex,
        ) {
            let type_actuals = &self.module.signature_at(type_actuals_idx).0;
    
            for (formal_idx, ty) in type_actuals.iter().enumerate() {
                let formal_idx = formal_idx as TypeParameterIndex;
                match ty {
                    SignatureToken::TypeParameter(actual_idx) => self.add_edge(
                        Node(caller_idx, *actual_idx),
                        Node(callee_idx, formal_idx),
                        Edge::Identity,
                    ),
                    _ => {
                        for type_param in self.extract_type_parameters(ty) {
                            self.add_edge(
                                Node(caller_idx, type_param),
                                Node(callee_idx, formal_idx),
                                Edge::TyConApp(ty),
                            );
                        }
                    }
                }
            }
        }
    *)
    Definition build_graph_call (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; caller_idx; callee_idx; type_actuals_idx ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let caller_idx := M.alloc (| caller_idx |) in
          let callee_idx := M.alloc (| callee_idx |) in
          let type_actuals_idx := M.alloc (| type_actuals_idx |) in
          M.read (|
            let~ type_actuals :
                Ty.apply
                  (Ty.path "*")
                  []
                  [
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "move_binary_format::file_format::SignatureToken";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                  ] :=
              M.alloc (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_tuple_field (|
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "move_binary_format::file_format::Signature" ],
                        M.get_associated_function (|
                          Ty.path "move_binary_format::file_format::CompiledModule",
                          "signature_at",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                  "module"
                                |)
                              |)
                            |)
                          |);
                          M.read (| type_actuals_idx |)
                        ]
                      |)
                    |),
                    "move_binary_format::file_format::Signature",
                    0
                  |)
                |)
              |) in
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "move_binary_format::file_format::SignatureToken" ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "move_binary_format::file_format::SignatureToken" ]
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::SignatureToken" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "move_binary_format::file_format::SignatureToken" ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::SignatureToken" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.path "move_binary_format::file_format::SignatureToken" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.path
                                              "move_binary_format::file_format::SignatureToken"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path "move_binary_format::file_format::SignatureToken";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| type_actuals |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "move_binary_format::file_format::SignatureToken"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.path
                                              "move_binary_format::file_format::SignatureToken"
                                          ]
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let formal_idx := M.copy (| γ1_0 |) in
                                    let ty := M.copy (| γ1_1 |) in
                                    let~ formal_idx : Ty.apply (Ty.path "*") [] [ Ty.path "u16" ] :=
                                      M.alloc (|
                                        M.cast (Ty.path "u16") (M.read (| formal_idx |))
                                      |) in
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      ty,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "move_binary_format::file_format::SignatureToken::TypeParameter",
                                                0
                                              |) in
                                            let actual_idx := M.alloc (| γ1_0 |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                  "add_edge",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| self |) |)
                                                  |);
                                                  Value.StructTuple
                                                    "move_bytecode_verifier::instantiation_loops::Node"
                                                    []
                                                    []
                                                    [
                                                      M.read (| caller_idx |);
                                                      M.read (|
                                                        M.deref (| M.read (| actual_idx |) |)
                                                      |)
                                                    ];
                                                  Value.StructTuple
                                                    "move_bytecode_verifier::instantiation_loops::Node"
                                                    []
                                                    []
                                                    [
                                                      M.read (| callee_idx |);
                                                      M.read (| formal_idx |)
                                                    ];
                                                  Value.StructTuple
                                                    "move_bytecode_verifier::instantiation_loops::Edge::Identity"
                                                    []
                                                    []
                                                    []
                                                ]
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.use
                                              (M.match_operator (|
                                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                M.alloc (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "std::collections::hash::set::IntoIter")
                                                      []
                                                      [ Ty.path "u16" ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "std::collections::hash::set::HashSet")
                                                        []
                                                        [
                                                          Ty.path "u16";
                                                          Ty.path "std::hash::random::RandomState"
                                                        ],
                                                      [],
                                                      [],
                                                      "into_iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "std::collections::hash::set::HashSet")
                                                          []
                                                          [
                                                            Ty.path "u16";
                                                            Ty.path "std::hash::random::RandomState"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                          "extract_type_parameters",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| self |) |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| ty |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                        ltac:(M.monadic
                                                          (let~ _ :
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ] :=
                                                            M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [ Ty.tuple [] ],
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [ Ty.path "u16" ],
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "std::collections::hash::set::IntoIter")
                                                                      []
                                                                      [ Ty.path "u16" ],
                                                                    [],
                                                                    [],
                                                                    "next",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          iter
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.is_struct_tuple (|
                                                                        γ,
                                                                        "core::option::Option::None"
                                                                      |) in
                                                                    M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let type_param :=
                                                                      M.copy (| γ0_0 |) in
                                                                    let~ _ :
                                                                        Ty.apply
                                                                          (Ty.path "*")
                                                                          []
                                                                          [ Ty.tuple [] ] :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                            "add_edge",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "move_bytecode_verifier::instantiation_loops::Node"
                                                                              []
                                                                              []
                                                                              [
                                                                                M.read (|
                                                                                  caller_idx
                                                                                |);
                                                                                M.read (|
                                                                                  type_param
                                                                                |)
                                                                              ];
                                                                            Value.StructTuple
                                                                              "move_bytecode_verifier::instantiation_loops::Node"
                                                                              []
                                                                              []
                                                                              [
                                                                                M.read (|
                                                                                  callee_idx
                                                                                |);
                                                                                M.read (|
                                                                                  formal_idx
                                                                                |)
                                                                              ];
                                                                            Value.StructTuple
                                                                              "move_bytecode_verifier::instantiation_loops::Edge::TyConApp"
                                                                              []
                                                                              []
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (| ty |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |))))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_build_graph_call :
      M.IsAssociatedFunction.C Self "build_graph_call" build_graph_call.
    Admitted.
    Global Typeclasses Opaque build_graph_call.
    
    (*
        fn build_graph_function_def(
            &mut self,
            caller_idx: FunctionDefinitionIndex,
            caller_def: &FunctionDefinition,
        ) {
            if let Some(code) = &caller_def.code {
                for instr in &code.code {
                    if let Bytecode::CallGeneric(callee_inst_idx) = instr {
                        // Get the id of the definition of the function being called.
                        // Skip if the function is not defined in the current module, as we do not
                        // have mutual recursions across module boundaries.
                        let callee_si = self.module.function_instantiation_at( *callee_inst_idx);
                        if let Some(callee_idx) = self.func_handle_def_map.get(&callee_si.handle) {
                            let callee_idx = *callee_idx;
                            self.build_graph_call(caller_idx, callee_idx, callee_si.type_parameters)
                        }
                    }
                }
            }
        }
    *)
    Definition build_graph_function_def (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; caller_idx; caller_def ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let caller_idx := M.alloc (| caller_idx |) in
          let caller_def := M.alloc (| caller_def |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| caller_def |) |),
                            "move_binary_format::file_format::FunctionDefinition",
                            "code"
                          |)
                        |)
                      |) in
                    let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let code := M.alloc (| γ1_0 |) in
                    M.use
                      (M.match_operator (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        M.alloc (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::Bytecode" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "move_binary_format::file_format::Bytecode";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| code |) |),
                                  "move_binary_format::file_format::CodeUnit",
                                  "code"
                                |)
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                ltac:(M.monadic
                                  (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.path
                                                    "move_binary_format::file_format::Bytecode"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "move_binary_format::file_format::Bytecode"
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let instr := M.copy (| γ0_0 |) in
                                            M.match_operator (|
                                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                              M.alloc (| Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ := instr in
                                                    let γ := M.read (| γ |) in
                                                    let γ1_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "move_binary_format::file_format::Bytecode::CallGeneric",
                                                        0
                                                      |) in
                                                    let callee_inst_idx := M.alloc (| γ1_0 |) in
                                                    let~ callee_si :
                                                        Ty.apply
                                                          (Ty.path "*")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "move_binary_format::file_format::FunctionInstantiation"
                                                              ]
                                                          ] :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "move_binary_format::file_format::FunctionInstantiation"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "move_binary_format::file_format::CompiledModule",
                                                            "function_instantiation_at",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| self |) |),
                                                                    "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                    "module"
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.deref (|
                                                                M.read (| callee_inst_idx |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                                      M.alloc (| Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "move_binary_format::file_format::FunctionDefinitionIndex"
                                                                        ]
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "std::collections::hash::map::HashMap")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "move_binary_format::file_format::FunctionHandleIndex";
                                                                        Ty.path
                                                                          "move_binary_format::file_format::FunctionDefinitionIndex";
                                                                        Ty.path
                                                                          "std::hash::random::RandomState"
                                                                      ],
                                                                    "get",
                                                                    [],
                                                                    [
                                                                      Ty.path
                                                                        "move_binary_format::file_format::FunctionHandleIndex"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| self |)
                                                                        |),
                                                                        "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                        "func_handle_def_map"
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| callee_si |)
                                                                            |),
                                                                            "move_binary_format::file_format::FunctionInstantiation",
                                                                            "handle"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let callee_idx := M.copy (| γ0_0 |) in
                                                            let~ callee_idx :
                                                                Ty.apply
                                                                  (Ty.path "*")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "move_binary_format::file_format::FunctionDefinitionIndex"
                                                                  ] :=
                                                              M.copy (|
                                                                M.deref (|
                                                                  M.read (| callee_idx |)
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                  "build_graph_call",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (| M.read (| self |) |)
                                                                  |);
                                                                  M.read (| caller_idx |);
                                                                  M.read (| callee_idx |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| callee_si |)
                                                                      |),
                                                                      "move_binary_format::file_format::FunctionInstantiation",
                                                                      "type_parameters"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |))));
                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_build_graph_function_def :
      M.IsAssociatedFunction.C Self "build_graph_function_def" build_graph_function_def.
    Admitted.
    Global Typeclasses Opaque build_graph_function_def.
    
    (*
        fn build_graph(&mut self) {
            for (def_idx, func_def) in self
                .module
                .function_defs()
                .iter()
                .enumerate()
                .filter(|(_, def)| !def.is_native())
            {
                self.build_graph_function_def(FunctionDefinitionIndex::new(def_idx as u16), func_def)
            }
        }
    *)
    Definition build_graph (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.use
              (M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                M.alloc (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::filter::Filter")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.path
                                              "move_binary_format::file_format::FunctionDefinition"
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.path "bool")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::filter::Filter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "move_binary_format::file_format::FunctionDefinition"
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.path "bool")
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter::Filter")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "move_binary_format::file_format::FunctionDefinition"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.path "bool")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                            ],
                          [],
                          [],
                          "filter",
                          [],
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "move_binary_format::file_format::FunctionDefinition"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.path "bool")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "move_binary_format::file_format::FunctionDefinition" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "move_binary_format::file_format::FunctionDefinition" ],
                              [],
                              [],
                              "enumerate",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "move_binary_format::file_format::FunctionDefinition" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.path "move_binary_format::file_format::FunctionDefinition"
                                    ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.path
                                                  "move_binary_format::file_format::FunctionDefinition"
                                              ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.path "move_binary_format::file_format::CompiledModule",
                                          "function_defs",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                  "module"
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.apply
                                        (Ty.path "*")
                                        []
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "move_binary_format::file_format::FunctionDefinition"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ],
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let def := M.alloc (| γ1_1 |) in
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.path
                                                    "move_binary_format::file_format::FunctionDefinition",
                                                  "is_native",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (| M.deref (| M.read (| def |) |) |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let iter := M.copy (| γ |) in
                      M.loop (|
                        Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                        ltac:(M.monadic
                          (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                            M.match_operator (|
                              Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                              M.alloc (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.path
                                                "move_binary_format::file_format::FunctionDefinition"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::filter::Filter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.path
                                                  "move_binary_format::file_format::FunctionDefinition"
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "move_binary_format::file_format::FunctionDefinition"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.path "bool")
                                      ],
                                    [],
                                    [],
                                    "next",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::option::Option::Some",
                                        0
                                      |) in
                                    let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                    let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                    let def_idx := M.copy (| γ1_0 |) in
                                    let func_def := M.copy (| γ1_1 |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.path
                                            "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                          "build_graph_function_def",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.path
                                              "move_binary_format::file_format::FunctionDefinitionIndex",
                                            M.get_associated_function (|
                                              Ty.path
                                                "move_binary_format::file_format::FunctionDefinitionIndex",
                                              "new",
                                              [],
                                              []
                                            |),
                                            [ M.cast (Ty.path "u16") (M.read (| def_idx |)) ]
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| func_def |) |)
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |) in
                          M.alloc (| Value.Tuple [] |)))
                      |)))
                ]
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_build_graph :
      M.IsAssociatedFunction.C Self "build_graph" build_graph.
    Admitted.
    Global Typeclasses Opaque build_graph.
    
    (*
        fn find_non_trivial_components(&self) -> Vec<(Vec<NodeIndex>, Vec<EdgeIndex>)> {
            tarjan_scc(&self.graph)
                .into_iter()
                .filter_map(move |nodes| {
                    let node_set: HashSet<_> = nodes.iter().cloned().collect();
    
                    let edges: Vec<_> = nodes
                        .iter()
                        .flat_map(|node_idx| {
                            self.graph.edges( *node_idx).filter_map(|edge| {
                                if node_set.contains(&edge.target()) {
                                    Some(edge.id())
                                } else {
                                    None
                                }
                            })
                        })
                        .collect();
    
                    if edges.iter().any(
                        |edge_idx| match self.graph.edge_weight( *edge_idx).unwrap() {
                            Edge::Identity => false,
                            Edge::TyConApp(_) => true,
                        },
                    ) {
                        Some((nodes, edges))
                    } else {
                        None
                    }
                })
                .collect()
        }
    *)
    Definition find_non_trivial_components
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "petgraph::graph_impl::EdgeIndex") [] [ Ty.path "u32" ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ];
                Ty.path "alloc::alloc::Global"
              ],
            M.get_trait_method (|
              "core::iter::traits::iterator::Iterator",
              Ty.apply
                (Ty.path "core::iter::adapters::filter_map::FilterMap")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.function
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ]
                    (Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::EdgeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ])
                ],
              [],
              [],
              "collect",
              [],
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::EdgeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]
              ]
            |),
            [
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::filter_map::FilterMap")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "petgraph::graph_impl::NodeIndex")
                                    []
                                    [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "petgraph::graph_impl::EdgeIndex")
                                    []
                                    [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "alloc::vec::into_iter::IntoIter")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "filter_map",
                  [],
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::EdgeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "petgraph::graph_impl::NodeIndex")
                                    []
                                    [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "petgraph::graph_impl::EdgeIndex")
                                    []
                                    [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::into_iter::IntoIter")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "into_iter",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_function (|
                          "petgraph::algo::tarjan_scc",
                          [],
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::Graph")
                                  []
                                  [
                                    Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                                    Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                                    Ty.path "petgraph::Directed";
                                    Ty.path "u32"
                                  ]
                              ]
                          ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                              "graph"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "*")
                                []
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                                []
                                                [ Ty.path "u32" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                                  []
                                                  [ Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                  []
                                                  [ Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ])
                                ],
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let nodes := M.copy (| γ |) in
                                    M.read (|
                                      let~ node_set :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "std::collections::hash::set::HashSet")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "petgraph::graph_impl::NodeIndex")
                                                    []
                                                    [ Ty.path "u32" ];
                                                  Ty.path "std::hash::random::RandomState"
                                                ]
                                            ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "std::collections::hash::set::HashSet")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "petgraph::graph_impl::NodeIndex")
                                                  []
                                                  [ Ty.path "u32" ];
                                                Ty.path "std::hash::random::RandomState"
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::cloned::Cloned")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::NodeIndex")
                                                        []
                                                        [ Ty.path "u32" ]
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "collect",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "std::collections::hash::set::HashSet")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::NodeIndex")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.path "std::hash::random::RandomState"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::cloned::Cloned")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::NodeIndex")
                                                        []
                                                        [ Ty.path "u32" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "cloned",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::NodeIndex")
                                                      []
                                                      [ Ty.path "u32" ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "petgraph::graph_impl::NodeIndex")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ],
                                                      "iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "petgraph::graph_impl::NodeIndex")
                                                                      []
                                                                      [ Ty.path "u32" ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "petgraph::graph_impl::NodeIndex")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, nodes |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let~ edges :
                                          Ty.apply
                                            (Ty.path "*")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                    []
                                                    [ Ty.path "u32" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ] :=
                                        M.alloc (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                  []
                                                  [ Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::NodeIndex")
                                                        []
                                                        [ Ty.path "u32" ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::filter_map::FilterMap")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::Edges")
                                                        []
                                                        [
                                                          Ty.path
                                                            "move_bytecode_verifier::instantiation_loops::Edge";
                                                          Ty.path "petgraph::Directed";
                                                          Ty.path "u32"
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "petgraph::graph_impl::EdgeReference")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "move_bytecode_verifier::instantiation_loops::Edge";
                                                                  Ty.path "u32"
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "petgraph::graph_impl::EdgeIndex")
                                                              []
                                                              [ Ty.path "u32" ]
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "petgraph::graph_impl::NodeIndex")
                                                                []
                                                                [ Ty.path "u32" ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "petgraph::graph_impl::Edges")
                                                          []
                                                          [
                                                            Ty.path
                                                              "move_bytecode_verifier::instantiation_loops::Edge";
                                                            Ty.path "petgraph::Directed";
                                                            Ty.path "u32"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::EdgeReference")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "move_bytecode_verifier::instantiation_loops::Edge";
                                                                    Ty.path "u32"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "petgraph::graph_impl::EdgeIndex")
                                                                []
                                                                [ Ty.path "u32" ]
                                                            ])
                                                      ])
                                                ],
                                              [],
                                              [],
                                              "collect",
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "petgraph::graph_impl::EdgeIndex")
                                                      []
                                                      [ Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "petgraph::graph_impl::Edges")
                                                          []
                                                          [
                                                            Ty.path
                                                              "move_bytecode_verifier::instantiation_loops::Edge";
                                                            Ty.path "petgraph::Directed";
                                                            Ty.path "u32"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::EdgeReference")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "move_bytecode_verifier::instantiation_loops::Edge";
                                                                    Ty.path "u32"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "petgraph::graph_impl::EdgeIndex")
                                                                []
                                                                [ Ty.path "u32" ]
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::NodeIndex")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "petgraph::graph_impl::Edges")
                                                            []
                                                            [
                                                              Ty.path
                                                                "move_bytecode_verifier::instantiation_loops::Edge";
                                                              Ty.path "petgraph::Directed";
                                                              Ty.path "u32"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "petgraph::graph_impl::EdgeReference")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "move_bytecode_verifier::instantiation_loops::Edge";
                                                                      Ty.path "u32"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::EdgeIndex")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ])
                                                        ])
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "petgraph::graph_impl::NodeIndex")
                                                        []
                                                        [ Ty.path "u32" ]
                                                    ],
                                                  [],
                                                  [],
                                                  "flat_map",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "petgraph::graph_impl::Edges")
                                                          []
                                                          [
                                                            Ty.path
                                                              "move_bytecode_verifier::instantiation_loops::Edge";
                                                            Ty.path "petgraph::Directed";
                                                            Ty.path "u32"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::EdgeReference")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "move_bytecode_verifier::instantiation_loops::Edge";
                                                                    Ty.path "u32"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "petgraph::graph_impl::EdgeIndex")
                                                                []
                                                                [ Ty.path "u32" ]
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::NodeIndex")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "petgraph::graph_impl::Edges")
                                                            []
                                                            [
                                                              Ty.path
                                                                "move_bytecode_verifier::instantiation_loops::Edge";
                                                              Ty.path "petgraph::Directed";
                                                              Ty.path "u32"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "petgraph::graph_impl::EdgeReference")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "move_bytecode_verifier::instantiation_loops::Edge";
                                                                      Ty.path "u32"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "petgraph::graph_impl::EdgeIndex")
                                                                  []
                                                                  [ Ty.path "u32" ]
                                                              ])
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "petgraph::graph_impl::NodeIndex")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ],
                                                      "iter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "petgraph::graph_impl::NodeIndex")
                                                                      []
                                                                      [ Ty.path "u32" ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "petgraph::graph_impl::NodeIndex")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "deref",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, nodes |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "*")
                                                                []
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "petgraph::graph_impl::NodeIndex")
                                                                                []
                                                                                [ Ty.path "u32" ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::filter_map::FilterMap")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "petgraph::graph_impl::Edges")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "move_bytecode_verifier::instantiation_loops::Edge";
                                                                            Ty.path
                                                                              "petgraph::Directed";
                                                                            Ty.path "u32"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "petgraph::graph_impl::EdgeReference")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                    Ty.path "u32"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "petgraph::graph_impl::EdgeIndex")
                                                                                []
                                                                                [ Ty.path "u32" ]
                                                                            ])
                                                                      ])
                                                                ],
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let node_idx :=
                                                                      M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::filter_map::FilterMap")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "petgraph::graph_impl::Edges")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "move_bytecode_verifier::instantiation_loops::Edge";
                                                                              Ty.path
                                                                                "petgraph::Directed";
                                                                              Ty.path "u32"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "petgraph::graph_impl::EdgeReference")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                      Ty.path "u32"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "petgraph::graph_impl::EdgeIndex")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ])
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "petgraph::graph_impl::Edges")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "move_bytecode_verifier::instantiation_loops::Edge";
                                                                            Ty.path
                                                                              "petgraph::Directed";
                                                                            Ty.path "u32"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "filter_map",
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "petgraph::graph_impl::EdgeIndex")
                                                                            []
                                                                            [ Ty.path "u32" ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "petgraph::graph_impl::EdgeReference")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                      Ty.path "u32"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "petgraph::graph_impl::EdgeIndex")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ])
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "petgraph::graph_impl::Edges")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "move_bytecode_verifier::instantiation_loops::Edge";
                                                                              Ty.path
                                                                                "petgraph::Directed";
                                                                              Ty.path "u32"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "petgraph::graph_impl::Graph")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "move_bytecode_verifier::instantiation_loops::Node";
                                                                                Ty.path
                                                                                  "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                Ty.path
                                                                                  "petgraph::Directed";
                                                                                Ty.path "u32"
                                                                              ],
                                                                            "edges",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.deref (|
                                                                                  M.read (| self |)
                                                                                |),
                                                                                "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                                "graph"
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  node_idx
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                ltac:(M.monadic
                                                                                  (M.match_operator (|
                                                                                    Ty.apply
                                                                                      (Ty.path "*")
                                                                                      []
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "petgraph::graph_impl::EdgeReference")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "petgraph::graph_impl::EdgeIndex")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u32"
                                                                                                ]
                                                                                            ])
                                                                                      ],
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                edge :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            M.match_operator (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "*")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::option::Option")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "petgraph::graph_impl::EdgeIndex")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "u32"
                                                                                                        ]
                                                                                                    ]
                                                                                                ],
                                                                                              M.alloc (|
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ :=
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "bool",
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "std::collections::hash::set::HashSet")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "petgraph::graph_impl::NodeIndex")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "u32"
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "std::hash::random::RandomState"
                                                                                                                ],
                                                                                                              "contains",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "petgraph::graph_impl::NodeIndex")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "u32"
                                                                                                                  ]
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                node_set
                                                                                                              |);
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "petgraph::graph_impl::NodeIndex")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u32"
                                                                                                                          ],
                                                                                                                        M.get_trait_method (|
                                                                                                                          "petgraph::visit::EdgeRef",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "petgraph::graph_impl::EdgeReference")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                                                              Ty.path
                                                                                                                                "u32"
                                                                                                                            ],
                                                                                                                          [],
                                                                                                                          [],
                                                                                                                          "target",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            edge
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)) in
                                                                                                    let
                                                                                                          _ :=
                                                                                                      is_constant_or_break_match (|
                                                                                                        M.read (|
                                                                                                          γ
                                                                                                        |),
                                                                                                        Value.Bool
                                                                                                          true
                                                                                                      |) in
                                                                                                    M.alloc (|
                                                                                                      Value.StructTuple
                                                                                                        "core::option::Option::Some"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "petgraph::graph_impl::EdgeIndex")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u32"
                                                                                                            ]
                                                                                                        ]
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "petgraph::graph_impl::EdgeIndex")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "u32"
                                                                                                              ],
                                                                                                            M.get_trait_method (|
                                                                                                              "petgraph::visit::EdgeRef",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "petgraph::graph_impl::EdgeReference")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                                                  Ty.path
                                                                                                                    "u32"
                                                                                                                ],
                                                                                                              [],
                                                                                                              [],
                                                                                                              "id",
                                                                                                              [],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                edge
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                    |)));
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (M.alloc (|
                                                                                                      Value.StructTuple
                                                                                                        "core::option::Option::None"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "petgraph::graph_impl::EdgeIndex")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u32"
                                                                                                            ]
                                                                                                        ]
                                                                                                        []
                                                                                                    |)))
                                                                                              ]
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                              | _ =>
                                                                                M.impossible
                                                                                  "wrong number of arguments"
                                                                              end))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.match_operator (|
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::NodeIndex")
                                                          []
                                                          [ Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "petgraph::graph_impl::EdgeIndex")
                                                          []
                                                          [ Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                          ],
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "petgraph::graph_impl::EdgeIndex")
                                                              []
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        [],
                                                        [],
                                                        "any",
                                                        [],
                                                        [
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "petgraph::graph_impl::EdgeIndex")
                                                                        []
                                                                        [ Ty.path "u32" ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.path "bool")
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "petgraph::graph_impl::EdgeIndex")
                                                                    []
                                                                    [ Ty.path "u32" ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "petgraph::graph_impl::EdgeIndex")
                                                                      []
                                                                      [ Ty.path "u32" ]
                                                                  ],
                                                                "iter",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "petgraph::graph_impl::EdgeIndex")
                                                                                []
                                                                                [ Ty.path "u32" ]
                                                                            ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "petgraph::graph_impl::EdgeIndex")
                                                                              []
                                                                              [ Ty.path "u32" ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "deref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          edges
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                ltac:(M.monadic
                                                                  (M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path "*")
                                                                      []
                                                                      [
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "petgraph::graph_impl::EdgeIndex")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.path "bool")
                                                                      ],
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let edge_idx :=
                                                                            M.copy (| γ |) in
                                                                          M.read (|
                                                                            M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path "*")
                                                                                []
                                                                                [ Ty.path "bool" ],
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "move_bytecode_verifier::instantiation_loops::Edge"
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "move_bytecode_verifier::instantiation_loops::Edge"
                                                                                          ]
                                                                                      ],
                                                                                    "unwrap",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "move_bytecode_verifier::instantiation_loops::Edge"
                                                                                            ]
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "petgraph::graph_impl::Graph")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "move_bytecode_verifier::instantiation_loops::Node";
                                                                                            Ty.path
                                                                                              "move_bytecode_verifier::instantiation_loops::Edge";
                                                                                            Ty.path
                                                                                              "petgraph::Directed";
                                                                                            Ty.path
                                                                                              "u32"
                                                                                          ],
                                                                                        "edge_weight",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                self
                                                                                              |)
                                                                                            |),
                                                                                            "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                                                                            "graph"
                                                                                          |)
                                                                                        |);
                                                                                        M.read (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              edge_idx
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    let _ :=
                                                                                      M.is_struct_tuple (|
                                                                                        γ,
                                                                                        "move_bytecode_verifier::instantiation_loops::Edge::Identity"
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.Bool
                                                                                        false
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    let γ1_0 :=
                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                        γ,
                                                                                        "move_bytecode_verifier::instantiation_loops::Edge::TyConApp",
                                                                                        0
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.Bool
                                                                                        true
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                              | _ =>
                                                                M.impossible
                                                                  "wrong number of arguments"
                                                              end))
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::option::Option::Some"
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "petgraph::graph_impl::NodeIndex")
                                                              []
                                                              [ Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "petgraph::graph_impl::EdgeIndex")
                                                              []
                                                              [ Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  [
                                                    Value.Tuple
                                                      [ M.read (| nodes |); M.read (| edges |) ]
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                Value.StructTuple
                                                  "core::option::Option::None"
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "petgraph::graph_impl::NodeIndex")
                                                              []
                                                              [ Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "petgraph::graph_impl::EdgeIndex")
                                                              []
                                                              [ Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  []
                                              |)))
                                        ]
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_find_non_trivial_components :
      M.IsAssociatedFunction.C Self "find_non_trivial_components" find_non_trivial_components.
    Admitted.
    Global Typeclasses Opaque find_non_trivial_components.
    
    (*
        fn format_node(&self, node_idx: NodeIndex) -> String {
            let Node(def_idx, param_idx) = self.graph.node_weight(node_idx).unwrap();
            format!("f{}#{}", def_idx, param_idx)
        }
    *)
    Definition format_node (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; node_idx ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let node_idx := M.alloc (| node_idx |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ],
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "move_bytecode_verifier::instantiation_loops::Node" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "move_bytecode_verifier::instantiation_loops::Node" ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "move_bytecode_verifier::instantiation_loops::Node" ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "petgraph::graph_impl::Graph")
                          []
                          [
                            Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                            Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                            Ty.path "petgraph::Directed";
                            Ty.path "u32"
                          ],
                        "node_weight",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                            "graph"
                          |)
                        |);
                        M.read (| node_idx |)
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "move_bytecode_verifier::instantiation_loops::Node",
                        0
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "move_bytecode_verifier::instantiation_loops::Node",
                        1
                      |) in
                    let def_idx := M.alloc (| γ1_0 |) in
                    let param_idx := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_function (|
                          "core::hint::must_use",
                          [],
                          [ Ty.path "alloc::string::String" ]
                        |),
                        [
                          M.read (|
                            let~ res :
                                Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                              M.alloc (|
                                M.call_closure (|
                                  Ty.path "alloc::string::String",
                                  M.get_function (| "alloc::fmt::format", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_v1",
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 2
                                        ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Value.Array [ mk_str (| "f" |); mk_str (| "#" |) ]
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "move_binary_format::file_format::FunctionDefinitionIndex"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (| Pointer.Kind.Ref, def_idx |)
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      M.get_associated_function (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        "new_display",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u16" ]
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              param_idx
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            res
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_format_node :
      M.IsAssociatedFunction.C Self "format_node" format_node.
    Admitted.
    Global Typeclasses Opaque format_node.
    
    (*
        fn format_edge(&self, edge_idx: EdgeIndex) -> String {
            let (node_idx_1, node_idx_2) = self.graph.edge_endpoints(edge_idx).unwrap();
            let node_1 = self.format_node(node_idx_1);
            let node_2 = self.format_node(node_idx_2);
    
            match self.graph.edge_weight(edge_idx).unwrap() {
                Edge::TyConApp(ty) => format!("{} --{:?}--> {}", node_1, ty, node_2,),
                Edge::Identity => format!("{} ----> {}", node_1, node_2),
            }
        }
    *)
    Definition format_edge (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; edge_idx ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let edge_idx := M.alloc (| edge_idx |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ],
              M.alloc (|
                M.call_closure (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ];
                      Ty.apply (Ty.path "petgraph::graph_impl::NodeIndex") [] [ Ty.path "u32" ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ];
                            Ty.apply
                              (Ty.path "petgraph::graph_impl::NodeIndex")
                              []
                              [ Ty.path "u32" ]
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ];
                              Ty.apply
                                (Ty.path "petgraph::graph_impl::NodeIndex")
                                []
                                [ Ty.path "u32" ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "petgraph::graph_impl::Graph")
                          []
                          [
                            Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                            Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                            Ty.path "petgraph::Directed";
                            Ty.path "u32"
                          ],
                        "edge_endpoints",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                            "graph"
                          |)
                        |);
                        M.read (| edge_idx |)
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let node_idx_1 := M.copy (| γ0_0 |) in
                    let node_idx_2 := M.copy (| γ0_1 |) in
                    let~ node_1 : Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_associated_function (|
                            Ty.path
                              "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                            "format_node",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                            M.read (| node_idx_1 |)
                          ]
                        |)
                      |) in
                    let~ node_2 : Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ] :=
                      M.alloc (|
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_associated_function (|
                            Ty.path
                              "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                            "format_node",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                            M.read (| node_idx_2 |)
                          ]
                        |)
                      |) in
                    M.match_operator (|
                      Ty.apply (Ty.path "*") [] [ Ty.path "alloc::string::String" ],
                      M.alloc (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "move_bytecode_verifier::instantiation_loops::Edge" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "move_bytecode_verifier::instantiation_loops::Edge" ]
                              ],
                            "unwrap",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "move_bytecode_verifier::instantiation_loops::Edge" ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "petgraph::graph_impl::Graph")
                                  []
                                  [
                                    Ty.path "move_bytecode_verifier::instantiation_loops::Node";
                                    Ty.path "move_bytecode_verifier::instantiation_loops::Edge";
                                    Ty.path "petgraph::Directed";
                                    Ty.path "u32"
                                  ],
                                "edge_weight",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "move_bytecode_verifier::instantiation_loops::InstantiationLoopChecker",
                                    "graph"
                                  |)
                                |);
                                M.read (| edge_idx |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "move_bytecode_verifier::instantiation_loops::Edge::TyConApp",
                                0
                              |) in
                            let ty := M.alloc (| γ1_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "alloc::string::String",
                                M.get_function (|
                                  "core::hint::must_use",
                                  [],
                                  [ Ty.path "alloc::string::String" ]
                                |),
                                [
                                  M.read (|
                                    let~ res :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "alloc::string::String" ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "alloc::string::String",
                                          M.get_function (| "alloc::fmt::format", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                [
                                                  Value.Integer IntegerKind.Usize 3;
                                                  Value.Integer IntegerKind.Usize 3
                                                ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            mk_str (| "" |);
                                                            mk_str (| " --" |);
                                                            mk_str (| "--> " |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_display",
                                                                [],
                                                                [ Ty.path "alloc::string::String" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      node_1
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_debug",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "move_binary_format::file_format::SignatureToken"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      ty
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_display",
                                                                [],
                                                                [ Ty.path "alloc::string::String" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      node_2
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res
                                  |)
                                ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let _ :=
                              M.is_struct_tuple (|
                                γ,
                                "move_bytecode_verifier::instantiation_loops::Edge::Identity"
                              |) in
                            M.alloc (|
                              M.call_closure (|
                                Ty.path "alloc::string::String",
                                M.get_function (|
                                  "core::hint::must_use",
                                  [],
                                  [ Ty.path "alloc::string::String" ]
                                |),
                                [
                                  M.read (|
                                    let~ res :
                                        Ty.apply
                                          (Ty.path "*")
                                          []
                                          [ Ty.path "alloc::string::String" ] :=
                                      M.alloc (|
                                        M.call_closure (|
                                          Ty.path "alloc::string::String",
                                          M.get_function (| "alloc::fmt::format", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                [
                                                  Value.Integer IntegerKind.Usize 2;
                                                  Value.Integer IntegerKind.Usize 2
                                                ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array
                                                          [ mk_str (| "" |); mk_str (| " ----> " |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_display",
                                                                [],
                                                                [ Ty.path "alloc::string::String" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      node_1
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_display",
                                                                [],
                                                                [ Ty.path "alloc::string::String" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      node_2
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res
                                  |)
                                ]
                              |)
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_format_edge :
      M.IsAssociatedFunction.C Self "format_edge" format_edge.
    Admitted.
    Global Typeclasses Opaque format_edge.
  End Impl_move_bytecode_verifier_instantiation_loops_InstantiationLoopChecker.
End instantiation_loops.
