(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

(*
Enum Scope
{
  const_params := [];
  ty_params := [];
  variants :=
    [
      {
        name := "Transaction";
        item := StructTuple [];
      };
      {
        name := "Package";
        item := StructTuple [];
      };
      {
        name := "Module";
        item := StructTuple [];
      };
      {
        name := "Function";
        item := StructTuple [];
      }
    ];
}
*)

Axiom IsDiscriminant_Scope_Transaction :
  M.IsDiscriminant "move_bytecode_verifier_meter::Scope::Transaction" 0.
Axiom IsDiscriminant_Scope_Package :
  M.IsDiscriminant "move_bytecode_verifier_meter::Scope::Package" 1.
Axiom IsDiscriminant_Scope_Module :
  M.IsDiscriminant "move_bytecode_verifier_meter::Scope::Module" 2.
Axiom IsDiscriminant_Scope_Function :
  M.IsDiscriminant "move_bytecode_verifier_meter::Scope::Function" 3.

Module Impl_core_clone_Clone_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  (* Clone *)
  Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        M.read (| M.deref (| M.read (| self |) |) |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::clone::Clone"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("clone", InstanceField.Method clone) ].
End Impl_core_clone_Clone_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_marker_Copy_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::Copy"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_Copy_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_fmt_Debug_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  (* Debug *)
  Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; f ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let f := M.alloc (| f |) in
        M.call_closure (|
          Ty.apply (Ty.path "core::result::Result") [] [ Ty.tuple []; Ty.path "core::fmt::Error" ],
          M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
          [
            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
            M.read (|
              M.match_operator (|
                Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "move_bytecode_verifier_meter::Scope::Transaction"
                        |) in
                      M.alloc (|
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Transaction" |) |) |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (| γ, "move_bytecode_verifier_meter::Scope::Package" |) in
                      M.alloc (|
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Package" |) |) |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (| γ, "move_bytecode_verifier_meter::Scope::Module" |) in
                      M.alloc (|
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Module" |) |) |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "move_bytecode_verifier_meter::Scope::Function"
                        |) in
                      M.alloc (|
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Function" |) |) |)
                      |)))
                ]
              |)
            |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::fmt::Debug"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
End Impl_core_fmt_Debug_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_marker_StructuralPartialEq_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  Axiom Implements :
    M.IsTraitInstance
      "core::marker::StructuralPartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [].
End Impl_core_marker_StructuralPartialEq_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_cmp_PartialEq_move_bytecode_verifier_meter_Scope_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  (* PartialEq *)
  Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; other ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let other := M.alloc (| other |) in
        M.read (|
          let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "move_bytecode_verifier_meter::Scope" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |) in
          let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "move_bytecode_verifier_meter::Scope" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.path "bool",
              BinOp.eq,
              [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialEq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "move_bytecode_verifier_meter::Scope" ]
      Self
      (* Instance *) [ ("eq", InstanceField.Method eq) ].
End Impl_core_cmp_PartialEq_move_bytecode_verifier_meter_Scope_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_cmp_Eq_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  (* Eq *)
  Definition assert_receiver_is_total_eq
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ self ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        Value.Tuple []))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Eq"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *)
      [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
End Impl_core_cmp_Eq_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_cmp_PartialOrd_move_bytecode_verifier_meter_Scope_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  (* PartialOrd *)
  Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; other ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let other := M.alloc (| other |) in
        M.read (|
          let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "move_bytecode_verifier_meter::Scope" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |) in
          let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "move_bytecode_verifier_meter::Scope" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
              M.get_trait_method (|
                "core::cmp::PartialOrd",
                Ty.path "isize",
                [],
                [ Ty.path "isize" ],
                "partial_cmp",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::PartialOrd"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) [ Ty.path "move_bytecode_verifier_meter::Scope" ]
      Self
      (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
End Impl_core_cmp_PartialOrd_move_bytecode_verifier_meter_Scope_for_move_bytecode_verifier_meter_Scope.

Module Impl_core_cmp_Ord_for_move_bytecode_verifier_meter_Scope.
  Definition Self : Ty.t := Ty.path "move_bytecode_verifier_meter::Scope".
  
  (* Ord *)
  Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; other ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let other := M.alloc (| other |) in
        M.read (|
          let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "move_bytecode_verifier_meter::Scope" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
              |)
            |) in
          let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
            M.alloc (|
              M.call_closure (|
                Ty.path "isize",
                M.get_function (|
                  "core::intrinsics::discriminant_value",
                  [],
                  [ Ty.path "move_bytecode_verifier_meter::Scope" ]
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
              |)
            |) in
          M.alloc (|
            M.call_closure (|
              Ty.path "core::cmp::Ordering",
              M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], [], "cmp", [], [] |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                |)
              ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "core::cmp::Ord"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
End Impl_core_cmp_Ord_for_move_bytecode_verifier_meter_Scope.

(* Trait *)
Module Meter.
  Definition add_items (Self : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; scope; units_per_item; items ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let scope := M.alloc (| scope |) in
        let units_per_item := M.alloc (| units_per_item |) in
        let items := M.alloc (| items |) in
        M.catch_return
          (Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.eq,
                                [ M.read (| items |); Value.Integer IntegerKind.Usize 0 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ],
                  M.get_trait_method (|
                    "move_bytecode_verifier_meter::Meter",
                    Self,
                    [],
                    [],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| scope |);
                    M.call_closure (|
                      Ty.path "u128",
                      M.get_associated_function (| Ty.path "u128", "saturating_mul", [], [] |),
                      [ M.read (| units_per_item |); M.cast (Ty.path "u128") (M.read (| items |)) ]
                    |)
                  ]
                |)
              |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_add_items :
    M.IsProvidedMethod "move_bytecode_verifier_meter::Meter" "add_items" add_items.
  Definition add_items_with_growth
      (Self : Ty.t)
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    match ε, τ, α with
    | [], [], [ self; scope; units_per_item; items; growth_factor ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let scope := M.alloc (| scope |) in
        let units_per_item := M.alloc (| units_per_item |) in
        let items := M.alloc (| items |) in
        let growth_factor := M.alloc (| growth_factor |) in
        M.catch_return
          (Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ]) (|
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.eq,
                                [ M.read (| items |); Value.Integer IntegerKind.Usize 0 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                              |)
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                M.use
                  (M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (|
                      M.call_closure (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer IntegerKind.Usize 0);
                              ("end_", M.read (| items |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                            ltac:(M.monadic
                              (let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                M.match_operator (|
                                  Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                  M.alloc (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.match_operator (|
                                            Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                                            M.alloc (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path
                                                          "move_binary_format::errors::PartialVMError"
                                                      ];
                                                    Ty.tuple []
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path
                                                        "move_binary_format::errors::PartialVMError"
                                                    ],
                                                  [],
                                                  [],
                                                  "branch",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "move_binary_format::errors::PartialVMError"
                                                      ],
                                                    M.get_trait_method (|
                                                      "move_bytecode_verifier_meter::Meter",
                                                      Self,
                                                      [],
                                                      [],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| self |) |)
                                                      |);
                                                      M.read (| scope |);
                                                      M.read (| units_per_item |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              []
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path
                                                                  "move_binary_format::errors::PartialVMError"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "move_binary_format::errors::PartialVMError"
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "move_binary_format::errors::PartialVMError"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                                          M.alloc (|
                                            M.write (|
                                              units_per_item,
                                              M.cast
                                                (Ty.path "u128")
                                                (M.call_closure (|
                                                  Ty.path "f32",
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Ty.path "f32",
                                                    [],
                                                    [ Ty.path "f32" ],
                                                    "mul",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.read (| growth_factor |);
                                                    M.cast
                                                      (Ty.path "f32")
                                                      (M.read (| units_per_item |))
                                                  ]
                                                |))
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom ProvidedMethod_add_items_with_growth :
    M.IsProvidedMethod
      "move_bytecode_verifier_meter::Meter"
      "add_items_with_growth"
      add_items_with_growth.
End Meter.

Module Impl_move_bytecode_verifier_meter_Meter_for_ref_mut_Dyn_move_bytecode_verifier_meter_Meter_Trait.
  Definition Self : Ty.t :=
    Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("move_bytecode_verifier_meter::Meter::Trait", []) ] ].
  
  (*
      fn enter_scope(&mut self, name: &str, scope: Scope) {
          ( *self).enter_scope(name, scope)
      }
  *)
  Definition enter_scope (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; name; scope ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let name := M.alloc (| name |) in
        let scope := M.alloc (| scope |) in
        M.call_closure (|
          Ty.tuple [],
          M.get_trait_method (|
            "move_bytecode_verifier_meter::Meter",
            Ty.dyn [ ("move_bytecode_verifier_meter::Meter::Trait", []) ],
            [],
            [],
            "enter_scope",
            [],
            []
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| name |) |) |);
            M.read (| scope |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn transfer(&mut self, from: Scope, to: Scope, factor: f32) -> PartialVMResult<()> {
          ( *self).transfer(from, to, factor)
      }
  *)
  Definition transfer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; from; to; factor ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let from := M.alloc (| from |) in
        let to := M.alloc (| to |) in
        let factor := M.alloc (| factor |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ],
          M.get_trait_method (|
            "move_bytecode_verifier_meter::Meter",
            Ty.dyn [ ("move_bytecode_verifier_meter::Meter::Trait", []) ],
            [],
            [],
            "transfer",
            [],
            []
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.read (| from |);
            M.read (| to |);
            M.read (| factor |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  (*
      fn add(&mut self, scope: Scope, units: u128) -> PartialVMResult<()> {
          ( *self).add(scope, units)
      }
  *)
  Definition add (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [], [ self; scope; units ] =>
      ltac:(M.monadic
        (let self := M.alloc (| self |) in
        let scope := M.alloc (| scope |) in
        let units := M.alloc (| units |) in
        M.call_closure (|
          Ty.apply
            (Ty.path "core::result::Result")
            []
            [ Ty.tuple []; Ty.path "move_binary_format::errors::PartialVMError" ],
          M.get_trait_method (|
            "move_bytecode_verifier_meter::Meter",
            Ty.dyn [ ("move_bytecode_verifier_meter::Meter::Trait", []) ],
            [],
            [],
            "add",
            [],
            []
          |),
          [
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.read (| M.deref (| M.read (| self |) |) |) |)
            |);
            M.read (| scope |);
            M.read (| units |)
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Axiom Implements :
    M.IsTraitInstance
      "move_bytecode_verifier_meter::Meter"
      (* Trait polymorphic consts *) []
      (* Trait polymorphic types *) []
      Self
      (* Instance *)
      [
        ("enter_scope", InstanceField.Method enter_scope);
        ("transfer", InstanceField.Method transfer);
        ("add", InstanceField.Method add)
      ].
End Impl_move_bytecode_verifier_meter_Meter_for_ref_mut_Dyn_move_bytecode_verifier_meter_Meter_Trait.
