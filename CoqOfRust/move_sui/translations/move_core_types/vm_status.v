(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module vm_status.
  Definition value_VALIDATION_STATUS_MIN_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 0 |) |))).
  
  Global Instance Instance_IsConstant_value_VALIDATION_STATUS_MIN_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::VALIDATION_STATUS_MIN_CODE"
      value_VALIDATION_STATUS_MIN_CODE.
  Admitted.
  Global Typeclasses Opaque value_VALIDATION_STATUS_MIN_CODE.
  
  Definition value_VALIDATION_STATUS_MAX_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 999 |) |))).
  
  Global Instance Instance_IsConstant_value_VALIDATION_STATUS_MAX_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::VALIDATION_STATUS_MAX_CODE"
      value_VALIDATION_STATUS_MAX_CODE.
  Admitted.
  Global Typeclasses Opaque value_VALIDATION_STATUS_MAX_CODE.
  
  Definition value_VERIFICATION_STATUS_MIN_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 1000 |) |))).
  
  Global Instance Instance_IsConstant_value_VERIFICATION_STATUS_MIN_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::VERIFICATION_STATUS_MIN_CODE"
      value_VERIFICATION_STATUS_MIN_CODE.
  Admitted.
  Global Typeclasses Opaque value_VERIFICATION_STATUS_MIN_CODE.
  
  Definition value_VERIFICATION_STATUS_MAX_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 1999 |) |))).
  
  Global Instance Instance_IsConstant_value_VERIFICATION_STATUS_MAX_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::VERIFICATION_STATUS_MAX_CODE"
      value_VERIFICATION_STATUS_MAX_CODE.
  Admitted.
  Global Typeclasses Opaque value_VERIFICATION_STATUS_MAX_CODE.
  
  Definition value_INVARIANT_VIOLATION_STATUS_MIN_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 2000 |) |))).
  
  Global Instance Instance_IsConstant_value_INVARIANT_VIOLATION_STATUS_MIN_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::INVARIANT_VIOLATION_STATUS_MIN_CODE"
      value_INVARIANT_VIOLATION_STATUS_MIN_CODE.
  Admitted.
  Global Typeclasses Opaque value_INVARIANT_VIOLATION_STATUS_MIN_CODE.
  
  Definition value_INVARIANT_VIOLATION_STATUS_MAX_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 2999 |) |))).
  
  Global Instance Instance_IsConstant_value_INVARIANT_VIOLATION_STATUS_MAX_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::INVARIANT_VIOLATION_STATUS_MAX_CODE"
      value_INVARIANT_VIOLATION_STATUS_MAX_CODE.
  Admitted.
  Global Typeclasses Opaque value_INVARIANT_VIOLATION_STATUS_MAX_CODE.
  
  Definition value_DESERIALIZATION_STATUS_MIN_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 3000 |) |))).
  
  Global Instance Instance_IsConstant_value_DESERIALIZATION_STATUS_MIN_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::DESERIALIZATION_STATUS_MIN_CODE"
      value_DESERIALIZATION_STATUS_MIN_CODE.
  Admitted.
  Global Typeclasses Opaque value_DESERIALIZATION_STATUS_MIN_CODE.
  
  Definition value_DESERIALIZATION_STATUS_MAX_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 3999 |) |))).
  
  Global Instance Instance_IsConstant_value_DESERIALIZATION_STATUS_MAX_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::DESERIALIZATION_STATUS_MAX_CODE"
      value_DESERIALIZATION_STATUS_MAX_CODE.
  Admitted.
  Global Typeclasses Opaque value_DESERIALIZATION_STATUS_MAX_CODE.
  
  Definition value_EXECUTION_STATUS_MIN_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 4000 |) |))).
  
  Global Instance Instance_IsConstant_value_EXECUTION_STATUS_MIN_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::EXECUTION_STATUS_MIN_CODE"
      value_EXECUTION_STATUS_MIN_CODE.
  Admitted.
  Global Typeclasses Opaque value_EXECUTION_STATUS_MIN_CODE.
  
  Definition value_EXECUTION_STATUS_MAX_CODE
      (ε : list Value.t)
      (τ : list Ty.t)
      (α : list Value.t)
      : M :=
    ltac:(M.monadic (M.alloc (| M.alloc (| Value.Integer IntegerKind.U64 4999 |) |))).
  
  Global Instance Instance_IsConstant_value_EXECUTION_STATUS_MAX_CODE :
    M.IsFunction.C
      "move_core_types::vm_status::EXECUTION_STATUS_MAX_CODE"
      value_EXECUTION_STATUS_MAX_CODE.
  Admitted.
  Global Typeclasses Opaque value_EXECUTION_STATUS_MAX_CODE.
  
  (*
  Enum StatusType
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "Validation";
          item := StructTuple [];
        };
        {
          name := "Verification";
          item := StructTuple [];
        };
        {
          name := "InvariantViolation";
          item := StructTuple [];
        };
        {
          name := "Deserialization";
          item := StructTuple [];
        };
        {
          name := "Execution";
          item := StructTuple [];
        };
        {
          name := "Unknown";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_StatusType_Validation :
    M.IsDiscriminant "move_core_types::vm_status::StatusType::Validation" 0.
  Axiom IsDiscriminant_StatusType_Verification :
    M.IsDiscriminant "move_core_types::vm_status::StatusType::Verification" 1.
  Axiom IsDiscriminant_StatusType_InvariantViolation :
    M.IsDiscriminant "move_core_types::vm_status::StatusType::InvariantViolation" 2.
  Axiom IsDiscriminant_StatusType_Deserialization :
    M.IsDiscriminant "move_core_types::vm_status::StatusType::Deserialization" 3.
  Axiom IsDiscriminant_StatusType_Execution :
    M.IsDiscriminant "move_core_types::vm_status::StatusType::Execution" 4.
  Axiom IsDiscriminant_StatusType_Unknown :
    M.IsDiscriminant "move_core_types::vm_status::StatusType::Unknown" 5.
  
  Module Impl_core_clone_Clone_for_move_core_types_vm_status_StatusType.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusType".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Ty.apply (Ty.path "*") [] [ Ty.path "move_core_types::vm_status::StatusType" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "move_core_types::vm_status::StatusType::Validation"
                      |) in
                    M.alloc (|
                      Value.StructTuple "move_core_types::vm_status::StatusType::Validation" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "move_core_types::vm_status::StatusType::Verification"
                      |) in
                    M.alloc (|
                      Value.StructTuple "move_core_types::vm_status::StatusType::Verification" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "move_core_types::vm_status::StatusType::InvariantViolation"
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "move_core_types::vm_status::StatusType::InvariantViolation"
                        []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "move_core_types::vm_status::StatusType::Deserialization"
                      |) in
                    M.alloc (|
                      Value.StructTuple "move_core_types::vm_status::StatusType::Deserialization" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "move_core_types::vm_status::StatusType::Execution"
                      |) in
                    M.alloc (|
                      Value.StructTuple "move_core_types::vm_status::StatusType::Execution" []
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "move_core_types::vm_status::StatusType::Unknown"
                      |) in
                    M.alloc (|
                      Value.StructTuple "move_core_types::vm_status::StatusType::Unknown" []
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_move_core_types_vm_status_StatusType.
  
  Module Impl_core_marker_StructuralPartialEq_for_move_core_types_vm_status_StatusType.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusType".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_move_core_types_vm_status_StatusType.
  
  Module Impl_core_cmp_PartialEq_move_core_types_vm_status_StatusType_for_move_core_types_vm_status_StatusType.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusType".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusType" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusType" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "move_core_types::vm_status::StatusType" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_move_core_types_vm_status_StatusType_for_move_core_types_vm_status_StatusType.
  
  Module Impl_core_cmp_Eq_for_move_core_types_vm_status_StatusType.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusType".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_move_core_types_vm_status_StatusType.
  
  Module Impl_core_fmt_Debug_for_move_core_types_vm_status_StatusType.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusType".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.read (|
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusType::Validation"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Validation" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusType::Verification"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Verification" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusType::InvariantViolation"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "InvariantViolation" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusType::Deserialization"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Deserialization" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusType::Execution"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Execution" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusType::Unknown"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Unknown" |) |) |)
                        |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_move_core_types_vm_status_StatusType.
  
  Module Impl_core_hash_Hash_for_move_core_types_vm_status_StatusType.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusType".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "isize" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusType" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "isize",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_move_core_types_vm_status_StatusType.
  
  (*
  Enum StatusCode
  {
    const_params := [];
    ty_params := [];
    variants :=
      [
        {
          name := "UNKNOWN_VALIDATION_STATUS";
          item := StructTuple [];
        };
        {
          name := "INVALID_SIGNATURE";
          item := StructTuple [];
        };
        {
          name := "INVALID_AUTH_KEY";
          item := StructTuple [];
        };
        {
          name := "SEQUENCE_NUMBER_TOO_OLD";
          item := StructTuple [];
        };
        {
          name := "SEQUENCE_NUMBER_TOO_NEW";
          item := StructTuple [];
        };
        {
          name := "INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE";
          item := StructTuple [];
        };
        {
          name := "TRANSACTION_EXPIRED";
          item := StructTuple [];
        };
        {
          name := "SENDING_ACCOUNT_DOES_NOT_EXIST";
          item := StructTuple [];
        };
        {
          name := "REJECTED_WRITE_SET";
          item := StructTuple [];
        };
        {
          name := "INVALID_WRITE_SET";
          item := StructTuple [];
        };
        {
          name := "EXCEEDED_MAX_TRANSACTION_SIZE";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_SCRIPT";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_MODULE";
          item := StructTuple [];
        };
        {
          name := "MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND";
          item := StructTuple [];
        };
        {
          name := "MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS";
          item := StructTuple [];
        };
        {
          name := "GAS_UNIT_PRICE_BELOW_MIN_BOUND";
          item := StructTuple [];
        };
        {
          name := "GAS_UNIT_PRICE_ABOVE_MAX_BOUND";
          item := StructTuple [];
        };
        {
          name := "INVALID_GAS_SPECIFIER";
          item := StructTuple [];
        };
        {
          name := "SENDING_ACCOUNT_FROZEN";
          item := StructTuple [];
        };
        {
          name := "UNABLE_TO_DESERIALIZE_ACCOUNT";
          item := StructTuple [];
        };
        {
          name := "CURRENCY_INFO_DOES_NOT_EXIST";
          item := StructTuple [];
        };
        {
          name := "INVALID_MODULE_PUBLISHER";
          item := StructTuple [];
        };
        {
          name := "NO_ACCOUNT_ROLE";
          item := StructTuple [];
        };
        {
          name := "BAD_CHAIN_ID";
          item := StructTuple [];
        };
        {
          name := "SEQUENCE_NUMBER_TOO_BIG";
          item := StructTuple [];
        };
        {
          name := "BAD_TRANSACTION_FEE_CURRENCY";
          item := StructTuple [];
        };
        {
          name := "FEATURE_UNDER_GATING";
          item := StructTuple [];
        };
        {
          name := "SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "SIGNERS_CONTAIN_DUPLICATES";
          item := StructTuple [];
        };
        {
          name := "SEQUENCE_NONCE_INVALID";
          item := StructTuple [];
        };
        {
          name := "CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_VERIFICATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "INDEX_OUT_OF_BOUNDS";
          item := StructTuple [];
        };
        {
          name := "INVALID_SIGNATURE_TOKEN";
          item := StructTuple [];
        };
        {
          name := "RECURSIVE_STRUCT_DEFINITION";
          item := StructTuple [];
        };
        {
          name := "FIELD_MISSING_TYPE_ABILITY";
          item := StructTuple [];
        };
        {
          name := "INVALID_FALL_THROUGH";
          item := StructTuple [];
        };
        {
          name := "NEGATIVE_STACK_SIZE_WITHIN_BLOCK";
          item := StructTuple [];
        };
        {
          name := "INVALID_MAIN_FUNCTION_SIGNATURE";
          item := StructTuple [];
        };
        {
          name := "DUPLICATE_ELEMENT";
          item := StructTuple [];
        };
        {
          name := "INVALID_MODULE_HANDLE";
          item := StructTuple [];
        };
        {
          name := "UNIMPLEMENTED_HANDLE";
          item := StructTuple [];
        };
        {
          name := "LOOKUP_FAILED";
          item := StructTuple [];
        };
        {
          name := "TYPE_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "MISSING_DEPENDENCY";
          item := StructTuple [];
        };
        {
          name := "POP_WITHOUT_DROP_ABILITY";
          item := StructTuple [];
        };
        {
          name := "BR_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "ABORT_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "STLOC_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "STLOC_UNSAFE_TO_DESTROY_ERROR";
          item := StructTuple [];
        };
        {
          name := "UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED";
          item := StructTuple [];
        };
        {
          name := "RET_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "RET_BORROWED_MUTABLE_REFERENCE_ERROR";
          item := StructTuple [];
        };
        {
          name := "FREEZEREF_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWFIELD_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWFIELD_BAD_FIELD_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "COPYLOC_UNAVAILABLE_ERROR";
          item := StructTuple [];
        };
        {
          name := "COPYLOC_WITHOUT_COPY_ABILITY";
          item := StructTuple [];
        };
        {
          name := "COPYLOC_EXISTS_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "MOVELOC_UNAVAILABLE_ERROR";
          item := StructTuple [];
        };
        {
          name := "MOVELOC_EXISTS_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWLOC_REFERENCE_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWLOC_UNAVAILABLE_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWLOC_EXISTS_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "CALL_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "CALL_BORROWED_MUTABLE_REFERENCE_ERROR";
          item := StructTuple [];
        };
        {
          name := "PACK_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "UNPACK_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "READREF_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "READREF_WITHOUT_COPY_ABILITY";
          item := StructTuple [];
        };
        {
          name := "READREF_EXISTS_MUTABLE_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "WRITEREF_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "WRITEREF_WITHOUT_DROP_ABILITY";
          item := StructTuple [];
        };
        {
          name := "WRITEREF_EXISTS_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "WRITEREF_NO_MUTABLE_REFERENCE_ERROR";
          item := StructTuple [];
        };
        {
          name := "INTEGER_OP_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "BOOLEAN_OP_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "EQUALITY_OP_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "EXISTS_WITHOUT_KEY_ABILITY_OR_BAD_ARGUMENT";
          item := StructTuple [];
        };
        {
          name := "BORROWGLOBAL_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "BORROWGLOBAL_WITHOUT_KEY_ABILITY";
          item := StructTuple [];
        };
        {
          name := "MOVEFROM_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "MOVEFROM_WITHOUT_KEY_ABILITY";
          item := StructTuple [];
        };
        {
          name := "MOVETO_TYPE_MISMATCH_ERROR";
          item := StructTuple [];
        };
        {
          name := "MOVETO_WITHOUT_KEY_ABILITY";
          item := StructTuple [];
        };
        {
          name := "MODULE_ADDRESS_DOES_NOT_MATCH_SENDER";
          item := StructTuple [];
        };
        {
          name := "NO_MODULE_HANDLES";
          item := StructTuple [];
        };
        {
          name := "POSITIVE_STACK_SIZE_AT_BLOCK_END";
          item := StructTuple [];
        };
        {
          name := "MISSING_ACQUIRES_ANNOTATION";
          item := StructTuple [];
        };
        {
          name := "EXTRANEOUS_ACQUIRES_ANNOTATION";
          item := StructTuple [];
        };
        {
          name := "DUPLICATE_ACQUIRES_ANNOTATION";
          item := StructTuple [];
        };
        {
          name := "INVALID_ACQUIRES_ANNOTATION";
          item := StructTuple [];
        };
        {
          name := "GLOBAL_REFERENCE_ERROR";
          item := StructTuple [];
        };
        {
          name := "CONSTRAINT_NOT_SATISFIED";
          item := StructTuple [];
        };
        {
          name := "NUMBER_OF_TYPE_ARGUMENTS_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "LOOP_IN_INSTANTIATION_GRAPH";
          item := StructTuple [];
        };
        {
          name := "ZERO_SIZED_STRUCT";
          item := StructTuple [];
        };
        {
          name := "LINKER_ERROR";
          item := StructTuple [];
        };
        {
          name := "INVALID_CONSTANT_TYPE";
          item := StructTuple [];
        };
        {
          name := "MALFORMED_CONSTANT_DATA";
          item := StructTuple [];
        };
        {
          name := "EMPTY_CODE_UNIT";
          item := StructTuple [];
        };
        {
          name := "INVALID_LOOP_SPLIT";
          item := StructTuple [];
        };
        {
          name := "INVALID_LOOP_BREAK";
          item := StructTuple [];
        };
        {
          name := "INVALID_LOOP_CONTINUE";
          item := StructTuple [];
        };
        {
          name := "UNSAFE_RET_UNUSED_VALUES_WITHOUT_DROP";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_LOCALS";
          item := StructTuple [];
        };
        {
          name := "GENERIC_MEMBER_OPCODE_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "FUNCTION_RESOLUTION_FAILURE";
          item := StructTuple [];
        };
        {
          name := "INVALID_OPERATION_IN_SCRIPT";
          item := StructTuple [];
        };
        {
          name := "DUPLICATE_MODULE_NAME";
          item := StructTuple [];
        };
        {
          name := "BACKWARD_INCOMPATIBLE_MODULE_UPDATE";
          item := StructTuple [];
        };
        {
          name := "CYCLIC_MODULE_DEPENDENCY";
          item := StructTuple [];
        };
        {
          name := "NUMBER_OF_ARGUMENTS_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "INVALID_PARAM_TYPE_FOR_DESERIALIZATION";
          item := StructTuple [];
        };
        {
          name := "FAILED_TO_DESERIALIZE_ARGUMENT";
          item := StructTuple [];
        };
        {
          name := "NUMBER_OF_SIGNER_ARGUMENTS_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "CALLED_SCRIPT_VISIBLE_FROM_NON_SCRIPT_VISIBLE";
          item := StructTuple [];
        };
        {
          name := "EXECUTE_ENTRY_FUNCTION_CALLED_ON_NON_ENTRY_FUNCTION";
          item := StructTuple [];
        };
        {
          name := "INVALID_FRIEND_DECL_WITH_SELF";
          item := StructTuple [];
        };
        {
          name := "INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS";
          item := StructTuple [];
        };
        {
          name := "INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES";
          item := StructTuple [];
        };
        {
          name := "CYCLIC_MODULE_FRIENDSHIP";
          item := StructTuple [];
        };
        {
          name := "INVALID_PHANTOM_TYPE_PARAM_POSITION";
          item := StructTuple [];
        };
        {
          name := "VEC_UPDATE_EXISTS_MUTABLE_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "VEC_BORROW_ELEMENT_EXISTS_MUTABLE_BORROW_ERROR";
          item := StructTuple [];
        };
        {
          name := "LOOP_MAX_DEPTH_REACHED";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_TYPE_PARAMETERS";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_PARAMETERS";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_BASIC_BLOCKS";
          item := StructTuple [];
        };
        {
          name := "VALUE_STACK_OVERFLOW";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_TYPE_NODES";
          item := StructTuple [];
        };
        {
          name := "VALUE_STACK_PUSH_OVERFLOW";
          item := StructTuple [];
        };
        {
          name := "MAX_DEPENDENCY_DEPTH_REACHED";
          item := StructTuple [];
        };
        {
          name := "MAX_FUNCTION_DEFINITIONS_REACHED";
          item := StructTuple [];
        };
        {
          name := "MAX_STRUCT_DEFINITIONS_REACHED";
          item := StructTuple [];
        };
        {
          name := "MAX_FIELD_DEFINITIONS_REACHED";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_BACK_EDGES";
          item := StructTuple [];
        };
        {
          name := "RESERVED_VERIFICATION_ERROR_1";
          item := StructTuple [];
        };
        {
          name := "RESERVED_VERIFICATION_ERROR_2";
          item := StructTuple [];
        };
        {
          name := "RESERVED_VERIFICATION_ERROR_3";
          item := StructTuple [];
        };
        {
          name := "RESERVED_VERIFICATION_ERROR_4";
          item := StructTuple [];
        };
        {
          name := "RESERVED_VERIFICATION_ERROR_5";
          item := StructTuple [];
        };
        {
          name := "TOO_MANY_VECTOR_ELEMENTS";
          item := StructTuple [];
        };
        {
          name := "IDENTIFIER_TOO_LONG";
          item := StructTuple [];
        };
        {
          name := "PROGRAM_TOO_COMPLEX";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_INVARIANT_VIOLATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "EMPTY_VALUE_STACK";
          item := StructTuple [];
        };
        {
          name := "PC_OVERFLOW";
          item := StructTuple [];
        };
        {
          name := "VERIFICATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "STORAGE_ERROR";
          item := StructTuple [];
        };
        {
          name := "INTERNAL_TYPE_ERROR";
          item := StructTuple [];
        };
        {
          name := "EVENT_KEY_MISMATCH";
          item := StructTuple [];
        };
        {
          name := "UNREACHABLE";
          item := StructTuple [];
        };
        {
          name := "VM_STARTUP_FAILURE";
          item := StructTuple [];
        };
        {
          name := "UNEXPECTED_ERROR_FROM_KNOWN_MOVE_FUNCTION";
          item := StructTuple [];
        };
        {
          name := "VERIFIER_INVARIANT_VIOLATION";
          item := StructTuple [];
        };
        {
          name := "UNEXPECTED_VERIFIER_ERROR";
          item := StructTuple [];
        };
        {
          name := "UNEXPECTED_DESERIALIZATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "FAILED_TO_SERIALIZE_WRITE_SET_CHANGES";
          item := StructTuple [];
        };
        {
          name := "FAILED_TO_DESERIALIZE_RESOURCE";
          item := StructTuple [];
        };
        {
          name := "TYPE_RESOLUTION_FAILURE";
          item := StructTuple [];
        };
        {
          name := "DUPLICATE_NATIVE_FUNCTION";
          item := StructTuple [];
        };
        {
          name := "ARITHMETIC_OVERFLOW";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_BINARY_ERROR";
          item := StructTuple [];
        };
        {
          name := "MALFORMED";
          item := StructTuple [];
        };
        {
          name := "BAD_MAGIC";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_VERSION";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_TABLE_TYPE";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_SIGNATURE_TYPE";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_SERIALIZED_TYPE";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_OPCODE";
          item := StructTuple [];
        };
        {
          name := "BAD_HEADER_TABLE";
          item := StructTuple [];
        };
        {
          name := "UNEXPECTED_SIGNATURE_TYPE";
          item := StructTuple [];
        };
        {
          name := "DUPLICATE_TABLE";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_ABILITY";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_NATIVE_STRUCT_FLAG";
          item := StructTuple [];
        };
        {
          name := "BAD_U16";
          item := StructTuple [];
        };
        {
          name := "BAD_U32";
          item := StructTuple [];
        };
        {
          name := "BAD_U64";
          item := StructTuple [];
        };
        {
          name := "BAD_U128";
          item := StructTuple [];
        };
        {
          name := "BAD_U256";
          item := StructTuple [];
        };
        {
          name := "VALUE_SERIALIZATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "VALUE_DESERIALIZATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "CODE_DESERIALIZATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "INVALID_FLAG_BITS";
          item := StructTuple [];
        };
        {
          name := "TRAILING_BYTES";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_RUNTIME_STATUS";
          item := StructTuple [];
        };
        {
          name := "EXECUTED";
          item := StructTuple [];
        };
        {
          name := "OUT_OF_GAS";
          item := StructTuple [];
        };
        {
          name := "RESOURCE_DOES_NOT_EXIST";
          item := StructTuple [];
        };
        {
          name := "RESOURCE_ALREADY_EXISTS";
          item := StructTuple [];
        };
        {
          name := "MISSING_DATA";
          item := StructTuple [];
        };
        {
          name := "DATA_FORMAT_ERROR";
          item := StructTuple [];
        };
        {
          name := "ABORTED";
          item := StructTuple [];
        };
        {
          name := "ARITHMETIC_ERROR";
          item := StructTuple [];
        };
        {
          name := "VECTOR_OPERATION_ERROR";
          item := StructTuple [];
        };
        {
          name := "EXECUTION_STACK_OVERFLOW";
          item := StructTuple [];
        };
        {
          name := "CALL_STACK_OVERFLOW";
          item := StructTuple [];
        };
        {
          name := "VM_MAX_TYPE_DEPTH_REACHED";
          item := StructTuple [];
        };
        {
          name := "VM_MAX_VALUE_DEPTH_REACHED";
          item := StructTuple [];
        };
        {
          name := "VM_EXTENSION_ERROR";
          item := StructTuple [];
        };
        {
          name := "STORAGE_WRITE_LIMIT_REACHED";
          item := StructTuple [];
        };
        {
          name := "MEMORY_LIMIT_EXCEEDED";
          item := StructTuple [];
        };
        {
          name := "VM_MAX_TYPE_NODES_REACHED";
          item := StructTuple [];
        };
        {
          name := "UNKNOWN_STATUS";
          item := StructTuple [];
        }
      ];
  }
  *)
  
  Axiom IsDiscriminant_StatusCode_UNKNOWN_VALIDATION_STATUS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_VALIDATION_STATUS" 0.
  Axiom IsDiscriminant_StatusCode_INVALID_SIGNATURE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_SIGNATURE" 1.
  Axiom IsDiscriminant_StatusCode_INVALID_AUTH_KEY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_AUTH_KEY" 2.
  Axiom IsDiscriminant_StatusCode_SEQUENCE_NUMBER_TOO_OLD :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_OLD" 3.
  Axiom IsDiscriminant_StatusCode_SEQUENCE_NUMBER_TOO_NEW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_NEW" 4.
  Axiom IsDiscriminant_StatusCode_INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE"
      5.
  Axiom IsDiscriminant_StatusCode_TRANSACTION_EXPIRED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TRANSACTION_EXPIRED" 6.
  Axiom IsDiscriminant_StatusCode_SENDING_ACCOUNT_DOES_NOT_EXIST :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SENDING_ACCOUNT_DOES_NOT_EXIST" 7.
  Axiom IsDiscriminant_StatusCode_REJECTED_WRITE_SET :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::REJECTED_WRITE_SET" 8.
  Axiom IsDiscriminant_StatusCode_INVALID_WRITE_SET :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_WRITE_SET" 9.
  Axiom IsDiscriminant_StatusCode_EXCEEDED_MAX_TRANSACTION_SIZE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EXCEEDED_MAX_TRANSACTION_SIZE" 10.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_SCRIPT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_SCRIPT" 11.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_MODULE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_MODULE" 12.
  Axiom IsDiscriminant_StatusCode_MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND"
      13.
  Axiom IsDiscriminant_StatusCode_MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS"
      14.
  Axiom IsDiscriminant_StatusCode_GAS_UNIT_PRICE_BELOW_MIN_BOUND :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::GAS_UNIT_PRICE_BELOW_MIN_BOUND" 15.
  Axiom IsDiscriminant_StatusCode_GAS_UNIT_PRICE_ABOVE_MAX_BOUND :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::GAS_UNIT_PRICE_ABOVE_MAX_BOUND" 16.
  Axiom IsDiscriminant_StatusCode_INVALID_GAS_SPECIFIER :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_GAS_SPECIFIER" 17.
  Axiom IsDiscriminant_StatusCode_SENDING_ACCOUNT_FROZEN :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SENDING_ACCOUNT_FROZEN" 18.
  Axiom IsDiscriminant_StatusCode_UNABLE_TO_DESERIALIZE_ACCOUNT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNABLE_TO_DESERIALIZE_ACCOUNT" 19.
  Axiom IsDiscriminant_StatusCode_CURRENCY_INFO_DOES_NOT_EXIST :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CURRENCY_INFO_DOES_NOT_EXIST" 20.
  Axiom IsDiscriminant_StatusCode_INVALID_MODULE_PUBLISHER :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_MODULE_PUBLISHER" 21.
  Axiom IsDiscriminant_StatusCode_NO_ACCOUNT_ROLE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::NO_ACCOUNT_ROLE" 22.
  Axiom IsDiscriminant_StatusCode_BAD_CHAIN_ID :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_CHAIN_ID" 23.
  Axiom IsDiscriminant_StatusCode_SEQUENCE_NUMBER_TOO_BIG :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_BIG" 24.
  Axiom IsDiscriminant_StatusCode_BAD_TRANSACTION_FEE_CURRENCY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_TRANSACTION_FEE_CURRENCY" 25.
  Axiom IsDiscriminant_StatusCode_FEATURE_UNDER_GATING :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::FEATURE_UNDER_GATING" 26.
  Axiom IsDiscriminant_StatusCode_SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH"
      27.
  Axiom IsDiscriminant_StatusCode_SIGNERS_CONTAIN_DUPLICATES :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SIGNERS_CONTAIN_DUPLICATES" 28.
  Axiom IsDiscriminant_StatusCode_SEQUENCE_NONCE_INVALID :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::SEQUENCE_NONCE_INVALID" 29.
  Axiom IsDiscriminant_StatusCode_CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST" 30.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_VERIFICATION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_VERIFICATION_ERROR" 1000.
  Axiom IsDiscriminant_StatusCode_INDEX_OUT_OF_BOUNDS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INDEX_OUT_OF_BOUNDS" 1001.
  Axiom IsDiscriminant_StatusCode_INVALID_SIGNATURE_TOKEN :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_SIGNATURE_TOKEN" 1003.
  Axiom IsDiscriminant_StatusCode_RECURSIVE_STRUCT_DEFINITION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RECURSIVE_STRUCT_DEFINITION" 1005.
  Axiom IsDiscriminant_StatusCode_FIELD_MISSING_TYPE_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::FIELD_MISSING_TYPE_ABILITY" 1006.
  Axiom IsDiscriminant_StatusCode_INVALID_FALL_THROUGH :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_FALL_THROUGH" 1007.
  Axiom IsDiscriminant_StatusCode_NEGATIVE_STACK_SIZE_WITHIN_BLOCK :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::NEGATIVE_STACK_SIZE_WITHIN_BLOCK"
      1009.
  Axiom IsDiscriminant_StatusCode_INVALID_MAIN_FUNCTION_SIGNATURE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_MAIN_FUNCTION_SIGNATURE" 1011.
  Axiom IsDiscriminant_StatusCode_DUPLICATE_ELEMENT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::DUPLICATE_ELEMENT" 1012.
  Axiom IsDiscriminant_StatusCode_INVALID_MODULE_HANDLE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_MODULE_HANDLE" 1013.
  Axiom IsDiscriminant_StatusCode_UNIMPLEMENTED_HANDLE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNIMPLEMENTED_HANDLE" 1014.
  Axiom IsDiscriminant_StatusCode_LOOKUP_FAILED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::LOOKUP_FAILED" 1017.
  Axiom IsDiscriminant_StatusCode_TYPE_MISMATCH :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TYPE_MISMATCH" 1020.
  Axiom IsDiscriminant_StatusCode_MISSING_DEPENDENCY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MISSING_DEPENDENCY" 1021.
  Axiom IsDiscriminant_StatusCode_POP_WITHOUT_DROP_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::POP_WITHOUT_DROP_ABILITY" 1023.
  Axiom IsDiscriminant_StatusCode_BR_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BR_TYPE_MISMATCH_ERROR" 1025.
  Axiom IsDiscriminant_StatusCode_ABORT_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::ABORT_TYPE_MISMATCH_ERROR" 1026.
  Axiom IsDiscriminant_StatusCode_STLOC_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::STLOC_TYPE_MISMATCH_ERROR" 1027.
  Axiom IsDiscriminant_StatusCode_STLOC_UNSAFE_TO_DESTROY_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::STLOC_UNSAFE_TO_DESTROY_ERROR" 1028.
  Axiom IsDiscriminant_StatusCode_UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED"
      1029.
  Axiom IsDiscriminant_StatusCode_RET_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RET_TYPE_MISMATCH_ERROR" 1030.
  Axiom IsDiscriminant_StatusCode_RET_BORROWED_MUTABLE_REFERENCE_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::RET_BORROWED_MUTABLE_REFERENCE_ERROR"
      1031.
  Axiom IsDiscriminant_StatusCode_FREEZEREF_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::FREEZEREF_TYPE_MISMATCH_ERROR" 1032.
  Axiom IsDiscriminant_StatusCode_FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR"
      1033.
  Axiom IsDiscriminant_StatusCode_BORROWFIELD_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BORROWFIELD_TYPE_MISMATCH_ERROR" 1034.
  Axiom IsDiscriminant_StatusCode_BORROWFIELD_BAD_FIELD_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BORROWFIELD_BAD_FIELD_ERROR" 1035.
  Axiom IsDiscriminant_StatusCode_BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR"
      1036.
  Axiom IsDiscriminant_StatusCode_COPYLOC_UNAVAILABLE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::COPYLOC_UNAVAILABLE_ERROR" 1037.
  Axiom IsDiscriminant_StatusCode_COPYLOC_WITHOUT_COPY_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::COPYLOC_WITHOUT_COPY_ABILITY" 1038.
  Axiom IsDiscriminant_StatusCode_COPYLOC_EXISTS_BORROW_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::COPYLOC_EXISTS_BORROW_ERROR" 1039.
  Axiom IsDiscriminant_StatusCode_MOVELOC_UNAVAILABLE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MOVELOC_UNAVAILABLE_ERROR" 1040.
  Axiom IsDiscriminant_StatusCode_MOVELOC_EXISTS_BORROW_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MOVELOC_EXISTS_BORROW_ERROR" 1041.
  Axiom IsDiscriminant_StatusCode_BORROWLOC_REFERENCE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BORROWLOC_REFERENCE_ERROR" 1042.
  Axiom IsDiscriminant_StatusCode_BORROWLOC_UNAVAILABLE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BORROWLOC_UNAVAILABLE_ERROR" 1043.
  Axiom IsDiscriminant_StatusCode_BORROWLOC_EXISTS_BORROW_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BORROWLOC_EXISTS_BORROW_ERROR" 1044.
  Axiom IsDiscriminant_StatusCode_CALL_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CALL_TYPE_MISMATCH_ERROR" 1045.
  Axiom IsDiscriminant_StatusCode_CALL_BORROWED_MUTABLE_REFERENCE_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::CALL_BORROWED_MUTABLE_REFERENCE_ERROR"
      1046.
  Axiom IsDiscriminant_StatusCode_PACK_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::PACK_TYPE_MISMATCH_ERROR" 1047.
  Axiom IsDiscriminant_StatusCode_UNPACK_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNPACK_TYPE_MISMATCH_ERROR" 1048.
  Axiom IsDiscriminant_StatusCode_READREF_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::READREF_TYPE_MISMATCH_ERROR" 1049.
  Axiom IsDiscriminant_StatusCode_READREF_WITHOUT_COPY_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::READREF_WITHOUT_COPY_ABILITY" 1050.
  Axiom IsDiscriminant_StatusCode_READREF_EXISTS_MUTABLE_BORROW_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::READREF_EXISTS_MUTABLE_BORROW_ERROR"
      1051.
  Axiom IsDiscriminant_StatusCode_WRITEREF_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::WRITEREF_TYPE_MISMATCH_ERROR" 1052.
  Axiom IsDiscriminant_StatusCode_WRITEREF_WITHOUT_DROP_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::WRITEREF_WITHOUT_DROP_ABILITY" 1053.
  Axiom IsDiscriminant_StatusCode_WRITEREF_EXISTS_BORROW_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::WRITEREF_EXISTS_BORROW_ERROR" 1054.
  Axiom IsDiscriminant_StatusCode_WRITEREF_NO_MUTABLE_REFERENCE_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::WRITEREF_NO_MUTABLE_REFERENCE_ERROR"
      1055.
  Axiom IsDiscriminant_StatusCode_INTEGER_OP_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INTEGER_OP_TYPE_MISMATCH_ERROR" 1056.
  Axiom IsDiscriminant_StatusCode_BOOLEAN_OP_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BOOLEAN_OP_TYPE_MISMATCH_ERROR" 1057.
  Axiom IsDiscriminant_StatusCode_EQUALITY_OP_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EQUALITY_OP_TYPE_MISMATCH_ERROR" 1058.
  Axiom IsDiscriminant_StatusCode_EXISTS_WITHOUT_KEY_ABILITY_OR_BAD_ARGUMENT :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::EXISTS_WITHOUT_KEY_ABILITY_OR_BAD_ARGUMENT"
      1059.
  Axiom IsDiscriminant_StatusCode_BORROWGLOBAL_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::BORROWGLOBAL_TYPE_MISMATCH_ERROR"
      1060.
  Axiom IsDiscriminant_StatusCode_BORROWGLOBAL_WITHOUT_KEY_ABILITY :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::BORROWGLOBAL_WITHOUT_KEY_ABILITY"
      1061.
  Axiom IsDiscriminant_StatusCode_MOVEFROM_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MOVEFROM_TYPE_MISMATCH_ERROR" 1062.
  Axiom IsDiscriminant_StatusCode_MOVEFROM_WITHOUT_KEY_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MOVEFROM_WITHOUT_KEY_ABILITY" 1063.
  Axiom IsDiscriminant_StatusCode_MOVETO_TYPE_MISMATCH_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MOVETO_TYPE_MISMATCH_ERROR" 1064.
  Axiom IsDiscriminant_StatusCode_MOVETO_WITHOUT_KEY_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MOVETO_WITHOUT_KEY_ABILITY" 1065.
  Axiom IsDiscriminant_StatusCode_MODULE_ADDRESS_DOES_NOT_MATCH_SENDER :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::MODULE_ADDRESS_DOES_NOT_MATCH_SENDER"
      1067.
  Axiom IsDiscriminant_StatusCode_NO_MODULE_HANDLES :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::NO_MODULE_HANDLES" 1068.
  Axiom IsDiscriminant_StatusCode_POSITIVE_STACK_SIZE_AT_BLOCK_END :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::POSITIVE_STACK_SIZE_AT_BLOCK_END"
      1069.
  Axiom IsDiscriminant_StatusCode_MISSING_ACQUIRES_ANNOTATION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MISSING_ACQUIRES_ANNOTATION" 1070.
  Axiom IsDiscriminant_StatusCode_EXTRANEOUS_ACQUIRES_ANNOTATION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EXTRANEOUS_ACQUIRES_ANNOTATION" 1071.
  Axiom IsDiscriminant_StatusCode_DUPLICATE_ACQUIRES_ANNOTATION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::DUPLICATE_ACQUIRES_ANNOTATION" 1072.
  Axiom IsDiscriminant_StatusCode_INVALID_ACQUIRES_ANNOTATION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_ACQUIRES_ANNOTATION" 1073.
  Axiom IsDiscriminant_StatusCode_GLOBAL_REFERENCE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::GLOBAL_REFERENCE_ERROR" 1074.
  Axiom IsDiscriminant_StatusCode_CONSTRAINT_NOT_SATISFIED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CONSTRAINT_NOT_SATISFIED" 1075.
  Axiom IsDiscriminant_StatusCode_NUMBER_OF_TYPE_ARGUMENTS_MISMATCH :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::NUMBER_OF_TYPE_ARGUMENTS_MISMATCH"
      1076.
  Axiom IsDiscriminant_StatusCode_LOOP_IN_INSTANTIATION_GRAPH :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::LOOP_IN_INSTANTIATION_GRAPH" 1077.
  Axiom IsDiscriminant_StatusCode_ZERO_SIZED_STRUCT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::ZERO_SIZED_STRUCT" 1080.
  Axiom IsDiscriminant_StatusCode_LINKER_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::LINKER_ERROR" 1081.
  Axiom IsDiscriminant_StatusCode_INVALID_CONSTANT_TYPE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_CONSTANT_TYPE" 1082.
  Axiom IsDiscriminant_StatusCode_MALFORMED_CONSTANT_DATA :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MALFORMED_CONSTANT_DATA" 1083.
  Axiom IsDiscriminant_StatusCode_EMPTY_CODE_UNIT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EMPTY_CODE_UNIT" 1084.
  Axiom IsDiscriminant_StatusCode_INVALID_LOOP_SPLIT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_LOOP_SPLIT" 1085.
  Axiom IsDiscriminant_StatusCode_INVALID_LOOP_BREAK :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_LOOP_BREAK" 1086.
  Axiom IsDiscriminant_StatusCode_INVALID_LOOP_CONTINUE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_LOOP_CONTINUE" 1087.
  Axiom IsDiscriminant_StatusCode_UNSAFE_RET_UNUSED_VALUES_WITHOUT_DROP :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::UNSAFE_RET_UNUSED_VALUES_WITHOUT_DROP"
      1088.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_LOCALS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_LOCALS" 1089.
  Axiom IsDiscriminant_StatusCode_GENERIC_MEMBER_OPCODE_MISMATCH :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::GENERIC_MEMBER_OPCODE_MISMATCH" 1090.
  Axiom IsDiscriminant_StatusCode_FUNCTION_RESOLUTION_FAILURE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::FUNCTION_RESOLUTION_FAILURE" 1091.
  Axiom IsDiscriminant_StatusCode_INVALID_OPERATION_IN_SCRIPT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_OPERATION_IN_SCRIPT" 1094.
  Axiom IsDiscriminant_StatusCode_DUPLICATE_MODULE_NAME :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::DUPLICATE_MODULE_NAME" 1095.
  Axiom IsDiscriminant_StatusCode_BACKWARD_INCOMPATIBLE_MODULE_UPDATE :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::BACKWARD_INCOMPATIBLE_MODULE_UPDATE"
      1096.
  Axiom IsDiscriminant_StatusCode_CYCLIC_MODULE_DEPENDENCY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CYCLIC_MODULE_DEPENDENCY" 1097.
  Axiom IsDiscriminant_StatusCode_NUMBER_OF_ARGUMENTS_MISMATCH :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::NUMBER_OF_ARGUMENTS_MISMATCH" 1098.
  Axiom IsDiscriminant_StatusCode_INVALID_PARAM_TYPE_FOR_DESERIALIZATION :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::INVALID_PARAM_TYPE_FOR_DESERIALIZATION"
      1099.
  Axiom IsDiscriminant_StatusCode_FAILED_TO_DESERIALIZE_ARGUMENT :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::FAILED_TO_DESERIALIZE_ARGUMENT" 1100.
  Axiom IsDiscriminant_StatusCode_NUMBER_OF_SIGNER_ARGUMENTS_MISMATCH :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::NUMBER_OF_SIGNER_ARGUMENTS_MISMATCH"
      1101.
  Axiom IsDiscriminant_StatusCode_CALLED_SCRIPT_VISIBLE_FROM_NON_SCRIPT_VISIBLE :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::CALLED_SCRIPT_VISIBLE_FROM_NON_SCRIPT_VISIBLE"
      1102.
  Axiom IsDiscriminant_StatusCode_EXECUTE_ENTRY_FUNCTION_CALLED_ON_NON_ENTRY_FUNCTION :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::EXECUTE_ENTRY_FUNCTION_CALLED_ON_NON_ENTRY_FUNCTION"
      1103.
  Axiom IsDiscriminant_StatusCode_INVALID_FRIEND_DECL_WITH_SELF :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_SELF" 1104.
  Axiom IsDiscriminant_StatusCode_INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS"
      1105.
  Axiom IsDiscriminant_StatusCode_INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES"
      1106.
  Axiom IsDiscriminant_StatusCode_CYCLIC_MODULE_FRIENDSHIP :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CYCLIC_MODULE_FRIENDSHIP" 1107.
  Axiom IsDiscriminant_StatusCode_INVALID_PHANTOM_TYPE_PARAM_POSITION :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::INVALID_PHANTOM_TYPE_PARAM_POSITION"
      1108.
  Axiom IsDiscriminant_StatusCode_VEC_UPDATE_EXISTS_MUTABLE_BORROW_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::VEC_UPDATE_EXISTS_MUTABLE_BORROW_ERROR"
      1109.
  Axiom IsDiscriminant_StatusCode_VEC_BORROW_ELEMENT_EXISTS_MUTABLE_BORROW_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::VEC_BORROW_ELEMENT_EXISTS_MUTABLE_BORROW_ERROR"
      1110.
  Axiom IsDiscriminant_StatusCode_LOOP_MAX_DEPTH_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::LOOP_MAX_DEPTH_REACHED" 1111.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_TYPE_PARAMETERS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_TYPE_PARAMETERS" 1112.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_PARAMETERS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_PARAMETERS" 1113.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_BASIC_BLOCKS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_BASIC_BLOCKS" 1114.
  Axiom IsDiscriminant_StatusCode_VALUE_STACK_OVERFLOW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VALUE_STACK_OVERFLOW" 1115.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_TYPE_NODES :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_TYPE_NODES" 1116.
  Axiom IsDiscriminant_StatusCode_VALUE_STACK_PUSH_OVERFLOW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VALUE_STACK_PUSH_OVERFLOW" 1117.
  Axiom IsDiscriminant_StatusCode_MAX_DEPENDENCY_DEPTH_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MAX_DEPENDENCY_DEPTH_REACHED" 1118.
  Axiom IsDiscriminant_StatusCode_MAX_FUNCTION_DEFINITIONS_REACHED :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::MAX_FUNCTION_DEFINITIONS_REACHED"
      1119.
  Axiom IsDiscriminant_StatusCode_MAX_STRUCT_DEFINITIONS_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MAX_STRUCT_DEFINITIONS_REACHED" 1120.
  Axiom IsDiscriminant_StatusCode_MAX_FIELD_DEFINITIONS_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MAX_FIELD_DEFINITIONS_REACHED" 1121.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_BACK_EDGES :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_BACK_EDGES" 1122.
  Axiom IsDiscriminant_StatusCode_RESERVED_VERIFICATION_ERROR_1 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_1" 1123.
  Axiom IsDiscriminant_StatusCode_RESERVED_VERIFICATION_ERROR_2 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_2" 1124.
  Axiom IsDiscriminant_StatusCode_RESERVED_VERIFICATION_ERROR_3 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_3" 1125.
  Axiom IsDiscriminant_StatusCode_RESERVED_VERIFICATION_ERROR_4 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_4" 1126.
  Axiom IsDiscriminant_StatusCode_RESERVED_VERIFICATION_ERROR_5 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_5" 1127.
  Axiom IsDiscriminant_StatusCode_TOO_MANY_VECTOR_ELEMENTS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TOO_MANY_VECTOR_ELEMENTS" 1128.
  Axiom IsDiscriminant_StatusCode_IDENTIFIER_TOO_LONG :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::IDENTIFIER_TOO_LONG" 1129.
  Axiom IsDiscriminant_StatusCode_PROGRAM_TOO_COMPLEX :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::PROGRAM_TOO_COMPLEX" 1130.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_INVARIANT_VIOLATION_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::UNKNOWN_INVARIANT_VIOLATION_ERROR"
      2000.
  Axiom IsDiscriminant_StatusCode_EMPTY_VALUE_STACK :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EMPTY_VALUE_STACK" 2003.
  Axiom IsDiscriminant_StatusCode_PC_OVERFLOW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::PC_OVERFLOW" 2005.
  Axiom IsDiscriminant_StatusCode_VERIFICATION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VERIFICATION_ERROR" 2006.
  Axiom IsDiscriminant_StatusCode_STORAGE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::STORAGE_ERROR" 2008.
  Axiom IsDiscriminant_StatusCode_INTERNAL_TYPE_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INTERNAL_TYPE_ERROR" 2009.
  Axiom IsDiscriminant_StatusCode_EVENT_KEY_MISMATCH :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EVENT_KEY_MISMATCH" 2010.
  Axiom IsDiscriminant_StatusCode_UNREACHABLE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNREACHABLE" 2011.
  Axiom IsDiscriminant_StatusCode_VM_STARTUP_FAILURE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VM_STARTUP_FAILURE" 2012.
  Axiom IsDiscriminant_StatusCode_UNEXPECTED_ERROR_FROM_KNOWN_MOVE_FUNCTION :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::UNEXPECTED_ERROR_FROM_KNOWN_MOVE_FUNCTION"
      2015.
  Axiom IsDiscriminant_StatusCode_VERIFIER_INVARIANT_VIOLATION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VERIFIER_INVARIANT_VIOLATION" 2016.
  Axiom IsDiscriminant_StatusCode_UNEXPECTED_VERIFIER_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNEXPECTED_VERIFIER_ERROR" 2017.
  Axiom IsDiscriminant_StatusCode_UNEXPECTED_DESERIALIZATION_ERROR :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::UNEXPECTED_DESERIALIZATION_ERROR"
      2018.
  Axiom IsDiscriminant_StatusCode_FAILED_TO_SERIALIZE_WRITE_SET_CHANGES :
    M.IsDiscriminant
      "move_core_types::vm_status::StatusCode::FAILED_TO_SERIALIZE_WRITE_SET_CHANGES"
      2019.
  Axiom IsDiscriminant_StatusCode_FAILED_TO_DESERIALIZE_RESOURCE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::FAILED_TO_DESERIALIZE_RESOURCE" 2020.
  Axiom IsDiscriminant_StatusCode_TYPE_RESOLUTION_FAILURE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TYPE_RESOLUTION_FAILURE" 2021.
  Axiom IsDiscriminant_StatusCode_DUPLICATE_NATIVE_FUNCTION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::DUPLICATE_NATIVE_FUNCTION" 2022.
  Axiom IsDiscriminant_StatusCode_ARITHMETIC_OVERFLOW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::ARITHMETIC_OVERFLOW" 2023.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_BINARY_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_BINARY_ERROR" 3000.
  Axiom IsDiscriminant_StatusCode_MALFORMED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MALFORMED" 3001.
  Axiom IsDiscriminant_StatusCode_BAD_MAGIC :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_MAGIC" 3002.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_VERSION :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_VERSION" 3003.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_TABLE_TYPE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_TABLE_TYPE" 3004.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_SIGNATURE_TYPE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_SIGNATURE_TYPE" 3005.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_SERIALIZED_TYPE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_SERIALIZED_TYPE" 3006.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_OPCODE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_OPCODE" 3007.
  Axiom IsDiscriminant_StatusCode_BAD_HEADER_TABLE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_HEADER_TABLE" 3008.
  Axiom IsDiscriminant_StatusCode_UNEXPECTED_SIGNATURE_TYPE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNEXPECTED_SIGNATURE_TYPE" 3009.
  Axiom IsDiscriminant_StatusCode_DUPLICATE_TABLE :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::DUPLICATE_TABLE" 3010.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_ABILITY :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_ABILITY" 3013.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_NATIVE_STRUCT_FLAG :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_NATIVE_STRUCT_FLAG" 3014.
  Axiom IsDiscriminant_StatusCode_BAD_U16 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_U16" 3017.
  Axiom IsDiscriminant_StatusCode_BAD_U32 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_U32" 3018.
  Axiom IsDiscriminant_StatusCode_BAD_U64 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_U64" 3019.
  Axiom IsDiscriminant_StatusCode_BAD_U128 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_U128" 3020.
  Axiom IsDiscriminant_StatusCode_BAD_U256 :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::BAD_U256" 3021.
  Axiom IsDiscriminant_StatusCode_VALUE_SERIALIZATION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VALUE_SERIALIZATION_ERROR" 3022.
  Axiom IsDiscriminant_StatusCode_VALUE_DESERIALIZATION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VALUE_DESERIALIZATION_ERROR" 3023.
  Axiom IsDiscriminant_StatusCode_CODE_DESERIALIZATION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CODE_DESERIALIZATION_ERROR" 3024.
  Axiom IsDiscriminant_StatusCode_INVALID_FLAG_BITS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::INVALID_FLAG_BITS" 3025.
  Axiom IsDiscriminant_StatusCode_TRAILING_BYTES :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::TRAILING_BYTES" 3026.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_RUNTIME_STATUS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_RUNTIME_STATUS" 4000.
  Axiom IsDiscriminant_StatusCode_EXECUTED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EXECUTED" 4001.
  Axiom IsDiscriminant_StatusCode_OUT_OF_GAS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::OUT_OF_GAS" 4002.
  Axiom IsDiscriminant_StatusCode_RESOURCE_DOES_NOT_EXIST :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESOURCE_DOES_NOT_EXIST" 4003.
  Axiom IsDiscriminant_StatusCode_RESOURCE_ALREADY_EXISTS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::RESOURCE_ALREADY_EXISTS" 4004.
  Axiom IsDiscriminant_StatusCode_MISSING_DATA :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MISSING_DATA" 4008.
  Axiom IsDiscriminant_StatusCode_DATA_FORMAT_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::DATA_FORMAT_ERROR" 4009.
  Axiom IsDiscriminant_StatusCode_ABORTED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::ABORTED" 4016.
  Axiom IsDiscriminant_StatusCode_ARITHMETIC_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::ARITHMETIC_ERROR" 4017.
  Axiom IsDiscriminant_StatusCode_VECTOR_OPERATION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VECTOR_OPERATION_ERROR" 4018.
  Axiom IsDiscriminant_StatusCode_EXECUTION_STACK_OVERFLOW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::EXECUTION_STACK_OVERFLOW" 4020.
  Axiom IsDiscriminant_StatusCode_CALL_STACK_OVERFLOW :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::CALL_STACK_OVERFLOW" 4021.
  Axiom IsDiscriminant_StatusCode_VM_MAX_TYPE_DEPTH_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VM_MAX_TYPE_DEPTH_REACHED" 4024.
  Axiom IsDiscriminant_StatusCode_VM_MAX_VALUE_DEPTH_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VM_MAX_VALUE_DEPTH_REACHED" 4025.
  Axiom IsDiscriminant_StatusCode_VM_EXTENSION_ERROR :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VM_EXTENSION_ERROR" 4026.
  Axiom IsDiscriminant_StatusCode_STORAGE_WRITE_LIMIT_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::STORAGE_WRITE_LIMIT_REACHED" 4027.
  Axiom IsDiscriminant_StatusCode_MEMORY_LIMIT_EXCEEDED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::MEMORY_LIMIT_EXCEEDED" 4028.
  Axiom IsDiscriminant_StatusCode_VM_MAX_TYPE_NODES_REACHED :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::VM_MAX_TYPE_NODES_REACHED" 4029.
  Axiom IsDiscriminant_StatusCode_UNKNOWN_STATUS :
    M.IsDiscriminant "move_core_types::vm_status::StatusCode::UNKNOWN_STATUS" 18446744073709551615.
  
  Module Impl_core_clone_Clone_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.deref (| M.read (| self |) |) |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_marker_Copy_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_Copy_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_fmt_Debug_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
            [
              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
              M.read (|
                M.match_operator (|
                  Ty.apply (Ty.path "*") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_VALIDATION_STATUS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_VALIDATION_STATUS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_SIGNATURE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_SIGNATURE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_AUTH_KEY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_AUTH_KEY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_OLD"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SEQUENCE_NUMBER_TOO_OLD" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_NEW"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SEQUENCE_NUMBER_TOO_NEW" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TRANSACTION_EXPIRED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TRANSACTION_EXPIRED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SENDING_ACCOUNT_DOES_NOT_EXIST"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SENDING_ACCOUNT_DOES_NOT_EXIST" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::REJECTED_WRITE_SET"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "REJECTED_WRITE_SET" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_WRITE_SET"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_WRITE_SET" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EXCEEDED_MAX_TRANSACTION_SIZE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EXCEEDED_MAX_TRANSACTION_SIZE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_SCRIPT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_SCRIPT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_MODULE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_MODULE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (| "MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::GAS_UNIT_PRICE_BELOW_MIN_BOUND"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "GAS_UNIT_PRICE_BELOW_MIN_BOUND" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::GAS_UNIT_PRICE_ABOVE_MAX_BOUND"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "GAS_UNIT_PRICE_ABOVE_MAX_BOUND" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_GAS_SPECIFIER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_GAS_SPECIFIER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SENDING_ACCOUNT_FROZEN"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SENDING_ACCOUNT_FROZEN" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNABLE_TO_DESERIALIZE_ACCOUNT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNABLE_TO_DESERIALIZE_ACCOUNT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CURRENCY_INFO_DOES_NOT_EXIST"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CURRENCY_INFO_DOES_NOT_EXIST" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_MODULE_PUBLISHER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_MODULE_PUBLISHER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::NO_ACCOUNT_ROLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "NO_ACCOUNT_ROLE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_CHAIN_ID"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_CHAIN_ID" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_BIG"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SEQUENCE_NUMBER_TOO_BIG" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_TRANSACTION_FEE_CURRENCY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BAD_TRANSACTION_FEE_CURRENCY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FEATURE_UNDER_GATING"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FEATURE_UNDER_GATING" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SIGNERS_CONTAIN_DUPLICATES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SIGNERS_CONTAIN_DUPLICATES" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NONCE_INVALID"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "SEQUENCE_NONCE_INVALID" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_VERIFICATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_VERIFICATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INDEX_OUT_OF_BOUNDS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INDEX_OUT_OF_BOUNDS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_SIGNATURE_TOKEN"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_SIGNATURE_TOKEN" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RECURSIVE_STRUCT_DEFINITION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RECURSIVE_STRUCT_DEFINITION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FIELD_MISSING_TYPE_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FIELD_MISSING_TYPE_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_FALL_THROUGH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_FALL_THROUGH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::NEGATIVE_STACK_SIZE_WITHIN_BLOCK"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "NEGATIVE_STACK_SIZE_WITHIN_BLOCK" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_MAIN_FUNCTION_SIGNATURE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_MAIN_FUNCTION_SIGNATURE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::DUPLICATE_ELEMENT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "DUPLICATE_ELEMENT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_MODULE_HANDLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_MODULE_HANDLE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNIMPLEMENTED_HANDLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNIMPLEMENTED_HANDLE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::LOOKUP_FAILED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "LOOKUP_FAILED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TYPE_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TYPE_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MISSING_DEPENDENCY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MISSING_DEPENDENCY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::POP_WITHOUT_DROP_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "POP_WITHOUT_DROP_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BR_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BR_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::ABORT_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "ABORT_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::STLOC_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "STLOC_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::STLOC_UNSAFE_TO_DESTROY_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "STLOC_UNSAFE_TO_DESTROY_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RET_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RET_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RET_BORROWED_MUTABLE_REFERENCE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RET_BORROWED_MUTABLE_REFERENCE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FREEZEREF_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FREEZEREF_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWFIELD_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWFIELD_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWFIELD_BAD_FIELD_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWFIELD_BAD_FIELD_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::COPYLOC_UNAVAILABLE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "COPYLOC_UNAVAILABLE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::COPYLOC_WITHOUT_COPY_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "COPYLOC_WITHOUT_COPY_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::COPYLOC_EXISTS_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "COPYLOC_EXISTS_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MOVELOC_UNAVAILABLE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MOVELOC_UNAVAILABLE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MOVELOC_EXISTS_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MOVELOC_EXISTS_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWLOC_REFERENCE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWLOC_REFERENCE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWLOC_UNAVAILABLE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWLOC_UNAVAILABLE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWLOC_EXISTS_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWLOC_EXISTS_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CALL_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CALL_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CALL_BORROWED_MUTABLE_REFERENCE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CALL_BORROWED_MUTABLE_REFERENCE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::PACK_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "PACK_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNPACK_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNPACK_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::READREF_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "READREF_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::READREF_WITHOUT_COPY_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "READREF_WITHOUT_COPY_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::READREF_EXISTS_MUTABLE_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "READREF_EXISTS_MUTABLE_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::WRITEREF_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "WRITEREF_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::WRITEREF_WITHOUT_DROP_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "WRITEREF_WITHOUT_DROP_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::WRITEREF_EXISTS_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "WRITEREF_EXISTS_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::WRITEREF_NO_MUTABLE_REFERENCE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "WRITEREF_NO_MUTABLE_REFERENCE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INTEGER_OP_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INTEGER_OP_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BOOLEAN_OP_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BOOLEAN_OP_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EQUALITY_OP_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EQUALITY_OP_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EXISTS_WITHOUT_KEY_ABILITY_OR_BAD_ARGUMENT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EXISTS_WITHOUT_KEY_ABILITY_OR_BAD_ARGUMENT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWGLOBAL_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWGLOBAL_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BORROWGLOBAL_WITHOUT_KEY_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BORROWGLOBAL_WITHOUT_KEY_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MOVEFROM_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MOVEFROM_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MOVEFROM_WITHOUT_KEY_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MOVEFROM_WITHOUT_KEY_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MOVETO_TYPE_MISMATCH_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MOVETO_TYPE_MISMATCH_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MOVETO_WITHOUT_KEY_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MOVETO_WITHOUT_KEY_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MODULE_ADDRESS_DOES_NOT_MATCH_SENDER"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MODULE_ADDRESS_DOES_NOT_MATCH_SENDER" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::NO_MODULE_HANDLES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "NO_MODULE_HANDLES" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::POSITIVE_STACK_SIZE_AT_BLOCK_END"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "POSITIVE_STACK_SIZE_AT_BLOCK_END" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MISSING_ACQUIRES_ANNOTATION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MISSING_ACQUIRES_ANNOTATION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EXTRANEOUS_ACQUIRES_ANNOTATION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EXTRANEOUS_ACQUIRES_ANNOTATION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::DUPLICATE_ACQUIRES_ANNOTATION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "DUPLICATE_ACQUIRES_ANNOTATION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_ACQUIRES_ANNOTATION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_ACQUIRES_ANNOTATION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::GLOBAL_REFERENCE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "GLOBAL_REFERENCE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CONSTRAINT_NOT_SATISFIED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CONSTRAINT_NOT_SATISFIED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::NUMBER_OF_TYPE_ARGUMENTS_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "NUMBER_OF_TYPE_ARGUMENTS_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::LOOP_IN_INSTANTIATION_GRAPH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "LOOP_IN_INSTANTIATION_GRAPH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::ZERO_SIZED_STRUCT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "ZERO_SIZED_STRUCT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::LINKER_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "LINKER_ERROR" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_CONSTANT_TYPE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_CONSTANT_TYPE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MALFORMED_CONSTANT_DATA"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MALFORMED_CONSTANT_DATA" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EMPTY_CODE_UNIT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EMPTY_CODE_UNIT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_LOOP_SPLIT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_LOOP_SPLIT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_LOOP_BREAK"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_LOOP_BREAK" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_LOOP_CONTINUE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_LOOP_CONTINUE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNSAFE_RET_UNUSED_VALUES_WITHOUT_DROP"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNSAFE_RET_UNUSED_VALUES_WITHOUT_DROP" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_LOCALS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_LOCALS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::GENERIC_MEMBER_OPCODE_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "GENERIC_MEMBER_OPCODE_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FUNCTION_RESOLUTION_FAILURE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FUNCTION_RESOLUTION_FAILURE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_OPERATION_IN_SCRIPT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_OPERATION_IN_SCRIPT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::DUPLICATE_MODULE_NAME"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "DUPLICATE_MODULE_NAME" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BACKWARD_INCOMPATIBLE_MODULE_UPDATE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BACKWARD_INCOMPATIBLE_MODULE_UPDATE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CYCLIC_MODULE_DEPENDENCY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CYCLIC_MODULE_DEPENDENCY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::NUMBER_OF_ARGUMENTS_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "NUMBER_OF_ARGUMENTS_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_PARAM_TYPE_FOR_DESERIALIZATION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_PARAM_TYPE_FOR_DESERIALIZATION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FAILED_TO_DESERIALIZE_ARGUMENT"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FAILED_TO_DESERIALIZE_ARGUMENT" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::NUMBER_OF_SIGNER_ARGUMENTS_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "NUMBER_OF_SIGNER_ARGUMENTS_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CALLED_SCRIPT_VISIBLE_FROM_NON_SCRIPT_VISIBLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (| "CALLED_SCRIPT_VISIBLE_FROM_NON_SCRIPT_VISIBLE" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EXECUTE_ENTRY_FUNCTION_CALLED_ON_NON_ENTRY_FUNCTION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (| "EXECUTE_ENTRY_FUNCTION_CALLED_ON_NON_ENTRY_FUNCTION" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_SELF"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_FRIEND_DECL_WITH_SELF" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (|
                                "INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS"
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (| "INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CYCLIC_MODULE_FRIENDSHIP"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CYCLIC_MODULE_FRIENDSHIP" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_PHANTOM_TYPE_PARAM_POSITION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_PHANTOM_TYPE_PARAM_POSITION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VEC_UPDATE_EXISTS_MUTABLE_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VEC_UPDATE_EXISTS_MUTABLE_BORROW_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VEC_BORROW_ELEMENT_EXISTS_MUTABLE_BORROW_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              mk_str (| "VEC_BORROW_ELEMENT_EXISTS_MUTABLE_BORROW_ERROR" |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::LOOP_MAX_DEPTH_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "LOOP_MAX_DEPTH_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_TYPE_PARAMETERS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_TYPE_PARAMETERS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_PARAMETERS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_PARAMETERS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_BASIC_BLOCKS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_BASIC_BLOCKS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VALUE_STACK_OVERFLOW"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VALUE_STACK_OVERFLOW" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_TYPE_NODES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_TYPE_NODES" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VALUE_STACK_PUSH_OVERFLOW"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VALUE_STACK_PUSH_OVERFLOW" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MAX_DEPENDENCY_DEPTH_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MAX_DEPENDENCY_DEPTH_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MAX_FUNCTION_DEFINITIONS_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MAX_FUNCTION_DEFINITIONS_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MAX_STRUCT_DEFINITIONS_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MAX_STRUCT_DEFINITIONS_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MAX_FIELD_DEFINITIONS_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MAX_FIELD_DEFINITIONS_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_BACK_EDGES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_BACK_EDGES" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_1"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESERVED_VERIFICATION_ERROR_1" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_2"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESERVED_VERIFICATION_ERROR_2" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_3"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESERVED_VERIFICATION_ERROR_3" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_4"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESERVED_VERIFICATION_ERROR_4" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_5"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESERVED_VERIFICATION_ERROR_5" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TOO_MANY_VECTOR_ELEMENTS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TOO_MANY_VECTOR_ELEMENTS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::IDENTIFIER_TOO_LONG"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "IDENTIFIER_TOO_LONG" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::PROGRAM_TOO_COMPLEX"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "PROGRAM_TOO_COMPLEX" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_INVARIANT_VIOLATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_INVARIANT_VIOLATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EMPTY_VALUE_STACK"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EMPTY_VALUE_STACK" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::PC_OVERFLOW"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PC_OVERFLOW" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VERIFICATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VERIFICATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::STORAGE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "STORAGE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INTERNAL_TYPE_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INTERNAL_TYPE_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EVENT_KEY_MISMATCH"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EVENT_KEY_MISMATCH" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNREACHABLE"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "UNREACHABLE" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VM_STARTUP_FAILURE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VM_STARTUP_FAILURE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_ERROR_FROM_KNOWN_MOVE_FUNCTION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNEXPECTED_ERROR_FROM_KNOWN_MOVE_FUNCTION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VERIFIER_INVARIANT_VIOLATION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VERIFIER_INVARIANT_VIOLATION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_VERIFIER_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNEXPECTED_VERIFIER_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_DESERIALIZATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNEXPECTED_DESERIALIZATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FAILED_TO_SERIALIZE_WRITE_SET_CHANGES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FAILED_TO_SERIALIZE_WRITE_SET_CHANGES" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::FAILED_TO_DESERIALIZE_RESOURCE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "FAILED_TO_DESERIALIZE_RESOURCE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TYPE_RESOLUTION_FAILURE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TYPE_RESOLUTION_FAILURE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::DUPLICATE_NATIVE_FUNCTION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "DUPLICATE_NATIVE_FUNCTION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::ARITHMETIC_OVERFLOW"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "ARITHMETIC_OVERFLOW" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_BINARY_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_BINARY_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MALFORMED"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MALFORMED" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_MAGIC"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_MAGIC" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_VERSION"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_VERSION" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_TABLE_TYPE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_TABLE_TYPE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_SIGNATURE_TYPE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_SIGNATURE_TYPE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_SERIALIZED_TYPE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_SERIALIZED_TYPE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_OPCODE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_OPCODE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_HEADER_TABLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "BAD_HEADER_TABLE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_SIGNATURE_TYPE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNEXPECTED_SIGNATURE_TYPE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::DUPLICATE_TABLE"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "DUPLICATE_TABLE" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_ABILITY"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_ABILITY" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_NATIVE_STRUCT_FLAG"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_NATIVE_STRUCT_FLAG" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_U16"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_U16" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_U32"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_U32" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_U64"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_U64" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_U128"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_U128" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::BAD_U256"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BAD_U256" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VALUE_SERIALIZATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VALUE_SERIALIZATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VALUE_DESERIALIZATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VALUE_DESERIALIZATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CODE_DESERIALIZATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CODE_DESERIALIZATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::INVALID_FLAG_BITS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "INVALID_FLAG_BITS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::TRAILING_BYTES"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "TRAILING_BYTES" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_RUNTIME_STATUS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_RUNTIME_STATUS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EXECUTED"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "EXECUTED" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::OUT_OF_GAS"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "OUT_OF_GAS" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESOURCE_DOES_NOT_EXIST"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESOURCE_DOES_NOT_EXIST" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::RESOURCE_ALREADY_EXISTS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "RESOURCE_ALREADY_EXISTS" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MISSING_DATA"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MISSING_DATA" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::DATA_FORMAT_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "DATA_FORMAT_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::ABORTED"
                          |) in
                        M.alloc (|
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ABORTED" |) |) |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::ARITHMETIC_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "ARITHMETIC_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VECTOR_OPERATION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VECTOR_OPERATION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::EXECUTION_STACK_OVERFLOW"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "EXECUTION_STACK_OVERFLOW" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::CALL_STACK_OVERFLOW"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "CALL_STACK_OVERFLOW" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VM_MAX_TYPE_DEPTH_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VM_MAX_TYPE_DEPTH_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VM_MAX_VALUE_DEPTH_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VM_MAX_VALUE_DEPTH_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VM_EXTENSION_ERROR"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VM_EXTENSION_ERROR" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::STORAGE_WRITE_LIMIT_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "STORAGE_WRITE_LIMIT_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::MEMORY_LIMIT_EXCEEDED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "MEMORY_LIMIT_EXCEEDED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::VM_MAX_TYPE_NODES_REACHED"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "VM_MAX_TYPE_NODES_REACHED" |) |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "move_core_types::vm_status::StatusCode::UNKNOWN_STATUS"
                          |) in
                        M.alloc (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "UNKNOWN_STATUS" |) |)
                          |)
                        |)))
                  ]
                |)
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_cmp_Eq_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* Eq *)
    Definition assert_receiver_is_total_eq
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Eq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
  End Impl_core_cmp_Eq_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_hash_Hash_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* Hash *)
    Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ __H ], [ self; state ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let state := M.alloc (| state |) in
          M.read (|
            let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.tuple [],
                M.get_trait_method (|
                  "core::hash::Hash",
                  Ty.path "u64",
                  [],
                  [],
                  "hash",
                  [],
                  [ __H ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::hash::Hash"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("hash", InstanceField.Method hash) ].
  End Impl_core_hash_Hash_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_marker_StructuralPartialEq_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_cmp_PartialEq_move_core_types_vm_status_StatusCode_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* PartialEq *)
    Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "move_core_types::vm_status::StatusCode" ]
        Self
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_move_core_types_vm_status_StatusCode_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_cmp_PartialOrd_move_core_types_vm_status_StatusCode_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* PartialOrd *)
    Definition partial_cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "core::cmp::Ordering" ],
                M.get_trait_method (|
                  "core::cmp::PartialOrd",
                  Ty.path "u64",
                  [],
                  [ Ty.path "u64" ],
                  "partial_cmp",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "move_core_types::vm_status::StatusCode" ]
        Self
        (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
  End Impl_core_cmp_PartialOrd_move_core_types_vm_status_StatusCode_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_cmp_Ord_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (* Ord *)
    Definition cmp (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let~ __self_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            let~ __arg1_discr : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
              M.alloc (|
                M.call_closure (|
                  Ty.path "u64",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "move_core_types::vm_status::StatusCode" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                Ty.path "core::cmp::Ordering",
                M.get_trait_method (| "core::cmp::Ord", Ty.path "u64", [], [], "cmp", [], [] |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, __arg1_discr |) |)
                  |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::Ord"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
  End Impl_core_cmp_Ord_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_convert_TryFrom_u64_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (*             type Error = &'static str; *)
    Definition _Error : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
    
    (*
                fn try_from(value: $repr_ty) -> Result<Self, Self::Error> {
                    match value {
                        $(
                            $value => Ok($enum_name::$variant),
                        )*
                        _ => Err("invalid StatusCode"),
                    }
                }
    *)
    Definition try_from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.match_operator (|
              Ty.apply
                (Ty.path "*")
                []
                [
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path "move_core_types::vm_status::StatusCode";
                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                    ]
                ],
              value,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 0
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_VALIDATION_STATUS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_SIGNATURE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_AUTH_KEY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_OLD"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_NEW"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 5
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INSUFFICIENT_BALANCE_FOR_TRANSACTION_FEE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 6
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TRANSACTION_EXPIRED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 7
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SENDING_ACCOUNT_DOES_NOT_EXIST"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 8
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::REJECTED_WRITE_SET"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 9
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_WRITE_SET"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 10
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EXCEEDED_MAX_TRANSACTION_SIZE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 11
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_SCRIPT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 12
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_MODULE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 13
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MAX_GAS_UNITS_EXCEEDS_MAX_GAS_UNITS_BOUND"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 14
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MAX_GAS_UNITS_BELOW_MIN_TRANSACTION_GAS_UNITS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 15
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::GAS_UNIT_PRICE_BELOW_MIN_BOUND"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 16
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::GAS_UNIT_PRICE_ABOVE_MAX_BOUND"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 17
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_GAS_SPECIFIER"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 18
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SENDING_ACCOUNT_FROZEN"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 19
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNABLE_TO_DESERIALIZE_ACCOUNT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 20
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CURRENCY_INFO_DOES_NOT_EXIST"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 21
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_MODULE_PUBLISHER"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 22
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::NO_ACCOUNT_ROLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 23
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BAD_CHAIN_ID"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 24
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NUMBER_TOO_BIG"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 25
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BAD_TRANSACTION_FEE_CURRENCY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 26
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FEATURE_UNDER_GATING"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 27
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SECONDARY_KEYS_ADDRESSES_COUNT_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 28
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SIGNERS_CONTAIN_DUPLICATES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 29
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::SEQUENCE_NONCE_INVALID"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 30
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CHAIN_ACCOUNT_INFO_DOES_NOT_EXIST"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1000
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_VERIFICATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1001
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INDEX_OUT_OF_BOUNDS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1003
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_SIGNATURE_TOKEN"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1005
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RECURSIVE_STRUCT_DEFINITION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1006
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FIELD_MISSING_TYPE_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1007
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_FALL_THROUGH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1009
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::NEGATIVE_STACK_SIZE_WITHIN_BLOCK"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1011
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_MAIN_FUNCTION_SIGNATURE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1012
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::DUPLICATE_ELEMENT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1013
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_MODULE_HANDLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1014
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNIMPLEMENTED_HANDLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1017
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::LOOKUP_FAILED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1020
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TYPE_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1021
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MISSING_DEPENDENCY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1023
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::POP_WITHOUT_DROP_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1025
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BR_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1026
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::ABORT_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1027
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::STLOC_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1028
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::STLOC_UNSAFE_TO_DESTROY_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1029
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNSAFE_RET_LOCAL_OR_RESOURCE_STILL_BORROWED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1030
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RET_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1031
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RET_BORROWED_MUTABLE_REFERENCE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1032
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FREEZEREF_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1033
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FREEZEREF_EXISTS_MUTABLE_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1034
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWFIELD_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1035
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWFIELD_BAD_FIELD_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1036
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWFIELD_EXISTS_MUTABLE_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1037
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::COPYLOC_UNAVAILABLE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1038
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::COPYLOC_WITHOUT_COPY_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1039
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::COPYLOC_EXISTS_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1040
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MOVELOC_UNAVAILABLE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1041
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MOVELOC_EXISTS_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1042
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWLOC_REFERENCE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1043
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWLOC_UNAVAILABLE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1044
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWLOC_EXISTS_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1045
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CALL_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1046
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CALL_BORROWED_MUTABLE_REFERENCE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1047
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::PACK_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1048
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNPACK_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1049
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::READREF_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1050
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::READREF_WITHOUT_COPY_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1051
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::READREF_EXISTS_MUTABLE_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1052
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::WRITEREF_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1053
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::WRITEREF_WITHOUT_DROP_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1054
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::WRITEREF_EXISTS_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1055
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::WRITEREF_NO_MUTABLE_REFERENCE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1056
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INTEGER_OP_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1057
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BOOLEAN_OP_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1058
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EQUALITY_OP_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1059
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EXISTS_WITHOUT_KEY_ABILITY_OR_BAD_ARGUMENT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1060
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWGLOBAL_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1061
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BORROWGLOBAL_WITHOUT_KEY_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1062
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MOVEFROM_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1063
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MOVEFROM_WITHOUT_KEY_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1064
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MOVETO_TYPE_MISMATCH_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1065
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MOVETO_WITHOUT_KEY_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1067
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MODULE_ADDRESS_DOES_NOT_MATCH_SENDER"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1068
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::NO_MODULE_HANDLES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1069
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::POSITIVE_STACK_SIZE_AT_BLOCK_END"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1070
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MISSING_ACQUIRES_ANNOTATION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1071
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EXTRANEOUS_ACQUIRES_ANNOTATION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1072
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::DUPLICATE_ACQUIRES_ANNOTATION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1073
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_ACQUIRES_ANNOTATION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1074
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::GLOBAL_REFERENCE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1075
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CONSTRAINT_NOT_SATISFIED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1076
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::NUMBER_OF_TYPE_ARGUMENTS_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1077
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::LOOP_IN_INSTANTIATION_GRAPH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1080
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::ZERO_SIZED_STRUCT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1081
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::LINKER_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1082
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_CONSTANT_TYPE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1083
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MALFORMED_CONSTANT_DATA"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1084
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EMPTY_CODE_UNIT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1085
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_LOOP_SPLIT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1086
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_LOOP_BREAK"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1087
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_LOOP_CONTINUE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1088
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNSAFE_RET_UNUSED_VALUES_WITHOUT_DROP"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1089
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_LOCALS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1090
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::GENERIC_MEMBER_OPCODE_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1091
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FUNCTION_RESOLUTION_FAILURE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1094
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_OPERATION_IN_SCRIPT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1095
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::DUPLICATE_MODULE_NAME"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1096
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BACKWARD_INCOMPATIBLE_MODULE_UPDATE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1097
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CYCLIC_MODULE_DEPENDENCY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1098
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::NUMBER_OF_ARGUMENTS_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1099
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_PARAM_TYPE_FOR_DESERIALIZATION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1100
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FAILED_TO_DESERIALIZE_ARGUMENT"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1101
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::NUMBER_OF_SIGNER_ARGUMENTS_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1102
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CALLED_SCRIPT_VISIBLE_FROM_NON_SCRIPT_VISIBLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1103
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EXECUTE_ENTRY_FUNCTION_CALLED_ON_NON_ENTRY_FUNCTION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1104
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_SELF"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1105
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_MODULES_OUTSIDE_ACCOUNT_ADDRESS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1106
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_FRIEND_DECL_WITH_MODULES_IN_DEPENDENCIES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1107
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CYCLIC_MODULE_FRIENDSHIP"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1108
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_PHANTOM_TYPE_PARAM_POSITION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1109
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VEC_UPDATE_EXISTS_MUTABLE_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1110
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VEC_BORROW_ELEMENT_EXISTS_MUTABLE_BORROW_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1111
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::LOOP_MAX_DEPTH_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1112
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_TYPE_PARAMETERS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1113
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_PARAMETERS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1114
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_BASIC_BLOCKS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1115
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VALUE_STACK_OVERFLOW"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1116
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_TYPE_NODES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1117
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VALUE_STACK_PUSH_OVERFLOW"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1118
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MAX_DEPENDENCY_DEPTH_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1119
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MAX_FUNCTION_DEFINITIONS_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1120
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MAX_STRUCT_DEFINITIONS_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1121
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MAX_FIELD_DEFINITIONS_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1122
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_BACK_EDGES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1123
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_1"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1124
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_2"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1125
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_3"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1126
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_4"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1127
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESERVED_VERIFICATION_ERROR_5"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1128
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TOO_MANY_VECTOR_ELEMENTS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1129
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::IDENTIFIER_TOO_LONG"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 1130
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::PROGRAM_TOO_COMPLEX"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2000
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_INVARIANT_VIOLATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2003
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EMPTY_VALUE_STACK"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2005
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::PC_OVERFLOW" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2006
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VERIFICATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2008
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::STORAGE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2009
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INTERNAL_TYPE_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2010
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EVENT_KEY_MISMATCH"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2011
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::UNREACHABLE" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2012
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VM_STARTUP_FAILURE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2015
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_ERROR_FROM_KNOWN_MOVE_FUNCTION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2016
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VERIFIER_INVARIANT_VIOLATION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2017
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_VERIFIER_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2018
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_DESERIALIZATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2019
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FAILED_TO_SERIALIZE_WRITE_SET_CHANGES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2020
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::FAILED_TO_DESERIALIZE_RESOURCE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2021
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TYPE_RESOLUTION_FAILURE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2022
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::DUPLICATE_NATIVE_FUNCTION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 2023
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::ARITHMETIC_OVERFLOW"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3000
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_BINARY_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3001
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::MALFORMED" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3002
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::BAD_MAGIC" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3003
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_VERSION"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3004
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_TABLE_TYPE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3005
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_SIGNATURE_TYPE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3006
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_SERIALIZED_TYPE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3007
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_OPCODE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3008
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::BAD_HEADER_TABLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3009
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNEXPECTED_SIGNATURE_TYPE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3010
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::DUPLICATE_TABLE"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3013
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_ABILITY"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3014
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_NATIVE_STRUCT_FLAG"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3017
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::BAD_U16" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3018
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::BAD_U32" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3019
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::BAD_U64" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3020
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::BAD_U128" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3021
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::BAD_U256" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3022
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VALUE_SERIALIZATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3023
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VALUE_DESERIALIZATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3024
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CODE_DESERIALIZATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3025
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::INVALID_FLAG_BITS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 3026
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::TRAILING_BYTES"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4000
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_RUNTIME_STATUS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4001
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::EXECUTED" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4002
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::OUT_OF_GAS" []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4003
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESOURCE_DOES_NOT_EXIST"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4004
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::RESOURCE_ALREADY_EXISTS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4008
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MISSING_DATA"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4009
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::DATA_FORMAT_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4016
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [ Value.StructTuple "move_core_types::vm_status::StatusCode::ABORTED" [] ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4017
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::ARITHMETIC_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4018
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VECTOR_OPERATION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4020
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::EXECUTION_STACK_OVERFLOW"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4021
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::CALL_STACK_OVERFLOW"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4024
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VM_MAX_TYPE_DEPTH_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4025
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VM_MAX_VALUE_DEPTH_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4026
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VM_EXTENSION_ERROR"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4027
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::STORAGE_WRITE_LIMIT_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4028
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::MEMORY_LIMIT_EXCEEDED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 4029
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::VM_MAX_TYPE_NODES_REACHED"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      is_constant_or_break_match (|
                        M.read (| γ |),
                        Value.Integer IntegerKind.U64 18446744073709551615
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructTuple
                            "move_core_types::vm_status::StatusCode::UNKNOWN_STATUS"
                            []
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Err"
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "invalid StatusCode" |) |)
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::TryFrom"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "u64" ]
        Self
        (* Instance *)
        [ ("Error", InstanceField.Ty _Error); ("try_from", InstanceField.Method try_from) ].
  End Impl_core_convert_TryFrom_u64_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (*
        pub fn status_type(self) -> StatusType {
            let major_status_number: u64 = self.into();
            if major_status_number >= VALIDATION_STATUS_MIN_CODE
                && major_status_number <= VALIDATION_STATUS_MAX_CODE
            {
                return StatusType::Validation;
            }
    
            if major_status_number >= VERIFICATION_STATUS_MIN_CODE
                && major_status_number <= VERIFICATION_STATUS_MAX_CODE
            {
                return StatusType::Verification;
            }
    
            if major_status_number >= INVARIANT_VIOLATION_STATUS_MIN_CODE
                && major_status_number <= INVARIANT_VIOLATION_STATUS_MAX_CODE
            {
                return StatusType::InvariantViolation;
            }
    
            if major_status_number >= DESERIALIZATION_STATUS_MIN_CODE
                && major_status_number <= DESERIALIZATION_STATUS_MAX_CODE
            {
                return StatusType::Deserialization;
            }
    
            if major_status_number >= EXECUTION_STATUS_MIN_CODE
                && major_status_number <= EXECUTION_STATUS_MAX_CODE
            {
                return StatusType::Execution;
            }
    
            StatusType::Unknown
        }
    *)
    Definition status_type (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.catch_return (Ty.path "move_core_types::vm_status::StatusType") (|
            ltac:(M.monadic
              (M.read (|
                let~ major_status_number : Ty.apply (Ty.path "*") [] [ Ty.path "u64" ] :=
                  M.alloc (|
                    M.call_closure (|
                      Ty.path "u64",
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.path "move_core_types::vm_status::StatusCode",
                        [],
                        [ Ty.path "u64" ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| major_status_number |);
                                      M.read (|
                                        M.deref (|
                                          M.read (|
                                            get_constant (|
                                              "move_core_types::vm_status::VALIDATION_STATUS_MIN_CODE",
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.le,
                                      [
                                        M.read (| major_status_number |);
                                        M.read (|
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "move_core_types::vm_status::VALIDATION_STATUS_MAX_CODE",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "move_core_types::vm_status::StatusType::Validation"
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| major_status_number |);
                                      M.read (|
                                        M.deref (|
                                          M.read (|
                                            get_constant (|
                                              "move_core_types::vm_status::VERIFICATION_STATUS_MIN_CODE",
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.le,
                                      [
                                        M.read (| major_status_number |);
                                        M.read (|
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "move_core_types::vm_status::VERIFICATION_STATUS_MAX_CODE",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "move_core_types::vm_status::StatusType::Verification"
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| major_status_number |);
                                      M.read (|
                                        M.deref (|
                                          M.read (|
                                            get_constant (|
                                              "move_core_types::vm_status::INVARIANT_VIOLATION_STATUS_MIN_CODE",
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.le,
                                      [
                                        M.read (| major_status_number |);
                                        M.read (|
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "move_core_types::vm_status::INVARIANT_VIOLATION_STATUS_MAX_CODE",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "move_core_types::vm_status::StatusType::InvariantViolation"
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| major_status_number |);
                                      M.read (|
                                        M.deref (|
                                          M.read (|
                                            get_constant (|
                                              "move_core_types::vm_status::DESERIALIZATION_STATUS_MIN_CODE",
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.le,
                                      [
                                        M.read (| major_status_number |);
                                        M.read (|
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "move_core_types::vm_status::DESERIALIZATION_STATUS_MAX_CODE",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "move_core_types::vm_status::StatusType::Deserialization"
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let~ _ : Ty.apply (Ty.path "*") [] [ Ty.tuple [] ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "*") [] [ Ty.tuple [] ],
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ge,
                                    [
                                      M.read (| major_status_number |);
                                      M.read (|
                                        M.deref (|
                                          M.read (|
                                            get_constant (|
                                              "move_core_types::vm_status::EXECUTION_STATUS_MIN_CODE",
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.le,
                                      [
                                        M.read (| major_status_number |);
                                        M.read (|
                                          M.deref (|
                                            M.read (|
                                              get_constant (|
                                                "move_core_types::vm_status::EXECUTION_STATUS_MAX_CODE",
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)))
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "move_core_types::vm_status::StatusType::Execution"
                                    []
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "move_core_types::vm_status::StatusType::Unknown" [] |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_status_type :
      M.IsAssociatedFunction.C Self "status_type" status_type.
    Admitted.
    Global Typeclasses Opaque status_type.
  End Impl_move_core_types_vm_status_StatusCode.
  
  Module Impl_serde_ser_Serialize_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (*
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: ser::Serializer,
        {
            serializer.serialize_u64(( *self).into())
        }
    *)
    Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ _ as S ], [ self; serializer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let serializer := M.alloc (| serializer |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Ok";
                Ty.associated_in_trait "serde::ser::Serializer" [] [] S "Error"
              ],
            M.get_trait_method (| "serde::ser::Serializer", S, [], [], "serialize_u64", [], [] |),
            [
              M.read (| serializer |);
              M.call_closure (|
                Ty.path "u64",
                M.get_trait_method (|
                  "core::convert::Into",
                  Ty.path "move_core_types::vm_status::StatusCode",
                  [],
                  [ Ty.path "u64" ],
                  "into",
                  [],
                  []
                |),
                [ M.read (| M.deref (| M.read (| self |) |) |) ]
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "serde::ser::Serialize"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
  End Impl_serde_ser_Serialize_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_serde_de_Deserialize_for_move_core_types_vm_status_StatusCode.
    Definition Self : Ty.t := Ty.path "move_core_types::vm_status::StatusCode".
    
    (*
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: de::Deserializer<'de>,
        {
            struct StatusCodeVisitor;
            impl<'de> de::Visitor<'de> for StatusCodeVisitor {
                type Value = StatusCode;
    
                fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
                    formatter.write_str("StatusCode as u64")
                }
    
                fn visit_u64<E>(self, v: u64) -> std::result::Result<StatusCode, E>
                where
                    E: de::Error,
                {
                    Ok(StatusCode::try_from(v).unwrap_or(StatusCode::UNKNOWN_STATUS))
                }
            }
    
            deserializer.deserialize_u64(StatusCodeVisitor)
        }
    *)
    Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ D ], [ deserializer ] =>
        ltac:(M.monadic
          (let deserializer := M.alloc (| deserializer |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.path "move_core_types::vm_status::StatusCode";
                Ty.associated_in_trait "serde::de::Deserializer" [] [] D "Error"
              ],
            M.get_trait_method (|
              "serde::de::Deserializer",
              D,
              [],
              [],
              "deserialize_u64",
              [],
              [ Ty.path "move_core_types::vm_status::deserialize::StatusCodeVisitor" ]
            |),
            [
              M.read (| deserializer |);
              Value.StructTuple "move_core_types::vm_status::deserialize::StatusCodeVisitor" []
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "serde::de::Deserialize"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
  End Impl_serde_de_Deserialize_for_move_core_types_vm_status_StatusCode.
  
  Module Impl_core_convert_From_move_core_types_vm_status_StatusCode_for_u64.
    Definition Self : Ty.t := Ty.path "u64".
    
    (*
        fn from(status: StatusCode) -> u64 {
            status as u64
        }
    *)
    Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ status ] =>
        ltac:(M.monadic
          (let status := M.alloc (| status |) in
          M.cast (Ty.path "u64") (M.read (| status |))))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::convert::From"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) [ Ty.path "move_core_types::vm_status::StatusCode" ]
        Self
        (* Instance *) [ ("from", InstanceField.Method from) ].
  End Impl_core_convert_From_move_core_types_vm_status_StatusCode_for_u64.
  
  Module sub_status.
    Definition value_NFE_VECTOR_ERROR_BASE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 0 |))).
    
    Global Instance Instance_IsConstant_value_NFE_VECTOR_ERROR_BASE :
      M.IsFunction.C
        "move_core_types::vm_status::sub_status::NFE_VECTOR_ERROR_BASE"
        value_NFE_VECTOR_ERROR_BASE.
    Admitted.
    Global Typeclasses Opaque value_NFE_VECTOR_ERROR_BASE.
    
    Definition value_NFE_OUT_OF_GAS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 1 |))).
    
    Global Instance Instance_IsConstant_value_NFE_OUT_OF_GAS :
      M.IsFunction.C "move_core_types::vm_status::sub_status::NFE_OUT_OF_GAS" value_NFE_OUT_OF_GAS.
    Admitted.
    Global Typeclasses Opaque value_NFE_OUT_OF_GAS.
    
    Definition value_NFE_BCS_SERIALIZATION_FAILURE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Value.Integer IntegerKind.U64 453 |))).
    
    Global Instance Instance_IsConstant_value_NFE_BCS_SERIALIZATION_FAILURE :
      M.IsFunction.C
        "move_core_types::vm_status::sub_status::NFE_BCS_SERIALIZATION_FAILURE"
        value_NFE_BCS_SERIALIZATION_FAILURE.
    Admitted.
    Global Typeclasses Opaque value_NFE_BCS_SERIALIZATION_FAILURE.
  End sub_status.
End vm_status.
