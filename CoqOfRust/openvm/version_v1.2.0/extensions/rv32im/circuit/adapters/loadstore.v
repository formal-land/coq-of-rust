(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module adapters.
  Module loadstore.
    (* StructRecord
      {
        name := "LoadStoreInstruction";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("is_valid", T);
            ("opcode", T);
            ("is_load", T);
            ("load_shift_amount", T);
            ("store_shift_amount", T)
          ];
      } *)
    
    (* StructTuple
      {
        name := "Rv32LoadStoreAdapterRuntimeInterface";
        const_params := [];
        ty_params := [ "T" ];
        fields := [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ] ];
      } *)
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterInterface_T_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterRuntimeInterface_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterRuntimeInterface")
          []
          [ T ].
      
      (*     type Reads = ([[T; RV32_REGISTER_NUM_LIMBS]; 2], T); *)
      Definition _Reads (T : Ty.t) : Ty.t :=
        Ty.tuple
          [
            Ty.apply
              (Ty.path "array")
              [ Value.Integer IntegerKind.Usize 2 ]
              [
                Ty.apply
                  (Ty.path "array")
                  [
                    M.unevaluated_const
                      (mk_str (| "openvm_rv32im_circuit_adapters_loadstore_Reads_discriminant" |))
                  ]
                  [ T ]
              ];
            T
          ].
      
      (*     type Writes = [[T; RV32_REGISTER_NUM_LIMBS]; 1]; *)
      Definition _Writes (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "array")
          [ Value.Integer IntegerKind.Usize 1 ]
          [
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_adapters_loadstore_Writes_discriminant" |))
              ]
              [ T ]
          ].
      
      (*     type ProcessedInstruction = (); *)
      Definition _ProcessedInstruction (T : Ty.t) : Ty.t := Ty.tuple [].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterInterface"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ T ]
          (Self T)
          (* Instance *)
          [
            ("Reads", InstanceField.Ty (_Reads T));
            ("Writes", InstanceField.Ty (_Writes T));
            ("ProcessedInstruction", InstanceField.Ty (_ProcessedInstruction T))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterInterface_T_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterRuntimeInterface_T.
    
    (* StructTuple
      {
        name := "Rv32LoadStoreAdapterAirInterface";
        const_params := [];
        ty_params := [ "AB" ];
        fields := [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ AB ] ];
      } *)
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterInterface_where_openvm_stark_backend_interaction_InteractionBuilder_AB_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAirInterface_AB.
      Definition Self (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAirInterface")
          []
          [ AB ].
      
      (*
          type Reads = (
              [AB::Var; RV32_REGISTER_NUM_LIMBS],
              [AB::Expr; RV32_REGISTER_NUM_LIMBS],
          );
      *)
      Definition _Reads (AB : Ty.t) : Ty.t :=
        Ty.tuple
          [
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_adapters_loadstore_Reads_discriminant" |))
              ]
              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_adapters_loadstore_Reads_discriminant" |))
              ]
              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
          ].
      
      (*     type Writes = [[AB::Expr; RV32_REGISTER_NUM_LIMBS]; 1]; *)
      Definition _Writes (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "array")
          [ Value.Integer IntegerKind.Usize 1 ]
          [
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_adapters_loadstore_Writes_discriminant" |))
              ]
              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
          ].
      
      (*     type ProcessedInstruction = LoadStoreInstruction<AB::Expr>; *)
      Definition _ProcessedInstruction (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction")
          []
          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ].
      
      Axiom Implements :
        forall (AB : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterInterface"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
          (Self AB)
          (* Instance *)
          [
            ("Reads", InstanceField.Ty (_Reads AB));
            ("Writes", InstanceField.Ty (_Writes AB));
            ("ProcessedInstruction", InstanceField.Ty (_ProcessedInstruction AB))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterInterface_where_openvm_stark_backend_interaction_InteractionBuilder_AB_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAirInterface_AB.
    
    (* StructRecord
      {
        name := "Rv32LoadStoreAdapterChip";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("air", Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir");
            ("range_checker_chip",
              Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip");
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
          ];
      } *)
    
    Module Impl_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
          []
          [ F ].
      
      (*
          pub fn new(
              execution_bus: ExecutionBus,
              program_bus: ProgramBus,
              memory_bridge: MemoryBridge,
              pointer_max_bits: usize,
              range_checker_chip: SharedVariableRangeCheckerChip,
          ) -> Self {
              assert!(range_checker_chip.range_max_bits() >= 15);
              Self {
                  air: Rv32LoadStoreAdapterAir {
                      execution_bridge: ExecutionBridge::new(execution_bus, program_bus),
                      memory_bridge,
                      range_bus: range_checker_chip.bus(),
                      pointer_max_bits,
                  },
                  range_checker_chip,
                  _marker: PhantomData,
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [],
            [],
            [ execution_bus; program_bus; memory_bridge; pointer_max_bits; range_checker_chip ] =>
          ltac:(M.monadic
            (let execution_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                execution_bus
              |) in
            let program_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                program_bus
              |) in
            let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
            let range_checker_chip :=
              M.alloc (|
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                range_checker_chip
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.ge,
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        "range_max_bits",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, range_checker_chip |) ]
                                    |);
                                    Value.Integer IntegerKind.Usize 15
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic", [], [] |),
                            [
                              mk_str (|
                                "assertion failed: range_checker_chip.range_max_bits() >= 15"
                              |)
                            ]
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                  []
                  [ F ],
                Value.mkStructRecord
                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip"
                  []
                  [ F ]
                  [
                    ("air",
                      Value.mkStructRecord
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir"
                        []
                        []
                        [
                          ("execution_bridge",
                            M.call_closure (|
                              Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                              M.get_associated_function (|
                                Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| execution_bus |); M.read (| program_bus |) ]
                            |));
                          ("memory_bridge", M.read (| memory_bridge |));
                          ("range_bus",
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                              M.get_associated_function (|
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                "bus",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, range_checker_chip |) ]
                            |));
                          ("pointer_max_bits", M.read (| pointer_max_bits |))
                        ]);
                    ("range_checker_chip", M.read (| range_checker_chip |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F.
    
    (* StructRecord
      {
        name := "Rv32LoadStoreReadRecord";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("rs1_record", Ty.path "openvm_circuit::system::memory::controller::RecordId");
            ("read", Ty.path "openvm_circuit::system::memory::controller::RecordId");
            ("rs1_ptr", F);
            ("imm", F);
            ("imm_sign", F);
            ("mem_as", F);
            ("mem_ptr_limbs",
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ Ty.path "u32" ]);
            ("shift_amount", Ty.path "u32")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
          []
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "rs1_record" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "read" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rs1_ptr" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm_sign" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "mem_as" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "mem_ptr_limbs" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "shift_amount" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "rs1_record"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "read"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ F ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "rs1_ptr"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ F ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "imm"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ F ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "imm_sign"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ F ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "mem_as"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "u32" ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                            "mem_ptr_limbs"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                                "shift_amount"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "Rv32LoadStoreReadRecord" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
          []
          [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord"
              []
              [ F ]
              [
                ("rs1_record",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::controller::RecordId",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::system::memory::controller::RecordId",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "rs1_record"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("read",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::controller::RecordId",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::system::memory::controller::RecordId",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "read"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rs1_ptr",
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "rs1_ptr"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("imm",
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "imm"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("imm_sign",
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "imm_sign"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("mem_as",
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "mem_as"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("mem_ptr_limbs",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "u32" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "u32" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "mem_ptr_limbs"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("shift_amount",
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "u32",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                              "shift_amount"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
            []
            [ F ].
        
        (* Serialize *)
        Definition serialize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Rv32LoadStoreReadRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [
                                                                  M.cast
                                                                    (Ty.path "usize")
                                                                    (Value.Bool false);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rs1_record" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "rs1_record"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "read" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "read"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ F ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rs1_ptr" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "rs1_ptr"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ F ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "imm" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "imm"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ F ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "imm_sign" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "imm_sign"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ F ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "mem_as" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "mem_as"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "u32" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "mem_ptr_limbs" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "mem_ptr_limbs"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "u32" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "shift_amount" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                          "shift_amount"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
      End Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
      Module Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
            []
            [ F ].
        
        (* Deserialize *)
        Definition deserialize
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                      []
                      [ F ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::_'1::deserialize::__Visitor")
                      []
                      [ F ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "Rv32LoadStoreReadRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::adapters::loadstore::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::loadstore::_'1::deserialize::__Visitor"
                    []
                    [ F ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                              []
                              [ F ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
      End Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreReadRecord_F.
      Module Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
            []
            [ F ].
        
        (* Serialize *)
        Definition serialize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Rv32LoadStoreWriteRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.cast (Ty.path "usize") (Value.Bool false);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "write_id" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                                          "write_id"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                      []
                                      [ Ty.path "u32" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "from_state" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                                          "from_state"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ F ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rd_rs2_ptr" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                                          "rd_rs2_ptr"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
      End Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
      Module Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
            []
            [ F ].
        
        (* Deserialize *)
        Definition deserialize
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                      []
                      [ F ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::_'3::deserialize::__Visitor")
                      []
                      [ F ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "Rv32LoadStoreWriteRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::adapters::loadstore::_'3::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::loadstore::_'3::deserialize::__Visitor"
                    []
                    [ F ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                              []
                              [ F ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
      End Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
    End underscore.
    
    
    (* StructRecord
      {
        name := "Rv32LoadStoreWriteRecord";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("write_id", Ty.path "openvm_circuit::system::memory::controller::RecordId");
            ("from_state",
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ]);
            ("rd_rs2_ptr", F)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
          []
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32LoadStoreWriteRecord" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "write_id" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                            "write_id"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "from_state" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                            "from_state"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_rs2_ptr" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ F ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ F ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                                "rd_rs2_ptr"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
          []
          [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord"
              []
              [ F ]
              [
                ("write_id",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::controller::RecordId",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::system::memory::controller::RecordId",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                              "write_id"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("from_state",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                      []
                      [ Ty.path "u32" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                              "from_state"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rd_rs2_ptr",
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                              "rd_rs2_ptr"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreWriteRecord_F.
    
    
    
    (* StructRecord
      {
        name := "Rv32LoadStoreAdapterCols";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("from_state",
              Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ]);
            ("rs1_ptr", T);
            ("rs1_data",
              Ty.apply
                (Ty.path "array")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_rs1_data_discriminant"
                    |))
                ]
                [ T ]);
            ("rs1_aux_cols",
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                []
                [ T ]);
            ("rd_rs2_ptr", T);
            ("read_data_aux",
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                []
                [ T ]);
            ("imm", T);
            ("imm_sign", T);
            ("mem_ptr_limbs",
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ T ]);
            ("mem_as", T);
            ("write_base_aux",
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                []
                [ T ]);
            ("needs_write", T)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
          []
          [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 12 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 12 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "from_state" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rs1_ptr" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rs1_data" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "rs1_aux_cols" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "rd_rs2_ptr" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "read_data_aux" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm_sign" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "mem_ptr_limbs" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "mem_as" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "write_base_aux" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "needs_write" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 12 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 12 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::execution::ExecutionState")
                                          []
                                          [ T ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "from_state"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "rs1_ptr"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ T ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "rs1_data"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                          []
                                          [ T ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "rs1_aux_cols"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "rd_rs2_ptr"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                          []
                                          [ T ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "read_data_aux"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "imm"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "imm_sign"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ T ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "mem_ptr_limbs"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "mem_as"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                          []
                                          [ T ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                            "write_base_aux"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ T ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                                "needs_write"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "Rv32LoadStoreAdapterCols" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 12 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
          []
          [ T ].
      
      (* Clone *)
      Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols"
              []
              [ T ]
              [
                ("from_state",
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "from_state"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rs1_ptr",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "rs1_ptr"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rs1_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "rs1_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rs1_aux_cols",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                      []
                      [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                        []
                        [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "rs1_aux_cols"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rd_rs2_ptr",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "rd_rs2_ptr"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("read_data_aux",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                      []
                      [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                        []
                        [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "read_data_aux"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("imm",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "imm"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("imm_sign",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "imm_sign"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("mem_ptr_limbs",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "mem_ptr_limbs"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("mem_as",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "mem_as"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("write_base_aux",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                      []
                      [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                        []
                        [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "write_base_aux"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("needs_write",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "needs_write"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T.
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                              []
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                      []
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                        []
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                  []
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                                              []
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                  []
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
              []
              [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
              []
              [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
          []
          [ T ].
      
      (* AlignedBorrow *)
      Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                    []
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "width" (width T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterCols_T.
    
    (* StructRecord
      {
        name := "Rv32LoadStoreAdapterAir";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("memory_bridge",
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge");
            ("execution_bridge", Ty.path "openvm_circuit::arch::execution::ExecutionBridge");
            ("range_bus",
              Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus");
            ("pointer_max_bits", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                                      Value.DeclaredButUndefined,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (| M.deref (| M.read (| self |) |) |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32LoadStoreAdapterAir" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bridge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "memory_bridge"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "execution_bridge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "execution_bridge"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "range_bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus"
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "range_bus"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pointer_max_bits" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                                "pointer_max_bits"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
    
    Module Impl_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      (* derive_new::new *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ memory_bridge; execution_bridge; range_bus; pointer_max_bits ] =>
          ltac:(M.monadic
            (let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            let execution_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                execution_bridge
              |) in
            let range_bus :=
              M.alloc (|
                Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                range_bus
              |) in
            let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir"
              []
              []
              [
                ("memory_bridge", M.read (| memory_bridge |));
                ("execution_bridge", M.read (| execution_bridge |));
                ("range_bus", M.read (| range_bus |));
                ("pointer_max_bits", M.read (| pointer_max_bits |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      (*
          fn width(&self) -> usize {
              Rv32LoadStoreAdapterCols::<F>::width()
          }
      *)
      Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir" ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                  []
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("width", InstanceField.Method (width F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
      Definition Self (AB : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      (*     type Interface = Rv32LoadStoreAdapterAirInterface<AB>; *)
      Definition _Interface (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAirInterface")
          []
          [ AB ].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local: &[AB::Var],
              ctx: AdapterAirContext<AB::Expr, Self::Interface>,
          ) {
              let local_cols: &Rv32LoadStoreAdapterCols<AB::Var> = local.borrow();
      
              let timestamp: AB::Var = local_cols.from_state.timestamp;
              let mut timestamp_delta: usize = 0;
              let mut timestamp_pp = || {
                  timestamp_delta += 1;
                  timestamp + AB::Expr::from_canonical_usize(timestamp_delta - 1)
              };
      
              let is_load = ctx.instruction.is_load;
              let is_valid = ctx.instruction.is_valid;
              let load_shift_amount = ctx.instruction.load_shift_amount;
              let store_shift_amount = ctx.instruction.store_shift_amount;
              let shift_amount = load_shift_amount.clone() + store_shift_amount.clone();
      
              let write_count = local_cols.needs_write;
      
              // This constraint ensures that the memory write only occurs when `is_valid == 1`.
              builder.assert_bool(write_count);
              builder.when(write_count).assert_one(is_valid.clone());
      
              // Constrain that if `is_valid == 1` and `write_count == 0`, then `is_load == 1` and
              // `rd_rs2_ptr == x0`
              builder
                  .when(is_valid.clone() - write_count)
                  .assert_one(is_load.clone());
              builder
                  .when(is_valid.clone() - write_count)
                  .assert_zero(local_cols.rd_rs2_ptr);
      
              // read rs1
              self.memory_bridge
                  .read(
                      MemoryAddress::new(
                          AB::F::from_canonical_u32(RV32_REGISTER_AS),
                          local_cols.rs1_ptr,
                      ),
                      local_cols.rs1_data,
                      timestamp_pp(),
                      &local_cols.rs1_aux_cols,
                  )
                  .eval(builder, is_valid.clone());
      
              // constrain mem_ptr = rs1 + imm as a u32 addition with 2 limbs
              let limbs_01 = local_cols.rs1_data[0]
                  + local_cols.rs1_data[1] * AB::F::from_canonical_u32(1 << RV32_CELL_BITS);
              let limbs_23 = local_cols.rs1_data[2]
                  + local_cols.rs1_data[3] * AB::F::from_canonical_u32(1 << RV32_CELL_BITS);
      
              let inv = AB::F::from_canonical_u32(1 << (RV32_CELL_BITS * 2)).inverse();
              let carry = (limbs_01 + local_cols.imm - local_cols.mem_ptr_limbs[0]) * inv;
      
              builder.when(is_valid.clone()).assert_bool(carry.clone());
      
              builder
                  .when(is_valid.clone())
                  .assert_bool(local_cols.imm_sign);
              let imm_extend_limb =
                  local_cols.imm_sign * AB::F::from_canonical_u32((1 << (RV32_CELL_BITS * 2)) - 1);
              let carry = (limbs_23 + imm_extend_limb + carry - local_cols.mem_ptr_limbs[1]) * inv;
              builder.when(is_valid.clone()).assert_bool(carry.clone());
      
              // preventing mem_ptr overflow
              self.range_bus
                  .range_check(
                      // (limb[0] - shift_amount) / 4 < 2^14 => limb[0] - shift_amount < 2^16
                      (local_cols.mem_ptr_limbs[0] - shift_amount)
                          * AB::F::from_canonical_u32(4).inverse(),
                      RV32_CELL_BITS * 2 - 2,
                  )
                  .eval(builder, is_valid.clone());
              self.range_bus
                  .range_check(
                      local_cols.mem_ptr_limbs[1],
                      self.pointer_max_bits - RV32_CELL_BITS * 2,
                  )
                  .eval(builder, is_valid.clone());
      
              let mem_ptr = local_cols.mem_ptr_limbs[0]
                  + local_cols.mem_ptr_limbs[1] * AB::F::from_canonical_u32(1 << (RV32_CELL_BITS * 2));
      
              let is_store = is_valid.clone() - is_load.clone();
              // constrain mem_as to be in {0, 1, 2} if the instruction is a load,
              // and in {2, 3, 4} if the instruction is a store
              builder.assert_tern(local_cols.mem_as - is_store * AB::Expr::TWO);
              builder
                  .when(not::<AB::Expr>(is_valid.clone()))
                  .assert_zero(local_cols.mem_as);
      
              // read_as is [local_cols.mem_as] for loads and 1 for stores
              let read_as = select::<AB::Expr>(
                  is_load.clone(),
                  local_cols.mem_as,
                  AB::F::from_canonical_u32(RV32_REGISTER_AS),
              );
      
              // read_ptr is mem_ptr for loads and rd_rs2_ptr for stores
              // Note: shift_amount is expected to have degree 2, thus we can't put it in the select
              // clause       since the resulting read_ptr/write_ptr's degree will be 3 which is
              // too high.       Instead, the solution without using additional columns is to get
              // two different shift amounts from core chip
              let read_ptr = select::<AB::Expr>(is_load.clone(), mem_ptr.clone(), local_cols.rd_rs2_ptr)
                  - load_shift_amount;
      
              self.memory_bridge
                  .read(
                      MemoryAddress::new(read_as, read_ptr),
                      ctx.reads.1,
                      timestamp_pp(),
                      &local_cols.read_data_aux,
                  )
                  .eval(builder, is_valid.clone());
      
              let write_aux_cols = MemoryWriteAuxCols::from_base(local_cols.write_base_aux, ctx.reads.0);
      
              // write_as is 1 for loads and [local_cols.mem_as] for stores
              let write_as = select::<AB::Expr>(
                  is_load.clone(),
                  AB::F::from_canonical_u32(RV32_REGISTER_AS),
                  local_cols.mem_as,
              );
      
              // write_ptr is rd_rs2_ptr for loads and mem_ptr for stores
              let write_ptr = select::<AB::Expr>(is_load.clone(), local_cols.rd_rs2_ptr, mem_ptr.clone())
                  - store_shift_amount;
      
              self.memory_bridge
                  .write(
                      MemoryAddress::new(write_as, write_ptr),
                      ctx.writes[0].clone(),
                      timestamp_pp(),
                      &write_aux_cols,
                  )
                  .eval(builder, write_count);
      
              let to_pc = ctx
                  .to_pc
                  .unwrap_or(local_cols.from_state.pc + AB::F::from_canonical_u32(DEFAULT_PC_STEP));
              self.execution_bridge
                  .execute(
                      ctx.instruction.opcode,
                      [
                          local_cols.rd_rs2_ptr.into(),
                          local_cols.rs1_ptr.into(),
                          local_cols.imm.into(),
                          AB::Expr::from_canonical_u32(RV32_REGISTER_AS),
                          local_cols.mem_as.into(),
                          local_cols.needs_write.into(),
                          local_cols.imm_sign.into(),
                      ],
                      local_cols.from_state,
                      ExecutionState {
                          pc: to_pc,
                          timestamp: timestamp + AB::F::from_canonical_usize(timestamp_delta),
                      },
                  )
                  .eval(builder, is_valid);
          }
      *)
      Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; builder; local; ctx ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir" ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            let ctx :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterAir"
                      []
                      [ AB ]
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir")
                      "Interface"
                  ],
                ctx
              |) in
            M.read (|
              let~ local_cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              let~ timestamp : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                      "from_state"
                    |),
                    "openvm_circuit::arch::execution::ExecutionState",
                    "timestamp"
                  |)
                |) in
              let~ timestamp_delta : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
              let~ timestamp_pp :
                  Ty.function
                    []
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr") :=
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.alloc (| Ty.tuple [], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      let β := timestamp_delta in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::ops::arith::Add",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| timestamp |);
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              [],
                                              [],
                                              "from_canonical_usize",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.sub,
                                                [
                                                  M.read (| timestamp_delta |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end)) in
              let~ is_load : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      ctx,
                      "openvm_circuit::arch::integration_api::AdapterAirContext",
                      "instruction"
                    |),
                    "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction",
                    "is_load"
                  |)
                |) in
              let~ is_valid : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      ctx,
                      "openvm_circuit::arch::integration_api::AdapterAirContext",
                      "instruction"
                    |),
                    "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction",
                    "is_valid"
                  |)
                |) in
              let~ load_shift_amount :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      ctx,
                      "openvm_circuit::arch::integration_api::AdapterAirContext",
                      "instruction"
                    |),
                    "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction",
                    "load_shift_amount"
                  |)
                |) in
              let~ store_shift_amount :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      ctx,
                      "openvm_circuit::arch::integration_api::AdapterAirContext",
                      "instruction"
                    |),
                    "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction",
                    "store_shift_amount"
                  |)
                |) in
              let~ shift_amount :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, load_shift_amount |) ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, store_shift_amount |) ]
                    |)
                  ]
                |) in
              let~ write_count : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| local_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "needs_write"
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (| write_count |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_one",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.read (| write_count |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_one",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                |);
                                M.read (| write_count |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_load |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                |);
                                M.read (| write_count |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "rd_rs2_ptr"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                        "read",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "memory_bridge"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_REGISTER_AS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                "rs1_ptr"
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "rs1_data"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::function::FnMut",
                            Ty.function
                              []
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                            [],
                            [ Ty.tuple [] ],
                            "call_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                "rs1_aux_cols"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ limbs_01 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                          "rs1_data"
                        |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "rs1_data"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.U32 1;
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_CELL_BITS",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ limbs_23 : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                          "rs1_data"
                        |),
                        Value.Integer IntegerKind.Usize 2
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "rs1_data"
                            |),
                            Value.Integer IntegerKind.Usize 3
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.U32 1;
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_CELL_BITS",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ inv : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::Field",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "inverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.U32 1;
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "openvm_instructions::riscv::RV32_CELL_BITS",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ carry : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.read (| limbs_01 |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                "imm"
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "mem_ptr_limbs"
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      ]
                    |);
                    M.read (| inv |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, carry |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "imm_sign"
                      |)
                    |)
                  ]
                |) in
              let~ imm_extend_limb :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "imm_sign"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.U32 1;
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "openvm_instructions::riscv::RV32_CELL_BITS",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |)
                              ]
                            |);
                            Value.Integer IntegerKind.U32 1
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ carry : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "add",
                                [],
                                []
                              |),
                              [ M.read (| limbs_23 |); M.read (| imm_extend_limb |) ]
                            |);
                            M.read (| carry |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "mem_ptr_limbs"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      ]
                    |);
                    M.read (| inv |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, carry |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                        "range_check",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "range_bus"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| local_cols |) |),
                                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                      "mem_ptr_limbs"
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |);
                                M.read (| shift_amount |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              M.get_trait_method (|
                                "p3_field::field::Field",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                [],
                                [],
                                "inverse",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                    M.call_closure (|
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "F",
                                        [],
                                        [],
                                        "from_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [ Value.Integer IntegerKind.U32 4 ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.mul,
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_CELL_BITS",
                                    Ty.path "usize"
                                  |)
                                |);
                                Value.Integer IntegerKind.Usize 2
                              ]
                            |);
                            Value.Integer IntegerKind.Usize 2
                          ]
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                        "range_check",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "range_bus"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "mem_ptr_limbs"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                                "pointer_max_bits"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.mul,
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_CELL_BITS",
                                    Ty.path "usize"
                                  |)
                                |);
                                Value.Integer IntegerKind.Usize 2
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ mem_ptr : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local_cols |) |),
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                          "mem_ptr_limbs"
                        |),
                        Value.Integer IntegerKind.Usize 0
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "mem_ptr_limbs"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.U32 1;
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "openvm_instructions::riscv::RV32_CELL_BITS",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ is_store : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_load |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_tern",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "mem_as"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.read (| is_store |);
                            M.read (|
                              get_constant (|
                                "p3_field::field::FieldAlgebra::TWO",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "mem_as"
                      |)
                    |)
                  ]
                |) in
              let~ read_as : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_function (|
                    "openvm_circuit_primitives::utils::select",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_load |) ]
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "mem_as"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          get_constant (|
                            "openvm_instructions::riscv::RV32_REGISTER_AS",
                            Ty.path "u32"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ read_ptr : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_function (|
                        "openvm_circuit_primitives::utils::select",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, is_load |) ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, mem_ptr |) ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "rd_rs2_ptr"
                          |)
                        |)
                      ]
                    |);
                    M.read (| load_shift_amount |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                        "read",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "memory_bridge"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| read_as |); M.read (| read_ptr |) ]
                        |);
                        M.read (|
                          M.SubPointer.get_tuple_field (|
                            M.SubPointer.get_struct_record_field (|
                              ctx,
                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                              "reads"
                            |),
                            1
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::function::FnMut",
                            Ty.function
                              []
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                            [],
                            [ Ty.tuple [] ],
                            "call_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                "read_data_aux"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ write_aux_cols :
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "from_base",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "write_base_aux"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_tuple_field (|
                        M.SubPointer.get_struct_record_field (|
                          ctx,
                          "openvm_circuit::arch::integration_api::AdapterAirContext",
                          "reads"
                        |),
                        0
                      |)
                    |)
                  ]
                |) in
              let~ write_as : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_function (|
                    "openvm_circuit_primitives::utils::select",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_load |) ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          get_constant (|
                            "openvm_instructions::riscv::RV32_REGISTER_AS",
                            Ty.path "u32"
                          |)
                        |)
                      ]
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                        "mem_as"
                      |)
                    |)
                  ]
                |) in
              let~ write_ptr : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_function (|
                        "openvm_circuit_primitives::utils::select",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, is_load |) ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "rd_rs2_ptr"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, mem_ptr |) ]
                        |)
                      ]
                    |);
                    M.read (| store_shift_amount |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                        "write",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "memory_bridge"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| write_as |); M.read (| write_ptr |) ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  ctx,
                                  "openvm_circuit::arch::integration_api::AdapterAirContext",
                                  "writes"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::function::FnMut",
                            Ty.function
                              []
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                            [],
                            [ Ty.tuple [] ],
                            "call_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, write_aux_cols |) |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (| write_count |)
                  ]
                |) in
              let~ to_pc : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "unwrap_or",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        ctx,
                        "openvm_circuit::arch::integration_api::AdapterAirContext",
                        "to_pc"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local_cols |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                              "from_state"
                            |),
                            "openvm_circuit::arch::execution::ExecutionState",
                            "pc"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              get_constant (|
                                "openvm_instructions::program::DEFAULT_PC_STEP",
                                Ty.path "u32"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                      []
                      [ AB ],
                    "eval",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                        []
                        [ AB ],
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                        "execute",
                        [],
                        [
                          AB;
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 7 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "execution_bridge"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              ctx,
                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                              "instruction"
                            |),
                            "openvm_rv32im_circuit::adapters::loadstore::LoadStoreInstruction",
                            "opcode"
                          |)
                        |);
                        Value.Array
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local_cols |) |),
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                    "rd_rs2_ptr"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local_cols |) |),
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                    "rs1_ptr"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local_cols |) |),
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                    "imm"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_REGISTER_AS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local_cols |) |),
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                    "mem_as"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local_cols |) |),
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                    "needs_write"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local_cols |) |),
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                    "imm_sign"
                                  |)
                                |)
                              ]
                            |)
                          ];
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "from_state"
                          |)
                        |);
                        Value.mkStructRecord
                          "openvm_circuit::arch::execution::ExecutionState"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          [
                            ("pc", M.read (| to_pc |));
                            ("timestamp",
                              M.call_closure (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.get_trait_method (|
                                  "core::ops::arith::Add",
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                                  "add",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| timestamp |);
                                  M.call_closure (|
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                    M.get_trait_method (|
                                      "p3_field::field::FieldAlgebra",
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                      [],
                                      [],
                                      "from_canonical_usize",
                                      [],
                                      []
                                    |),
                                    [ M.read (| timestamp_delta |) ]
                                  |)
                                ]
                              |))
                          ]
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (| is_valid |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_from_pc(&self, local: &[AB::Var]) -> AB::Var {
              let local_cols: &Rv32LoadStoreAdapterCols<AB::Var> = local.borrow();
              local_cols.from_state.pc
          }
      *)
      Definition get_from_pc
          (AB : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; local ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir" ],
                self
              |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            M.read (|
              let~ local_cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| local_cols |) |),
                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                  "from_state"
                |),
                "openvm_circuit::arch::execution::ExecutionState",
                "pc"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (AB : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB ]
          (Self AB)
          (* Instance *)
          [
            ("Interface", InstanceField.Ty (_Interface AB));
            ("eval", InstanceField.Method (eval AB));
            ("get_from_pc", InstanceField.Method (get_from_pc AB))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
          []
          [ F ].
      
      (*     type ReadRecord = Rv32LoadStoreReadRecord<F>; *)
      Definition _ReadRecord (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
          []
          [ F ].
      
      (*     type WriteRecord = Rv32LoadStoreWriteRecord<F>; *)
      Definition _WriteRecord (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
          []
          [ F ].
      
      (*     type Air = Rv32LoadStoreAdapterAir; *)
      Definition _Air (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir".
      
      (*     type Interface = Rv32LoadStoreAdapterRuntimeInterface<F>; *)
      Definition _Interface (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path
            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterRuntimeInterface")
          []
          [ F ].
      
      (*
          fn preprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
          ) -> Result<(
              <Self::Interface as VmAdapterInterface<F>>::Reads,
              Self::ReadRecord,
          )> {
              let Instruction {
                  opcode,
                  a,
                  b,
                  c,
                  d,
                  e,
                  g,
                  ..
              } = *instruction;
              debug_assert_eq!(d.as_canonical_u32(), RV32_REGISTER_AS);
              debug_assert!(e.as_canonical_u32() != RV32_IMM_AS);
      
              let local_opcode = Rv32LoadStoreOpcode::from_usize(
                  opcode.local_opcode_idx(Rv32LoadStoreOpcode::CLASS_OFFSET),
              );
              let rs1_record = memory.read::<RV32_REGISTER_NUM_LIMBS>(d, b);
      
              let rs1_val = compose(rs1_record.1);
              let imm = c.as_canonical_u32();
              let imm_sign = g.as_canonical_u32();
              let imm_extended = imm + imm_sign * 0xffff0000;
      
              let ptr_val = rs1_val.wrapping_add(imm_extended);
              let shift_amount = ptr_val % 4;
              assert!(
                  ptr_val < (1 << self.air.pointer_max_bits),
                  "ptr_val: {ptr_val} = rs1_val: {rs1_val} + imm_extended: {imm_extended} >= 2 ** {}",
                  self.air.pointer_max_bits
              );
      
              let mem_ptr_limbs = array::from_fn(|i| ((ptr_val >> (i * (RV32_CELL_BITS * 2))) & 0xffff));
      
              let ptr_val = ptr_val - shift_amount;
              let read_record = match local_opcode {
                  LOADW | LOADB | LOADH | LOADBU | LOADHU => {
                      memory.read::<RV32_REGISTER_NUM_LIMBS>(e, F::from_canonical_u32(ptr_val))
                  }
                  STOREW | STOREH | STOREB => memory.read::<RV32_REGISTER_NUM_LIMBS>(d, a),
              };
      
              // We need to keep values of some cells to keep them unchanged when writing to those cells
              let prev_data = match local_opcode {
                  STOREW | STOREH | STOREB => array::from_fn(|i| {
                      memory.unsafe_read_cell(e, F::from_canonical_usize(ptr_val as usize + i))
                  }),
                  LOADW | LOADB | LOADH | LOADBU | LOADHU => {
                      array::from_fn(|i| memory.unsafe_read_cell(d, a + F::from_canonical_usize(i)))
                  }
              };
      
              Ok((
                  (
                      [prev_data, read_record.1],
                      F::from_canonical_u32(shift_amount),
                  ),
                  Self::ReadRecord {
                      rs1_record: rs1_record.0,
                      rs1_ptr: b,
                      read: read_record.0,
                      imm: c,
                      imm_sign: g,
                      shift_amount,
                      mem_ptr_limbs,
                      mem_as: e,
                  },
              ))
          }
      *)
      Definition preprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ];
                          F
                        ];
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                        []
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "opcode"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "a"
                      |) in
                    let γ0_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "b"
                      |) in
                    let γ0_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "c"
                      |) in
                    let γ0_4 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "d"
                      |) in
                    let γ0_5 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "e"
                      |) in
                    let γ0_6 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "g"
                      |) in
                    let opcode := M.copy (| Ty.path "openvm_instructions::VmOpcode", γ0_0 |) in
                    let a := M.copy (| F, γ0_1 |) in
                    let b := M.copy (| F, γ0_2 |) in
                    let c := M.copy (| F, γ0_3 |) in
                    let d := M.copy (| F, γ0_4 |) in
                    let e := M.copy (| F, γ0_5 |) in
                    let g := M.copy (| F, γ0_6 |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "u32",
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_trait_method (|
                                                    "p3_field::field::PrimeField32",
                                                    F,
                                                    [],
                                                    [],
                                                    "as_canonical_u32",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, d |) ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "openvm_instructions::riscv::RV32_REGISTER_AS",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "u32"; Ty.path "u32" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.ne,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          M.get_trait_method (|
                                                            "p3_field::field::PrimeField32",
                                                            F,
                                                            [],
                                                            [],
                                                            "as_canonical_u32",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, e |) ]
                                                        |);
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::riscv::RV32_IMM_AS",
                                                            Ty.path "u32"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::panic",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  mk_str (|
                                                    "assertion failed: e.as_canonical_u32() != RV32_IMM_AS"
                                                  |)
                                                ]
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ local_opcode :
                          Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode" :=
                        M.call_closure (|
                          Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                          M.get_trait_method (|
                            "openvm_instructions::LocalOpcode",
                            Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                            [],
                            [],
                            "from_usize",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "openvm_instructions::VmOpcode",
                                "local_opcode_idx",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, opcode |);
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      let~ rs1_record :
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ] :=
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "read",
                            [ Value.Integer IntegerKind.Usize 4 ],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                            M.read (| d |);
                            M.read (| b |)
                          ]
                        |) in
                      let~ rs1_val : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_function (|
                            "openvm_rv32im_circuit::adapters::compose",
                            [],
                            [ F ]
                          |),
                          [ M.read (| M.SubPointer.get_tuple_field (| rs1_record, 1 |) |) ]
                        |) in
                      let~ imm : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_trait_method (|
                            "p3_field::field::PrimeField32",
                            F,
                            [],
                            [],
                            "as_canonical_u32",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, c |) ]
                        |) in
                      let~ imm_sign : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_trait_method (|
                            "p3_field::field::PrimeField32",
                            F,
                            [],
                            [],
                            "as_canonical_u32",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, g |) ]
                        |) in
                      let~ imm_extended : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.add,
                          [
                            M.read (| imm |);
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.mul,
                              [ M.read (| imm_sign |); Value.Integer IntegerKind.U32 4294901760 ]
                            |)
                          ]
                        |) in
                      let~ ptr_val : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          M.get_associated_function (| Ty.path "u32", "wrapping_add", [], [] |),
                          [ M.read (| rs1_val |); M.read (| imm_extended |) ]
                        |) in
                      let~ shift_amount : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.rem,
                          [ M.read (| ptr_val |); Value.Integer IntegerKind.U32 4 ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.lt,
                                          [
                                            M.read (| ptr_val |);
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.shl,
                                              [
                                                Value.Integer IntegerKind.U32 1;
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip",
                                                      "air"
                                                    |),
                                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                                                    "pointer_max_bits"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::Arguments",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1",
                                          [
                                            Value.Integer IntegerKind.Usize 4;
                                            Value.Integer IntegerKind.Usize 4
                                          ],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 4 ]
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                  Value.Array
                                                    [
                                                      mk_str (| "ptr_val: " |);
                                                      mk_str (| " = rs1_val: " |);
                                                      mk_str (| " + imm_extended: " |);
                                                      mk_str (| " >= 2 ** " |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 4 ]
                                                    [ Ty.path "core::fmt::rt::Argument" ],
                                                  M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [ Ty.path "core::fmt::rt::Argument" ],
                                                    M.alloc (|
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u32" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u32" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ],
                                                      Value.Tuple
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip",
                                                                "air"
                                                              |),
                                                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                                                              "pointer_max_bits"
                                                            |)
                                                          |);
                                                          M.borrow (| Pointer.Kind.Ref, ptr_val |);
                                                          M.borrow (| Pointer.Kind.Ref, rs1_val |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            imm_extended
                                                          |)
                                                        ]
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let args :=
                                                            M.copy (|
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ]
                                                                ],
                                                              γ
                                                            |) in
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "u32" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        M.SubPointer.get_tuple_field (|
                                                                          args,
                                                                          1
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "u32" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        M.SubPointer.get_tuple_field (|
                                                                          args,
                                                                          2
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "u32" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        M.SubPointer.get_tuple_field (|
                                                                          args,
                                                                          3
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        M.SubPointer.get_tuple_field (|
                                                                          args,
                                                                          0
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]))
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ mem_ptr_limbs :
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "u32" ],
                          M.get_function (|
                            "core::array::from_fn",
                            [ Value.Integer IntegerKind.Usize 2 ],
                            [ Ty.path "u32"; Ty.function [ Ty.path "usize" ] (Ty.path "u32") ]
                          |),
                          [
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| Ty.path "usize", α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let i := M.copy (| Ty.path "usize", γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.bit_and,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shr,
                                                    [
                                                      M.read (| ptr_val |);
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          M.read (| i |);
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.mul,
                                                            [
                                                              M.read (|
                                                                get_constant (|
                                                                  "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                  Ty.path "usize"
                                                                |)
                                                              |);
                                                              Value.Integer IntegerKind.Usize 2
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.U32 65535
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      let~ ptr_val : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.sub,
                          [ M.read (| ptr_val |); M.read (| shift_amount |) ]
                        |) in
                      let~ read_record :
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ] :=
                        M.match_operator (|
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ],
                          local_opcode,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.find_or_pattern (Ty.tuple []) (|
                                  γ,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADW"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADBU"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADHU"
                                          |) in
                                        Value.Tuple []))
                                  ],
                                  fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [] =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.path
                                                  "openvm_circuit::system::memory::controller::RecordId";
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ F ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ],
                                              "read",
                                              [ Value.Integer IntegerKind.Usize 4 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| memory |) |)
                                              |);
                                              M.read (| e |);
                                              M.call_closure (|
                                                F,
                                                M.get_trait_method (|
                                                  "p3_field::field::FieldAlgebra",
                                                  F,
                                                  [],
                                                  [],
                                                  "from_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| ptr_val |) ]
                                              |)
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.find_or_pattern (Ty.tuple []) (|
                                  γ,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREW"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREH"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREB"
                                          |) in
                                        Value.Tuple []))
                                  ],
                                  fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [] =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.tuple
                                              [
                                                Ty.path
                                                  "openvm_circuit::system::memory::controller::RecordId";
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [ F ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ],
                                              "read",
                                              [ Value.Integer IntegerKind.Usize 4 ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| memory |) |)
                                              |);
                                              M.read (| d |);
                                              M.read (| a |)
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end)
                                |)))
                          ]
                        |) in
                      let~ prev_data :
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] :=
                        M.match_operator (|
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ],
                          local_opcode,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.find_or_pattern (Ty.tuple []) (|
                                  γ,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREW"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREH"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREB"
                                          |) in
                                        Value.Tuple []))
                                  ],
                                  fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [] =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ F ],
                                            M.get_function (|
                                              "core::array::from_fn",
                                              [ Value.Integer IntegerKind.Usize 4 ],
                                              [ F; Ty.function [ Ty.path "usize" ] F ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          F,
                                                          M.alloc (| Ty.path "usize", α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let i :=
                                                                  M.copy (| Ty.path "usize", γ |) in
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                                      []
                                                                      [ F ],
                                                                    "unsafe_read_cell",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| memory |)
                                                                      |)
                                                                    |);
                                                                    M.read (| e |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "p3_field::field::FieldAlgebra",
                                                                        F,
                                                                        [],
                                                                        [],
                                                                        "from_canonical_usize",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            M.cast
                                                                              (Ty.path "usize")
                                                                              (M.read (|
                                                                                ptr_val
                                                                              |));
                                                                            M.read (| i |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.find_or_pattern (Ty.tuple []) (|
                                  γ,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADW"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADBU"
                                          |) in
                                        Value.Tuple []));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (|
                                            γ,
                                            "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADHU"
                                          |) in
                                        Value.Tuple []))
                                  ],
                                  fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [] =>
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ F ],
                                            M.get_function (|
                                              "core::array::from_fn",
                                              [ Value.Integer IntegerKind.Usize 4 ],
                                              [ F; Ty.function [ Ty.path "usize" ] F ]
                                            |),
                                            [
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          F,
                                                          M.alloc (| Ty.path "usize", α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let i :=
                                                                  M.copy (| Ty.path "usize", γ |) in
                                                                M.call_closure (|
                                                                  F,
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                                      []
                                                                      [ F ],
                                                                    "unsafe_read_cell",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| memory |)
                                                                      |)
                                                                    |);
                                                                    M.read (| d |);
                                                                    M.call_closure (|
                                                                      F,
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        F,
                                                                        [],
                                                                        [ F ],
                                                                        "add",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| a |);
                                                                        M.call_closure (|
                                                                          F,
                                                                          M.get_trait_method (|
                                                                            "p3_field::field::FieldAlgebra",
                                                                            F,
                                                                            [],
                                                                            [],
                                                                            "from_canonical_usize",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [ M.read (| i |) ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end)
                                |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ]
                                      ];
                                    F
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                                  []
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ]
                                      ];
                                    F
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord")
                                  []
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ]
                          [
                            Value.Tuple
                              [
                                Value.Tuple
                                  [
                                    Value.Array
                                      [
                                        M.read (| prev_data |);
                                        M.read (|
                                          M.SubPointer.get_tuple_field (| read_record, 1 |)
                                        |)
                                      ];
                                    M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        F,
                                        [],
                                        [],
                                        "from_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [ M.read (| shift_amount |) ]
                                    |)
                                  ];
                                Value.mkStructRecord
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord"
                                  []
                                  [ F ]
                                  [
                                    ("rs1_record",
                                      M.read (|
                                        M.SubPointer.get_tuple_field (| rs1_record, 0 |)
                                      |));
                                    ("rs1_ptr", M.read (| b |));
                                    ("read",
                                      M.read (|
                                        M.SubPointer.get_tuple_field (| read_record, 0 |)
                                      |));
                                    ("imm", M.read (| c |));
                                    ("imm_sign", M.read (| g |));
                                    ("shift_amount", M.read (| shift_amount |));
                                    ("mem_ptr_limbs", M.read (| mem_ptr_limbs |));
                                    ("mem_as", M.read (| e |))
                                  ]
                              ]
                          ]
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn postprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
              from_state: ExecutionState<u32>,
              output: AdapterRuntimeContext<F, Self::Interface>,
              read_record: &Self::ReadRecord,
          ) -> Result<(ExecutionState<u32>, Self::WriteRecord)> {
              let Instruction {
                  opcode,
                  a,
                  d,
                  e,
                  f: enabled,
                  ..
              } = *instruction;
      
              let local_opcode = Rv32LoadStoreOpcode::from_usize(
                  opcode.local_opcode_idx(Rv32LoadStoreOpcode::CLASS_OFFSET),
              );
      
              let write_id = if enabled != F::ZERO {
                  let (record_id, _) = match local_opcode {
                      STOREW | STOREH | STOREB => {
                          let ptr = read_record.mem_ptr_limbs[0]
                              + read_record.mem_ptr_limbs[1] * (1 << (RV32_CELL_BITS * 2));
                          memory.write(e, F::from_canonical_u32(ptr & 0xfffffffc), output.writes[0])
                      }
                      LOADW | LOADB | LOADH | LOADBU | LOADHU => memory.write(d, a, output.writes[0]),
                  };
                  record_id
              } else {
                  memory.increment_timestamp();
                  // RecordId will never get to usize::MAX, so it can be used as a flag for no write
                  RecordId(usize::MAX)
              };
      
              Ok((
                  ExecutionState {
                      pc: output.to_pc.unwrap_or(from_state.pc + DEFAULT_PC_STEP),
                      timestamp: memory.timestamp(),
                  },
                  Self::WriteRecord {
                      from_state,
                      write_id,
                      rd_rs2_ptr: a,
                  },
              ))
          }
      *)
      Definition postprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction; from_state; output; read_record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_state :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ],
                from_state
              |) in
            let output :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                  []
                  [
                    F;
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                        []
                        [ F ])
                      "Interface"
                  ],
                output
              |) in
            let read_record :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                        []
                        [ F ])
                      "ReadRecord"
                  ],
                read_record
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ];
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                        []
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "opcode"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "a"
                      |) in
                    let γ0_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "d"
                      |) in
                    let γ0_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "e"
                      |) in
                    let γ0_4 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "f"
                      |) in
                    let opcode := M.copy (| Ty.path "openvm_instructions::VmOpcode", γ0_0 |) in
                    let a := M.copy (| F, γ0_1 |) in
                    let d := M.copy (| F, γ0_2 |) in
                    let e := M.copy (| F, γ0_3 |) in
                    let enabled := M.copy (| F, γ0_4 |) in
                    M.read (|
                      let~ local_opcode :
                          Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode" :=
                        M.call_closure (|
                          Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                          M.get_trait_method (|
                            "openvm_instructions::LocalOpcode",
                            Ty.path "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode",
                            [],
                            [],
                            "from_usize",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "openvm_instructions::VmOpcode",
                                "local_opcode_idx",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, opcode |);
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      let~ write_id :
                          Ty.path "openvm_circuit::system::memory::controller::RecordId" :=
                        M.match_operator (|
                          Ty.path "openvm_circuit::system::memory::controller::RecordId",
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          F,
                                          [],
                                          [ F ],
                                          "ne",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, enabled |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_constant (|
                                              "p3_field::field::FieldAlgebra::ZERO",
                                              F
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.match_operator (|
                                  Ty.path "openvm_circuit::system::memory::controller::RecordId",
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId";
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ]
                                      ],
                                    M.match_operator (|
                                      Ty.tuple
                                        [
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId";
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ]
                                        ],
                                      local_opcode,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.find_or_pattern (Ty.tuple []) (|
                                              γ,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREW"
                                                      |) in
                                                    Value.Tuple []));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREH"
                                                      |) in
                                                    Value.Tuple []));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::STOREB"
                                                      |) in
                                                    Value.Tuple []))
                                              ],
                                              fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [] =>
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ ptr : Ty.path "u32" :=
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (| read_record |)
                                                                    |),
                                                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                                                    "mem_ptr_limbs"
                                                                  |),
                                                                  Value.Integer IntegerKind.Usize 0
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.mul,
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| read_record |)
                                                                        |),
                                                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                                                        "mem_ptr_limbs"
                                                                      |),
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.path "u32",
                                                                    BinOp.Wrap.shl,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        1;
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          M.read (|
                                                                            get_constant (|
                                                                              "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                              Ty.path "usize"
                                                                            |)
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |) in
                                                        M.alloc (|
                                                          Ty.tuple
                                                            [
                                                              Ty.path
                                                                "openvm_circuit::system::memory::controller::RecordId";
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 4
                                                                ]
                                                                [ F ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.tuple
                                                              [
                                                                Ty.path
                                                                  "openvm_circuit::system::memory::controller::RecordId";
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      4
                                                                  ]
                                                                  [ F ]
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                                []
                                                                [ F ],
                                                              "write",
                                                              [ Value.Integer IntegerKind.Usize 4 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| memory |) |)
                                                              |);
                                                              M.read (| e |);
                                                              M.call_closure (|
                                                                F,
                                                                M.get_trait_method (|
                                                                  "p3_field::field::FieldAlgebra",
                                                                  F,
                                                                  [],
                                                                  [],
                                                                  "from_canonical_u32",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "u32",
                                                                    BinOp.Wrap.bit_and,
                                                                    [
                                                                      M.read (| ptr |);
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        4294967292
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    output,
                                                                    "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                                                    "writes"
                                                                  |),
                                                                  Value.Integer IntegerKind.Usize 0
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.find_or_pattern (Ty.tuple []) (|
                                              γ,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADW"
                                                      |) in
                                                    Value.Tuple []));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADB"
                                                      |) in
                                                    Value.Tuple []));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADH"
                                                      |) in
                                                    Value.Tuple []));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADBU"
                                                      |) in
                                                    Value.Tuple []));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.is_struct_tuple (|
                                                        γ,
                                                        "openvm_rv32im_transpiler::instructions::Rv32LoadStoreOpcode::LOADHU"
                                                      |) in
                                                    Value.Tuple []))
                                              ],
                                              fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [] =>
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.tuple
                                                          [
                                                            Ty.path
                                                              "openvm_circuit::system::memory::controller::RecordId";
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 4 ]
                                                              [ F ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::controller::MemoryController")
                                                            []
                                                            [ F ],
                                                          "write",
                                                          [ Value.Integer IntegerKind.Usize 4 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (| M.read (| memory |) |)
                                                          |);
                                                          M.read (| d |);
                                                          M.read (| a |);
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                output,
                                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                                                "writes"
                                                              |),
                                                              Value.Integer IntegerKind.Usize 0
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end)
                                            |)))
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let record_id :=
                                          M.copy (|
                                            Ty.path
                                              "openvm_circuit::system::memory::controller::RecordId",
                                            γ0_0
                                          |) in
                                        M.read (| record_id |)))
                                  ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ],
                                        "increment_timestamp",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| memory |) |)
                                        |)
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.path "openvm_circuit::system::memory::controller::RecordId",
                                    Value.StructTuple
                                      "openvm_circuit::system::memory::controller::RecordId"
                                      []
                                      []
                                      [
                                        M.read (|
                                          get_associated_constant (|
                                            Ty.path "usize",
                                            "MAX",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      ]
                                  |)
                                |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                                  []
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord")
                                  []
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ]
                          [
                            Value.Tuple
                              [
                                Value.mkStructRecord
                                  "openvm_circuit::arch::execution::ExecutionState"
                                  []
                                  [ Ty.path "u32" ]
                                  [
                                    ("pc",
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "u32" ],
                                          "unwrap_or",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              output,
                                              "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                              "to_pc"
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.add,
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  from_state,
                                                  "openvm_circuit::arch::execution::ExecutionState",
                                                  "pc"
                                                |)
                                              |);
                                              M.read (|
                                                get_constant (|
                                                  "openvm_instructions::program::DEFAULT_PC_STEP",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |));
                                    ("timestamp",
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ],
                                          "timestamp",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| memory |) |)
                                          |)
                                        ]
                                      |))
                                  ];
                                Value.mkStructRecord
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord"
                                  []
                                  [ F ]
                                  [
                                    ("from_state", M.read (| from_state |));
                                    ("write_id", M.read (| write_id |));
                                    ("rd_rs2_ptr", M.read (| a |))
                                  ]
                              ]
                          ]
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(
              &self,
              row_slice: &mut [F],
              read_record: Self::ReadRecord,
              write_record: Self::WriteRecord,
              memory: &OfflineMemory<F>,
          ) {
              self.range_checker_chip.add_count(
                  (read_record.mem_ptr_limbs[0] - read_record.shift_amount) / 4,
                  RV32_CELL_BITS * 2 - 2,
              );
              self.range_checker_chip.add_count(
                  read_record.mem_ptr_limbs[1],
                  self.air.pointer_max_bits - RV32_CELL_BITS * 2,
              );
      
              let aux_cols_factory = memory.aux_cols_factory();
              let adapter_cols: &mut Rv32LoadStoreAdapterCols<_> = row_slice.borrow_mut();
              adapter_cols.from_state = write_record.from_state.map(F::from_canonical_u32);
              let rs1 = memory.record_by_id(read_record.rs1_record);
              adapter_cols.rs1_data.copy_from_slice(rs1.data_slice());
              aux_cols_factory.generate_read_aux(rs1, &mut adapter_cols.rs1_aux_cols);
              adapter_cols.rs1_ptr = read_record.rs1_ptr;
              adapter_cols.rd_rs2_ptr = write_record.rd_rs2_ptr;
              let read = memory.record_by_id(read_record.read);
              aux_cols_factory.generate_read_aux(read, &mut adapter_cols.read_data_aux);
              adapter_cols.imm = read_record.imm;
              adapter_cols.imm_sign = read_record.imm_sign;
              adapter_cols.mem_ptr_limbs = read_record.mem_ptr_limbs.map(F::from_canonical_u32);
              adapter_cols.mem_as = read_record.mem_as;
              if write_record.write_id.0 != usize::MAX {
                  let write = memory.record_by_id(write_record.write_id);
                  aux_cols_factory.generate_base_aux(write, &mut adapter_cols.write_base_aux);
                  adapter_cols.needs_write = F::ONE;
              }
          }
      *)
      Definition generate_trace_row
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; row_slice; read_record; write_record; memory ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let read_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                    []
                    [ F ])
                  "ReadRecord",
                read_record
              |) in
            let write_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                    []
                    [ F ])
                  "WriteRecord",
                write_record
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ],
                memory
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                    "add_count",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip",
                        "range_checker_chip"
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.div,
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.sub,
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  read_record,
                                  "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                  "mem_ptr_limbs"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                read_record,
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                                "shift_amount"
                              |)
                            |)
                          ]
                        |);
                        Value.Integer IntegerKind.U32 4
                      ]
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [
                            M.read (|
                              get_constant (|
                                "openvm_instructions::riscv::RV32_CELL_BITS",
                                Ty.path "usize"
                              |)
                            |);
                            Value.Integer IntegerKind.Usize 2
                          ]
                        |);
                        Value.Integer IntegerKind.Usize 2
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                    "add_count",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip",
                        "range_checker_chip"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (|
                          read_record,
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                          "mem_ptr_limbs"
                        |),
                        Value.Integer IntegerKind.Usize 1
                      |)
                    |);
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip",
                              "air"
                            |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterAir",
                            "pointer_max_bits"
                          |)
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.mul,
                          [
                            M.read (|
                              get_constant (|
                                "openvm_instructions::riscv::RV32_CELL_BITS",
                                Ty.path "usize"
                              |)
                            |);
                            Value.Integer IntegerKind.Usize 2
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ aux_cols_factory :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "aux_cols_factory",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |) ]
                |) in
              let~ adapter_cols :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                        []
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols")
                            []
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "from_state"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ],
                      "map",
                      [],
                      [ F; Ty.function [ Ty.path "u32" ] F ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          write_record,
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                          "from_state"
                        |)
                      |);
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |)
                    ]
                  |)
                |) in
              let~ rs1 :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "record_by_id",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        read_record,
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                        "rs1_record"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [] [ F ],
                    "copy_from_slice",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&mut")
                          []
                          [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                          ])
                        (Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| adapter_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "rs1_data"
                          |)
                        |)
                      ]
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                              []
                              [ F ],
                            "data_slice",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rs1 |) |) |) ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                      []
                      [ F ],
                    "generate_read_aux",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rs1 |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| adapter_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "rs1_aux_cols"
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "rs1_ptr"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      read_record,
                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                      "rs1_ptr"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "rd_rs2_ptr"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      write_record,
                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                      "rd_rs2_ptr"
                    |)
                  |)
                |) in
              let~ read :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "record_by_id",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        read_record,
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                        "read"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                      []
                      [ F ],
                    "generate_read_aux",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| read |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| adapter_cols |) |),
                            "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                            "read_data_aux"
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "imm"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      read_record,
                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                      "imm"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "imm_sign"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      read_record,
                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                      "imm_sign"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "mem_ptr_limbs"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "u32" ],
                      "map",
                      [],
                      [ Ty.function [ Ty.path "u32" ] F; F ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          read_record,
                          "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                          "mem_ptr_limbs"
                        |)
                      |);
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                    "mem_as"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      read_record,
                      "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreReadRecord",
                      "mem_as"
                    |)
                  |)
                |) in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.ne,
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        write_record,
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                                        "write_id"
                                      |),
                                      "openvm_circuit::system::memory::controller::RecordId",
                                      0
                                    |)
                                  |);
                                  M.read (|
                                    get_associated_constant (|
                                      Ty.path "usize",
                                      "MAX",
                                      Ty.path "usize"
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ write :
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                    []
                                    [ F ]
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                  []
                                  [ F ],
                                "record_by_id",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    write_record,
                                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreWriteRecord",
                                    "write_id"
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                                  []
                                  [ F ],
                                "generate_base_aux",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| write |) |) |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| adapter_cols |) |),
                                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                        "write_base_aux"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| adapter_cols |) |),
                                "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterCols",
                                "needs_write"
                              |),
                              M.read (|
                                get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::adapters::loadstore::Rv32LoadStoreAdapterChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("ReadRecord", InstanceField.Ty (_ReadRecord F));
            ("WriteRecord", InstanceField.Ty (_WriteRecord F));
            ("Air", InstanceField.Ty (_Air F));
            ("Interface", InstanceField.Ty (_Interface F));
            ("preprocess", InstanceField.Method (preprocess F));
            ("postprocess", InstanceField.Method (postprocess F));
            ("generate_trace_row", InstanceField.Method (generate_trace_row F));
            ("air", InstanceField.Method (air F))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_loadstore_Rv32LoadStoreAdapterChip_F.
  End loadstore.
End adapters.
