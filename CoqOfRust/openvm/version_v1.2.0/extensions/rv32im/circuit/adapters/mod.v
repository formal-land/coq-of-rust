(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module adapters.
  Definition value_INT256_NUM_LIMBS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 32 |))).
  
  Global Instance Instance_IsConstant_value_INT256_NUM_LIMBS :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::INT256_NUM_LIMBS" value_INT256_NUM_LIMBS.
  Admitted.
  Global Typeclasses Opaque value_INT256_NUM_LIMBS.
  
  Definition value_RV_IS_TYPE_IMM_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 12 |))).
  
  Global Instance Instance_IsConstant_value_RV_IS_TYPE_IMM_BITS :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::RV_IS_TYPE_IMM_BITS" value_RV_IS_TYPE_IMM_BITS.
  Admitted.
  Global Typeclasses Opaque value_RV_IS_TYPE_IMM_BITS.
  
  Definition value_RV_B_TYPE_IMM_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 13 |))).
  
  Global Instance Instance_IsConstant_value_RV_B_TYPE_IMM_BITS :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::RV_B_TYPE_IMM_BITS" value_RV_B_TYPE_IMM_BITS.
  Admitted.
  Global Typeclasses Opaque value_RV_B_TYPE_IMM_BITS.
  
  Definition value_RV_J_TYPE_IMM_BITS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 21 |))).
  
  Global Instance Instance_IsConstant_value_RV_J_TYPE_IMM_BITS :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::RV_J_TYPE_IMM_BITS" value_RV_J_TYPE_IMM_BITS.
  Admitted.
  Global Typeclasses Opaque value_RV_J_TYPE_IMM_BITS.
  
  (*
  pub fn compose<F: PrimeField32>(ptr_data: [F; RV32_REGISTER_NUM_LIMBS]) -> u32 {
      let mut val = 0;
      for (i, limb) in ptr_data.map(|x| x.as_canonical_u32()).iter().enumerate() {
          val += limb << (i * 8);
      }
      val
  }
  *)
  Definition compose (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ ptr_data ] =>
      ltac:(M.monadic
        (let ptr_data :=
          M.alloc (|
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_adapters_compose_discriminant" |))
              ]
              [ F ],
            ptr_data
          |) in
        M.read (|
          let~ val : Ty.path "u32" := Value.Integer IntegerKind.U32 0 in
          let~ _ : Ty.tuple [] :=
            M.read (|
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                              [],
                              [],
                              "enumerate",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ Ty.path "u32" ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ Ty.path "u32" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [ Ty.path "u32" ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                [ F ],
                                              "map",
                                              [],
                                              [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                                            |),
                                            [
                                              M.read (| ptr_data |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.path "u32",
                                                          M.alloc (| F, α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x := M.copy (| F, γ |) in
                                                                M.call_closure (|
                                                                  Ty.path "u32",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::PrimeField32",
                                                                    F,
                                                                    [],
                                                                    [],
                                                                    "as_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      x
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ]
                                ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                            ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "u32" ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                          let limb :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                              γ1_1
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              let β := val in
                                              M.write (|
                                                β,
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (| β |);
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      M.get_trait_method (|
                                                        "core::ops::bit::Shl",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                        [],
                                                        [ Ty.path "usize" ],
                                                        "shl",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| limb |);
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| i |);
                                                            Value.Integer IntegerKind.Usize 8
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |) in
          val
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_compose :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::compose" compose.
  Admitted.
  Global Typeclasses Opaque compose.
  
  (*
  pub fn decompose<F: PrimeField32>(value: u32) -> [F; RV32_REGISTER_NUM_LIMBS] {
      std::array::from_fn(|i| {
          F::from_canonical_u32((value >> (RV32_CELL_BITS * i)) & ((1 << RV32_CELL_BITS) - 1))
      })
  }
  *)
  Definition decompose (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ value ] =>
      ltac:(M.monadic
        (let value := M.alloc (| Ty.path "u32", value |) in
        M.call_closure (|
          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ],
          M.get_function (|
            "core::array::from_fn",
            [ Value.Integer IntegerKind.Usize 4 ],
            [ F; Ty.function [ Ty.path "usize" ] F ]
          |),
          [
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        F,
                        M.alloc (| Ty.path "usize", α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let i := M.copy (| Ty.path "usize", γ |) in
                              M.call_closure (|
                                F,
                                M.get_trait_method (|
                                  "p3_field::field::FieldAlgebra",
                                  F,
                                  [],
                                  [],
                                  "from_canonical_u32",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "u32",
                                    BinOp.Wrap.bit_and,
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shr,
                                        [
                                          M.read (| value |);
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.mul,
                                            [
                                              M.read (|
                                                get_constant (|
                                                  "openvm_instructions::riscv::RV32_CELL_BITS",
                                                  Ty.path "usize"
                                                |)
                                              |);
                                              M.read (| i |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.sub,
                                        [
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shl,
                                            [
                                              Value.Integer IntegerKind.U32 1;
                                              M.read (|
                                                get_constant (|
                                                  "openvm_instructions::riscv::RV32_CELL_BITS",
                                                  Ty.path "usize"
                                                |)
                                              |)
                                            ]
                                          |);
                                          Value.Integer IntegerKind.U32 1
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_decompose :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::decompose" decompose.
  Admitted.
  Global Typeclasses Opaque decompose.
  
  (*
  pub fn read_rv32_register<F: PrimeField32>(
      memory: &mut MemoryController<F>,
      address_space: F,
      pointer: F,
  ) -> (RecordId, u32) {
      debug_assert_eq!(address_space, F::ONE);
      let record = memory.read::<RV32_REGISTER_NUM_LIMBS>(address_space, pointer);
      let val = compose(record.1);
      (record.0, val)
  }
  *)
  Definition read_rv32_register (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ memory; address_space; pointer ] =>
      ltac:(M.monadic
        (let memory :=
          M.alloc (|
            Ty.apply
              (Ty.path "&mut")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                  []
                  [ F ]
              ],
            memory
          |) in
        let address_space := M.alloc (| F, address_space |) in
        let pointer := M.alloc (| F, pointer |) in
        M.read (|
          let~ _ : Ty.tuple [] :=
            M.match_operator (|
              Ty.tuple [],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.tuple
                              [ Ty.apply (Ty.path "&") [] [ F ]; Ty.apply (Ty.path "&") [] [ F ] ],
                            Value.Tuple
                              [
                                M.borrow (| Pointer.Kind.Ref, address_space |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val :=
                                  M.copy (| Ty.apply (Ty.path "&") [] [ F ], γ0_0 |) in
                                let right_val :=
                                  M.copy (| Ty.apply (Ty.path "&") [] [ F ], γ0_1 |) in
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              Ty.path "bool",
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_trait_method (|
                                                    "core::cmp::PartialEq",
                                                    F,
                                                    [],
                                                    [ F ],
                                                    "eq",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            let~ kind : Ty.path "core::panicking::AssertKind" :=
                                              Value.StructTuple
                                                "core::panicking::AssertKind::Eq"
                                                []
                                                []
                                                [] in
                                            M.alloc (|
                                              Ty.path "never",
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::assert_failed",
                                                  [],
                                                  [ F; F ]
                                                |),
                                                [
                                                  M.read (| kind |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  Value.StructTuple
                                                    "core::option::Option::None"
                                                    []
                                                    [ Ty.path "core::fmt::Arguments" ]
                                                    []
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |)));
                fun γ => ltac:(M.monadic (Value.Tuple []))
              ]
            |) in
          let~ record :
              Ty.tuple
                [
                  Ty.path "openvm_circuit::system::memory::controller::RecordId";
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                ] :=
            M.call_closure (|
              Ty.tuple
                [
                  Ty.path "openvm_circuit::system::memory::controller::RecordId";
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                  []
                  [ F ],
                "read",
                [ Value.Integer IntegerKind.Usize 4 ],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                M.read (| address_space |);
                M.read (| pointer |)
              ]
            |) in
          let~ val : Ty.path "u32" :=
            M.call_closure (|
              Ty.path "u32",
              M.get_function (| "openvm_rv32im_circuit::adapters::compose", [], [ F ] |),
              [ M.read (| M.SubPointer.get_tuple_field (| record, 1 |) |) ]
            |) in
          M.alloc (|
            Ty.tuple
              [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; Ty.path "u32" ],
            Value.Tuple
              [ M.read (| M.SubPointer.get_tuple_field (| record, 0 |) |); M.read (| val |) ]
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_read_rv32_register :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::read_rv32_register" read_rv32_register.
  Admitted.
  Global Typeclasses Opaque read_rv32_register.
  
  (*
  pub fn unsafe_read_rv32_register<F: PrimeField32>(memory: &MemoryController<F>, pointer: F) -> u32 {
      let data = memory.unsafe_read::<RV32_REGISTER_NUM_LIMBS>(F::ONE, pointer);
      compose(data)
  }
  *)
  Definition unsafe_read_rv32_register (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ F ], [ memory; pointer ] =>
      ltac:(M.monadic
        (let memory :=
          M.alloc (|
            Ty.apply
              (Ty.path "&")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                  []
                  [ F ]
              ],
            memory
          |) in
        let pointer := M.alloc (| F, pointer |) in
        M.read (|
          let~ data : Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] :=
            M.call_closure (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                  []
                  [ F ],
                "unsafe_read",
                [ Value.Integer IntegerKind.Usize 4 ],
                []
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |);
                M.read (| pointer |)
              ]
            |) in
          M.alloc (|
            Ty.path "u32",
            M.call_closure (|
              Ty.path "u32",
              M.get_function (| "openvm_rv32im_circuit::adapters::compose", [], [ F ] |),
              [ M.read (| data |) ]
            |)
          |)
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_unsafe_read_rv32_register :
    M.IsFunction.C
      "openvm_rv32im_circuit::adapters::unsafe_read_rv32_register"
      unsafe_read_rv32_register.
  Admitted.
  Global Typeclasses Opaque unsafe_read_rv32_register.
  
  (*
  pub fn abstract_compose<T: FieldAlgebra, V: Mul<T, Output = T>>(
      data: [V; RV32_REGISTER_NUM_LIMBS],
  ) -> T {
      data.into_iter()
          .enumerate()
          .fold(T::ZERO, |acc, (i, limb)| {
              acc + limb * T::from_canonical_u32(1 << (i * RV32_CELL_BITS))
          })
  }
  *)
  Definition abstract_compose (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
    match ε, τ, α with
    | [], [ T; V ], [ data ] =>
      ltac:(M.monadic
        (let data :=
          M.alloc (|
            Ty.apply
              (Ty.path "array")
              [
                M.unevaluated_const
                  (mk_str (| "openvm_rv32im_circuit_adapters_abstract_compose_discriminant" |))
              ]
              [ V ],
            data
          |) in
        M.call_closure (|
          T,
          M.get_trait_method (|
            "core::iter::traits::iterator::Iterator",
            Ty.apply
              (Ty.path "core::iter::adapters::enumerate::Enumerate")
              []
              [
                Ty.apply
                  (Ty.path "core::array::iter::IntoIter")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [ V ]
              ],
            [],
            [],
            "fold",
            [],
            [ T; Ty.function [ T; Ty.tuple [ Ty.path "usize"; V ] ] T ]
          |),
          [
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                []
                [
                  Ty.apply
                    (Ty.path "core::array::iter::IntoIter")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ V ]
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::array::iter::IntoIter")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [ V ],
                [],
                [],
                "enumerate",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::array::iter::IntoIter")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ V ],
                  M.get_trait_method (|
                    "core::iter::traits::collect::IntoIterator",
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ V ],
                    [],
                    [],
                    "into_iter",
                    [],
                    []
                  |),
                  [ M.read (| data |) ]
                |)
              ]
            |);
            M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", T |) |);
            M.closure
              (fun γ =>
                ltac:(M.monadic
                  match γ with
                  | [ α0; α1 ] =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        T,
                        M.alloc (| T, α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let acc := M.copy (| T, γ |) in
                              M.match_operator (|
                                T,
                                M.alloc (| Ty.tuple [ Ty.path "usize"; V ], α1 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                      let limb := M.copy (| V, γ0_1 |) in
                                      M.call_closure (|
                                        T,
                                        M.get_trait_method (|
                                          "core::ops::arith::Add",
                                          T,
                                          [],
                                          [ T ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| acc |);
                                          M.call_closure (|
                                            T,
                                            M.get_trait_method (|
                                              "core::ops::arith::Mul",
                                              V,
                                              [],
                                              [ T ],
                                              "mul",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (| limb |);
                                              M.call_closure (|
                                                T,
                                                M.get_trait_method (|
                                                  "p3_field::field::FieldAlgebra",
                                                  T,
                                                  [],
                                                  [],
                                                  "from_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      Value.Integer IntegerKind.U32 1;
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [
                                                          M.read (| i |);
                                                          M.read (|
                                                            get_constant (|
                                                              "openvm_instructions::riscv::RV32_CELL_BITS",
                                                              Ty.path "usize"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                  | _ => M.impossible "wrong number of arguments"
                  end))
          ]
        |)))
    | _, _, _ => M.impossible "wrong number of arguments"
    end.
  
  Global Instance Instance_IsFunction_abstract_compose :
    M.IsFunction.C "openvm_rv32im_circuit::adapters::abstract_compose" abstract_compose.
  Admitted.
  Global Typeclasses Opaque abstract_compose.
End adapters.
