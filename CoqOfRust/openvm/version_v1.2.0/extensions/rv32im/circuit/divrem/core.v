(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module divrem.
  Module core.
    (* StructRecord
      {
        name := "DivRemCoreCols";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("c", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("q", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("r", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("zero_divisor", T);
            ("r_zero", T);
            ("b_sign", T);
            ("c_sign", T);
            ("q_sign", T);
            ("sign_xor", T);
            ("c_sum_inv", T);
            ("r_sum_inv", T);
            ("r_prime", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("r_inv", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("lt_marker", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("lt_diff", T);
            ("opcode_div_flag", T);
            ("opcode_divu_flag", T);
            ("opcode_rem_flag", T);
            ("opcode_remu_flag", T)
          ];
      } *)
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_divrem_core_DivRemCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                    [ NUM_LIMBS; LIMB_BITS ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                                              [ NUM_LIMBS; LIMB_BITS ]
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
          ]
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_divrem_core_DivRemCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_divrem_core_DivRemCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                          [ NUM_LIMBS; LIMB_BITS ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                        [ NUM_LIMBS; LIMB_BITS ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                [ NUM_LIMBS; LIMB_BITS ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                          [ NUM_LIMBS; LIMB_BITS ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
          ]
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *)
          [ ("borrow_mut", InstanceField.Method (borrow_mut NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_divrem_core_DivRemCoreCols_NUM_LIMBS_LIMB_BITS_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_divrem_core_DivRemCoreCols_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* AlignedBorrow *)
      Definition width
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                    [ NUM_LIMBS; LIMB_BITS ]
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS LIMB_BITS T) "width" (width NUM_LIMBS LIMB_BITS T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_divrem_core_DivRemCoreCols_NUM_LIMBS_LIMB_BITS_T.
    
    (* StructRecord
      {
        name := "DivRemCoreAir";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("bitwise_lookup_bus",
              Ty.path
                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus");
            ("range_tuple_bus",
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                [ Value.Integer IntegerKind.Usize 2 ]
                []);
            ("offset", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                [ NUM_LIMBS; LIMB_BITS ]
                [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [],
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                                [ NUM_LIMBS; LIMB_BITS ]
                                [],
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "DivRemCoreAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bitwise_lookup_bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus"
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                            "bitwise_lookup_bus"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "range_tuple_bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          []
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                            "range_tuple_bus"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                                "offset"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn width(&self) -> usize {
              DivRemCoreCols::<F, NUM_LIMBS, LIMB_BITS>::width()
          }
      *)
      Definition width
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                  [ NUM_LIMBS; LIMB_BITS ]
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS LIMB_BITS F)
          (* Instance *) [ ("width", InstanceField.Method (width NUM_LIMBS LIMB_BITS F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::BaseAirWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS LIMB_BITS F)
          (* Instance *) [].
    End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (AB I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local_core: &[AB::Var],
              _from_pc: AB::Var,
          ) -> AdapterAirContext<AB::Expr, I> {
              let cols: &DivRemCoreCols<_, NUM_LIMBS, LIMB_BITS> = local_core.borrow();
              let flags = [
                  cols.opcode_div_flag,
                  cols.opcode_divu_flag,
                  cols.opcode_rem_flag,
                  cols.opcode_remu_flag,
              ];
      
              let is_valid = flags.iter().fold(AB::Expr::ZERO, |acc, &flag| {
                  builder.assert_bool(flag);
                  acc + flag.into()
              });
              builder.assert_bool(is_valid.clone());
      
              let b = &cols.b;
              let c = &cols.c;
              let q = &cols.q;
              let r = &cols.r;
      
              // Constrain that b = (c * q + r) % 2^{NUM_LIMBS * LIMB_BITS} and range checkeach element in
              // q.
              let b_ext = cols.b_sign * AB::F::from_canonical_u32((1 << LIMB_BITS) - 1);
              let c_ext = cols.c_sign * AB::F::from_canonical_u32((1 << LIMB_BITS) - 1);
              let carry_divide = AB::F::from_canonical_u32(1 << LIMB_BITS).inverse();
              let mut carry: [AB::Expr; NUM_LIMBS] = array::from_fn(|_| AB::Expr::ZERO);
      
              for i in 0..NUM_LIMBS {
                  let expected_limb = if i == 0 {
                      AB::Expr::ZERO
                  } else {
                      carry[i - 1].clone()
                  } + (0..=i).fold(r[i].into(), |ac, k| ac + (c[k] * q[i - k]));
                  carry[i] = (expected_limb - b[i]) * carry_divide;
              }
      
              for (q, carry) in q.iter().zip(carry.iter()) {
                  self.range_tuple_bus
                      .send(vec![( *q).into(), carry.clone()])
                      .eval(builder, is_valid.clone());
              }
      
              // Constrain that the upper limbs of b = c * q + r are all equal to b_ext and
              // range check each element in r.
              let q_ext = cols.q_sign * AB::F::from_canonical_u32((1 << LIMB_BITS) - 1);
              let mut carry_ext: [AB::Expr; NUM_LIMBS] = array::from_fn(|_| AB::Expr::ZERO);
      
              for j in 0..NUM_LIMBS {
                  let expected_limb = if j == 0 {
                      carry[NUM_LIMBS - 1].clone()
                  } else {
                      carry_ext[j - 1].clone()
                  } + ((j + 1)..NUM_LIMBS)
                      .fold(AB::Expr::ZERO, |acc, k| acc + (c[k] * q[NUM_LIMBS + j - k]))
                      + (0..(j + 1)).fold(AB::Expr::ZERO, |acc, k| {
                          acc + (c[k] * q_ext.clone()) + (q[k] * c_ext.clone())
                      })
                      + (AB::Expr::ONE - cols.r_zero) * b_ext.clone();
                  // Technically there are ways to constrain that c * q is in range without
                  // using a range checker, but because we already have to range check each
                  // limb of r it requires no additional columns to also range check each
                  // carry_ext.
                  //
                  // Note that the sign of r is not equal to the sign of b only when r = 0.
                  // Flag column r_zero tracks this special case.
                  carry_ext[j] = (expected_limb - b_ext.clone()) * carry_divide;
              }
      
              for (r, carry) in r.iter().zip(carry_ext.iter()) {
                  self.range_tuple_bus
                      .send(vec![( *r).into(), carry.clone()])
                      .eval(builder, is_valid.clone());
              }
      
              // Handle special cases. We can have either at most one of a zero divisor,
              // or a 0 remainder. Signed overflow falls under the latter.
              let special_case = cols.zero_divisor + cols.r_zero;
              builder.assert_bool(special_case.clone());
      
              // Constrain that zero_divisor = 1 if and only if c = 0.
              builder.assert_bool(cols.zero_divisor);
              let mut when_zero_divisor = builder.when(cols.zero_divisor);
              for i in 0..NUM_LIMBS {
                  when_zero_divisor.assert_zero(c[i]);
                  when_zero_divisor.assert_eq(q[i], AB::F::from_canonical_u32((1 << LIMB_BITS) - 1));
              }
              // c_sum is guaranteed to be non-zero if c is non-zero since we assume
              // each limb of c to be within [0, 2^LIMB_BITS) already.
              // To constrain that if c = 0 then zero_divisor = 1, we check that if zero_divisor = 0
              // and is_valid = 1 then c_sum is non-zero using c_sum_inv.
              let c_sum = c.iter().fold(AB::Expr::ZERO, |acc, c| acc + *c);
              let valid_and_not_zero_divisor = is_valid.clone() - cols.zero_divisor;
              builder.assert_bool(valid_and_not_zero_divisor.clone());
              builder
                  .when(valid_and_not_zero_divisor)
                  .assert_one(c_sum * cols.c_sum_inv);
      
              // Constrain that r_zero = 1 if and only if r = 0 and zero_divisor = 0.
              builder.assert_bool(cols.r_zero);
              r.iter()
                  .for_each(|r_i| builder.when(cols.r_zero).assert_zero( *r_i));
              // To constrain that if r = 0 and zero_divisor = 0 then r_zero = 1, we check that
              // if special_case = 0 and is_valid = 1 then r_sum is non-zero (using r_sum_inv).
              let r_sum = r.iter().fold(AB::Expr::ZERO, |acc, r| acc + *r);
              let valid_and_not_special_case = is_valid.clone() - special_case.clone();
              builder.assert_bool(valid_and_not_special_case.clone());
              builder
                  .when(valid_and_not_special_case)
                  .assert_one(r_sum * cols.r_sum_inv);
      
              // Constrain the correctness of b_sign and c_sign. Note that we do not need to
              // check that the sign of r is b_sign since we cannot have r_prime < c (or c < r_prime
              // if c is negative) if this is not the case.
              let signed = cols.opcode_div_flag + cols.opcode_rem_flag;
      
              builder.assert_bool(cols.b_sign);
              builder.assert_bool(cols.c_sign);
              builder
                  .when(not::<AB::Expr>(signed.clone()))
                  .assert_zero(cols.b_sign);
              builder
                  .when(not::<AB::Expr>(signed.clone()))
                  .assert_zero(cols.c_sign);
              builder.assert_eq(
                  cols.b_sign + cols.c_sign - AB::Expr::from_canonical_u32(2) * cols.b_sign * cols.c_sign,
                  cols.sign_xor,
              );
      
              // To constrain the correctness of q_sign we make sure if q is non-zero then
              // q_sign = b_sign ^ c_sign, and if q is zero then q_sign = 0.
              // Note:
              // - q_sum is guaranteed to be non-zero if q is non-zero since we've range checked each
              // limb of q to be within [0, 2^LIMB_BITS) already.
              // - If q is zero and q_ext satisfies the constraint
              // sign_extend(b) = sign_extend(c) * sign_extend(q) + sign_extend(r), then q_sign must be 0.
              // Thus, we do not need additional constraints in case q is zero.
              let nonzero_q = q.iter().fold(AB::Expr::ZERO, |acc, q| acc + *q);
              builder.assert_bool(cols.q_sign);
              builder
                  .when(nonzero_q)
                  .when(not(cols.zero_divisor))
                  .assert_eq(cols.q_sign, cols.sign_xor);
              builder
                  .when_ne(cols.q_sign, cols.sign_xor)
                  .when(not(cols.zero_divisor))
                  .assert_zero(cols.q_sign);
      
              // Check that the signs of b and c are correct.
              let sign_mask = AB::F::from_canonical_u32(1 << (LIMB_BITS - 1));
              self.bitwise_lookup_bus
                  .send_range(
                      AB::Expr::from_canonical_u32(2) * (b[NUM_LIMBS - 1] - cols.b_sign * sign_mask),
                      AB::Expr::from_canonical_u32(2) * (c[NUM_LIMBS - 1] - cols.c_sign * sign_mask),
                  )
                  .eval(builder, signed.clone());
      
              // Constrain that 0 <= |r| < |c| by checking that r_prime < c (unsigned LT). By
              // definition, the sign of r must be b_sign. If c is negative then we want
              // to constrain c < r_prime. If c is positive, then we want to constrain r_prime < c.
              //
              // Because we already constrain that r and q are correct for special cases,
              // we skip the range check when special_case = 1.
              let r_p = &cols.r_prime;
              let mut carry_lt: [AB::Expr; NUM_LIMBS] = array::from_fn(|_| AB::Expr::ZERO);
      
              for i in 0..NUM_LIMBS {
                  // When the signs of r (i.e. b) and c are the same, r_prime = r.
                  builder.when(not(cols.sign_xor)).assert_eq(r[i], r_p[i]);
      
                  // When the signs of r and c are different, r_prime = -r. To constrain this, we
                  // first ensure each r[i] + r_prime[i] + carry[i - 1] is in {0, 2^LIMB_BITS}, and
                  // that when the sum is 0 then r_prime[i] = 0 as well. Passing both constraints
                  // implies that 0 <= r_prime[i] <= 2^LIMB_BITS, and in order to ensure r_prime[i] !=
                  // 2^LIMB_BITS we check that r_prime[i] - 2^LIMB_BITS has an inverse in F.
                  let last_carry = if i > 0 {
                      carry_lt[i - 1].clone()
                  } else {
                      AB::Expr::ZERO
                  };
                  carry_lt[i] = (last_carry.clone() + r[i] + r_p[i]) * carry_divide;
                  builder.when(cols.sign_xor).assert_zero(
                      (carry_lt[i].clone() - last_carry) * (carry_lt[i].clone() - AB::Expr::ONE),
                  );
                  builder
                      .when(cols.sign_xor)
                      .assert_one((r_p[i] - AB::F::from_canonical_u32(1 << LIMB_BITS)) * cols.r_inv[i]);
                  builder
                      .when(cols.sign_xor)
                      .when(not::<AB::Expr>(carry_lt[i].clone()))
                      .assert_zero(r_p[i]);
              }
      
              let marker = &cols.lt_marker;
              let mut prefix_sum = special_case.clone();
      
              for i in (0..NUM_LIMBS).rev() {
                  let diff = r_p[i] * (AB::Expr::from_canonical_u8(2) * cols.c_sign - AB::Expr::ONE)
                      + c[i] * (AB::Expr::ONE - AB::Expr::from_canonical_u8(2) * cols.c_sign);
                  prefix_sum += marker[i].into();
                  builder.assert_bool(marker[i]);
                  builder.assert_zero(not::<AB::Expr>(prefix_sum.clone()) * diff.clone());
                  builder.when(marker[i]).assert_eq(cols.lt_diff, diff);
              }
              // - If r_prime != c, then prefix_sum = 1 so marker[i] must be 1 iff i is the first index
              //   where diff != 0. Constrains that diff == lt_diff where lt_diff is non-zero.
              // - If r_prime == c, then prefix_sum = 0. Here, prefix_sum cannot be 1 because all diff are
              //   zero, making diff == lt_diff fails.
      
              builder.when(is_valid.clone()).assert_one(prefix_sum);
              // Range check to ensure lt_diff is non-zero.
              self.bitwise_lookup_bus
                  .send_range(cols.lt_diff - AB::Expr::ONE, AB::F::ZERO)
                  .eval(builder, is_valid.clone() - special_case);
      
              // Generate expected opcode and output a to pass to the adapter.
              let expected_opcode = flags.iter().zip(DivRemOpcode::iter()).fold(
                  AB::Expr::ZERO,
                  |acc, (flag, local_opcode)| {
                      acc + ( *flag).into() * AB::Expr::from_canonical_u8(local_opcode as u8)
                  },
              ) + AB::Expr::from_canonical_usize(self.offset);
      
              let is_div = cols.opcode_div_flag + cols.opcode_divu_flag;
              let a = array::from_fn(|i| select(is_div.clone(), q[i], r[i]));
      
              AdapterAirContext {
                  to_pc: None,
                  reads: [cols.b.map(Into::into), cols.c.map(Into::into)].into(),
                  writes: [a.map(Into::into)].into(),
                  instruction: MinimalInstruction {
                      is_valid,
                      opcode: expected_opcode,
                  }
                  .into(),
              }
          }
      *)
      Definition eval
          (NUM_LIMBS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self; builder; local_core; _from_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local_core :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local_core
              |) in
            let _from_pc :=
              M.alloc (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                _from_pc
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_core |) |) |) ]
                    |)
                  |)
                |) in
              let~ flags :
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                Value.Array
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_div_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_divu_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_rem_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_remu_flag"
                      |)
                    |)
                  ] in
              let~ is_valid : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "fold",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::FieldAlgebra::ZERO",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let acc :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.read (| γ |) in
                                              let flag :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var",
                                                  γ
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      AB,
                                                      [],
                                                      [],
                                                      "assert_bool",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (| flag |)
                                                    ]
                                                  |) in
                                                M.alloc (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| acc |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| flag |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ b :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "b"
                  |)
                |) in
              let~ c :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "c"
                  |)
                |) in
              let~ q :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "q"
                  |)
                |) in
              let~ r :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r"
                  |)
                |) in
              let~ b_ext : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "b_sign"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                            |);
                            Value.Integer IntegerKind.U32 1
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ c_ext : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "c_sign"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                            |);
                            Value.Integer IntegerKind.U32 1
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ carry_divide : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::Field",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "inverse",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                            |)
                          ]
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ carry :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ expected_limb :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.match_operator (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          0
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_array_field (|
                                                                      carry,
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::range::RangeInclusive")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "fold",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.function
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "usize"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr")
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeInclusive")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              "new",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              Value.Integer IntegerKind.Usize 0;
                                                              M.read (| i |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "into",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| r |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0; α1 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      M.alloc (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let ac :=
                                                                              M.copy (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                γ
                                                                              |) in
                                                                            M.match_operator (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr",
                                                                              M.alloc (|
                                                                                Ty.path "usize",
                                                                                α1
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let k :=
                                                                                      M.copy (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        γ
                                                                                      |) in
                                                                                    M.call_closure (|
                                                                                      Ty.associated_in_trait
                                                                                        "p3_air::air::AirBuilder"
                                                                                        []
                                                                                        []
                                                                                        AB
                                                                                        "Expr",
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.associated_in_trait
                                                                                          "p3_air::air::AirBuilder"
                                                                                          []
                                                                                          []
                                                                                          AB
                                                                                          "Expr",
                                                                                        [],
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr"
                                                                                        ],
                                                                                        "add",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          ac
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Var",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Var"
                                                                                            ],
                                                                                            "mul",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  k
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    q
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      carry,
                                                      M.read (| i |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "F"
                                                        ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ],
                                                            "sub",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| expected_limb |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| b |) |),
                                                                M.read (| i |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| carry_divide |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  [],
                                  [],
                                  "zip",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| q |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ]),
                                        [ M.borrow (| Pointer.Kind.Ref, carry |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let q :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ1_0
                                                |) in
                                              let carry :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ],
                                                  γ1_1
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "send",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                                                              "range_tuple_bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Var",
                                                                                  [],
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr"
                                                                                  ],
                                                                                  "into",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (| q |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  [],
                                                                                  [],
                                                                                  "clone",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        carry
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, is_valid |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ q_ext : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Mul",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                    "mul",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "q_sign"
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                            |);
                            Value.Integer IntegerKind.U32 1
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ carry_ext :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let j := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ expected_limb :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Add",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Add",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "add",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.match_operator (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            Ty.path "bool",
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              BinOp.eq,
                                                                              [
                                                                                M.read (| j |);
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  0
                                                                              ]
                                                                            |)
                                                                          |)) in
                                                                      let _ :=
                                                                        is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.call_closure (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        M.get_trait_method (|
                                                                          "core::clone::Clone",
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr",
                                                                          [],
                                                                          [],
                                                                          "clone",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_array_field (|
                                                                              carry,
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.sub,
                                                                                [
                                                                                  NUM_LIMBS;
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.call_closure (|
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr",
                                                                        M.get_trait_method (|
                                                                          "core::clone::Clone",
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr",
                                                                          [],
                                                                          [],
                                                                          "clone",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_array_field (|
                                                                              carry_ext,
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.sub,
                                                                                [
                                                                                  M.read (| j |);
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "fold",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr";
                                                                    Ty.function
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr";
                                                                        Ty.path "usize"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr")
                                                                  ]
                                                                |),
                                                                [
                                                                  Value.mkStructRecord
                                                                    "core::ops::range::Range"
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                    [
                                                                      ("start",
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            M.read (| j |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                        |));
                                                                      ("end_", NUM_LIMBS)
                                                                    ];
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_field::field::FieldAlgebra::ZERO",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr"
                                                                    |)
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0; α1 ] =>
                                                                          ltac:(M.monadic
                                                                            (M.match_operator (|
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr",
                                                                              M.alloc (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                α0
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let acc :=
                                                                                      M.copy (|
                                                                                        Ty.associated_in_trait
                                                                                          "p3_air::air::AirBuilder"
                                                                                          []
                                                                                          []
                                                                                          AB
                                                                                          "Expr",
                                                                                        γ
                                                                                      |) in
                                                                                    M.match_operator (|
                                                                                      Ty.associated_in_trait
                                                                                        "p3_air::air::AirBuilder"
                                                                                        []
                                                                                        []
                                                                                        AB
                                                                                        "Expr",
                                                                                      M.alloc (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        α1
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  k :=
                                                                                              M.copy (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                γ
                                                                                              |) in
                                                                                            M.call_closure (|
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr",
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Add",
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_air::air::AirBuilder"
                                                                                                  []
                                                                                                  []
                                                                                                  AB
                                                                                                  "Expr",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Expr"
                                                                                                ],
                                                                                                "add",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  acc
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Expr",
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_air::air::AirBuilder"
                                                                                                      []
                                                                                                      []
                                                                                                      AB
                                                                                                      "Var",
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_air::air::AirBuilder"
                                                                                                        []
                                                                                                        []
                                                                                                        AB
                                                                                                        "Var"
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_array_field (|
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            c
                                                                                                          |)
                                                                                                        |),
                                                                                                        M.read (|
                                                                                                          k
                                                                                                        |)
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_array_field (|
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            q
                                                                                                          |)
                                                                                                        |),
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "usize",
                                                                                                          BinOp.Wrap.sub,
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "usize",
                                                                                                              BinOp.Wrap.add,
                                                                                                              [
                                                                                                                NUM_LIMBS;
                                                                                                                M.read (|
                                                                                                                  j
                                                                                                                |)
                                                                                                              ]
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              k
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                        | _ =>
                                                                          M.impossible
                                                                            "wrong number of arguments"
                                                                        end))
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "fold",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.function
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr";
                                                                    Ty.path "usize"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr")
                                                              ]
                                                            |),
                                                            [
                                                              Value.mkStructRecord
                                                                "core::ops::range::Range"
                                                                []
                                                                [ Ty.path "usize" ]
                                                                [
                                                                  ("start",
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0);
                                                                  ("end_",
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (| j |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                    |))
                                                                ];
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0; α1 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr",
                                                                          M.alloc (|
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Expr",
                                                                            α0
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let acc :=
                                                                                  M.copy (|
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr",
                                                                                    γ
                                                                                  |) in
                                                                                M.match_operator (|
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  M.alloc (|
                                                                                    Ty.path "usize",
                                                                                    α1
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let k :=
                                                                                          M.copy (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            γ
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          Ty.associated_in_trait
                                                                                            "p3_air::air::AirBuilder"
                                                                                            []
                                                                                            []
                                                                                            AB
                                                                                            "Expr",
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Add",
                                                                                            Ty.associated_in_trait
                                                                                              "p3_air::air::AirBuilder"
                                                                                              []
                                                                                              []
                                                                                              AB
                                                                                              "Expr",
                                                                                            [],
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr"
                                                                                            ],
                                                                                            "add",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr",
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Add",
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_air::air::AirBuilder"
                                                                                                  []
                                                                                                  []
                                                                                                  AB
                                                                                                  "Expr",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Expr"
                                                                                                ],
                                                                                                "add",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  acc
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Expr",
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_air::air::AirBuilder"
                                                                                                      []
                                                                                                      []
                                                                                                      AB
                                                                                                      "Var",
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_air::air::AirBuilder"
                                                                                                        []
                                                                                                        []
                                                                                                        AB
                                                                                                        "Expr"
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_array_field (|
                                                                                                        M.deref (|
                                                                                                          M.read (|
                                                                                                            c
                                                                                                          |)
                                                                                                        |),
                                                                                                        M.read (|
                                                                                                          k
                                                                                                        |)
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_air::air::AirBuilder"
                                                                                                        []
                                                                                                        []
                                                                                                        AB
                                                                                                        "Expr",
                                                                                                      M.get_trait_method (|
                                                                                                        "core::clone::Clone",
                                                                                                        Ty.associated_in_trait
                                                                                                          "p3_air::air::AirBuilder"
                                                                                                          []
                                                                                                          []
                                                                                                          AB
                                                                                                          "Expr",
                                                                                                        [],
                                                                                                        [],
                                                                                                        "clone",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          q_ext
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              Ty.associated_in_trait
                                                                                                "p3_air::air::AirBuilder"
                                                                                                []
                                                                                                []
                                                                                                AB
                                                                                                "Expr",
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::arith::Mul",
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_air::air::AirBuilder"
                                                                                                  []
                                                                                                  []
                                                                                                  AB
                                                                                                  "Var",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Expr"
                                                                                                ],
                                                                                                "mul",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.SubPointer.get_array_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        q
                                                                                                      |)
                                                                                                    |),
                                                                                                    M.read (|
                                                                                                      k
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_air::air::AirBuilder"
                                                                                                    []
                                                                                                    []
                                                                                                    AB
                                                                                                    "Expr",
                                                                                                  M.get_trait_method (|
                                                                                                    "core::clone::Clone",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_air::air::AirBuilder"
                                                                                                      []
                                                                                                      []
                                                                                                      AB
                                                                                                      "Expr",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "clone",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      c_ext
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ONE",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| cols |) |),
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                  "r_zero"
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, b_ext |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      carry_ext,
                                                      M.read (| j |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "F"
                                                        ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Sub",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            ],
                                                            "sub",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (| expected_limb |);
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  b_ext
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| carry_divide |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  [],
                                  [],
                                  "zip",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| r |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ]
                                            ]),
                                        [ M.borrow (| Pointer.Kind.Ref, carry_ext |) ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let γ1_0 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                              let γ1_1 :=
                                                M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                              let r :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ1_0
                                                |) in
                                              let carry :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ],
                                                  γ1_1
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "send",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                                                              "range_tuple_bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Expr"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::convert::Into",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Var",
                                                                                  [],
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_air::air::AirBuilder"
                                                                                      []
                                                                                      []
                                                                                      AB
                                                                                      "Expr"
                                                                                  ],
                                                                                  "into",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (| r |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Expr",
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.associated_in_trait
                                                                                    "p3_air::air::AirBuilder"
                                                                                    []
                                                                                    []
                                                                                    AB
                                                                                    "Expr",
                                                                                  [],
                                                                                  [],
                                                                                  "clone",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        carry
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [],
                                                          "clone",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, is_valid |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ special_case :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "zero_divisor"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "r_zero"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, special_case |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "zero_divisor"
                      |)
                    |)
                  ]
                |) in
              let~ when_zero_divisor :
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "when",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "zero_divisor"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [ AB ],
                                                      [],
                                                      [],
                                                      "assert_zero",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        when_zero_divisor
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| c |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [ AB ],
                                                      [],
                                                      [],
                                                      "assert_eq",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var";
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "F"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        when_zero_divisor
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| q |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "F",
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "F",
                                                          [],
                                                          [],
                                                          "from_canonical_u32",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.sub,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.shl,
                                                                [
                                                                  Value.Integer IntegerKind.U32 1;
                                                                  LIMB_BITS
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.U32 1
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ c_sum : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "fold",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| c |) |) |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::FieldAlgebra::ZERO",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let acc :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let c :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                M.get_trait_method (|
                                                  "core::ops::arith::Add",
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| acc |);
                                                  M.read (| M.deref (| M.read (| c |) |) |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ valid_and_not_zero_divisor :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "zero_divisor"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, valid_and_not_zero_divisor |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_one",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.read (| valid_and_not_zero_divisor |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (| c_sum |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                            "c_sum_inv"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "r_zero"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "for_each",
                    [],
                    [
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| r |) |) |) ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let r_i :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_trait_method (|
                                          "p3_air::air::AirBuilder",
                                          Ty.apply
                                            (Ty.path "p3_air::air::FilteredAirBuilder")
                                            []
                                            [ AB ],
                                          [],
                                          [],
                                          "assert_zero",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "p3_air::air::FilteredAirBuilder")
                                                []
                                                [ AB ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "p3_air::air::FilteredAirBuilder")
                                                  []
                                                  [ AB ],
                                                M.get_trait_method (|
                                                  "p3_air::air::AirBuilder",
                                                  AB,
                                                  [],
                                                  [],
                                                  "when",
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| builder |) |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| cols |) |),
                                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                      "r_zero"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.read (| M.deref (| M.read (| r_i |) |) |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ r_sum : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "fold",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| r |) |) |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::FieldAlgebra::ZERO",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let acc :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let r :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                M.get_trait_method (|
                                                  "core::ops::arith::Add",
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| acc |);
                                                  M.read (| M.deref (| M.read (| r |) |) |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ valid_and_not_special_case :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Sub",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "sub",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, special_case |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, valid_and_not_special_case |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_one",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.read (| valid_and_not_special_case |)
                          ]
                        |)
                      |)
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (| r_sum |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                            "r_sum_inv"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ signed : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_div_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_rem_flag"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "b_sign"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "c_sign"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, signed |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "b_sign"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, signed |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "c_sign"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_eq",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                    ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            "add",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                "b_sign"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                "c_sign"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "mul",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "p3_field::field::FieldAlgebra",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "from_canonical_u32",
                                    [],
                                    []
                                  |),
                                  [ Value.Integer IntegerKind.U32 2 ]
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| cols |) |),
                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                    "b_sign"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                "c_sign"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "sign_xor"
                      |)
                    |)
                  ]
                |) in
              let~ nonzero_q : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "fold",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| q |) |) |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::FieldAlgebra::ZERO",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let acc :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let q :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                M.get_trait_method (|
                                                  "core::ops::arith::Add",
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (| acc |);
                                                  M.read (| M.deref (| M.read (| q |) |) |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "q_sign"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply
                      (Ty.path "p3_air::air::FilteredAirBuilder")
                      []
                      [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                    [],
                    [],
                    "assert_eq",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "p3_air::air::FilteredAirBuilder")
                          []
                          [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_air::air::FilteredAirBuilder")
                            []
                            [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                  M.get_trait_method (|
                                    "p3_air::air::AirBuilder",
                                    AB,
                                    [],
                                    [],
                                    "when",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| builder |) |)
                                    |);
                                    M.read (| nonzero_q |)
                                  ]
                                |)
                              |)
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| cols |) |),
                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                    "zero_divisor"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "q_sign"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "sign_xor"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply
                      (Ty.path "p3_air::air::FilteredAirBuilder")
                      []
                      [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "p3_air::air::FilteredAirBuilder")
                          []
                          [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "p3_air::air::FilteredAirBuilder")
                            []
                            [ Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                  M.get_trait_method (|
                                    "p3_air::air::AirBuilder",
                                    AB,
                                    [],
                                    [],
                                    "when_ne",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| builder |) |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                        "q_sign"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                        "sign_xor"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| cols |) |),
                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                    "zero_divisor"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "q_sign"
                      |)
                    |)
                  ]
                |) in
              let~ sign_mask : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                  M.get_trait_method (|
                    "p3_field::field::FieldAlgebra",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                    [],
                    [],
                    "from_canonical_u32",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.shl,
                      [
                        Value.Integer IntegerKind.U32 1;
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                        "send_range",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                            "bitwise_lookup_bus"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [ Value.Integer IntegerKind.U32 2 ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| b |) |),
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                        "b_sign"
                                      |)
                                    |);
                                    M.read (| sign_mask |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [ Value.Integer IntegerKind.U32 2 ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| c |) |),
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                        "c_sign"
                                      |)
                                    |);
                                    M.read (| sign_mask |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, signed |) ]
                    |)
                  ]
                |) in
              let~ r_p :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r_prime"
                  |)
                |) in
              let~ carry_lt :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [ AB ],
                                                      [],
                                                      [],
                                                      "assert_eq",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var";
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [ AB ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_air::air::FilteredAirBuilder")
                                                              []
                                                              [ AB ],
                                                            M.get_trait_method (|
                                                              "p3_air::air::AirBuilder",
                                                              AB,
                                                              [],
                                                              [],
                                                              "when",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| builder |) |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_function (|
                                                                  "openvm_circuit_primitives::utils::not",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr";
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| cols |)
                                                                      |),
                                                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                      "sign_xor"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| r |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| r_p |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                let~ last_carry :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.match_operator (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.gt,
                                                                  [
                                                                    M.read (| i |);
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      0
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_array_field (|
                                                                  carry_lt,
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.sub,
                                                                    [
                                                                      M.read (| i |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            |)
                                                          |)))
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.write (|
                                                    M.SubPointer.get_array_field (|
                                                      carry_lt,
                                                      M.read (| i |)
                                                    |),
                                                    M.call_closure (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "F"
                                                        ],
                                                        "mul",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Add",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ],
                                                            "add",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Add",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                [],
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Var"
                                                                ],
                                                                "add",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      last_carry
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (| M.read (| r |) |),
                                                                    M.read (| i |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                M.deref (| M.read (| r_p |) |),
                                                                M.read (| i |)
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| carry_divide |)
                                                      ]
                                                    |)
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [ AB ],
                                                      [],
                                                      [],
                                                      "assert_zero",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [ AB ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_air::air::FilteredAirBuilder")
                                                              []
                                                              [ AB ],
                                                            M.get_trait_method (|
                                                              "p3_air::air::AirBuilder",
                                                              AB,
                                                              [],
                                                              [],
                                                              "when",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| builder |) |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| cols |) |),
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                  "sign_xor"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_array_field (|
                                                                      carry_lt,
                                                                      M.read (| i |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (| last_carry |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_array_field (|
                                                                      carry_lt,
                                                                      M.read (| i |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ONE",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [ AB ],
                                                      [],
                                                      [],
                                                      "assert_one",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [ AB ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_air::air::FilteredAirBuilder")
                                                              []
                                                              [ AB ],
                                                            M.get_trait_method (|
                                                              "p3_air::air::AirBuilder",
                                                              AB,
                                                              [],
                                                              [],
                                                              "when",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| builder |) |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| cols |) |),
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                  "sign_xor"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "F"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| r_p |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "F",
                                                                M.get_trait_method (|
                                                                  "p3_field::field::FieldAlgebra",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "F",
                                                                  [],
                                                                  [],
                                                                  "from_canonical_u32",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "u32",
                                                                    BinOp.Wrap.shl,
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.U32
                                                                        1;
                                                                      LIMB_BITS
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| cols |) |),
                                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                "r_inv"
                                                              |),
                                                              M.read (| i |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [ AB ]
                                                        ],
                                                      [],
                                                      [],
                                                      "assert_zero",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_air::air::FilteredAirBuilder")
                                                                []
                                                                [ AB ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_air::air::FilteredAirBuilder")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_air::air::FilteredAirBuilder")
                                                                  []
                                                                  [ AB ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "p3_air::air::AirBuilder",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "p3_air::air::FilteredAirBuilder")
                                                                []
                                                                [ AB ],
                                                              [],
                                                              [],
                                                              "when",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "p3_air::air::FilteredAirBuilder")
                                                                    []
                                                                    [ AB ],
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "p3_air::air::FilteredAirBuilder")
                                                                      []
                                                                      [ AB ],
                                                                    M.get_trait_method (|
                                                                      "p3_air::air::AirBuilder",
                                                                      AB,
                                                                      [],
                                                                      [],
                                                                      "when",
                                                                      [],
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.deref (|
                                                                          M.read (| builder |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| cols |)
                                                                          |),
                                                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                          "sign_xor"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_function (|
                                                                  "openvm_circuit_primitives::utils::not",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr";
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_array_field (|
                                                                          carry_lt,
                                                                          M.read (| i |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| r_p |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ marker :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "lt_marker"
                  |)
                |) in
              let~ prefix_sum : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, special_case |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ] ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  [],
                                  [],
                                  "rev",
                                  [],
                                  []
                                |),
                                [
                                  Value.mkStructRecord
                                    "core::ops::range::Range"
                                    []
                                    [ Ty.path "usize" ]
                                    [
                                      ("start", Value.Integer IntegerKind.Usize 0);
                                      ("end_", NUM_LIMBS)
                                    ]
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ diff :
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr" :=
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| r_p |) |),
                                                              M.read (| i |)
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ],
                                                                  "mul",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "p3_field::field::FieldAlgebra",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "from_canonical_u8",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [ Value.Integer IntegerKind.U8 2
                                                                    ]
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| cols |)
                                                                      |),
                                                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                      "c_sign"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ONE",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| c |) |),
                                                              M.read (| i |)
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ONE",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ],
                                                                  "mul",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "p3_field::field::FieldAlgebra",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "from_canonical_u8",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [ Value.Integer IntegerKind.U8 2
                                                                    ]
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| cols |)
                                                                      |),
                                                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                                      "c_sign"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "core::ops::arith::AddAssign",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add_assign",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        prefix_sum
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| marker |) |),
                                                              M.read (| i |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      AB,
                                                      [],
                                                      [],
                                                      "assert_bool",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| marker |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      AB,
                                                      [],
                                                      [],
                                                      "assert_zero",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_function (|
                                                              "openvm_circuit_primitives::utils::not",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    prefix_sum
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.borrow (| Pointer.Kind.Ref, diff |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      Ty.apply
                                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                                        []
                                                        [ AB ],
                                                      [],
                                                      [],
                                                      "assert_eq",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var";
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_air::air::FilteredAirBuilder")
                                                            []
                                                            [ AB ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_air::air::FilteredAirBuilder")
                                                              []
                                                              [ AB ],
                                                            M.get_trait_method (|
                                                              "p3_air::air::AirBuilder",
                                                              AB,
                                                              [],
                                                              [],
                                                              "when",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (| M.read (| builder |) |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| marker |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| cols |) |),
                                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                                          "lt_diff"
                                                        |)
                                                      |);
                                                      M.read (| diff |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_one",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (| prefix_sum |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                        "send_range",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                            "bitwise_lookup_bus"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Sub",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "sub",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                "lt_diff"
                              |)
                            |);
                            M.read (|
                              get_constant (|
                                "p3_field::field::FieldAlgebra::ONE",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::FieldAlgebra::ZERO",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "sub",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                        |);
                        M.read (| special_case |)
                      ]
                    |)
                  ]
                |) in
              let~ expected_opcode :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                            Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter"
                          ],
                        [],
                        [],
                        "fold",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.function
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                ]
                            ]
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [],
                            "zip",
                            [],
                            [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter" ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ]),
                                  [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcodeIter",
                              M.get_trait_method (|
                                "strum::IntoEnumIterator",
                                Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                [],
                                [],
                                "iter",
                                [],
                                []
                              |),
                              []
                            |)
                          ]
                        |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::FieldAlgebra::ZERO",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.alloc (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let acc :=
                                            M.copy (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              γ
                                            |) in
                                          M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                                ],
                                              α1
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let flag :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ],
                                                      γ0_0
                                                    |) in
                                                  let local_opcode :=
                                                    M.copy (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                      γ0_1
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| acc |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "into",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.deref (| M.read (| flag |) |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "from_canonical_u8",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.cast
                                                                (Ty.path "u8")
                                                                (M.read (| local_opcode |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "from_canonical_usize",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                            "offset"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ is_div : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_div_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                        "opcode_divu_flag"
                      |)
                    |)
                  ]
                |) in
              let~ a :
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "array")
                    [ NUM_LIMBS ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                  M.get_function (|
                    "core::array::from_fn",
                    [ NUM_LIMBS ],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [ Ty.path "usize" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (| Ty.path "usize", α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let i := M.copy (| Ty.path "usize", γ |) in
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_function (|
                                          "openvm_circuit_primitives::utils::select",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr";
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr";
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var";
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.get_trait_method (|
                                              "core::clone::Clone",
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              [],
                                              [],
                                              "clone",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, is_div |) ]
                                          |);
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| q |) |),
                                              M.read (| i |)
                                            |)
                                          |);
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              M.deref (| M.read (| r |) |),
                                              M.read (| i |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                Value.mkStructRecord
                  "openvm_circuit::arch::integration_api::AdapterAirContext"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ]
                  [
                    ("to_pc",
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        []);
                    ("reads",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Reads",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Reads"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                      "b"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                                      "c"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("writes",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Writes",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Writes"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (| a |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("instruction",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "ProcessedInstruction",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "ProcessedInstruction"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "openvm_circuit::arch::integration_api::MinimalInstruction"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            [
                              ("is_valid", M.read (| is_valid |));
                              ("opcode", M.read (| expected_opcode |))
                            ]
                        ]
                      |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn start_offset(&self) -> usize {
              self.offset
          }
      *)
      Definition start_offset
          (NUM_LIMBS LIMB_BITS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS AB I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                "offset"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (AB I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB; I ]
          (Self NUM_LIMBS LIMB_BITS AB I)
          (* Instance *)
          [
            ("eval", InstanceField.Method (eval NUM_LIMBS LIMB_BITS AB I));
            ("start_offset", InstanceField.Method (start_offset NUM_LIMBS LIMB_BITS AB I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_divrem_core_DivRemCoreAir_NUM_LIMBS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "DivRemCoreChip";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [];
        fields :=
          [
            ("air",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
                [ NUM_LIMBS; LIMB_BITS ]
                []);
            ("bitwise_lookup_chip",
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [ LIMB_BITS ]
                []);
            ("range_tuple_chip",
              Ty.apply
                (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                [ Value.Integer IntegerKind.Usize 2 ]
                [])
          ];
      } *)
    
    Module Impl_openvm_rv32im_circuit_divrem_core_DivRemCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          pub fn new(
              bitwise_lookup_chip: SharedBitwiseOperationLookupChip<LIMB_BITS>,
              range_tuple_chip: SharedRangeTupleCheckerChip<2>,
              offset: usize,
          ) -> Self {
              // The RangeTupleChecker is used to range check (a[i], carry[i]) pairs where 0 <= i
              // < 2 * NUM_LIMBS. a[i] must have LIMB_BITS bits and carry[i] is the sum of i + 1
              // bytes (with LIMB_BITS bits). BitwiseOperationLookup is used to sign check bytes.
              debug_assert!(
                  range_tuple_chip.sizes()[0] == 1 << LIMB_BITS,
                  "First element of RangeTupleChecker must have size {}",
                  1 << LIMB_BITS
              );
              debug_assert!(
                  range_tuple_chip.sizes()[1] >= (1 << LIMB_BITS) * 2 * NUM_LIMBS as u32,
                  "Second element of RangeTupleChecker must have size of at least {}",
                  (1 << LIMB_BITS) * 2 * NUM_LIMBS as u32
              );
      
              Self {
                  air: DivRemCoreAir {
                      bitwise_lookup_bus: bitwise_lookup_chip.bus(),
                      range_tuple_bus: *range_tuple_chip.bus(),
                      offset,
                  },
                  bitwise_lookup_chip,
                  range_tuple_chip,
              }
          }
      *)
      Definition new
          (NUM_LIMBS LIMB_BITS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS in
        match ε, τ, α with
        | [], [], [ bitwise_lookup_chip; range_tuple_chip; offset ] =>
          ltac:(M.monadic
            (let bitwise_lookup_chip :=
              M.alloc (|
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                  [ LIMB_BITS ]
                  [],
                bitwise_lookup_chip
              |) in
            let range_tuple_chip :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                  [ Value.Integer IntegerKind.Usize 2 ]
                  [],
                range_tuple_chip
              |) in
            let offset := M.alloc (| Ty.path "usize", offset |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "sizes",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            range_tuple_chip
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.Usize 0
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shl,
                                                  [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "First element of RangeTupleChecker must have size "
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [ Ty.path "i32" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "i32",
                                                                      M.call_closure (|
                                                                        Ty.path "i32",
                                                                        BinOp.Wrap.shl,
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.I32
                                                                            1;
                                                                          LIMB_BITS
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ge,
                                              [
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 2 ]
                                                              [ Ty.path "u32" ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                            [ Value.Integer IntegerKind.Usize 2 ]
                                                            [],
                                                          "sizes",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            range_tuple_chip
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.mul,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.U32 1;
                                                            LIMB_BITS
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.U32 2
                                                      ]
                                                    |);
                                                    M.cast (Ty.path "u32") NUM_LIMBS
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 1;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (|
                                                            "Second element of RangeTupleChecker must have size of at least "
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_display",
                                                              [],
                                                              [ Ty.path "u32" ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path "u32",
                                                                      M.call_closure (|
                                                                        Ty.path "u32",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u32",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "u32",
                                                                                BinOp.Wrap.shl,
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.U32
                                                                                    1;
                                                                                  LIMB_BITS
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                2
                                                                            ]
                                                                          |);
                                                                          M.cast
                                                                            (Ty.path "u32")
                                                                            NUM_LIMBS
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                  [ NUM_LIMBS; LIMB_BITS ]
                  [],
                Value.mkStructRecord
                  "openvm_rv32im_circuit::divrem::core::DivRemCoreChip"
                  [ NUM_LIMBS; LIMB_BITS ]
                  []
                  [
                    ("air",
                      Value.mkStructRecord
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreAir"
                        [ NUM_LIMBS; LIMB_BITS ]
                        []
                        [
                          ("bitwise_lookup_bus",
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                  [ LIMB_BITS ]
                                  [],
                                "bus",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, bitwise_lookup_chip |) ]
                            |));
                          ("range_tuple_bus",
                            M.read (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit_primitives::range_tuple::bus::RangeTupleCheckerBus")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        []
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [],
                                    "bus",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, range_tuple_chip |) ]
                                |)
                              |)
                            |));
                          ("offset", M.read (| offset |))
                        ]);
                    ("bitwise_lookup_chip", M.read (| bitwise_lookup_chip |));
                    ("range_tuple_chip", M.read (| range_tuple_chip |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (NUM_LIMBS LIMB_BITS : Value.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS LIMB_BITS) "new" (new NUM_LIMBS LIMB_BITS).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_divrem_core_DivRemCoreChip_NUM_LIMBS_LIMB_BITS.
    
    (* StructRecord
      {
        name := "DivRemCoreRecord";
        const_params := [ "NUM_LIMBS"; "LIMB_BITS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("c", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("q", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("r", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("zero_divisor", T);
            ("r_zero", T);
            ("b_sign", T);
            ("c_sign", T);
            ("q_sign", T);
            ("sign_xor", T);
            ("c_sum_inv", T);
            ("r_sum_inv", T);
            ("r_prime", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("r_inv", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("lt_diff_val", T);
            ("lt_diff_idx", Ty.path "usize");
            ("opcode", Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode")
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord"
              [ NUM_LIMBS; LIMB_BITS ]
              [ T ]
              [
                ("b",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "b"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("c",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "c"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("q",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "q"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("r",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "r"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("zero_divisor",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "zero_divisor"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("r_zero",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "r_zero"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("b_sign",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "b_sign"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("c_sign",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "c_sign"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("q_sign",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "q_sign"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("sign_xor",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "sign_xor"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("c_sum_inv",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "c_sum_inv"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("r_sum_inv",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "r_sum_inv"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("r_prime",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "r_prime"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("r_inv",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "r_inv"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("lt_diff_val",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "lt_diff_val"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("lt_diff_idx",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "lt_diff_idx"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("opcode",
                  M.call_closure (|
                    Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "opcode"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ T ].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS LIMB_BITS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 17 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 17 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "b" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "q" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "r" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "zero_divisor" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "r_zero" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b_sign" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c_sign" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "q_sign" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "sign_xor" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "c_sum_inv" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "r_sum_inv" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "r_prime" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "r_inv" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "lt_diff_val" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "lt_diff_idx" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "opcode" |) |) |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 17 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 17 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "b"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "c"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "q"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "r"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "zero_divisor"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "r_zero"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "b_sign"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "c_sign"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "q_sign"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "sign_xor"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "c_sum_inv"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "r_sum_inv"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "r_prime"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "r_inv"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "lt_diff_val"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                            "lt_diff_idx"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.path
                                              "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                              ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                "opcode"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "DivRemCoreRecord" |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 17 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS LIMB_BITS T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS LIMB_BITS T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
        Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
            [ NUM_LIMBS; LIMB_BITS ]
            [ T ].
        
        (* Serialize *)
        Definition serialize
            (NUM_LIMBS LIMB_BITS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ T ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "DivRemCoreRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                BinOp.Wrap.add,
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.add,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "usize",
                                                                                    BinOp.Wrap.add,
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "usize",
                                                                                        BinOp.Wrap.add,
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            BinOp.Wrap.add,
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "usize",
                                                                                                BinOp.Wrap.add,
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "usize",
                                                                                                    BinOp.Wrap.add,
                                                                                                    [
                                                                                                      M.cast
                                                                                                        (Ty.path
                                                                                                          "usize")
                                                                                                        (Value.Bool
                                                                                                          false);
                                                                                                      Value.Integer
                                                                                                        IntegerKind.Usize
                                                                                                        1
                                                                                                    ]
                                                                                                  |);
                                                                                                  Value.Integer
                                                                                                    IntegerKind.Usize
                                                                                                    1
                                                                                                ]
                                                                                              |);
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                1
                                                                                            ]
                                                                                          |);
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            1
                                                                                        ]
                                                                                      |);
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        1
                                                                                    ]
                                                                                  |);
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                  |);
                                                                  Value.Integer IntegerKind.Usize 1
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "b" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                            "b"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'1")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "c" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'1")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'1"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                            "c"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'2")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "q" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'2")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'2"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                            "q"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'3")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "r" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'3")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'3"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                            "r"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "zero_divisor" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "zero_divisor"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "r_zero" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "r_zero"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "b_sign" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "b_sign"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "c_sign" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "c_sign"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "q_sign" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "q_sign"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "sign_xor" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "sign_xor"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "c_sum_inv" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "c_sum_inv"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "r_sum_inv" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "r_sum_inv"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'4")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "r_prime" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'4")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'4"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                            "r_prime"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'5")
                                      [ NUM_LIMBS; LIMB_BITS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "r_inv" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'5")
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::divrem::core::_::serialize::__SerializeWith'5"
                                            [ NUM_LIMBS; LIMB_BITS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                            "r_inv"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                      [ NUM_LIMBS; LIMB_BITS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "lt_diff_val" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "lt_diff_val"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "lt_diff_idx" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "lt_diff_idx"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "opcode" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                          "opcode"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS LIMB_BITS T)
            (* Instance *)
            [ ("serialize", InstanceField.Method (serialize NUM_LIMBS LIMB_BITS T)) ].
      End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
      Module Impl_serde_de_Deserialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
        Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
            [ NUM_LIMBS; LIMB_BITS ]
            [ T ].
        
        (* Deserialize *)
        Definition deserialize
            (NUM_LIMBS LIMB_BITS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS LIMB_BITS T in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::_'1::deserialize::__Visitor")
                      [ NUM_LIMBS; LIMB_BITS ]
                      [ T ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "DivRemCoreRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::divrem::core::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::divrem::core::_'1::deserialize::__Visitor"
                    [ NUM_LIMBS; LIMB_BITS ]
                    [ T ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                              [ NUM_LIMBS; LIMB_BITS ]
                              [ T ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS LIMB_BITS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS LIMB_BITS T)
            (* Instance *)
            [ ("deserialize", InstanceField.Method (deserialize NUM_LIMBS LIMB_BITS T)) ].
      End Impl_serde_de_Deserialize_where_serde_ser_Serialize_T_where_serde_de_DeserializeOwned_T_for_openvm_rv32im_circuit_divrem_core_DivRemCoreRecord_NUM_LIMBS_LIMB_BITS_T.
    End underscore.
    
    
    (*
    Enum DivRemCoreSpecialCase
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "None";
            item := StructTuple [];
          };
          {
            name := "ZeroDivisor";
            item := StructTuple [];
          };
          {
            name := "SignedOverflow";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_DivRemCoreSpecialCase_None :
      M.IsDiscriminant "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::None" 0.
    Axiom IsDiscriminant_DivRemCoreSpecialCase_ZeroDivisor :
      M.IsDiscriminant "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::ZeroDivisor" 1.
    Axiom IsDiscriminant_DivRemCoreSpecialCase_SignedOverflow :
      M.IsDiscriminant
        "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::SignedOverflow"
        2.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [], [] |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.match_operator (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::None"
                          |) in
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "None" |) |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::ZeroDivisor"
                          |) in
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ZeroDivisor" |) |) |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::SignedOverflow"
                          |) in
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "SignedOverflow" |) |)
                        |)))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
    
    Module Impl_core_cmp_Eq_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ],
                self
              |) in
            Value.Tuple []))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
    
    Module Impl_core_marker_StructuralPartialEq_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
    
    Module Impl_core_cmp_PartialEq_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ],
                other
              |) in
            M.read (|
              let~ __self_discr : Ty.path "u8" :=
                M.call_closure (|
                  Ty.path "u8",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ __arg1_discr : Ty.path "u8" :=
                M.call_closure (|
                  Ty.path "u8",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |) in
              M.alloc (|
                Ty.path "bool",
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase_for_openvm_rv32im_circuit_divrem_core_DivRemCoreSpecialCase.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_LIMBS_F_F_I_for_openvm_rv32im_circuit_divrem_core_DivRemCoreChip_NUM_LIMBS_LIMB_BITS.
      Definition Self (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*     type Record = DivRemCoreRecord<F, NUM_LIMBS, LIMB_BITS>; *)
      Definition _Record (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
          [ NUM_LIMBS; LIMB_BITS ]
          [ F ].
      
      (*     type Air = DivRemCoreAir<NUM_LIMBS, LIMB_BITS>; *)
      Definition _Air (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreAir")
          [ NUM_LIMBS; LIMB_BITS ]
          [].
      
      (*
          fn execute_instruction(
              &self,
              instruction: &Instruction<F>,
              _from_pc: u32,
              reads: I::Reads,
          ) -> Result<(AdapterRuntimeContext<F, I>, Self::Record)> {
              let Instruction { opcode, .. } = instruction;
              let divrem_opcode = DivRemOpcode::from_usize(opcode.local_opcode_idx(self.air.offset));
      
              let is_div = divrem_opcode == DivRemOpcode::DIV || divrem_opcode == DivRemOpcode::DIVU;
              let is_signed = divrem_opcode == DivRemOpcode::DIV || divrem_opcode == DivRemOpcode::REM;
      
              let data: [[F; NUM_LIMBS]; 2] = reads.into();
              let b = data[0].map(|x| x.as_canonical_u32());
              let c = data[1].map(|y| y.as_canonical_u32());
              let (q, r, b_sign, c_sign, q_sign, case) =
                  run_divrem::<NUM_LIMBS, LIMB_BITS>(is_signed, &b, &c);
      
              let carries = run_mul_carries::<NUM_LIMBS, LIMB_BITS>(is_signed, &c, &q, &r, q_sign);
              for i in 0..NUM_LIMBS {
                  self.range_tuple_chip.add_count(&[q[i], carries[i]]);
                  self.range_tuple_chip
                      .add_count(&[r[i], carries[i + NUM_LIMBS]]);
              }
      
              let sign_xor = b_sign ^ c_sign;
              let r_prime = if sign_xor {
                  negate::<NUM_LIMBS, LIMB_BITS>(&r)
              } else {
                  r
              };
              let r_zero = r.iter().all(|&v| v == 0) && case != DivRemCoreSpecialCase::ZeroDivisor;
      
              if is_signed {
                  let b_sign_mask = if b_sign { 1 << (LIMB_BITS - 1) } else { 0 };
                  let c_sign_mask = if c_sign { 1 << (LIMB_BITS - 1) } else { 0 };
                  self.bitwise_lookup_chip.request_range(
                      (b[NUM_LIMBS - 1] - b_sign_mask) << 1,
                      (c[NUM_LIMBS - 1] - c_sign_mask) << 1,
                  );
              }
      
              let c_sum_f = data[1].iter().fold(F::ZERO, |acc, c| acc + *c);
              let c_sum_inv_f = c_sum_f.try_inverse().unwrap_or(F::ZERO);
      
              let r_sum_f = r
                  .iter()
                  .fold(F::ZERO, |acc, r| acc + F::from_canonical_u32( *r));
              let r_sum_inv_f = r_sum_f.try_inverse().unwrap_or(F::ZERO);
      
              let (lt_diff_idx, lt_diff_val) = if case == DivRemCoreSpecialCase::None && !r_zero {
                  let idx = run_sltu_diff_idx(&c, &r_prime, c_sign);
                  let val = if c_sign {
                      r_prime[idx] - c[idx]
                  } else {
                      c[idx] - r_prime[idx]
                  };
                  self.bitwise_lookup_chip.request_range(val - 1, 0);
                  (idx, val)
              } else {
                  (NUM_LIMBS, 0)
              };
      
              let r_prime_f = r_prime.map(F::from_canonical_u32);
              let output = AdapterRuntimeContext::without_pc([
                  (if is_div { &q } else { &r }).map(F::from_canonical_u32)
              ]);
              let record = DivRemCoreRecord {
                  opcode: divrem_opcode,
                  b: data[0],
                  c: data[1],
                  q: q.map(F::from_canonical_u32),
                  r: r.map(F::from_canonical_u32),
                  zero_divisor: F::from_bool(case == DivRemCoreSpecialCase::ZeroDivisor),
                  r_zero: F::from_bool(r_zero),
                  b_sign: F::from_bool(b_sign),
                  c_sign: F::from_bool(c_sign),
                  q_sign: F::from_bool(q_sign),
                  sign_xor: F::from_bool(sign_xor),
                  c_sum_inv: c_sum_inv_f,
                  r_sum_inv: r_sum_inv_f,
                  r_prime: r_prime_f,
                  r_inv: r_prime_f.map(|r| (r - F::from_canonical_u32(256)).inverse()),
                  lt_diff_val: F::from_canonical_u32(lt_diff_val),
                  lt_diff_idx,
              };
      
              Ok((output, record))
          }
      *)
      Definition execute_instruction
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; instruction; _from_pc; reads ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let _from_pc := M.alloc (| Ty.path "u32", _from_pc |) in
            let reads :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterInterface"
                  []
                  [ F ]
                  I
                  "Reads",
                reads
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                        []
                        [ F; I ];
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              instruction,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "opcode"
                      |) in
                    let opcode :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ],
                        γ1_0
                      |) in
                    M.read (|
                      let~ divrem_opcode :
                          Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" :=
                        M.call_closure (|
                          Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                          M.get_trait_method (|
                            "openvm_instructions::LocalOpcode",
                            Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                            [],
                            [],
                            "from_usize",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "openvm_instructions::VmOpcode",
                                "local_opcode_idx",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| opcode |) |) |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                                      "air"
                                    |),
                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                                    "offset"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      let~ is_div : Ty.path "bool" :=
                        LogicalOp.or (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::cmp::PartialEq",
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                              [],
                              [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                              "eq",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, divrem_opcode |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                  Value.StructTuple
                                    "openvm_rv32im_transpiler::instructions::DivRemOpcode::DIV"
                                    []
                                    []
                                    []
                                |)
                              |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                [],
                                [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                                "eq",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, divrem_opcode |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                    Value.StructTuple
                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode::DIVU"
                                      []
                                      []
                                      []
                                  |)
                                |)
                              ]
                            |)))
                        |) in
                      let~ is_signed : Ty.path "bool" :=
                        LogicalOp.or (|
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::cmp::PartialEq",
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                              [],
                              [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                              "eq",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, divrem_opcode |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                  Value.StructTuple
                                    "openvm_rv32im_transpiler::instructions::DivRemOpcode::DIV"
                                    []
                                    []
                                    []
                                |)
                              |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                [],
                                [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                                "eq",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, divrem_opcode |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                    Value.StructTuple
                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode::REM"
                                      []
                                      []
                                      []
                                  |)
                                |)
                              ]
                            |)))
                        |) in
                      let~ data :
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ F ]
                              I
                              "Reads",
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                            ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| reads |) ]
                        |) in
                      let~ b : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      let~ c : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let y := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                  []
                                  [ F; I ];
                                Ty.apply
                                  (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                  [ NUM_LIMBS; LIMB_BITS ]
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                    []
                                    [ F; I ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                    [ NUM_LIMBS; LIMB_BITS ]
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                Ty.path "bool";
                                Ty.path "bool";
                                Ty.path "bool";
                                Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                                  Ty.path "bool";
                                  Ty.path "bool";
                                  Ty.path "bool";
                                  Ty.path
                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
                                ],
                              M.get_function (|
                                "openvm_rv32im_circuit::divrem::core::run_divrem",
                                [ NUM_LIMBS; LIMB_BITS ],
                                []
                              |),
                              [
                                M.read (| is_signed |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, b |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, c |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let γ0_3 := M.SubPointer.get_tuple_field (| γ, 3 |) in
                                let γ0_4 := M.SubPointer.get_tuple_field (| γ, 4 |) in
                                let γ0_5 := M.SubPointer.get_tuple_field (| γ, 5 |) in
                                let q :=
                                  M.copy (|
                                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                    γ0_0
                                  |) in
                                let r :=
                                  M.copy (|
                                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                    γ0_1
                                  |) in
                                let b_sign := M.copy (| Ty.path "bool", γ0_2 |) in
                                let c_sign := M.copy (| Ty.path "bool", γ0_3 |) in
                                let q_sign := M.copy (| Ty.path "bool", γ0_4 |) in
                                let case :=
                                  M.copy (|
                                    Ty.path
                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                    γ0_5
                                  |) in
                                M.read (|
                                  let~ carries :
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ] :=
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                                      M.get_function (|
                                        "openvm_rv32im_circuit::divrem::core::run_mul_carries",
                                        [ NUM_LIMBS; LIMB_BITS ],
                                        []
                                      |),
                                      [
                                        M.read (| is_signed |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, c |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, q |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, r |) |)
                                        |);
                                        M.read (| q_sign |)
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.read (|
                                      M.use
                                        (M.alloc (|
                                          Ty.tuple [],
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    []
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  [],
                                                  "into_iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  Value.mkStructRecord
                                                    "core::ops::range::Range"
                                                    []
                                                    [ Ty.path "usize" ]
                                                    [
                                                      ("start", Value.Integer IntegerKind.Usize 0);
                                                      ("end_", NUM_LIMBS)
                                                    ]
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      γ
                                                    |) in
                                                  M.read (|
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (let~ _ : Ty.tuple [] :=
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        iter
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let _ :=
                                                                    M.is_struct_tuple (|
                                                                      γ,
                                                                      "core::option::Option::None"
                                                                    |) in
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let i :=
                                                                    M.copy (|
                                                                      Ty.path "usize",
                                                                      γ0_0
                                                                    |) in
                                                                  M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [],
                                                                          "add_count",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                                                                              "range_tuple_chip"
                                                                            |)
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2
                                                                                    ]
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      Value.Array
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              q,
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u32";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    carries
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    i
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.call_closure (|
                                                                        Ty.tuple [],
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit_primitives::range_tuple::SharedRangeTupleCheckerChip")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                            [],
                                                                          "add_count",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (| self |)
                                                                              |),
                                                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                                                                              "range_tuple_chip"
                                                                            |)
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [ Ty.path "u32" ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        2
                                                                                    ]
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Value.Integer
                                                                                            IntegerKind.Usize
                                                                                            2
                                                                                        ]
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ],
                                                                                      Value.Array
                                                                                        [
                                                                                          M.read (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              r,
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.deref (|
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "u32"
                                                                                                  ],
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u32";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    carries
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "usize",
                                                                                                    BinOp.Wrap.add,
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        i
                                                                                                      |);
                                                                                                      NUM_LIMBS
                                                                                                    ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                    |)
                                                  |)))
                                            ]
                                          |)
                                        |))
                                    |) in
                                  let~ sign_xor : Ty.path "bool" :=
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.Wrap.bit_xor,
                                      [ M.read (| b_sign |); M.read (| c_sign |) ]
                                    |) in
                                  let~ r_prime :
                                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                                    M.match_operator (|
                                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use sign_xor in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [ Ty.path "u32" ],
                                              M.get_function (|
                                                "openvm_rv32im_circuit::divrem::core::negate",
                                                [ NUM_LIMBS; LIMB_BITS ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.borrow (| Pointer.Kind.Ref, r |) |)
                                                |)
                                              ]
                                            |)));
                                        fun γ => ltac:(M.monadic (M.read (| r |)))
                                      ]
                                    |) in
                                  let~ r_zero : Ty.path "bool" :=
                                    LogicalOp.and (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "u32" ],
                                          [],
                                          [],
                                          "all",
                                          [],
                                          [
                                            Ty.function
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
                                              (Ty.path "bool")
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "u32" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Ty.path "u32" ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                                  "iter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [ Ty.path "u32" ]
                                                      ],
                                                    M.pointer_coercion
                                                      M.PointerCoercion.Unsize
                                                      (Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ NUM_LIMBS ]
                                                            [ Ty.path "u32" ]
                                                        ])
                                                      (Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.path "u32" ]
                                                        ]),
                                                    [ M.borrow (| Pointer.Kind.Ref, r |) ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.path "bool",
                                                      M.alloc (|
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                        α0
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ := M.read (| γ |) in
                                                            let v :=
                                                              M.copy (| Ty.path "u32", γ |) in
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (| v |);
                                                                Value.Integer IntegerKind.U32 0
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            Ty.path
                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
                                            ],
                                            "ne",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.Ref, case |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                                Value.StructTuple
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::ZeroDivisor"
                                                  []
                                                  []
                                                  []
                                              |)
                                            |)
                                          ]
                                        |)))
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use is_signed in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ b_sign_mask : Ty.path "u32" :=
                                                M.match_operator (|
                                                  Ty.path "u32",
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := M.use b_sign in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.U32 1;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                LIMB_BITS;
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (Value.Integer IntegerKind.U32 0))
                                                  ]
                                                |) in
                                              let~ c_sign_mask : Ty.path "u32" :=
                                                M.match_operator (|
                                                  Ty.path "u32",
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := M.use c_sign in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.shl,
                                                          [
                                                            Value.Integer IntegerKind.U32 1;
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                LIMB_BITS;
                                                                Value.Integer IntegerKind.Usize 1
                                                              ]
                                                            |)
                                                          ]
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (Value.Integer IntegerKind.U32 0))
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                      [ LIMB_BITS ]
                                                      [],
                                                    "request_range",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                                                        "bitwise_lookup_chip"
                                                      |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                b,
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.sub,
                                                                  [
                                                                    NUM_LIMBS;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (| b_sign_mask |)
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.I32 1
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_array_field (|
                                                                c,
                                                                M.call_closure (|
                                                                  Ty.path "usize",
                                                                  BinOp.Wrap.sub,
                                                                  [
                                                                    NUM_LIMBS;
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.read (| c_sign_mask |)
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.I32 1
                                                      ]
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ c_sum_f : F :=
                                    M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                        [],
                                        [],
                                        "fold",
                                        [],
                                        [ F; Ty.function [ F; Ty.apply (Ty.path "&") [] [ F ] ] F ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ F ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ F ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                              M.pointer_coercion
                                                M.PointerCoercion.Unsize
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ]
                                                  ])
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    data,
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            F
                                          |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0; α1 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    F,
                                                    M.alloc (| F, α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let acc := M.copy (| F, γ |) in
                                                          M.match_operator (|
                                                            F,
                                                            M.alloc (|
                                                              Ty.apply (Ty.path "&") [] [ F ],
                                                              α1
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let c :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ F ],
                                                                      γ
                                                                    |) in
                                                                  M.call_closure (|
                                                                    F,
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Add",
                                                                      F,
                                                                      [],
                                                                      [ F ],
                                                                      "add",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| acc |);
                                                                      M.read (|
                                                                        M.deref (| M.read (| c |) |)
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |) in
                                  let~ c_sum_inv_f : F :=
                                    M.call_closure (|
                                      F,
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                        "unwrap_or",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            F,
                                            [],
                                            [],
                                            "try_inverse",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, c_sum_f |) ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            F
                                          |)
                                        |)
                                      ]
                                    |) in
                                  let~ r_sum_f : F :=
                                    M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "u32" ],
                                        [],
                                        [],
                                        "fold",
                                        [],
                                        [
                                          F;
                                          Ty.function
                                            [ F; Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
                                            F
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "u32" ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                              M.pointer_coercion
                                                M.PointerCoercion.Unsize
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ NUM_LIMBS ]
                                                      [ Ty.path "u32" ]
                                                  ])
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ]
                                                  ]),
                                              [ M.borrow (| Pointer.Kind.Ref, r |) ]
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            F
                                          |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0; α1 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    F,
                                                    M.alloc (| F, α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let acc := M.copy (| F, γ |) in
                                                          M.match_operator (|
                                                            F,
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "u32" ],
                                                              α1
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let r :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ],
                                                                      γ
                                                                    |) in
                                                                  M.call_closure (|
                                                                    F,
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Add",
                                                                      F,
                                                                      [],
                                                                      [ F ],
                                                                      "add",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| acc |);
                                                                      M.call_closure (|
                                                                        F,
                                                                        M.get_trait_method (|
                                                                          "p3_field::field::FieldAlgebra",
                                                                          F,
                                                                          [],
                                                                          [],
                                                                          "from_canonical_u32",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| r |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |) in
                                  let~ r_sum_inv_f : F :=
                                    M.call_closure (|
                                      F,
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                        "unwrap_or",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                          M.get_trait_method (|
                                            "p3_field::field::Field",
                                            F,
                                            [],
                                            [],
                                            "try_inverse",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, r_sum_f |) ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            F
                                          |)
                                        |)
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                              [ NUM_LIMBS; LIMB_BITS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                                []
                                                [ F; I ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                [ NUM_LIMBS; LIMB_BITS ]
                                                [ F ]
                                            ];
                                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                        ],
                                      M.alloc (|
                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ],
                                        M.match_operator (|
                                          Ty.tuple [ Ty.path "usize"; Ty.path "u32" ],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialEq",
                                                            Ty.path
                                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
                                                            ],
                                                            "eq",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (| Pointer.Kind.Ref, case |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.alloc (|
                                                                Ty.path
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                                                Value.StructTuple
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::None"
                                                                  []
                                                                  []
                                                                  []
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (UnOp.not (| M.read (| r_zero |) |)))
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.read (|
                                                  let~ idx : Ty.path "usize" :=
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_function (|
                                                        "openvm_rv32im_circuit::divrem::core::run_sltu_diff_idx",
                                                        [ NUM_LIMBS ],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (| Pointer.Kind.Ref, c |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (| Pointer.Kind.Ref, r_prime |)
                                                          |)
                                                        |);
                                                        M.read (| c_sign |)
                                                      ]
                                                    |) in
                                                  let~ val : Ty.path "u32" :=
                                                    M.match_operator (|
                                                      Ty.path "u32",
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ := M.use c_sign in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.call_closure (|
                                                              Ty.path "u32",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    r_prime,
                                                                    M.read (| idx |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    c,
                                                                    M.read (| idx |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.path "u32",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    c,
                                                                    M.read (| idx |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    r_prime,
                                                                    M.read (| idx |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                          [ LIMB_BITS ]
                                                          [],
                                                        "request_range",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                                                            "bitwise_lookup_chip"
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| val |);
                                                            Value.Integer IntegerKind.U32 1
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.U32 0
                                                      ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [ Ty.path "usize"; Ty.path "u32" ],
                                                    Value.Tuple
                                                      [ M.read (| idx |); M.read (| val |) ]
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (Value.Tuple
                                                  [ NUM_LIMBS; Value.Integer IntegerKind.U32 0 ]))
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let lt_diff_idx := M.copy (| Ty.path "usize", γ0_0 |) in
                                            let lt_diff_val := M.copy (| Ty.path "u32", γ0_1 |) in
                                            M.read (|
                                              let~ r_prime_f :
                                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] :=
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ NUM_LIMBS ]
                                                      [ Ty.path "u32" ],
                                                    "map",
                                                    [],
                                                    [ Ty.function [ Ty.path "u32" ] F; F ]
                                                  |),
                                                  [
                                                    M.read (| r_prime |);
                                                    M.get_trait_method (|
                                                      "p3_field::field::FieldAlgebra",
                                                      F,
                                                      [],
                                                      [],
                                                      "from_canonical_u32",
                                                      [],
                                                      []
                                                    |)
                                                  ]
                                                |) in
                                              let~ output :
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                                    []
                                                    [ F; I ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                                    []
                                                    [ F; I ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                                      []
                                                      [ F; I ],
                                                    "without_pc",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ NUM_LIMBS ]
                                                            [ F ]
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ NUM_LIMBS ]
                                                            [ F ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ NUM_LIMBS ]
                                                              [ Ty.path "u32" ],
                                                            "map",
                                                            [],
                                                            [ Ty.function [ Ty.path "u32" ] F; F ]
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.deref (|
                                                                M.match_operator (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [ NUM_LIMBS ]
                                                                        [ Ty.path "u32" ]
                                                                    ],
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ := M.use is_div in
                                                                        let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          q
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              r
                                                                            |)
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              F,
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  ]
                                                |) in
                                              let~ record :
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                    [ NUM_LIMBS; LIMB_BITS ]
                                                    [ F ] :=
                                                Value.mkStructRecord
                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord"
                                                  [ NUM_LIMBS; LIMB_BITS ]
                                                  [ F ]
                                                  [
                                                    ("opcode", M.read (| divrem_opcode |));
                                                    ("b",
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          data,
                                                          Value.Integer IntegerKind.Usize 0
                                                        |)
                                                      |));
                                                    ("c",
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          data,
                                                          Value.Integer IntegerKind.Usize 1
                                                        |)
                                                      |));
                                                    ("q",
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ NUM_LIMBS ]
                                                          [ F ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ NUM_LIMBS ]
                                                            [ Ty.path "u32" ],
                                                          "map",
                                                          [],
                                                          [ Ty.function [ Ty.path "u32" ] F; F ]
                                                        |),
                                                        [
                                                          M.read (| q |);
                                                          M.get_trait_method (|
                                                            "p3_field::field::FieldAlgebra",
                                                            F,
                                                            [],
                                                            [],
                                                            "from_canonical_u32",
                                                            [],
                                                            []
                                                          |)
                                                        ]
                                                      |));
                                                    ("r",
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ NUM_LIMBS ]
                                                          [ F ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ NUM_LIMBS ]
                                                            [ Ty.path "u32" ],
                                                          "map",
                                                          [],
                                                          [ Ty.function [ Ty.path "u32" ] F; F ]
                                                        |),
                                                        [
                                                          M.read (| r |);
                                                          M.get_trait_method (|
                                                            "p3_field::field::FieldAlgebra",
                                                            F,
                                                            [],
                                                            [],
                                                            "from_canonical_u32",
                                                            [],
                                                            []
                                                          |)
                                                        ]
                                                      |));
                                                    ("zero_divisor",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialEq",
                                                              Ty.path
                                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
                                                              ],
                                                              "eq",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (| Pointer.Kind.Ref, case |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase",
                                                                  Value.StructTuple
                                                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::ZeroDivisor"
                                                                    []
                                                                    []
                                                                    []
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |));
                                                    ("r_zero",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| r_zero |) ]
                                                      |));
                                                    ("b_sign",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| b_sign |) ]
                                                      |));
                                                    ("c_sign",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| c_sign |) ]
                                                      |));
                                                    ("q_sign",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| q_sign |) ]
                                                      |));
                                                    ("sign_xor",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_bool",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| sign_xor |) ]
                                                      |));
                                                    ("c_sum_inv", M.read (| c_sum_inv_f |));
                                                    ("r_sum_inv", M.read (| r_sum_inv_f |));
                                                    ("r_prime", M.read (| r_prime_f |));
                                                    ("r_inv",
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ NUM_LIMBS ]
                                                          [ F ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ NUM_LIMBS ]
                                                            [ F ],
                                                          "map",
                                                          [],
                                                          [ Ty.function [ F ] F; F ]
                                                        |),
                                                        [
                                                          M.read (| r_prime_f |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      F,
                                                                      M.alloc (| F, α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let r :=
                                                                              M.copy (| F, γ |) in
                                                                            M.call_closure (|
                                                                              F,
                                                                              M.get_trait_method (|
                                                                                "p3_field::field::Field",
                                                                                F,
                                                                                [],
                                                                                [],
                                                                                "inverse",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    F,
                                                                                    M.call_closure (|
                                                                                      F,
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Sub",
                                                                                        F,
                                                                                        [],
                                                                                        [ F ],
                                                                                        "sub",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          r
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          F,
                                                                                          M.get_trait_method (|
                                                                                            "p3_field::field::FieldAlgebra",
                                                                                            F,
                                                                                            [],
                                                                                            [],
                                                                                            "from_canonical_u32",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.U32
                                                                                              256
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        ]
                                                      |));
                                                    ("lt_diff_val",
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          F,
                                                          [],
                                                          [],
                                                          "from_canonical_u32",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| lt_diff_val |) ]
                                                      |));
                                                    ("lt_diff_idx", M.read (| lt_diff_idx |))
                                                  ] in
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                                          []
                                                          [ F; I ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                          [ NUM_LIMBS; LIMB_BITS ]
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::execution::ExecutionError"
                                                  ],
                                                Value.StructTuple
                                                  "core::result::Result::Ok"
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                                          []
                                                          [ F; I ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord")
                                                          [ NUM_LIMBS; LIMB_BITS ]
                                                          [ F ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::arch::execution::ExecutionError"
                                                  ]
                                                  [
                                                    Value.Tuple
                                                      [ M.read (| output |); M.read (| record |) ]
                                                  ]
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_opcode_name(&self, opcode: usize) -> String {
              format!("{:?}", DivRemOpcode::from_usize(opcode - self.air.offset))
          }
      *)
      Definition get_opcode_name
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::DivRemOpcode"
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                    M.call_closure (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                      M.get_trait_method (|
                                                        "openvm_instructions::LocalOpcode",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                                                        [],
                                                        [],
                                                        "from_usize",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| opcode |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| self |) |),
                                                                  "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                                                                  "air"
                                                                |),
                                                                "openvm_rv32im_circuit::divrem::core::DivRemCoreAir",
                                                                "offset"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
              let row_slice: &mut DivRemCoreCols<_, NUM_LIMBS, LIMB_BITS> = row_slice.borrow_mut();
              row_slice.b = record.b;
              row_slice.c = record.c;
              row_slice.q = record.q;
              row_slice.r = record.r;
              row_slice.zero_divisor = record.zero_divisor;
              row_slice.r_zero = record.r_zero;
              row_slice.b_sign = record.b_sign;
              row_slice.c_sign = record.c_sign;
              row_slice.q_sign = record.q_sign;
              row_slice.sign_xor = record.sign_xor;
              row_slice.c_sum_inv = record.c_sum_inv;
              row_slice.r_sum_inv = record.r_sum_inv;
              row_slice.r_prime = record.r_prime;
              row_slice.r_inv = record.r_inv;
              row_slice.lt_marker = array::from_fn(|i| F::from_bool(i == record.lt_diff_idx));
              row_slice.lt_diff = record.lt_diff_val;
              row_slice.opcode_div_flag = F::from_bool(record.opcode == DivRemOpcode::DIV);
              row_slice.opcode_divu_flag = F::from_bool(record.opcode == DivRemOpcode::DIVU);
              row_slice.opcode_rem_flag = F::from_bool(record.opcode == DivRemOpcode::REM);
              row_slice.opcode_remu_flag = F::from_bool(record.opcode == DivRemOpcode::REMU);
          }
      *)
      Definition generate_trace_row
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self; row_slice; record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmCoreChip"
                  []
                  [ F; I ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                    [ NUM_LIMBS; LIMB_BITS ]
                    [])
                  "Record",
                record
              |) in
            M.read (|
              let~ row_slice :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                        [ NUM_LIMBS; LIMB_BITS ]
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreCols")
                            [ NUM_LIMBS; LIMB_BITS ]
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "b"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "b"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "c"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "c"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "q"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "q"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "r"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "zero_divisor"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "zero_divisor"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r_zero"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "r_zero"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "b_sign"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "b_sign"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "c_sign"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "c_sign"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "q_sign"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "q_sign"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "sign_xor"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "sign_xor"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "c_sum_inv"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "c_sum_inv"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r_sum_inv"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "r_sum_inv"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r_prime"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "r_prime"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "r_inv"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "r_inv"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "lt_marker"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ NUM_LIMBS ],
                      [ F; Ty.function [ Ty.path "usize" ] F ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.call_closure (|
                                          F,
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            F,
                                            [],
                                            [],
                                            "from_bool",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (| i |);
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    record,
                                                    "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                                                    "lt_diff_idx"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "lt_diff"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                      "lt_diff_val"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "opcode_div_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::DivRemOpcode::DIV"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "opcode_divu_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::DivRemOpcode::DIVU"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "opcode_rem_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::DivRemOpcode::REM"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreCols",
                    "opcode_remu_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::divrem::core::DivRemCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::DivRemOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::DivRemOpcode::REMU"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air
          (NUM_LIMBS LIMB_BITS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS LIMB_BITS F I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreChip")
                      [ NUM_LIMBS; LIMB_BITS ]
                      []
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::divrem::core::DivRemCoreChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS LIMB_BITS : Value.t) (F I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; I ]
          (Self NUM_LIMBS LIMB_BITS F I)
          (* Instance *)
          [
            ("Record", InstanceField.Ty (_Record NUM_LIMBS LIMB_BITS F I));
            ("Air", InstanceField.Ty (_Air NUM_LIMBS LIMB_BITS F I));
            ("execute_instruction",
              InstanceField.Method (execute_instruction NUM_LIMBS LIMB_BITS F I));
            ("get_opcode_name", InstanceField.Method (get_opcode_name NUM_LIMBS LIMB_BITS F I));
            ("generate_trace_row",
              InstanceField.Method (generate_trace_row NUM_LIMBS LIMB_BITS F I));
            ("air", InstanceField.Method (air NUM_LIMBS LIMB_BITS F I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_NUM_LIMBS_F_F_I_for_openvm_rv32im_circuit_divrem_core_DivRemCoreChip_NUM_LIMBS_LIMB_BITS.
    
    (*
    pub(super) fn run_divrem<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        signed: bool,
        x: &[u32; NUM_LIMBS],
        y: &[u32; NUM_LIMBS],
    ) -> (
        [u32; NUM_LIMBS],
        [u32; NUM_LIMBS],
        bool,
        bool,
        bool,
        DivRemCoreSpecialCase,
    ) {
        let x_sign = signed && (x[NUM_LIMBS - 1] >> (LIMB_BITS - 1) == 1);
        let y_sign = signed && (y[NUM_LIMBS - 1] >> (LIMB_BITS - 1) == 1);
        let max_limb = (1 << LIMB_BITS) - 1;
    
        let zero_divisor = y.iter().all(|val| *val == 0);
        let overflow = x[NUM_LIMBS - 1] == 1 << (LIMB_BITS - 1)
            && x[..(NUM_LIMBS - 1)].iter().all(|val| *val == 0)
            && y.iter().all(|val| *val == max_limb)
            && x_sign
            && y_sign;
    
        if zero_divisor {
            return (
                [max_limb; NUM_LIMBS],
                *x,
                x_sign,
                y_sign,
                signed,
                DivRemCoreSpecialCase::ZeroDivisor,
            );
        } else if overflow {
            return (
                *x,
                [0; NUM_LIMBS],
                x_sign,
                y_sign,
                false,
                DivRemCoreSpecialCase::SignedOverflow,
            );
        }
    
        let x_abs = if x_sign {
            negate::<NUM_LIMBS, LIMB_BITS>(x)
        } else {
            *x
        };
        let y_abs = if y_sign {
            negate::<NUM_LIMBS, LIMB_BITS>(y)
        } else {
            *y
        };
    
        let x_big = limbs_to_biguint::<NUM_LIMBS, LIMB_BITS>(&x_abs);
        let y_big = limbs_to_biguint::<NUM_LIMBS, LIMB_BITS>(&y_abs);
        let q_big = x_big.clone() / y_big.clone();
        let r_big = x_big.clone() % y_big.clone();
    
        let q = if x_sign ^ y_sign {
            negate::<NUM_LIMBS, LIMB_BITS>(&biguint_to_limbs::<NUM_LIMBS, LIMB_BITS>(&q_big))
        } else {
            biguint_to_limbs::<NUM_LIMBS, LIMB_BITS>(&q_big)
        };
        let q_sign = signed && (q[NUM_LIMBS - 1] >> (LIMB_BITS - 1) == 1);
    
        // In C |q * y| <= |x|, which means if x is negative then r <= 0 and vice versa.
        let r = if x_sign {
            negate::<NUM_LIMBS, LIMB_BITS>(&biguint_to_limbs::<NUM_LIMBS, LIMB_BITS>(&r_big))
        } else {
            biguint_to_limbs::<NUM_LIMBS, LIMB_BITS>(&r_big)
        };
    
        (q, r, x_sign, y_sign, q_sign, DivRemCoreSpecialCase::None)
    }
    *)
    Definition run_divrem (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ signed; x; y ] =>
        ltac:(M.monadic
          (let signed := M.alloc (| Ty.path "bool", signed |) in
          let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          let y :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              y
            |) in
          M.catch_return
            (Ty.tuple
              [
                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                Ty.path "bool";
                Ty.path "bool";
                Ty.path "bool";
                Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ x_sign : Ty.path "bool" :=
                  LogicalOp.and (|
                    M.read (| signed |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        Ty.path "bool",
                        BinOp.eq,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shr,
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| x |) |),
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                  |)
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |)))
                  |) in
                let~ y_sign : Ty.path "bool" :=
                  LogicalOp.and (|
                    M.read (| signed |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        Ty.path "bool",
                        BinOp.eq,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shr,
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| y |) |),
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                  |)
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |)))
                  |) in
                let~ max_limb : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.shl,
                        [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                      |);
                      Value.Integer IntegerKind.U32 1
                    ]
                  |) in
                let~ zero_divisor : Ty.path "bool" :=
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                      [],
                      [],
                      "all",
                      [],
                      [ Ty.function [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ] (Ty.path "bool")
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.alloc (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ]),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "bool",
                                  M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| val |) |) |);
                                            Value.Integer IntegerKind.U32 0
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                let~ overflow : Ty.path "bool" :=
                  LogicalOp.and (|
                    LogicalOp.and (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.eq,
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  M.deref (| M.read (| x |) |),
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                  |)
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shl,
                                [
                                  Value.Integer IntegerKind.U32 1;
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                                  |)
                                ]
                              |)
                            ]
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                                [],
                                [],
                                "all",
                                [],
                                [
                                  Ty.function
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
                                    (Ty.path "bool")
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "u32" ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "u32" ],
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                              M.get_trait_method (|
                                                "core::ops::index::Index",
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ NUM_LIMBS ]
                                                  [ Ty.path "u32" ],
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::RangeTo")
                                                    []
                                                    [ Ty.path "usize" ]
                                                ],
                                                "index",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| x |) |)
                                                |);
                                                Value.mkStructRecord
                                                  "core::ops::range::RangeTo"
                                                  []
                                                  [ Ty.path "usize" ]
                                                  [
                                                    ("end_",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.sub,
                                                        [
                                                          NUM_LIMBS;
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |))
                                                  ]
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "bool",
                                            M.alloc (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                      γ
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.eq,
                                                    [
                                                      M.read (| M.deref (| M.read (| val |) |) |);
                                                      Value.Integer IntegerKind.U32 0
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                              [],
                              [],
                              "all",
                              [],
                              [
                                Ty.function
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
                                  (Ty.path "bool")
                              ]
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.alloc (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "u32" ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ NUM_LIMBS ]
                                                [ Ty.path "u32" ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| y |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.path "bool",
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                    γ
                                                  |) in
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (| M.deref (| M.read (| val |) |) |);
                                                    M.read (| max_limb |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)))
                      |),
                      ltac:(M.monadic (M.read (| x_sign |)))
                    |),
                    ltac:(M.monadic (M.read (| y_sign |)))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use zero_divisor in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.Tuple
                                  [
                                    lib.repeat (| M.read (| max_limb |), NUM_LIMBS |);
                                    M.read (| M.deref (| M.read (| x |) |) |);
                                    M.read (| x_sign |);
                                    M.read (| y_sign |);
                                    M.read (| signed |);
                                    Value.StructTuple
                                      "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::ZeroDivisor"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ := M.use overflow in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        Value.Tuple
                                          [
                                            M.read (| M.deref (| M.read (| x |) |) |);
                                            lib.repeat (|
                                              Value.Integer IntegerKind.U32 0,
                                              NUM_LIMBS
                                            |);
                                            M.read (| x_sign |);
                                            M.read (| y_sign |);
                                            Value.Bool false;
                                            Value.StructTuple
                                              "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::SignedOverflow"
                                              []
                                              []
                                              []
                                          ]
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                let~ x_abs : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use x_sign in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                            M.get_function (|
                              "openvm_rv32im_circuit::divrem::core::negate",
                              [ NUM_LIMBS; LIMB_BITS ],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                          |)));
                      fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| x |) |) |)))
                    ]
                  |) in
                let~ y_abs : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use y_sign in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                            M.get_function (|
                              "openvm_rv32im_circuit::divrem::core::negate",
                              [ NUM_LIMBS; LIMB_BITS ],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| y |) |) |) ]
                          |)));
                      fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| y |) |) |)))
                    ]
                  |) in
                let~ x_big : Ty.path "num_bigint::biguint::BigUint" :=
                  M.call_closure (|
                    Ty.path "num_bigint::biguint::BigUint",
                    M.get_function (|
                      "openvm_rv32im_circuit::divrem::core::limbs_to_biguint",
                      [ NUM_LIMBS; LIMB_BITS ],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, x_abs |) |)
                      |)
                    ]
                  |) in
                let~ y_big : Ty.path "num_bigint::biguint::BigUint" :=
                  M.call_closure (|
                    Ty.path "num_bigint::biguint::BigUint",
                    M.get_function (|
                      "openvm_rv32im_circuit::divrem::core::limbs_to_biguint",
                      [ NUM_LIMBS; LIMB_BITS ],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, y_abs |) |)
                      |)
                    ]
                  |) in
                let~ q_big : Ty.path "num_bigint::biguint::BigUint" :=
                  M.call_closure (|
                    Ty.path "num_bigint::biguint::BigUint",
                    M.get_trait_method (|
                      "core::ops::arith::Div",
                      Ty.path "num_bigint::biguint::BigUint",
                      [],
                      [ Ty.path "num_bigint::biguint::BigUint" ],
                      "div",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "num_bigint::biguint::BigUint",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "num_bigint::biguint::BigUint",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, x_big |) ]
                      |);
                      M.call_closure (|
                        Ty.path "num_bigint::biguint::BigUint",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "num_bigint::biguint::BigUint",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, y_big |) ]
                      |)
                    ]
                  |) in
                let~ r_big : Ty.path "num_bigint::biguint::BigUint" :=
                  M.call_closure (|
                    Ty.path "num_bigint::biguint::BigUint",
                    M.get_trait_method (|
                      "core::ops::arith::Rem",
                      Ty.path "num_bigint::biguint::BigUint",
                      [],
                      [ Ty.path "num_bigint::biguint::BigUint" ],
                      "rem",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "num_bigint::biguint::BigUint",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "num_bigint::biguint::BigUint",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, x_big |) ]
                      |);
                      M.call_closure (|
                        Ty.path "num_bigint::biguint::BigUint",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "num_bigint::biguint::BigUint",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, y_big |) ]
                      |)
                    ]
                  |) in
                let~ q : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.Wrap.bit_xor,
                                  [ M.read (| x_sign |); M.read (| y_sign |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                            M.get_function (|
                              "openvm_rv32im_circuit::divrem::core::negate",
                              [ NUM_LIMBS; LIMB_BITS ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                      M.call_closure (|
                                        Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                        M.get_function (|
                                          "openvm_rv32im_circuit::divrem::core::biguint_to_limbs",
                                          [ NUM_LIMBS; LIMB_BITS ],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.borrow (| Pointer.Kind.Ref, q_big |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                            M.get_function (|
                              "openvm_rv32im_circuit::divrem::core::biguint_to_limbs",
                              [ NUM_LIMBS; LIMB_BITS ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, q_big |) |)
                              |)
                            ]
                          |)))
                    ]
                  |) in
                let~ q_sign : Ty.path "bool" :=
                  LogicalOp.and (|
                    M.read (| signed |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        Ty.path "bool",
                        BinOp.eq,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shr,
                            [
                              M.read (|
                                M.SubPointer.get_array_field (|
                                  q,
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                                  |)
                                |)
                              |);
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |)))
                  |) in
                let~ r : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use x_sign in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                            M.get_function (|
                              "openvm_rv32im_circuit::divrem::core::negate",
                              [ NUM_LIMBS; LIMB_BITS ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                      M.call_closure (|
                                        Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                                        M.get_function (|
                                          "openvm_rv32im_circuit::divrem::core::biguint_to_limbs",
                                          [ NUM_LIMBS; LIMB_BITS ],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.borrow (| Pointer.Kind.Ref, r_big |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                            M.get_function (|
                              "openvm_rv32im_circuit::divrem::core::biguint_to_limbs",
                              [ NUM_LIMBS; LIMB_BITS ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, r_big |) |)
                              |)
                            ]
                          |)))
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ];
                      Ty.path "bool";
                      Ty.path "bool";
                      Ty.path "bool";
                      Ty.path "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase"
                    ],
                  Value.Tuple
                    [
                      M.read (| q |);
                      M.read (| r |);
                      M.read (| x_sign |);
                      M.read (| y_sign |);
                      M.read (| q_sign |);
                      Value.StructTuple
                        "openvm_rv32im_circuit::divrem::core::DivRemCoreSpecialCase::None"
                        []
                        []
                        []
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_divrem :
      M.IsFunction.C "openvm_rv32im_circuit::divrem::core::run_divrem" run_divrem.
    Admitted.
    Global Typeclasses Opaque run_divrem.
    
    (*
    pub(super) fn run_sltu_diff_idx<const NUM_LIMBS: usize>(
        x: &[u32; NUM_LIMBS],
        y: &[u32; NUM_LIMBS],
        cmp: bool,
    ) -> usize {
        for i in (0..NUM_LIMBS).rev() {
            if x[i] != y[i] {
                assert!((x[i] < y[i]) == cmp);
                return i;
            }
        }
        assert!(!cmp);
        NUM_LIMBS
    }
    *)
    Definition run_sltu_diff_idx (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS ], [], [ x; y; cmp ] =>
        ltac:(M.monadic
          (let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          let y :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              y
            |) in
          let cmp := M.alloc (| Ty.path "bool", cmp |) in
          M.catch_return (Ty.path "usize") (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::rev::Rev")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "rev",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.mkStructRecord
                                      "core::ops::range::Range"
                                      []
                                      [ Ty.path "usize" ]
                                      [
                                        ("start", Value.Integer IntegerKind.Usize 0);
                                        ("end_", NUM_LIMBS)
                                      ]
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::rev::Rev")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::rev::Rev")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ne,
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      M.read (| i |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| y |) |),
                                                                      M.read (| i |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            Ty.path "bool",
                                                                            UnOp.not (|
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.eq,
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.path "bool",
                                                                                    BinOp.lt,
                                                                                    [
                                                                                      M.read (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              x
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.read (|
                                                                                        M.SubPointer.get_array_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              y
                                                                                            |)
                                                                                          |),
                                                                                          M.read (|
                                                                                            i
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (| cmp |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)) in
                                                                      let _ :=
                                                                        is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.never_to_any (|
                                                                        M.call_closure (|
                                                                          Ty.path "never",
                                                                          M.get_function (|
                                                                            "core::panicking::panic",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            mk_str (|
                                                                              "assertion failed: (x[i] < y[i]) == cmp"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (Value.Tuple []))
                                                                ]
                                                              |) in
                                                            M.return_ (| M.read (| i |) |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (| UnOp.not (| M.read (| cmp |) |) |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: !cmp" |) ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (| Ty.path "usize", NUM_LIMBS |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_sltu_diff_idx :
      M.IsFunction.C "openvm_rv32im_circuit::divrem::core::run_sltu_diff_idx" run_sltu_diff_idx.
    Admitted.
    Global Typeclasses Opaque run_sltu_diff_idx.
    
    (*
    pub(super) fn run_mul_carries<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        signed: bool,
        d: &[u32; NUM_LIMBS],
        q: &[u32; NUM_LIMBS],
        r: &[u32; NUM_LIMBS],
        q_sign: bool,
    ) -> Vec<u32> {
        let mut carry = vec![0u32; 2 * NUM_LIMBS];
        for i in 0..NUM_LIMBS {
            let mut val = r[i] + if i > 0 { carry[i - 1] } else { 0 };
            for j in 0..=i {
                val += d[j] * q[i - j];
            }
            carry[i] = val >> LIMB_BITS;
        }
    
        let q_ext = if q_sign && signed {
            (1 << LIMB_BITS) - 1
        } else {
            0
        };
        let d_ext =
            (d[NUM_LIMBS - 1] >> (LIMB_BITS - 1)) * if signed { (1 << LIMB_BITS) - 1 } else { 0 };
        let r_ext =
            (r[NUM_LIMBS - 1] >> (LIMB_BITS - 1)) * if signed { (1 << LIMB_BITS) - 1 } else { 0 };
        let mut d_prefix = 0;
        let mut q_prefix = 0;
    
        for i in 0..NUM_LIMBS {
            d_prefix += d[i];
            q_prefix += q[i];
            let mut val = carry[NUM_LIMBS + i - 1] + d_prefix * q_ext + q_prefix * d_ext + r_ext;
            for j in (i + 1)..NUM_LIMBS {
                val += d[j] * q[NUM_LIMBS + i - j];
            }
            carry[NUM_LIMBS + i] = val >> LIMB_BITS;
        }
        carry
    }
    *)
    Definition run_mul_carries (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ signed; d; q; r; q_sign ] =>
        ltac:(M.monadic
          (let signed := M.alloc (| Ty.path "bool", signed |) in
          let d :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              d
            |) in
          let q :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              q
            |) in
          let r :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              r
            |) in
          let q_sign := M.alloc (| Ty.path "bool", q_sign |) in
          M.read (|
            let~ carry :
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "u32" ] |),
                [
                  Value.Integer IntegerKind.U32 0;
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.mul,
                    [ Value.Integer IntegerKind.Usize 2; NUM_LIMBS ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ val : Ty.path "u32" :=
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_array_field (|
                                                        M.deref (| M.read (| r |) |),
                                                        M.read (| i |)
                                                      |)
                                                    |);
                                                    M.match_operator (|
                                                      Ty.path "u32",
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.gt,
                                                                    [
                                                                      M.read (| i |);
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.read (|
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "u32";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      carry
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.sub,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (Value.Integer IntegerKind.U32 0))
                                                      ]
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::ops::range::RangeInclusive")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeInclusive")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::RangeInclusive")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeInclusive")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  "new",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  Value.Integer IntegerKind.Usize 0;
                                                                  M.read (| i |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::RangeInclusive")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::RangeInclusive")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let j :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  let β := val in
                                                                                  M.write (|
                                                                                    β,
                                                                                    M.call_closure (|
                                                                                      Ty.path "u32",
                                                                                      BinOp.Wrap.add,
                                                                                      [
                                                                                        M.read (|
                                                                                          β
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          BinOp.Wrap.mul,
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    d
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  j
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    q
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      i
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [ Ty.path "u32" ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u32";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [ Ty.path "usize" ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, carry |);
                                                        M.read (| i |)
                                                      ]
                                                    |)
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shr,
                                                    [ M.read (| val |); LIMB_BITS ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ q_ext : Ty.path "u32" :=
              M.match_operator (|
                Ty.path "u32",
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            LogicalOp.and (|
                              M.read (| q_sign |),
                              ltac:(M.monadic (M.read (| signed |)))
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.shl,
                            [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |)));
                  fun γ => ltac:(M.monadic (Value.Integer IntegerKind.U32 0))
                ]
              |) in
            let~ d_ext : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.mul,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| d |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                      |)
                    ]
                  |);
                  M.match_operator (|
                    Ty.path "u32",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use signed in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shl,
                                [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                              |);
                              Value.Integer IntegerKind.U32 1
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (Value.Integer IntegerKind.U32 0))
                    ]
                  |)
                ]
              |) in
            let~ r_ext : Ty.path "u32" :=
              M.call_closure (|
                Ty.path "u32",
                BinOp.Wrap.mul,
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shr,
                    [
                      M.read (|
                        M.SubPointer.get_array_field (|
                          M.deref (| M.read (| r |) |),
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.sub,
                            [ NUM_LIMBS; Value.Integer IntegerKind.Usize 1 ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [ LIMB_BITS; Value.Integer IntegerKind.Usize 1 ]
                      |)
                    ]
                  |);
                  M.match_operator (|
                    Ty.path "u32",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use signed in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shl,
                                [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                              |);
                              Value.Integer IntegerKind.U32 1
                            ]
                          |)));
                      fun γ => ltac:(M.monadic (Value.Integer IntegerKind.U32 0))
                    ]
                  |)
                ]
              |) in
            let~ d_prefix : Ty.path "u32" := Value.Integer IntegerKind.U32 0 in
            let~ q_prefix : Ty.path "u32" := Value.Integer IntegerKind.U32 0 in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            Value.mkStructRecord
                              "core::ops::range::Range"
                              []
                              [ Ty.path "usize" ]
                              [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                let β := d_prefix in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| d |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β := q_prefix in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      M.read (|
                                                        M.SubPointer.get_array_field (|
                                                          M.deref (| M.read (| q |) |),
                                                          M.read (| i |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let~ val : Ty.path "u32" :=
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.read (|
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "u32" ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::Index",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.path "u32";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [ Ty.path "usize" ],
                                                                    "index",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      carry
                                                                    |);
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.sub,
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.add,
                                                                          [
                                                                            NUM_LIMBS;
                                                                            M.read (| i |)
                                                                          ]
                                                                        |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "u32",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                M.read (| d_prefix |);
                                                                M.read (| q_ext |)
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| q_prefix |);
                                                            M.read (| d_ext |)
                                                          ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.read (| r_ext |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.read (|
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::ops::range::Range")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [],
                                                              "into_iter",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              Value.mkStructRecord
                                                                "core::ops::range::Range"
                                                                []
                                                                [ Ty.path "usize" ]
                                                                [
                                                                  ("start",
                                                                    M.call_closure (|
                                                                      Ty.path "usize",
                                                                      BinOp.Wrap.add,
                                                                      [
                                                                        M.read (| i |);
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                    |));
                                                                  ("end_", NUM_LIMBS)
                                                                ]
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let iter :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                M.loop (|
                                                                  Ty.tuple [],
                                                                  ltac:(M.monadic
                                                                    (let~ _ : Ty.tuple [] :=
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::ops::range::Range")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              [],
                                                                              [],
                                                                              "next",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.MutRef,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    iter
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.is_struct_tuple (|
                                                                                  γ,
                                                                                  "core::option::Option::None"
                                                                                |) in
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.break (||)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let j :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ0_0
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  let β := val in
                                                                                  M.write (|
                                                                                    β,
                                                                                    M.call_closure (|
                                                                                      Ty.path "u32",
                                                                                      BinOp.Wrap.add,
                                                                                      [
                                                                                        M.read (|
                                                                                          β
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "u32",
                                                                                          BinOp.Wrap.mul,
                                                                                          [
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    d
                                                                                                  |)
                                                                                                |),
                                                                                                M.read (|
                                                                                                  j
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.SubPointer.get_array_field (|
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    q
                                                                                                  |)
                                                                                                |),
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "usize",
                                                                                                  BinOp.Wrap.sub,
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "usize",
                                                                                                      BinOp.Wrap.add,
                                                                                                      [
                                                                                                        NUM_LIMBS;
                                                                                                        M.read (|
                                                                                                          i
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      j
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |)))
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    |))
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [ Ty.path "u32" ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.path "u32";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [ Ty.path "usize" ],
                                                        "index_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, carry |);
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [ NUM_LIMBS; M.read (| i |) ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  M.call_closure (|
                                                    Ty.path "u32",
                                                    BinOp.Wrap.shr,
                                                    [ M.read (| val |); LIMB_BITS ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            carry
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_mul_carries :
      M.IsFunction.C "openvm_rv32im_circuit::divrem::core::run_mul_carries" run_mul_carries.
    Admitted.
    Global Typeclasses Opaque run_mul_carries.
    
    (*
    fn limbs_to_biguint<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        x: &[u32; NUM_LIMBS],
    ) -> BigUint {
        let base = BigUint::new(vec![1 << LIMB_BITS]);
        let mut res = BigUint::new(vec![0]);
        for val in x.iter().rev() {
            res *= base.clone();
            res += BigUint::new(vec![*val]);
        }
        res
    }
    *)
    Definition limbs_to_biguint (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ x ] =>
        ltac:(M.monadic
          (let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          M.read (|
            let~ base : Ty.path "num_bigint::biguint::BigUint" :=
              M.call_closure (|
                Ty.path "num_bigint::biguint::BigUint",
                M.get_associated_function (|
                  Ty.path "num_bigint::biguint::BigUint",
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "u32" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "u32" ],
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shl,
                                        [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ res : Ty.path "num_bigint::biguint::BigUint" :=
              M.call_closure (|
                Ty.path "num_bigint::biguint::BigUint",
                M.get_associated_function (|
                  Ty.path "num_bigint::biguint::BigUint",
                  "new",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "u32" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "u32" ],
                                  Value.Array [ Value.Integer IntegerKind.U32 0 ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::rev::Rev")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::rev::Rev")
                            []
                            [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              []
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ] ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                                [],
                                [],
                                "rev",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "u32" ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                    "iter",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ NUM_LIMBS ]
                                              [ Ty.path "u32" ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "u32" ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::rev::Rev")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Ty.path "u32" ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                γ0_0
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "core::ops::arith::MulAssign",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [],
                                                    [ Ty.path "num_bigint::biguint::BigUint" ],
                                                    "mul_assign",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.MutRef, res |);
                                                    M.call_closure (|
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        [],
                                                        [],
                                                        "clone",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, base |) ]
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "core::ops::arith::AddAssign",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [],
                                                    [ Ty.path "num_bigint::biguint::BigUint" ],
                                                    "add_assign",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.MutRef, res |);
                                                    M.call_closure (|
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      M.get_associated_function (|
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        "new",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.path "u32";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.path "u32" ],
                                                            "into_vec",
                                                            [],
                                                            [ Ty.path "alloc::alloc::Global" ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              M.pointer_coercion
                                                                M.PointerCoercion.Unsize
                                                                (Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [ Ty.path "u32" ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ])
                                                                (Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ Ty.path "u32" ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]),
                                                              [
                                                                M.read (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::boxed::Box")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [ Ty.path "u32" ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [ Ty.path "u32" ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "new",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [ Ty.path "u32" ],
                                                                        Value.Array
                                                                          [
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (| val |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            res
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_limbs_to_biguint :
      M.IsFunction.C "openvm_rv32im_circuit::divrem::core::limbs_to_biguint" limbs_to_biguint.
    Admitted.
    Global Typeclasses Opaque limbs_to_biguint.
    
    (*
    fn biguint_to_limbs<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        x: &BigUint,
    ) -> [u32; NUM_LIMBS] {
        let mut res = [0; NUM_LIMBS];
        let mut x = x.clone();
        let base = BigUint::from(1u32 << LIMB_BITS);
        for limb in res.iter_mut() {
            let (quot, rem) = x.div_rem(&base);
            *limb = rem.iter_u32_digits().next().unwrap_or(0);
            x = quot;
        }
        debug_assert_eq!(x, BigUint::from(0u32));
        res
    }
    *)
    Definition biguint_to_limbs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ x ] =>
        ltac:(M.monadic
          (let x :=
            M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "num_bigint::biguint::BigUint" ], x |) in
          M.read (|
            let~ res : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
              lib.repeat (| Value.Integer IntegerKind.U32 0, NUM_LIMBS |) in
            let~ x : Ty.path "num_bigint::biguint::BigUint" :=
              M.call_closure (|
                Ty.path "num_bigint::biguint::BigUint",
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.path "num_bigint::biguint::BigUint",
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
              |) in
            let~ base : Ty.path "num_bigint::biguint::BigUint" :=
              M.call_closure (|
                Ty.path "num_bigint::biguint::BigUint",
                M.get_trait_method (|
                  "core::convert::From",
                  Ty.path "num_bigint::biguint::BigUint",
                  [],
                  [ Ty.path "u32" ],
                  "from",
                  [],
                  []
                |),
                [
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.shl,
                    [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u32" ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u32" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u32" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "u32" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ],
                                "iter_mut",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "u32" ] ]),
                                  [ M.borrow (| Pointer.Kind.MutRef, res |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "u32" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u32" ] ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&mut") [] [ Ty.path "u32" ] ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              []
                                              [ Ty.path "u32" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let limb :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&mut") [] [ Ty.path "u32" ],
                                                γ0_0
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.path "num_bigint::biguint::BigUint";
                                                    Ty.path "num_bigint::biguint::BigUint"
                                                  ],
                                                M.call_closure (|
                                                  Ty.tuple
                                                    [
                                                      Ty.path "num_bigint::biguint::BigUint";
                                                      Ty.path "num_bigint::biguint::BigUint"
                                                    ],
                                                  M.get_trait_method (|
                                                    "num_integer::Integer",
                                                    Ty.path "num_bigint::biguint::BigUint",
                                                    [],
                                                    [],
                                                    "div_rem",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (| Pointer.Kind.Ref, x |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, base |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let quot :=
                                                      M.copy (|
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        γ0_0
                                                      |) in
                                                    let rem :=
                                                      M.copy (|
                                                        Ty.path "num_bigint::biguint::BigUint",
                                                        γ0_1
                                                      |) in
                                                    M.read (|
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (|
                                                          M.deref (| M.read (| limb |) |),
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "u32" ],
                                                              "unwrap_or",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "u32" ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.path
                                                                    "num_bigint::biguint::iter::U32Digits",
                                                                  [],
                                                                  [],
                                                                  "next",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.alloc (|
                                                                      Ty.path
                                                                        "num_bigint::biguint::iter::U32Digits",
                                                                      M.call_closure (|
                                                                        Ty.path
                                                                          "num_bigint::biguint::iter::U32Digits",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "num_bigint::biguint::BigUint",
                                                                          "iter_u32_digits",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            rem
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.U32 0
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (| x, M.read (| quot |) |) in
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "num_bigint::biguint::BigUint" ];
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "num_bigint::biguint::BigUint" ]
                                ],
                              Value.Tuple
                                [
                                  M.borrow (| Pointer.Kind.Ref, x |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "num_bigint::biguint::BigUint",
                                      M.call_closure (|
                                        Ty.path "num_bigint::biguint::BigUint",
                                        M.get_trait_method (|
                                          "core::convert::From",
                                          Ty.path "num_bigint::biguint::BigUint",
                                          [],
                                          [ Ty.path "u32" ],
                                          "from",
                                          [],
                                          []
                                        |),
                                        [ Value.Integer IntegerKind.U32 0 ]
                                      |)
                                    |)
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "num_bigint::biguint::BigUint" ],
                                      γ0_0
                                    |) in
                                  let right_val :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.path "num_bigint::biguint::BigUint" ],
                                      γ0_1
                                    |) in
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.path "num_bigint::biguint::BigUint",
                                                      [],
                                                      [ Ty.path "num_bigint::biguint::BigUint" ],
                                                      "eq",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left_val |) |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                Value.StructTuple
                                                  "core::panicking::AssertKind::Eq"
                                                  []
                                                  []
                                                  [] in
                                              M.alloc (|
                                                Ty.path "never",
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [
                                                      Ty.path "num_bigint::biguint::BigUint";
                                                      Ty.path "num_bigint::biguint::BigUint"
                                                    ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                      [ Ty.path "core::fmt::Arguments" ]
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |)))
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            res
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_biguint_to_limbs :
      M.IsFunction.C "openvm_rv32im_circuit::divrem::core::biguint_to_limbs" biguint_to_limbs.
    Admitted.
    Global Typeclasses Opaque biguint_to_limbs.
    
    (*
    fn negate<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        x: &[u32; NUM_LIMBS],
    ) -> [u32; NUM_LIMBS] {
        let mut carry = 1;
        array::from_fn(|i| {
            let val = (1 << LIMB_BITS) + carry - 1 - x[i];
            carry = val >> LIMB_BITS;
            val % (1 << LIMB_BITS)
        })
    }
    *)
    Definition negate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ x ] =>
        ltac:(M.monadic
          (let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          M.read (|
            let~ carry : Ty.path "u32" := Value.Integer IntegerKind.U32 1 in
            M.alloc (|
              Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
              M.call_closure (|
                Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                M.get_function (|
                  "core::array::from_fn",
                  [ NUM_LIMBS ],
                  [ Ty.path "u32"; Ty.function [ Ty.path "usize" ] (Ty.path "u32") ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path "u32",
                              M.alloc (| Ty.path "usize", α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| Ty.path "usize", γ |) in
                                    M.read (|
                                      let~ val : Ty.path "u32" :=
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.sub,
                                          [
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.sub,
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                                    |);
                                                    M.read (| carry |)
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.U32 1
                                              ]
                                            |);
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                M.deref (| M.read (| x |) |),
                                                M.read (| i |)
                                              |)
                                            |)
                                          ]
                                        |) in
                                      let~ _ : Ty.tuple [] :=
                                        M.write (|
                                          carry,
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shr,
                                            [ M.read (| val |); LIMB_BITS ]
                                          |)
                                        |) in
                                      M.alloc (|
                                        Ty.path "u32",
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.rem,
                                          [
                                            M.read (| val |);
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.shl,
                                              [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_negate :
      M.IsFunction.C "openvm_rv32im_circuit::divrem::core::negate" negate.
    Admitted.
    Global Typeclasses Opaque negate.
  End core.
End divrem.
