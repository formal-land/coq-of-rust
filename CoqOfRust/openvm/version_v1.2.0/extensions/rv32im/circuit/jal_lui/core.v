(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module jal_lui.
  Module core.
    (* StructRecord
      {
        name := "Rv32JalLuiCoreCols";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("imm", T);
            ("rd_data",
              Ty.apply
                (Ty.path "array")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_rd_data_discriminant"
                    |))
                ]
                [ T ]);
            ("is_jal", T);
            ("is_lui", T)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols") [] [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32JalLuiCoreCols" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ T ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "imm"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_data" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ T ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "rd_data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_jal" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ T ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "is_jal"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_lui" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ T ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                                "is_lui"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols") [] [ T ].
      
      (* Clone *)
      Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols"
              []
              [ T ]
              [
                ("imm",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                              "imm"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rd_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                              "rd_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("is_jal",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                              "is_jal"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("is_lui",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                              "is_lui"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T.
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                              []
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                      []
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                        []
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                  []
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                            []
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                      []
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                                              []
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                  []
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols") [] [ T ] ]
          (Self T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols") [] [ T ] ]
          (Self T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols") [] [ T ].
      
      (* AlignedBorrow *)
      Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                    []
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "width" (width T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreCols_T.
    
    (* StructRecord
      {
        name := "Rv32JalLuiCoreAir";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("bus",
              Ty.path
                "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32JalLuiCoreAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir",
                                "bus"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir"
              []
              []
              [
                ("bus",
                  M.call_closure (|
                    Ty.path
                      "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path
                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir",
                              "bus"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir".
      
      (*
          fn width(&self) -> usize {
              Rv32JalLuiCoreCols::<F>::width()
          }
      *)
      Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir" ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                  []
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("width", InstanceField.Method (width F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
    
    Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir".
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::BaseAirWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [].
    End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_0_array_Usize_0_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_expr_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_ImmInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
      Definition Self (AB I : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir".
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local_core: &[AB::Var],
              from_pc: AB::Var,
          ) -> AdapterAirContext<AB::Expr, I> {
              let cols: &Rv32JalLuiCoreCols<AB::Var> = ( *local_core).borrow();
              let Rv32JalLuiCoreCols::<AB::Var> {
                  imm,
                  rd_data: rd,
                  is_jal,
                  is_lui,
              } = *cols;
      
              builder.assert_bool(is_lui);
              builder.assert_bool(is_jal);
              let is_valid = is_lui + is_jal;
              builder.assert_bool(is_valid.clone());
              builder.when(is_lui).assert_zero(rd[0]);
      
              for i in 0..RV32_REGISTER_NUM_LIMBS / 2 {
                  self.bus
                      .send_range(rd[i * 2], rd[i * 2 + 1])
                      .eval(builder, is_valid.clone());
              }
      
              // In case of JAL constrain that last limb has at most [last_limb_bits] bits
      
              let last_limb_bits = PC_BITS - RV32_CELL_BITS * (RV32_REGISTER_NUM_LIMBS - 1);
              let additional_bits = (last_limb_bits..RV32_CELL_BITS).fold(0, |acc, x| acc + (1 << x));
              let additional_bits = AB::F::from_canonical_u32(additional_bits);
              self.bus
                  .send_xor(rd[3], additional_bits, rd[3] + additional_bits)
                  .eval(builder, is_jal);
      
              let intermed_val = rd
                  .iter()
                  .skip(1)
                  .enumerate()
                  .fold(AB::Expr::ZERO, |acc, (i, &val)| {
                      acc + val * AB::Expr::from_canonical_u32(1 << (i * RV32_CELL_BITS))
                  });
      
              // Constrain that imm * 2^4 is the correct composition of intermed_val in case of LUI
              builder.when(is_lui).assert_eq(
                  intermed_val.clone(),
                  imm * AB::F::from_canonical_u32(1 << (12 - RV32_CELL_BITS)),
              );
      
              let intermed_val = rd[0] + intermed_val * AB::Expr::from_canonical_u32(1 << RV32_CELL_BITS);
              // Constrain that from_pc + DEFAULT_PC_STEP is the correct composition of intermed_val in
              // case of JAL
              builder.when(is_jal).assert_eq(
                  intermed_val,
                  from_pc + AB::F::from_canonical_u32(DEFAULT_PC_STEP),
              );
      
              let to_pc = from_pc + is_lui * AB::F::from_canonical_u32(DEFAULT_PC_STEP) + is_jal * imm;
      
              let expected_opcode = VmCoreAir::<AB, I>::expr_to_global_expr(
                  self,
                  is_lui * AB::F::from_canonical_u32(LUI as u32)
                      + is_jal * AB::F::from_canonical_u32(JAL as u32),
              );
      
              AdapterAirContext {
                  to_pc: Some(to_pc),
                  reads: [].into(),
                  writes: [rd.map(|x| x.into())].into(),
                  instruction: ImmInstruction {
                      is_valid,
                      opcode: expected_opcode,
                      immediate: imm.into(),
                  }
                  .into(),
              }
          }
      *)
      Definition eval (AB I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self AB I in
        match ε, τ, α with
        | [], [], [ self; builder; local_core; from_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir" ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local_core :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local_core
              |) in
            let from_pc :=
              M.alloc (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                from_pc
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_core |) |) |) ]
                    |)
                  |)
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                  M.deref (| M.read (| cols |) |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "imm"
                          |) in
                        let γ0_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "rd_data"
                          |) in
                        let γ0_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "is_jal"
                          |) in
                        let γ0_3 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                            "is_lui"
                          |) in
                        let imm :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_0
                          |) in
                        let rd :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            γ0_1
                          |) in
                        let is_jal :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_2
                          |) in
                        let is_lui :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            γ0_3
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "assert_bool",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (| is_lui |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "assert_bool",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (| is_jal |)
                              ]
                            |) in
                          let~ is_valid :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "add",
                                [],
                                []
                              |),
                              [ M.read (| is_lui |); M.read (| is_jal |) ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "assert_bool",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                [],
                                [],
                                "assert_zero",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.alloc (|
                                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                        []
                                        [ AB ],
                                      M.get_trait_method (|
                                        "p3_air::air::AirBuilder",
                                        AB,
                                        [],
                                        [],
                                        "when",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| builder |) |)
                                        |);
                                        M.read (| is_lui |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    rd,
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              M.use
                                (M.alloc (|
                                  Ty.tuple [],
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "into_iter",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.mkStructRecord
                                            "core::ops::range::Range"
                                            []
                                            [ Ty.path "usize" ]
                                            [
                                              ("start", Value.Integer IntegerKind.Usize 0);
                                              ("end_",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.div,
                                                  [
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                        Ty.path "usize"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.Usize 2
                                                  ]
                                                |))
                                            ]
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              γ
                                            |) in
                                          M.read (|
                                            M.loop (|
                                              Ty.tuple [],
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "next",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                iter
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.is_struct_tuple (|
                                                              γ,
                                                              "core::option::Option::None"
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let i :=
                                                            M.copy (| Ty.path "usize", γ0_0 |) in
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr"
                                                                    ],
                                                                  "eval",
                                                                  [],
                                                                  [
                                                                    AB;
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                                                      "send_range",
                                                                      [],
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr";
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var";
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir",
                                                                          "bus"
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          rd,
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              M.read (| i |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.SubPointer.get_array_field (|
                                                                          rd,
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.add,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.mul,
                                                                                [
                                                                                  M.read (| i |);
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    2
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    M.deref (|
                                                                      M.read (| builder |)
                                                                    |)
                                                                  |);
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "clone",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        is_valid
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |)
                                                          |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                            |)
                                          |)))
                                    ]
                                  |)
                                |))
                            |) in
                          let~ last_limb_bits : Ty.path "usize" :=
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.sub,
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::program::PC_BITS",
                                    Ty.path "usize"
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.mul,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "openvm_instructions::riscv::RV32_CELL_BITS",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [
                                        M.read (|
                                          get_constant (|
                                            "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                            Ty.path "usize"
                                          |)
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ additional_bits : Ty.path "u32" :=
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                [],
                                [],
                                "fold",
                                [],
                                [
                                  Ty.path "u32";
                                  Ty.function [ Ty.path "u32"; Ty.path "usize" ] (Ty.path "u32")
                                ]
                              |),
                              [
                                Value.mkStructRecord
                                  "core::ops::range::Range"
                                  []
                                  [ Ty.path "usize" ]
                                  [
                                    ("start", M.read (| last_limb_bits |));
                                    ("end_",
                                      M.read (|
                                        get_constant (|
                                          "openvm_instructions::riscv::RV32_CELL_BITS",
                                          Ty.path "usize"
                                        |)
                                      |))
                                  ];
                                Value.Integer IntegerKind.U32 0;
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0; α1 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "u32",
                                            M.alloc (| Ty.path "u32", α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let acc := M.copy (| Ty.path "u32", γ |) in
                                                  M.match_operator (|
                                                    Ty.path "u32",
                                                    M.alloc (| Ty.path "usize", α1 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let x :=
                                                            M.copy (| Ty.path "usize", γ |) in
                                                          M.call_closure (|
                                                            Ty.path "u32",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| acc |);
                                                              M.call_closure (|
                                                                Ty.path "u32",
                                                                BinOp.Wrap.shl,
                                                                [
                                                                  Value.Integer IntegerKind.U32 1;
                                                                  M.read (| x |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |) in
                          let~ additional_bits :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [ M.read (| additional_bits |) ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "eval",
                                [],
                                [
                                  AB;
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBusInteraction")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  M.get_associated_function (|
                                    Ty.path
                                      "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                                    "send_xor",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var";
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir",
                                        "bus"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_array_field (|
                                        rd,
                                        Value.Integer IntegerKind.Usize 3
                                      |)
                                    |);
                                    M.read (| additional_bits |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Add",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        ],
                                        "add",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            rd,
                                            Value.Integer IntegerKind.Usize 3
                                          |)
                                        |);
                                        M.read (| additional_bits |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (| is_jal |)
                              ]
                            |) in
                          let~ intermed_val :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::skip::Skip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ]
                                  ],
                                [],
                                [],
                                "fold",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.function
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ]
                                    ]
                                    (Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::skip::Skip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ],
                                    [],
                                    [],
                                    "enumerate",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ],
                                        [],
                                        [],
                                        "skip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ]
                                                ],
                                              M.pointer_coercion
                                                M.PointerCoercion.Unsize
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                  ])
                                                (Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                  ]),
                                              [ M.borrow (| Pointer.Kind.Ref, rd |) ]
                                            |)
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::ZERO",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0; α1 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let acc :=
                                                    M.copy (|
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      γ
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.alloc (|
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ]
                                                        ],
                                                      α1
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let i :=
                                                            M.copy (| Ty.path "usize", γ0_0 |) in
                                                          let γ0_1 := M.read (| γ0_1 |) in
                                                          let val :=
                                                            M.copy (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              γ0_1
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Add",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "add",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (| acc |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Var",
                                                                  [],
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr"
                                                                  ],
                                                                  "mul",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| val |);
                                                                  M.call_closure (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Expr",
                                                                    M.get_trait_method (|
                                                                      "p3_field::field::FieldAlgebra",
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr",
                                                                      [],
                                                                      [],
                                                                      "from_canonical_u32",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        Ty.path "u32",
                                                                        BinOp.Wrap.shl,
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.U32
                                                                            1;
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              M.read (| i |);
                                                                              M.read (|
                                                                                get_constant (|
                                                                                  "openvm_instructions::riscv::RV32_CELL_BITS",
                                                                                  Ty.path "usize"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                [],
                                [],
                                "assert_eq",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.alloc (|
                                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                        []
                                        [ AB ],
                                      M.get_trait_method (|
                                        "p3_air::air::AirBuilder",
                                        AB,
                                        [],
                                        [],
                                        "when",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| builder |) |)
                                        |);
                                        M.read (| is_lui |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, intermed_val |) ]
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| imm |);
                                    M.call_closure (|
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "F",
                                        [],
                                        [],
                                        "from_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.shl,
                                          [
                                            Value.Integer IntegerKind.U32 1;
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.sub,
                                              [
                                                Value.Integer IntegerKind.Usize 12;
                                                M.read (|
                                                  get_constant (|
                                                    "openvm_instructions::riscv::RV32_CELL_BITS",
                                                    Ty.path "usize"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ intermed_val :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_array_field (|
                                    rd,
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| intermed_val |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        [],
                                        [],
                                        "from_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.shl,
                                          [
                                            Value.Integer IntegerKind.U32 1;
                                            M.read (|
                                              get_constant (|
                                                "openvm_instructions::riscv::RV32_CELL_BITS",
                                                Ty.path "usize"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                [],
                                [],
                                "assert_eq",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.alloc (|
                                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                        []
                                        [ AB ],
                                      M.get_trait_method (|
                                        "p3_air::air::AirBuilder",
                                        AB,
                                        [],
                                        [],
                                        "when",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| builder |) |)
                                        |);
                                        M.read (| is_jal |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (| intermed_val |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| from_pc |);
                                    M.call_closure (|
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "F",
                                        [],
                                        [],
                                        "from_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "openvm_instructions::program::DEFAULT_PC_STEP",
                                            Ty.path "u32"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ to_pc :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "add",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| from_pc |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| is_lui |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            [],
                                            [],
                                            "from_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (|
                                              get_constant (|
                                                "openvm_instructions::program::DEFAULT_PC_STEP",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Mul",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                    "mul",
                                    [],
                                    []
                                  |),
                                  [ M.read (| is_jal |); M.read (| imm |) ]
                                |)
                              ]
                            |) in
                          let~ expected_opcode :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "openvm_circuit::arch::integration_api::VmCoreAir",
                                Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir",
                                [],
                                [ AB; I ],
                                "expr_to_global_expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| is_lui |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            [],
                                            [],
                                            "from_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [
                                            M.cast
                                              (Ty.path "u32")
                                              (Value.Integer IntegerKind.Usize 1)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (| is_jal |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            [],
                                            [],
                                            "from_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [
                                            M.cast
                                              (Ty.path "u32")
                                              (Value.Integer IntegerKind.Usize 0)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I
                              ],
                            Value.mkStructRecord
                              "openvm_circuit::arch::integration_api::AdapterAirContext"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I
                              ]
                              [
                                ("to_pc",
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                    [ M.read (| to_pc |) ]);
                                ("reads",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      I
                                      "Reads",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 0 ]
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 0 ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                          I
                                          "Reads"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [ Value.Array [] ]
                                  |));
                                ("writes",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      I
                                      "Writes",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                          I
                                          "Writes"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 4 ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ],
                                              "map",
                                              [],
                                              [
                                                Ty.function
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr");
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                            |),
                                            [
                                              M.read (| rd |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.alloc (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var",
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let x :=
                                                                  M.copy (|
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var",
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  M.get_trait_method (|
                                                                    "core::convert::Into",
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var",
                                                                    [],
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr"
                                                                    ],
                                                                    "into",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [ M.read (| x |) ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        ]
                                    ]
                                  |));
                                ("instruction",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      I
                                      "ProcessedInstruction",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::ImmInstruction")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                          I
                                          "ProcessedInstruction"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      Value.mkStructRecord
                                        "openvm_circuit::arch::integration_api::ImmInstruction"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                        [
                                          ("is_valid", M.read (| is_valid |));
                                          ("opcode", M.read (| expected_opcode |));
                                          ("immediate",
                                            M.call_closure (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var",
                                                [],
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr"
                                                ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [ M.read (| imm |) ]
                                            |))
                                        ]
                                    ]
                                  |))
                              ]
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn start_offset(&self) -> usize {
              Rv32JalLuiOpcode::CLASS_OFFSET
          }
      *)
      Definition start_offset
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self AB I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir" ],
                self
              |) in
            M.read (|
              get_constant (| "openvm_instructions::LocalOpcode::CLASS_OFFSET", Ty.path "usize" |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (AB I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB; I ]
          (Self AB I)
          (* Instance *)
          [
            ("eval", InstanceField.Method (eval AB I));
            ("start_offset", InstanceField.Method (start_offset AB I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_0_array_Usize_0_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_array_Usize_1_array_expr_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_ImmInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreAir.
    
    (* StructRecord
      {
        name := "Rv32JalLuiCoreRecord";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("rd_data",
              Ty.apply
                (Ty.path "array")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_rd_data_discriminant"
                    |))
                ]
                [ F ]);
            ("imm", F);
            ("is_jal", Ty.path "bool");
            ("is_lui", Ty.path "bool")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord") [] [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32JalLuiCoreRecord" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_data" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                            "rd_data"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ F ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                            "imm"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_jal" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                            "is_jal"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_lui" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "bool" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                                "is_lui"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord") [] [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord"
              []
              [ F ]
              [
                ("rd_data",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                              "rd_data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("imm",
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                              "imm"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("is_jal",
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "bool",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                              "is_jal"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("is_lui",
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "bool",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                              "is_lui"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord") [] [ F ].
        
        (* Serialize *)
        Definition serialize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Rv32JalLuiCoreRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.cast (Ty.path "usize") (Value.Bool false);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ F ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rd_data" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                                          "rd_data"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ F ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "imm" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                                          "imm"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "is_jal" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                                          "is_jal"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "is_lui" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                                          "is_lui"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
      End Impl_serde_ser_Serialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
      Module Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord") [] [ F ].
        
        (* Deserialize *)
        Definition deserialize
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                      []
                      [ F ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::jal_lui::core::_'1::deserialize::__Visitor")
                      []
                      [ F ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "Rv32JalLuiCoreRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::jal_lui::core::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::jal_lui::core::_'1::deserialize::__Visitor"
                    []
                    [ F ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                              []
                              [ F ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
      End Impl_serde_de_Deserialize_where_p3_field_field_Field_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreRecord_F.
    End underscore.
    
    
    (* StructRecord
      {
        name := "Rv32JalLuiCoreChip";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("air", Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir");
            ("bitwise_lookup_chip",
              Ty.apply
                (Ty.path
                  "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip_discriminant"
                    |))
                ]
                [])
          ];
      } *)
    
    Module Impl_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip".
      
      (*
          pub fn new(bitwise_lookup_chip: SharedBitwiseOperationLookupChip<RV32_CELL_BITS>) -> Self {
              Self {
                  air: Rv32JalLuiCoreAir {
                      bus: bitwise_lookup_chip.bus(),
                  },
                  bitwise_lookup_chip,
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ bitwise_lookup_chip ] =>
          ltac:(M.monadic
            (let bitwise_lookup_chip :=
              M.alloc (|
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                  [
                    M.unevaluated_const
                      (mk_str (| "openvm_rv32im_circuit_jal_lui_core_new_discriminant" |))
                  ]
                  [],
                bitwise_lookup_chip
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip"
              []
              []
              [
                ("air",
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir"
                    []
                    []
                    [
                      ("bus",
                        M.call_closure (|
                          Ty.path
                            "openvm_circuit_primitives::bitwise_op_lookup::bus::BitwiseOperationLookupBus",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [],
                            "bus",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, bitwise_lookup_chip |) ]
                        |))
                    ]);
                ("bitwise_lookup_chip", M.read (| bitwise_lookup_chip |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_expr_F_F_I_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip.
      Definition Self (F I : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip".
      
      (*     type Record = Rv32JalLuiCoreRecord<F>; *)
      Definition _Record (F I : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord") [] [ F ].
      
      (*     type Air = Rv32JalLuiCoreAir; *)
      Definition _Air (F I : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreAir".
      
      (*
          fn execute_instruction(
              &self,
              instruction: &Instruction<F>,
              from_pc: u32,
              _reads: I::Reads,
          ) -> Result<(AdapterRuntimeContext<F, I>, Self::Record)> {
              let local_opcode = Rv32JalLuiOpcode::from_usize(
                  instruction
                      .opcode
                      .local_opcode_idx(Rv32JalLuiOpcode::CLASS_OFFSET),
              );
              let imm = instruction.c;
      
              let signed_imm = match local_opcode {
                  JAL => {
                      // Note: signed_imm is a signed integer and imm is a field element
                      (imm + F::from_canonical_u32(1 << (RV_J_TYPE_IMM_BITS - 1))).as_canonical_u32()
                          as i32
                          - (1 << (RV_J_TYPE_IMM_BITS - 1))
                  }
                  LUI => imm.as_canonical_u32() as i32,
              };
              let (to_pc, rd_data) = run_jal_lui(local_opcode, from_pc, signed_imm);
      
              for i in 0..(RV32_REGISTER_NUM_LIMBS / 2) {
                  self.bitwise_lookup_chip
                      .request_range(rd_data[i * 2], rd_data[i * 2 + 1]);
              }
      
              if local_opcode == JAL {
                  let last_limb_bits = PC_BITS - RV32_CELL_BITS * (RV32_REGISTER_NUM_LIMBS - 1);
                  let additional_bits = (last_limb_bits..RV32_CELL_BITS).fold(0, |acc, x| acc + (1 << x));
                  self.bitwise_lookup_chip
                      .request_xor(rd_data[3], additional_bits);
              }
      
              let rd_data = rd_data.map(F::from_canonical_u32);
      
              let output = AdapterRuntimeContext {
                  to_pc: Some(to_pc),
                  writes: [rd_data].into(),
              };
      
              Ok((
                  output,
                  Rv32JalLuiCoreRecord {
                      rd_data,
                      imm,
                      is_jal: local_opcode == JAL,
                      is_lui: local_opcode == LUI,
                  },
              ))
          }
      *)
      Definition execute_instruction
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F I in
        match ε, τ, α with
        | [], [], [ self; instruction; from_pc; _reads ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip" ],
                self
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_pc := M.alloc (| Ty.path "u32", from_pc |) in
            let _reads :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterInterface"
                  []
                  [ F ]
                  I
                  "Reads",
                _reads
              |) in
            M.read (|
              let~ local_opcode :
                  Ty.path "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode" :=
                M.call_closure (|
                  Ty.path "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                  M.get_trait_method (|
                    "openvm_instructions::LocalOpcode",
                    Ty.path "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                    [],
                    [],
                    "from_usize",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.path "openvm_instructions::VmOpcode",
                        "local_opcode_idx",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| instruction |) |),
                            "openvm_instructions::instruction::Instruction",
                            "opcode"
                          |)
                        |);
                        M.read (|
                          get_constant (|
                            "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                            Ty.path "usize"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ imm : F :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| instruction |) |),
                    "openvm_instructions::instruction::Instruction",
                    "c"
                  |)
                |) in
              let~ signed_imm : Ty.path "i32" :=
                M.match_operator (|
                  Ty.path "i32",
                  local_opcode,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::JAL"
                          |) in
                        M.call_closure (|
                          Ty.path "i32",
                          BinOp.Wrap.sub,
                          [
                            M.cast
                              (Ty.path "i32")
                              (M.call_closure (|
                                Ty.path "u32",
                                M.get_trait_method (|
                                  "p3_field::field::PrimeField32",
                                  F,
                                  [],
                                  [],
                                  "as_canonical_u32",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      F,
                                      M.call_closure (|
                                        F,
                                        M.get_trait_method (|
                                          "core::ops::arith::Add",
                                          F,
                                          [],
                                          [ F ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| imm |);
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_canonical_u32",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.shl,
                                                [
                                                  Value.Integer IntegerKind.U32 1;
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.sub,
                                                    [
                                                      M.read (|
                                                        get_constant (|
                                                          "openvm_rv32im_circuit::adapters::RV_J_TYPE_IMM_BITS",
                                                          Ty.path "usize"
                                                        |)
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |));
                            M.call_closure (|
                              Ty.path "i32",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.I32 1;
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "openvm_rv32im_circuit::adapters::RV_J_TYPE_IMM_BITS",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::LUI"
                          |) in
                        M.cast
                          (Ty.path "i32")
                          (M.call_closure (|
                            Ty.path "u32",
                            M.get_trait_method (|
                              "p3_field::field::PrimeField32",
                              F,
                              [],
                              [],
                              "as_canonical_u32",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, imm |) ]
                          |))))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                          []
                          [ F; I ];
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                          []
                          [ F ]
                      ];
                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                            []
                            [ F; I ];
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.path "u32";
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.path "u32" ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.path "u32";
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.path "u32" ]
                        ],
                      M.get_function (|
                        "openvm_rv32im_circuit::jal_lui::core::run_jal_lui",
                        [],
                        []
                      |),
                      [ M.read (| local_opcode |); M.read (| from_pc |); M.read (| signed_imm |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let to_pc := M.copy (| Ty.path "u32", γ0_0 |) in
                        let rd_data :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ Ty.path "u32" ],
                            γ0_1
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              M.use
                                (M.alloc (|
                                  Ty.tuple [],
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "usize" ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            []
                                            [ Ty.path "usize" ],
                                          [],
                                          [],
                                          "into_iter",
                                          [],
                                          []
                                        |),
                                        [
                                          Value.mkStructRecord
                                            "core::ops::range::Range"
                                            []
                                            [ Ty.path "usize" ]
                                            [
                                              ("start", Value.Integer IntegerKind.Usize 0);
                                              ("end_",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.div,
                                                  [
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                        Ty.path "usize"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.Usize 2
                                                  ]
                                                |))
                                            ]
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              γ
                                            |) in
                                          M.read (|
                                            M.loop (|
                                              Ty.tuple [],
                                              ltac:(M.monadic
                                                (let~ _ : Ty.tuple [] :=
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          [],
                                                          "next",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                iter
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.is_struct_tuple (|
                                                              γ,
                                                              "core::option::Option::None"
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let i :=
                                                            M.copy (| Ty.path "usize", γ0_0 |) in
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        8
                                                                    ]
                                                                    [],
                                                                  "request_range",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip",
                                                                      "bitwise_lookup_chip"
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      rd_data,
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.mul,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      rd_data,
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.mul,
                                                                            [
                                                                              M.read (| i |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |)
                                                          |)))
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                            |)
                                          |)))
                                    ]
                                  |)
                                |))
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                              [],
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                              ],
                                              "eq",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, local_opcode |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                  Value.StructTuple
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::JAL"
                                                    []
                                                    []
                                                    []
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ last_limb_bits : Ty.path "usize" :=
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.sub,
                                          [
                                            M.read (|
                                              get_constant (|
                                                "openvm_instructions::program::PC_BITS",
                                                Ty.path "usize"
                                              |)
                                            |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.mul,
                                              [
                                                M.read (|
                                                  get_constant (|
                                                    "openvm_instructions::riscv::RV32_CELL_BITS",
                                                    Ty.path "usize"
                                                  |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_instructions::riscv::RV32_REGISTER_NUM_LIMBS",
                                                        Ty.path "usize"
                                                      |)
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |) in
                                      let~ additional_bits : Ty.path "u32" :=
                                        M.call_closure (|
                                          Ty.path "u32",
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            [],
                                            [],
                                            "fold",
                                            [],
                                            [
                                              Ty.path "u32";
                                              Ty.function
                                                [ Ty.path "u32"; Ty.path "usize" ]
                                                (Ty.path "u32")
                                            ]
                                          |),
                                          [
                                            Value.mkStructRecord
                                              "core::ops::range::Range"
                                              []
                                              [ Ty.path "usize" ]
                                              [
                                                ("start", M.read (| last_limb_bits |));
                                                ("end_",
                                                  M.read (|
                                                    get_constant (|
                                                      "openvm_instructions::riscv::RV32_CELL_BITS",
                                                      Ty.path "usize"
                                                    |)
                                                  |))
                                              ];
                                            Value.Integer IntegerKind.U32 0;
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0; α1 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.path "u32",
                                                        M.alloc (| Ty.path "u32", α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let acc :=
                                                                M.copy (| Ty.path "u32", γ |) in
                                                              M.match_operator (|
                                                                Ty.path "u32",
                                                                M.alloc (| Ty.path "usize", α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let x :=
                                                                        M.copy (|
                                                                          Ty.path "usize",
                                                                          γ
                                                                        |) in
                                                                      M.call_closure (|
                                                                        Ty.path "u32",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.read (| acc |);
                                                                          M.call_closure (|
                                                                            Ty.path "u32",
                                                                            BinOp.Wrap.shl,
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                1;
                                                                              M.read (| x |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |) in
                                      let~ _ : Ty.path "u32" :=
                                        M.call_closure (|
                                          Ty.path "u32",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::bitwise_op_lookup::SharedBitwiseOperationLookupChip")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [],
                                            "request_xor",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip",
                                                "bitwise_lookup_chip"
                                              |)
                                            |);
                                            M.read (|
                                              M.SubPointer.get_array_field (|
                                                rd_data,
                                                Value.Integer IntegerKind.Usize 3
                                              |)
                                            |);
                                            M.read (| additional_bits |)
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ rd_data :
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ Ty.path "u32" ],
                                "map",
                                [],
                                [ Ty.function [ Ty.path "u32" ] F; F ]
                              |),
                              [
                                M.read (| rd_data |);
                                M.get_trait_method (|
                                  "p3_field::field::FieldAlgebra",
                                  F,
                                  [],
                                  [],
                                  "from_canonical_u32",
                                  [],
                                  []
                                |)
                              ]
                            |) in
                          let~ output :
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                []
                                [ F; I ] :=
                            Value.mkStructRecord
                              "openvm_circuit::arch::integration_api::AdapterRuntimeContext"
                              []
                              [ F; I ]
                              [
                                ("to_pc",
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    []
                                    [ Ty.path "u32" ]
                                    [ M.read (| to_pc |) ]);
                                ("writes",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                      []
                                      [ F ]
                                      I
                                      "Writes",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ]
                                        ],
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                          []
                                          [ F ]
                                          I
                                          "Writes"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [ Value.Array [ M.read (| rd_data |) ] ]
                                  |))
                              ] in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                      []
                                      [ F; I ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            Value.StructTuple
                              "core::result::Result::Ok"
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                      []
                                      [ F; I ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ]
                              [
                                Value.Tuple
                                  [
                                    M.read (| output |);
                                    Value.mkStructRecord
                                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord"
                                      []
                                      [ F ]
                                      [
                                        ("rd_data", M.read (| rd_data |));
                                        ("imm", M.read (| imm |));
                                        ("is_jal",
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                              [],
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                              ],
                                              "eq",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, local_opcode |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                  Value.StructTuple
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::JAL"
                                                    []
                                                    []
                                                    []
                                                |)
                                              |)
                                            ]
                                          |));
                                        ("is_lui",
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                              [],
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                              ],
                                              "eq",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.Ref, local_opcode |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                  Value.StructTuple
                                                    "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::LUI"
                                                    []
                                                    []
                                                    []
                                                |)
                                              |)
                                            ]
                                          |))
                                      ]
                                  ]
                              ]
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_opcode_name(&self, opcode: usize) -> String {
              format!(
                  "{:?}",
                  Rv32JalLuiOpcode::from_usize(opcode - Rv32JalLuiOpcode::CLASS_OFFSET)
              )
          }
      *)
      Definition get_opcode_name
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F I in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip" ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode"
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                    M.call_closure (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                      M.get_trait_method (|
                                                        "openvm_instructions::LocalOpcode",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
                                                        [],
                                                        [],
                                                        "from_usize",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| opcode |);
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                                                Ty.path "usize"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
              let core_cols: &mut Rv32JalLuiCoreCols<F> = row_slice.borrow_mut();
              core_cols.rd_data = record.rd_data;
              core_cols.imm = record.imm;
              core_cols.is_jal = F::from_bool(record.is_jal);
              core_cols.is_lui = F::from_bool(record.is_lui);
          }
      *)
      Definition generate_trace_row
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F I in
        match ε, τ, α with
        | [], [], [ self; row_slice; record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip" ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmCoreChip"
                  []
                  [ F; I ]
                  (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip")
                  "Record",
                record
              |) in
            M.read (|
              let~ core_cols :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                        []
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols")
                            []
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                    "rd_data"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                      "rd_data"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                    "imm"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                      "imm"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                    "is_jal"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          record,
                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                          "is_jal"
                        |)
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| core_cols |) |),
                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreCols",
                    "is_lui"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          record,
                          "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreRecord",
                          "is_lui"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air (F I : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip" ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::jal_lui::core::Rv32JalLuiCoreChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; I ]
          (Self F I)
          (* Instance *)
          [
            ("Record", InstanceField.Ty (_Record F I));
            ("Air", InstanceField.Ty (_Air F I));
            ("execute_instruction", InstanceField.Method (execute_instruction F I));
            ("get_opcode_name", InstanceField.Method (get_opcode_name F I));
            ("generate_trace_row", InstanceField.Method (generate_trace_row F I));
            ("air", InstanceField.Method (air F I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_array_Usize_1_array_expr_F_F_I_for_openvm_rv32im_circuit_jal_lui_core_Rv32JalLuiCoreChip.
    
    (*
    pub(super) fn run_jal_lui(
        opcode: Rv32JalLuiOpcode,
        pc: u32,
        imm: i32,
    ) -> (u32, [u32; RV32_REGISTER_NUM_LIMBS]) {
        match opcode {
            JAL => {
                let rd_data = array::from_fn(|i| {
                    ((pc + DEFAULT_PC_STEP) >> (8 * i)) & ((1 << RV32_CELL_BITS) - 1)
                });
                let next_pc = pc as i32 + imm;
                assert!(next_pc >= 0);
                (next_pc as u32, rd_data)
            }
            LUI => {
                let imm = imm as u32;
                let rd = imm << 12;
                let rd_data =
                    array::from_fn(|i| (rd >> (RV32_CELL_BITS * i)) & ((1 << RV32_CELL_BITS) - 1));
                (pc + DEFAULT_PC_STEP, rd_data)
            }
        }
    }
    *)
    Definition run_jal_lui (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ opcode; pc; imm ] =>
        ltac:(M.monadic
          (let opcode :=
            M.alloc (|
              Ty.path "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode",
              opcode
            |) in
          let pc := M.alloc (| Ty.path "u32", pc |) in
          let imm := M.alloc (| Ty.path "i32", imm |) in
          M.match_operator (|
            Ty.tuple
              [
                Ty.path "u32";
                Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ Ty.path "u32" ]
              ],
            opcode,
            [
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::JAL"
                    |) in
                  M.read (|
                    let~ rd_data :
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.path "u32" ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.path "u32" ],
                        M.get_function (|
                          "core::array::from_fn",
                          [ Value.Integer IntegerKind.Usize 4 ],
                          [ Ty.path "u32"; Ty.function [ Ty.path "usize" ] (Ty.path "u32") ]
                        |),
                        [
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "u32",
                                      M.alloc (| Ty.path "usize", α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| Ty.path "usize", γ |) in
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.bit_and,
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shr,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.read (| pc |);
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::program::DEFAULT_PC_STEP",
                                                            Ty.path "u32"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        Value.Integer IntegerKind.Usize 8;
                                                        M.read (| i |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        Value.Integer IntegerKind.U32 1;
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::riscv::RV32_CELL_BITS",
                                                            Ty.path "usize"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.U32 1
                                                  ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |) in
                    let~ next_pc : Ty.path "i32" :=
                      M.call_closure (|
                        Ty.path "i32",
                        BinOp.Wrap.add,
                        [ M.cast (Ty.path "i32") (M.read (| pc |)); M.read (| imm |) ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    UnOp.not (|
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ge,
                                        [ M.read (| next_pc |); Value.Integer IntegerKind.I32 0 ]
                                      |)
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic", [], [] |),
                                  [ mk_str (| "assertion failed: next_pc >= 0" |) ]
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.path "u32";
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.path "u32" ]
                        ],
                      Value.Tuple
                        [ M.cast (Ty.path "u32") (M.read (| next_pc |)); M.read (| rd_data |) ]
                    |)
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let _ :=
                    M.is_struct_tuple (|
                      γ,
                      "openvm_rv32im_transpiler::instructions::Rv32JalLuiOpcode::LUI"
                    |) in
                  M.read (|
                    let~ imm : Ty.path "u32" := M.cast (Ty.path "u32") (M.read (| imm |)) in
                    let~ rd : Ty.path "u32" :=
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.shl,
                        [ M.read (| imm |); Value.Integer IntegerKind.I32 12 ]
                      |) in
                    let~ rd_data :
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.path "u32" ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [ Ty.path "u32" ],
                        M.get_function (|
                          "core::array::from_fn",
                          [ Value.Integer IntegerKind.Usize 4 ],
                          [ Ty.path "u32"; Ty.function [ Ty.path "usize" ] (Ty.path "u32") ]
                        |),
                        [
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "u32",
                                      M.alloc (| Ty.path "usize", α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| Ty.path "usize", γ |) in
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.bit_and,
                                              [
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.shr,
                                                  [
                                                    M.read (| rd |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::riscv::RV32_CELL_BITS",
                                                            Ty.path "usize"
                                                          |)
                                                        |);
                                                        M.read (| i |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  BinOp.Wrap.sub,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        Value.Integer IntegerKind.U32 1;
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_instructions::riscv::RV32_CELL_BITS",
                                                            Ty.path "usize"
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.U32 1
                                                  ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |) in
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.path "u32";
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.path "u32" ]
                        ],
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.add,
                            [
                              M.read (| pc |);
                              M.read (|
                                get_constant (|
                                  "openvm_instructions::program::DEFAULT_PC_STEP",
                                  Ty.path "u32"
                                |)
                              |)
                            ]
                          |);
                          M.read (| rd_data |)
                        ]
                    |)
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_jal_lui :
      M.IsFunction.C "openvm_rv32im_circuit::jal_lui::core::run_jal_lui" run_jal_lui.
    Admitted.
    Global Typeclasses Opaque run_jal_lui.
  End core.
End jal_lui.
