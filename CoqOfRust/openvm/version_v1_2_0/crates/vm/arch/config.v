(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module config.
    Definition value_DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 3 |))).
    
    Global Instance Instance_IsConstant_value_DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE :
      M.IsFunction.C
        "openvm_circuit::arch::config::DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE"
        value_DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE.
    Admitted.
    Global Typeclasses Opaque value_DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE.
    
    Definition value_POSEIDON2_WIDTH (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 16 |))).
    
    Global Instance Instance_IsConstant_value_POSEIDON2_WIDTH :
      M.IsFunction.C "openvm_circuit::arch::config::POSEIDON2_WIDTH" value_POSEIDON2_WIDTH.
    Admitted.
    Global Typeclasses Opaque value_POSEIDON2_WIDTH.
    
    (*
    pub fn vm_poseidon2_config<F: PrimeField32>() -> Poseidon2Config<F> {
        Poseidon2Config::default()
    }
    *)
    Definition vm_poseidon2_config (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.apply (Ty.path "openvm_poseidon2_air::config::Poseidon2Config") [] [ F ],
            M.get_trait_method (|
              "core::default::Default",
              Ty.apply (Ty.path "openvm_poseidon2_air::config::Poseidon2Config") [] [ F ],
              [],
              [],
              "default",
              [],
              []
            |),
            []
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_vm_poseidon2_config :
      M.IsFunction.C "openvm_circuit::arch::config::vm_poseidon2_config" vm_poseidon2_config.
    Admitted.
    Global Typeclasses Opaque vm_poseidon2_config.
    
    (* Trait *)
    (* Empty module 'VmConfig' *)
    
    (* StructRecord
      {
        name := "MemoryConfig";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("as_height", Ty.path "usize");
            ("as_offset", Ty.path "u32");
            ("pointer_max_bits", Ty.path "usize");
            ("clk_max_bits", Ty.path "usize");
            ("decomp", Ty.path "usize");
            ("max_access_adapter_n", Ty.path "usize");
            ("access_capacity", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_config_MemoryConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 7 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "as_height" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "as_offset" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "pointer_max_bits" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "clk_max_bits" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "decomp" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "max_access_adapter_n" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "access_capacity" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::MemoryConfig",
                                            "as_height"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::MemoryConfig",
                                            "as_offset"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::MemoryConfig",
                                            "pointer_max_bits"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::MemoryConfig",
                                            "clk_max_bits"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::MemoryConfig",
                                            "decomp"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::MemoryConfig",
                                            "max_access_adapter_n"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::arch::config::MemoryConfig",
                                                "access_capacity"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryConfig" |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_config_MemoryConfig.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_openvm_circuit_arch_config_MemoryConfig.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "MemoryConfig" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.cast
                                                                (Ty.path "usize")
                                                                (Value.Bool false);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "as_height" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "as_height"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "u32" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "as_offset" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "as_offset"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "pointer_max_bits" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "pointer_max_bits"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "clk_max_bits" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "clk_max_bits"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "decomp" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "decomp"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "max_access_adapter_n" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "max_access_adapter_n"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "access_capacity" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "access_capacity"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_circuit_arch_config_MemoryConfig.
      Module Impl_serde_de_Deserialize_for_openvm_circuit_arch_config_MemoryConfig.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_circuit::arch::config::MemoryConfig";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_circuit::arch::config::_'1::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "MemoryConfig" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::config::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::config::_'1::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_circuit_arch_config_MemoryConfig.
      Module Impl_serde_ser_Serialize_for_openvm_circuit_arch_config_SystemConfig.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "SystemConfig" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.cast (Ty.path "usize") (Value.Bool false);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "max_constraint_degree" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::SystemConfig",
                                          "max_constraint_degree"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "continuation_enabled" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::SystemConfig",
                                          "continuation_enabled"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "memory_config" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::SystemConfig",
                                          "memory_config"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "num_public_values" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::SystemConfig",
                                          "num_public_values"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "bool" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "profiling" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::SystemConfig",
                                          "profiling"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_circuit_arch_config_SystemConfig.
      Module Impl_serde_de_Deserialize_for_openvm_circuit_arch_config_SystemConfig.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_circuit::arch::config::SystemConfig";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_circuit::arch::config::_'3::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "SystemConfig" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::config::_'3::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::config::_'3::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_circuit::arch::config::SystemConfig" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_circuit_arch_config_SystemConfig.
      Module Impl_serde_ser_Serialize_for_openvm_circuit_arch_config_SystemTraceHeights.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "SystemTraceHeights" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.cast (Ty.path "usize") (Value.Bool false);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryTraceHeights"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "memory" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::config::SystemTraceHeights",
                                          "memory"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_circuit_arch_config_SystemTraceHeights.
      Module Impl_serde_de_Deserialize_for_openvm_circuit_arch_config_SystemTraceHeights.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_circuit::arch::config::SystemTraceHeights";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_circuit::arch::config::_'5::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "SystemTraceHeights" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::config::_'5::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::config::_'5::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_circuit_arch_config_SystemTraceHeights.
    End underscore.
    
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_config_MemoryConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_circuit::arch::config::MemoryConfig",
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "openvm_circuit::arch::config::MemoryConfig",
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_config_MemoryConfig.
    
    Module Impl_openvm_circuit_arch_config_MemoryConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
      
      (* new *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [],
            [],
            [
              as_height;
              as_offset;
              pointer_max_bits;
              clk_max_bits;
              decomp;
              max_access_adapter_n;
              access_capacity
            ] =>
          ltac:(M.monadic
            (let as_height := M.alloc (| Ty.path "usize", as_height |) in
            let as_offset := M.alloc (| Ty.path "u32", as_offset |) in
            let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
            let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
            let decomp := M.alloc (| Ty.path "usize", decomp |) in
            let max_access_adapter_n := M.alloc (| Ty.path "usize", max_access_adapter_n |) in
            let access_capacity := M.alloc (| Ty.path "usize", access_capacity |) in
            Value.mkStructRecord
              "openvm_circuit::arch::config::MemoryConfig"
              []
              []
              [
                ("as_height", M.read (| as_height |));
                ("as_offset", M.read (| as_offset |));
                ("pointer_max_bits", M.read (| pointer_max_bits |));
                ("clk_max_bits", M.read (| clk_max_bits |));
                ("decomp", M.read (| decomp |));
                ("max_access_adapter_n", M.read (| max_access_adapter_n |));
                ("access_capacity", M.read (| access_capacity |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_circuit_arch_config_MemoryConfig.
    
    Module Impl_core_marker_Copy_for_openvm_circuit_arch_config_MemoryConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_circuit_arch_config_MemoryConfig.
    
    Module Impl_core_default_Default_for_openvm_circuit_arch_config_MemoryConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
      
      (*
          fn default() -> Self {
              Self::new(3, 1, 29, 29, 17, 32, 1 << 24)
          }
      *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "openvm_circuit::arch::config::MemoryConfig",
              M.get_associated_function (|
                Ty.path "openvm_circuit::arch::config::MemoryConfig",
                "new",
                [],
                []
              |),
              [
                Value.Integer IntegerKind.Usize 3;
                Value.Integer IntegerKind.U32 1;
                Value.Integer IntegerKind.Usize 29;
                Value.Integer IntegerKind.Usize 29;
                Value.Integer IntegerKind.Usize 17;
                Value.Integer IntegerKind.Usize 32;
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.shl,
                  [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.I32 24 ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_openvm_circuit_arch_config_MemoryConfig.
    
    (* StructRecord
      {
        name := "SystemConfig";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("max_constraint_degree", Ty.path "usize");
            ("continuation_enabled", Ty.path "bool");
            ("memory_config", Ty.path "openvm_circuit::arch::config::MemoryConfig");
            ("num_public_values", Ty.path "usize");
            ("profiling", Ty.path "bool");
            ("segmentation_strategy",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_config_SystemConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 6 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "max_constraint_degree" |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "continuation_enabled" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "memory_config" |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "num_public_values" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "profiling" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "segmentation_strategy" |) |)
                            |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 6 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::SystemConfig",
                                            "max_constraint_degree"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::SystemConfig",
                                            "continuation_enabled"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::SystemConfig",
                                            "memory_config"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::SystemConfig",
                                            "num_public_values"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::config::SystemConfig",
                                            "profiling"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.dyn
                                                  [
                                                    ("openvm_circuit::arch::segment::SegmentationStrategy::Trait",
                                                      [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.dyn
                                                      [
                                                        ("openvm_circuit::arch::segment::SegmentationStrategy::Trait",
                                                          [])
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::arch::config::SystemConfig",
                                                "segmentation_strategy"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SystemConfig" |) |) |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 6 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_config_SystemConfig.
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_config_SystemConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::config::SystemConfig"
              []
              []
              [
                ("max_constraint_degree",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "max_constraint_degree"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("continuation_enabled",
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "bool",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "continuation_enabled"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("memory_config",
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::config::MemoryConfig",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::arch::config::MemoryConfig",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "memory_config"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("num_public_values",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "num_public_values"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("profiling",
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "bool",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "profiling"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("segmentation_strategy",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn
                          [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn
                            [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn
                            [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn
                              [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", [])
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn
                                [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", [])
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::config::SystemConfig",
                                  "segmentation_strategy"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_config_SystemConfig.
    
    
    
    (*
    pub fn get_default_segmentation_strategy() -> Arc<DefaultSegmentationStrategy> {
        Arc::new(DefaultSegmentationStrategy::default())
    }
    *)
    Definition get_default_segmentation_strategy
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (M.call_closure (|
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              []
              [
                Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                Ty.path "alloc::alloc::Global"
              ],
            M.get_associated_function (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                  Ty.path "alloc::alloc::Global"
                ],
              "new",
              [],
              []
            |),
            [
              M.call_closure (|
                Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy",
                M.get_trait_method (|
                  "core::default::Default",
                  Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy",
                  [],
                  [],
                  "default",
                  [],
                  []
                |),
                []
              |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_get_default_segmentation_strategy :
      M.IsFunction.C
        "openvm_circuit::arch::config::get_default_segmentation_strategy"
        get_default_segmentation_strategy.
    Admitted.
    Global Typeclasses Opaque get_default_segmentation_strategy.
    
    (* StructRecord
      {
        name := "SystemTraceHeights";
        const_params := [];
        ty_params := [];
        fields :=
          [ ("memory", Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights") ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_config_SystemTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "SystemTraceHeights" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::config::SystemTraceHeights",
                                "memory"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_config_SystemTraceHeights.
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_config_SystemTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::config::SystemTraceHeights"
              []
              []
              [
                ("memory",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::SystemTraceHeights",
                              "memory"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_config_SystemTraceHeights.
    
    
    
    Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_config_SystemTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_config_SystemTraceHeights.
    
    Module Impl_core_cmp_PartialEq_openvm_circuit_arch_config_SystemTraceHeights_for_openvm_circuit_arch_config_SystemTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                other
              |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                [],
                [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::config::SystemTraceHeights",
                    "memory"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "openvm_circuit::arch::config::SystemTraceHeights",
                    "memory"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_openvm_circuit_arch_config_SystemTraceHeights_for_openvm_circuit_arch_config_SystemTraceHeights.
    
    Module Impl_core_cmp_Eq_for_openvm_circuit_arch_config_SystemTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_openvm_circuit_arch_config_SystemTraceHeights.
    
    Module Impl_openvm_circuit_arch_config_SystemConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
      
      (*
          pub fn new(
              max_constraint_degree: usize,
              memory_config: MemoryConfig,
              num_public_values: usize,
          ) -> Self {
              let segmentation_strategy = get_default_segmentation_strategy();
              assert!(
                  memory_config.clk_max_bits <= 29,
                  "Timestamp max bits must be <= 29 for LessThan to work in 31-bit field"
              );
              Self {
                  max_constraint_degree,
                  continuation_enabled: false,
                  memory_config,
                  num_public_values,
                  segmentation_strategy,
                  profiling: false,
              }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ max_constraint_degree; memory_config; num_public_values ] =>
          ltac:(M.monadic
            (let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
            let memory_config :=
              M.alloc (| Ty.path "openvm_circuit::arch::config::MemoryConfig", memory_config |) in
            let num_public_values := M.alloc (| Ty.path "usize", num_public_values |) in
            M.read (|
              let~ segmentation_strategy :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_function (|
                    "openvm_circuit::arch::config::get_default_segmentation_strategy",
                    [],
                    []
                  |),
                  []
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.le,
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        memory_config,
                                        "openvm_circuit::arch::config::MemoryConfig",
                                        "clk_max_bits"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 29
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic_fmt", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                          Value.Array
                                            [
                                              mk_str (|
                                                "Timestamp max bits must be <= 29 for LessThan to work in 31-bit field"
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.path "openvm_circuit::arch::config::SystemConfig",
                Value.mkStructRecord
                  "openvm_circuit::arch::config::SystemConfig"
                  []
                  []
                  [
                    ("max_constraint_degree", M.read (| max_constraint_degree |));
                    ("continuation_enabled", Value.Bool false);
                    ("memory_config", M.read (| memory_config |));
                    ("num_public_values", M.read (| num_public_values |));
                    ("segmentation_strategy",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn
                              [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", [])
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn
                                [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", [])
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [ M.read (| segmentation_strategy |) ]
                      |));
                    ("profiling", Value.Bool false)
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn with_max_constraint_degree(mut self, max_constraint_degree: usize) -> Self {
              self.max_constraint_degree = max_constraint_degree;
              self
          }
      *)
      Definition with_max_constraint_degree
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; max_constraint_degree ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "max_constraint_degree"
                  |),
                  M.read (| max_constraint_degree |)
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_with_max_constraint_degree :
        M.IsAssociatedFunction.C Self "with_max_constraint_degree" with_max_constraint_degree.
      Admitted.
      Global Typeclasses Opaque with_max_constraint_degree.
      
      (*
          pub fn with_continuations(mut self) -> Self {
              self.continuation_enabled = true;
              self
          }
      *)
      Definition with_continuations (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "continuation_enabled"
                  |),
                  Value.Bool true
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_with_continuations :
        M.IsAssociatedFunction.C Self "with_continuations" with_continuations.
      Admitted.
      Global Typeclasses Opaque with_continuations.
      
      (*
          pub fn without_continuations(mut self) -> Self {
              self.continuation_enabled = false;
              self
          }
      *)
      Definition without_continuations (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "continuation_enabled"
                  |),
                  Value.Bool false
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_without_continuations :
        M.IsAssociatedFunction.C Self "without_continuations" without_continuations.
      Admitted.
      Global Typeclasses Opaque without_continuations.
      
      (*
          pub fn with_public_values(mut self, num_public_values: usize) -> Self {
              self.num_public_values = num_public_values;
              self
          }
      *)
      Definition with_public_values (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; num_public_values ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            let num_public_values := M.alloc (| Ty.path "usize", num_public_values |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "num_public_values"
                  |),
                  M.read (| num_public_values |)
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_with_public_values :
        M.IsAssociatedFunction.C Self "with_public_values" with_public_values.
      Admitted.
      Global Typeclasses Opaque with_public_values.
      
      (*
          pub fn with_max_segment_len(mut self, max_segment_len: usize) -> Self {
              self.segmentation_strategy = Arc::new(
                  DefaultSegmentationStrategy::new_with_max_segment_len(max_segment_len),
              );
              self
          }
      *)
      Definition with_max_segment_len (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; max_segment_len ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            let max_segment_len := M.alloc (| Ty.path "usize", max_segment_len |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "segmentation_strategy"
                  |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn
                          [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn
                            [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy",
                            M.get_associated_function (|
                              Ty.path "openvm_circuit::arch::segment::DefaultSegmentationStrategy",
                              "new_with_max_segment_len",
                              [],
                              []
                            |),
                            [ M.read (| max_segment_len |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_with_max_segment_len :
        M.IsAssociatedFunction.C Self "with_max_segment_len" with_max_segment_len.
      Admitted.
      Global Typeclasses Opaque with_max_segment_len.
      
      (*
          pub fn set_segmentation_strategy(&mut self, strategy: Arc<dyn SegmentationStrategy>) {
              self.segmentation_strategy = strategy;
          }
      *)
      Definition set_segmentation_strategy
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; strategy ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            let strategy :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                strategy
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::config::SystemConfig",
                    "segmentation_strategy"
                  |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn
                          [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn
                            [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn
                            [ ("openvm_circuit::arch::segment::SegmentationStrategy::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [ M.read (| strategy |) ]
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_segmentation_strategy :
        M.IsAssociatedFunction.C Self "set_segmentation_strategy" set_segmentation_strategy.
      Admitted.
      Global Typeclasses Opaque set_segmentation_strategy.
      
      (*
          pub fn with_profiling(mut self) -> Self {
              self.profiling = true;
              self
          }
      *)
      Definition with_profiling (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "profiling"
                  |),
                  Value.Bool true
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_with_profiling :
        M.IsAssociatedFunction.C Self "with_profiling" with_profiling.
      Admitted.
      Global Typeclasses Opaque with_profiling.
      
      (*
          pub fn without_profiling(mut self) -> Self {
              self.profiling = false;
              self
          }
      *)
      Definition without_profiling (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", self |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::arch::config::SystemConfig",
                    "profiling"
                  |),
                  Value.Bool false
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_without_profiling :
        M.IsAssociatedFunction.C Self "without_profiling" without_profiling.
      Admitted.
      Global Typeclasses Opaque without_profiling.
      
      (*
          pub fn has_public_values_chip(&self) -> bool {
              !self.continuation_enabled && self.num_public_values > 0
          }
      *)
      Definition has_public_values_chip (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            LogicalOp.and (|
              UnOp.not (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::config::SystemConfig",
                    "continuation_enabled"
                  |)
                |)
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  BinOp.gt,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::config::SystemConfig",
                        "num_public_values"
                      |)
                    |);
                    Value.Integer IntegerKind.Usize 0
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_has_public_values_chip :
        M.IsAssociatedFunction.C Self "has_public_values_chip" has_public_values_chip.
      Admitted.
      Global Typeclasses Opaque has_public_values_chip.
      
      (*
          pub fn memory_boundary_air_id(&self) -> usize {
              let mut ret = PUBLIC_VALUES_AIR_ID;
              if self.has_public_values_chip() {
                  ret += 1;
              }
              ret += BOUNDARY_AIR_OFFSET;
              ret
          }
      *)
      Definition memory_boundary_air_id (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            M.read (|
              let~ ret : Ty.path "usize" :=
                M.read (|
                  get_constant (|
                    "openvm_circuit::arch::extensions::PUBLIC_VALUES_AIR_ID",
                    Ty.path "usize"
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                                  "has_public_values_chip",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            let β := ret in
                            M.write (|
                              β,
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                let β := ret in
                M.write (|
                  β,
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [
                      M.read (| β |);
                      M.read (|
                        get_constant (|
                          "openvm_circuit::system::memory::controller::BOUNDARY_AIR_OFFSET",
                          Ty.path "usize"
                        |)
                      |)
                    ]
                  |)
                |) in
              ret
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_boundary_air_id :
        M.IsAssociatedFunction.C Self "memory_boundary_air_id" memory_boundary_air_id.
      Admitted.
      Global Typeclasses Opaque memory_boundary_air_id.
    End Impl_openvm_circuit_arch_config_SystemConfig.
    
    Module Impl_core_default_Default_for_openvm_circuit_arch_config_SystemConfig.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
      
      (*
          fn default() -> Self {
              Self::new(
                  DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE,
                  Default::default(),
                  DEFAULT_MAX_NUM_PUBLIC_VALUES,
              )
          }
      *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "openvm_circuit::arch::config::SystemConfig",
              M.get_associated_function (|
                Ty.path "openvm_circuit::arch::config::SystemConfig",
                "new",
                [],
                []
              |),
              [
                M.read (|
                  get_constant (|
                    "openvm_circuit::arch::config::DEFAULT_POSEIDON2_MAX_CONSTRAINT_DEGREE",
                    Ty.path "usize"
                  |)
                |);
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::config::MemoryConfig",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_circuit::arch::config::MemoryConfig",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |);
                M.read (|
                  get_constant (|
                    "openvm_instructions::program::DEFAULT_MAX_NUM_PUBLIC_VALUES",
                    Ty.path "usize"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_openvm_circuit_arch_config_SystemConfig.
    
    Module Impl_openvm_circuit_arch_config_SystemTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::SystemTraceHeights".
      
      (*
          pub fn round_to_next_power_of_two(&mut self) {
              self.memory.round_to_next_power_of_two();
          }
      *)
      Definition round_to_next_power_of_two
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    "round_to_next_power_of_two",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::config::SystemTraceHeights",
                        "memory"
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_round_to_next_power_of_two :
        M.IsAssociatedFunction.C Self "round_to_next_power_of_two" round_to_next_power_of_two.
      Admitted.
      Global Typeclasses Opaque round_to_next_power_of_two.
      
      (*
          pub fn round_to_next_power_of_two_or_zero(&mut self) {
              self.memory.round_to_next_power_of_two_or_zero();
          }
      *)
      Definition round_to_next_power_of_two_or_zero
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    "round_to_next_power_of_two_or_zero",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::config::SystemTraceHeights",
                        "memory"
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_round_to_next_power_of_two_or_zero :
        M.IsAssociatedFunction.C
          Self
          "round_to_next_power_of_two_or_zero"
          round_to_next_power_of_two_or_zero.
      Admitted.
      Global Typeclasses Opaque round_to_next_power_of_two_or_zero.
    End Impl_openvm_circuit_arch_config_SystemTraceHeights.
    
    Module Impl_openvm_circuit_arch_config_VmConfig_where_p3_field_field_PrimeField32_F_F_for_openvm_circuit_arch_config_SystemConfig.
      Definition Self (F : Ty.t) : Ty.t := Ty.path "openvm_circuit::arch::config::SystemConfig".
      
      (*     type Executor = SystemExecutor<F>; *)
      Definition _Executor (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (*     type Periphery = SystemPeriphery<F>; *)
      Definition _Periphery (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ].
      
      (*
          fn system(&self) -> &SystemConfig {
              self
          }
      *)
      Definition system (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            M.read (| self |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn system_mut(&mut self) -> &mut SystemConfig {
              self
          }
      *)
      Definition system_mut (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (| M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn create_chip_complex(
              &self,
          ) -> Result<VmChipComplex<F, Self::Executor, Self::Periphery>, VmInventoryError> {
              let complex = SystemComplex::new(self.clone());
              Ok(complex)
          }
      *)
      Definition create_chip_complex
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                self
              |) in
            M.read (|
              let~ complex :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                          []
                          [ F ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "openvm_circuit::arch::config::SystemConfig",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_circuit::arch::config::SystemConfig",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                          []
                          [ F ]
                      ];
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                  ],
                Value.StructTuple
                  "core::result::Result::Ok"
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                          []
                          [ F ]
                      ];
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                  ]
                  [ M.read (| complex |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::config::VmConfig"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("Executor", InstanceField.Ty (_Executor F));
            ("Periphery", InstanceField.Ty (_Periphery F));
            ("system", InstanceField.Method (system F));
            ("system_mut", InstanceField.Method (system_mut F));
            ("create_chip_complex", InstanceField.Method (create_chip_complex F))
          ].
    End Impl_openvm_circuit_arch_config_VmConfig_where_p3_field_field_PrimeField32_F_F_for_openvm_circuit_arch_config_SystemConfig.
  End config.
End arch.
