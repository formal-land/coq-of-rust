(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module extensions.
    Definition value_PROGRAM_AIR_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |))).
    
    Global Instance Instance_IsConstant_value_PROGRAM_AIR_ID :
      M.IsFunction.C "openvm_circuit::arch::extensions::PROGRAM_AIR_ID" value_PROGRAM_AIR_ID.
    Admitted.
    Global Typeclasses Opaque value_PROGRAM_AIR_ID.
    
    Definition value_PROGRAM_CACHED_TRACE_INDEX
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |))).
    
    Global Instance Instance_IsConstant_value_PROGRAM_CACHED_TRACE_INDEX :
      M.IsFunction.C
        "openvm_circuit::arch::extensions::PROGRAM_CACHED_TRACE_INDEX"
        value_PROGRAM_CACHED_TRACE_INDEX.
    Admitted.
    Global Typeclasses Opaque value_PROGRAM_CACHED_TRACE_INDEX.
    
    Definition value_CONNECTOR_AIR_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |))).
    
    Global Instance Instance_IsConstant_value_CONNECTOR_AIR_ID :
      M.IsFunction.C "openvm_circuit::arch::extensions::CONNECTOR_AIR_ID" value_CONNECTOR_AIR_ID.
    Admitted.
    Global Typeclasses Opaque value_CONNECTOR_AIR_ID.
    
    Definition value_PUBLIC_VALUES_AIR_ID
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 2 |))).
    
    Global Instance Instance_IsConstant_value_PUBLIC_VALUES_AIR_ID :
      M.IsFunction.C
        "openvm_circuit::arch::extensions::PUBLIC_VALUES_AIR_ID"
        value_PUBLIC_VALUES_AIR_ID.
    Admitted.
    Global Typeclasses Opaque value_PUBLIC_VALUES_AIR_ID.
    
    Definition value_BOUNDARY_AIR_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Ty.path "usize",
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.add,
            [
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.add,
                [
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::extensions::PUBLIC_VALUES_AIR_ID",
                      Ty.path "usize"
                    |)
                  |);
                  Value.Integer IntegerKind.Usize 1
                ]
              |);
              M.read (|
                get_constant (|
                  "openvm_circuit::system::memory::controller::BOUNDARY_AIR_OFFSET",
                  Ty.path "usize"
                |)
              |)
            ]
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_BOUNDARY_AIR_ID :
      M.IsFunction.C "openvm_circuit::arch::extensions::BOUNDARY_AIR_ID" value_BOUNDARY_AIR_ID.
    Admitted.
    Global Typeclasses Opaque value_BOUNDARY_AIR_ID.
    
    Definition value_MERKLE_AIR_ID (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic
        (M.alloc (|
          Ty.path "usize",
          M.call_closure (|
            Ty.path "usize",
            BinOp.Wrap.add,
            [
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.add,
                [
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::extensions::CONNECTOR_AIR_ID",
                      Ty.path "usize"
                    |)
                  |);
                  Value.Integer IntegerKind.Usize 1
                ]
              |);
              M.read (|
                get_constant (|
                  "openvm_circuit::system::memory::controller::MERKLE_AIR_OFFSET",
                  Ty.path "usize"
                |)
              |)
            ]
          |)
        |))).
    
    Global Instance Instance_IsConstant_value_MERKLE_AIR_ID :
      M.IsFunction.C "openvm_circuit::arch::extensions::MERKLE_AIR_ID" value_MERKLE_AIR_ID.
    Admitted.
    Global Typeclasses Opaque value_MERKLE_AIR_ID.
    
    (* Trait *)
    (* Empty module 'VmExtension' *)
    
    Module Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_extensions_VmExtension_E_F_F_for_core_option_Option_E.
      Definition Self (F E : Ty.t) : Ty.t := Ty.apply (Ty.path "core::option::Option") [] [ E ].
      
      (*     type Executor = E::Executor; *)
      Definition _Executor (F E : Ty.t) : Ty.t :=
        Ty.associated_in_trait
          "openvm_circuit::arch::extensions::VmExtension"
          []
          [ F ]
          E
          "Executor".
      
      (*     type Periphery = E::Periphery; *)
      Definition _Periphery (F E : Ty.t) : Ty.t :=
        Ty.associated_in_trait
          "openvm_circuit::arch::extensions::VmExtension"
          []
          [ F ]
          E
          "Periphery".
      
      (*
          fn build(
              &self,
              builder: &mut VmInventoryBuilder<F>,
          ) -> Result<VmInventory<Self::Executor, Self::Periphery>, VmInventoryError> {
              if let Some(extension) = self {
                  extension.build(builder)
              } else {
                  Ok(VmInventory::new())
              }
          }
      *)
      Definition build (F E : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F E in
        match ε, τ, α with
        | [], [], [ self; builder ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "core::option::Option") [] [ E ] ],
                self
              |) in
            let builder :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                builder
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                    []
                    [
                      Ty.associated_in_trait
                        "openvm_circuit::arch::extensions::VmExtension"
                        []
                        [ F ]
                        E
                        "Executor";
                      Ty.associated_in_trait
                        "openvm_circuit::arch::extensions::VmExtension"
                        []
                        [ F ]
                        E
                        "Periphery"
                    ];
                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                ],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := self in
                    let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "core::option::Option::Some",
                        0
                      |) in
                    let extension := M.alloc (| Ty.apply (Ty.path "&") [] [ E ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_circuit::arch::extensions::VmExtension"
                                []
                                [ F ]
                                E
                                "Executor";
                              Ty.associated_in_trait
                                "openvm_circuit::arch::extensions::VmExtension"
                                []
                                [ F ]
                                E
                                "Periphery"
                            ];
                          Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                        ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::extensions::VmExtension",
                        E,
                        [],
                        [ F ],
                        "build",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| extension |) |) |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::extensions::VmExtension"
                              []
                              [ F ]
                              E
                              "Executor";
                            Ty.associated_in_trait
                              "openvm_circuit::arch::extensions::VmExtension"
                              []
                              [ F ]
                              E
                              "Periphery"
                          ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ]
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_circuit::arch::extensions::VmExtension"
                                []
                                [ F ]
                                E
                                "Executor";
                              Ty.associated_in_trait
                                "openvm_circuit::arch::extensions::VmExtension"
                                []
                                [ F ]
                                E
                                "Periphery"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::extensions::VmExtension"
                                  []
                                  [ F ]
                                  E
                                  "Executor";
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::extensions::VmExtension"
                                  []
                                  [ F ]
                                  E
                                  "Periphery"
                              ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |)
                      ]))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F E : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::extensions::VmExtension"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F E)
          (* Instance *)
          [
            ("Executor", InstanceField.Ty (_Executor F E));
            ("Periphery", InstanceField.Ty (_Periphery F E));
            ("build", InstanceField.Method (build F E))
          ].
    End Impl_openvm_circuit_arch_extensions_VmExtension_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_extensions_VmExtension_E_F_F_for_core_option_Option_E.
    
    (* StructRecord
      {
        name := "SystemPort";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("execution_bus", Ty.path "openvm_circuit::arch::execution::ExecutionBus");
            ("program_bus", Ty.path "openvm_circuit::system::program::bus::ProgramBus");
            ("memory_bridge",
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_SystemPort.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::SystemPort".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::SystemPort" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_circuit::arch::extensions::SystemPort",
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "openvm_circuit::arch::extensions::SystemPort",
                      Value.DeclaredButUndefined,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path "openvm_circuit::arch::extensions::SystemPort",
                              Value.DeclaredButUndefined,
                              [
                                fun γ =>
                                  ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_SystemPort.
    
    Module Impl_core_marker_Copy_for_openvm_circuit_arch_extensions_SystemPort.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::SystemPort".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_circuit_arch_extensions_SystemPort.
    
    (* StructRecord
      {
        name := "VmInventoryBuilder";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("system_config",
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ]);
            ("system",
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ]);
            ("streams",
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]);
            ("bus_idx_mgr", Ty.path "openvm_circuit::arch::extensions::BusIndexManager");
            ("chips",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_extensions_VmInventoryBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder") [] [ F ].
      
      (*
          pub fn new(
              system_config: &'a SystemConfig,
              system: &'a SystemBase<F>,
              streams: &'a Arc<Mutex<Streams<F>>>,
              bus_idx_mgr: BusIndexManager,
          ) -> Self {
              Self {
                  system_config,
                  system,
                  streams,
                  bus_idx_mgr,
                  chips: Vec::new(),
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ system_config; system; streams; bus_idx_mgr ] =>
          ltac:(M.monadic
            (let system_config :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                system_config
              |) in
            let system :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                system
              |) in
            let streams :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                streams
              |) in
            let bus_idx_mgr :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                bus_idx_mgr
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventoryBuilder"
              []
              [ F ]
              [
                ("system_config", M.read (| system_config |));
                ("system", M.read (| system |));
                ("streams", M.read (| streams |));
                ("bus_idx_mgr", M.read (| bus_idx_mgr |));
                ("chips",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn system_config(&self) -> &SystemConfig {
              self.system_config
          }
      *)
      Definition system_config
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmInventoryBuilder",
                    "system_config"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_system_config :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "system_config" (system_config F).
      Admitted.
      Global Typeclasses Opaque system_config.
      
      (*
          pub fn system_base(&self) -> &SystemBase<F> {
              self.system
          }
      *)
      Definition system_base (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmInventoryBuilder",
                    "system"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_system_base :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "system_base" (system_base F).
      Admitted.
      Global Typeclasses Opaque system_base.
      
      (*
          pub fn system_port(&self) -> SystemPort {
              SystemPort {
                  execution_bus: self.system_base().execution_bus(),
                  program_bus: self.system_base().program_bus(),
                  memory_bridge: self.system_base().memory_bridge(),
              }
          }
      *)
      Definition system_port (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::SystemPort"
              []
              []
              [
                ("execution_bus",
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ],
                      "execution_bus",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::SystemBase")
                                  []
                                  [ F ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                []
                                [ F ],
                              "system_base",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |));
                ("program_bus",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ],
                      "program_bus",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::SystemBase")
                                  []
                                  [ F ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                []
                                [ F ],
                              "system_base",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |));
                ("memory_bridge",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ],
                      "memory_bridge",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::SystemBase")
                                  []
                                  [ F ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                []
                                [ F ],
                              "system_base",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_system_port :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "system_port" (system_port F).
      Admitted.
      Global Typeclasses Opaque system_port.
      
      (*
          pub fn new_bus_idx(&mut self) -> BusIndex {
              self.bus_idx_mgr.new_bus_idx()
          }
      *)
      Definition new_bus_idx (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "u16",
              M.get_associated_function (|
                Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                "new_bus_idx",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmInventoryBuilder",
                    "bus_idx_mgr"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_bus_idx :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new_bus_idx" (new_bus_idx F).
      Admitted.
      Global Typeclasses Opaque new_bus_idx.
      
      (*
          pub fn find_chip<C: 'static>(&self) -> Vec<&C> {
              self.chips
                  .iter()
                  .filter_map(|c| c.as_any_kind().downcast_ref())
                  .collect()
          }
      *)
      Definition find_chip (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ C ], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.apply (Ty.path "&") [] [ C ]; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::filter_map::FilterMap")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ]
                              ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ C ] ])
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "&") [] [ C ]; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.dyn
                                    [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ C ] ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ]
                      ],
                    [],
                    [],
                    "filter_map",
                    [],
                    [
                      Ty.apply (Ty.path "&") [] [ C ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.dyn
                                    [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ C ] ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ]
                              ]
                          ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.dyn
                                            [
                                              ("openvm_circuit::arch::extensions::AnyEnum::Trait",
                                                [])
                                            ]
                                        ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.dyn
                                          [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", [])
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::extensions::VmInventoryBuilder",
                                    "chips"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ C ] ],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.dyn
                                            [
                                              ("openvm_circuit::arch::extensions::AnyEnum::Trait",
                                                [])
                                            ]
                                        ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let c :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.dyn
                                                    [
                                                      ("openvm_circuit::arch::extensions::AnyEnum::Trait",
                                                        [])
                                                    ]
                                                ]
                                            ],
                                          γ
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ C ] ],
                                        M.get_associated_function (|
                                          Ty.dyn [ ("core::any::Any::Trait", []) ],
                                          "downcast_ref",
                                          [],
                                          [ C ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                                M.get_trait_method (|
                                                  "openvm_circuit::arch::extensions::AnyEnum",
                                                  Ty.dyn
                                                    [
                                                      ("openvm_circuit::arch::extensions::AnyEnum::Trait",
                                                        [])
                                                    ],
                                                  [],
                                                  [],
                                                  "as_any_kind",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (| M.deref (| M.read (| c |) |) |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_find_chip :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "find_chip" (find_chip F).
      Admitted.
      Global Typeclasses Opaque find_chip.
      
      (*
          pub fn add_phantom_sub_executor<PE: PhantomSubExecutor<F> + 'static>(
              &self,
              phantom_sub: PE,
              discriminant: PhantomDiscriminant,
          ) -> Result<(), VmInventoryError> {
              let chip_ref: &RefCell<PhantomChip<F>> =
                  self.find_chip().first().expect("PhantomChip always exists");
              let mut chip = chip_ref.borrow_mut();
              let existing = chip.add_sub_executor(phantom_sub, discriminant);
              if existing.is_some() {
                  return Err(VmInventoryError::PhantomSubExecutorExists { discriminant });
              }
              Ok(())
          }
      *)
      Definition add_phantom_sub_executor
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ PE ], [ self; phantom_sub; discriminant ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let phantom_sub := M.alloc (| PE, phantom_sub |) in
            let discriminant :=
              M.alloc (|
                Ty.path "openvm_instructions::phantom::PhantomDiscriminant",
                discriminant
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ chip_ref :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::cell::RefCell")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                []
                                [ F ]
                            ]
                        ] :=
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.read (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                            []
                                            [ F ]
                                        ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::phantom::PhantomChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ],
                                "expect",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::phantom::PhantomChip")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::phantom::PhantomChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ]
                                      ],
                                    "first",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::phantom::PhantomChip")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::phantom::PhantomChip")
                                                          []
                                                          [ F ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::phantom::PhantomChip")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::phantom::PhantomChip")
                                                                []
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                      []
                                                      [ F ],
                                                    "find_chip",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::phantom::PhantomChip")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| mk_str (| "PhantomChip always exists" |) |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      |)
                    |) in
                  let~ chip :
                      Ty.apply
                        (Ty.path "core::cell::RefMut")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::cell::RefMut")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip_ref |) |) |) ]
                    |) in
                  let~ existing :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.dyn
                                [ ("openvm_circuit::arch::execution::PhantomSubExecutor::Trait", [])
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.dyn
                                [ ("openvm_circuit::arch::execution::PhantomSubExecutor::Trait", [])
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                        "add_sub_executor",
                        [],
                        [ PE ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                    []
                                    [ F ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "core::cell::RefMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                      []
                                      [ F ]
                                  ],
                                [],
                                [],
                                "deref_mut",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, chip |) ]
                            |)
                          |)
                        |);
                        M.read (| phantom_sub |);
                        M.read (| discriminant |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::boxed::Box")
                                            []
                                            [
                                              Ty.dyn
                                                [
                                                  ("openvm_circuit::arch::execution::PhantomSubExecutor::Trait",
                                                    [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "is_some",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, existing |) ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ]
                                    [
                                      Value.mkStructRecord
                                        "openvm_circuit::arch::extensions::VmInventoryError::PhantomSubExecutorExists"
                                        []
                                        []
                                        [ ("discriminant", M.read (| discriminant |)) ]
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ]
                      [ Value.Tuple [] ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_add_phantom_sub_executor :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "add_phantom_sub_executor" (add_phantom_sub_executor F).
      Admitted.
      Global Typeclasses Opaque add_phantom_sub_executor.
      
      (*
          pub fn streams(&self) -> &Arc<Mutex<Streams<F>>> {
              self.streams
          }
      *)
      Definition streams (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmInventoryBuilder",
                    "streams"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_streams :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "streams" (streams F).
      Admitted.
      Global Typeclasses Opaque streams.
      
      (*
          fn add_chip<E: AnyEnum>(&mut self, chip: &'a E) {
              self.chips.push(chip);
          }
      *)
      Definition add_chip (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ E ], [ self; chip ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ]
                  ],
                self
              |) in
            let chip := M.alloc (| Ty.apply (Ty.path "&") [] [ E ], chip |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmInventoryBuilder",
                        "chips"
                      |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ E ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.dyn [ ("openvm_circuit::arch::extensions::AnyEnum::Trait", []) ] ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_add_chip :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "add_chip" (add_chip F).
      Admitted.
      Global Typeclasses Opaque add_chip.
    End Impl_openvm_circuit_arch_extensions_VmInventoryBuilder_F.
    
    (* StructRecord
      {
        name := "VmInventory";
        const_params := [];
        ty_params := [ "E"; "P" ];
        fields :=
          [
            ("instruction_lookup",
              Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                []
                [
                  Ty.path "openvm_instructions::VmOpcode";
                  Ty.path "usize";
                  Ty.path "rustc_hash::FxBuildHasher"
                ]);
            ("executors",
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ]);
            ("periphery",
              Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ]);
            ("insertion_order",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "openvm_circuit::arch::extensions::ChipId"; Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_E_where_core_clone_Clone_P_for_openvm_circuit_arch_extensions_VmInventory_E_P.
      Definition Self (E P : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ].
      
      (* Clone *)
      Definition clone (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventory"
              []
              [ E; P ]
              [
                ("instruction_lookup",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "openvm_instructions::VmOpcode";
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        []
                        [
                          Ty.path "openvm_instructions::VmOpcode";
                          Ty.path "usize";
                          Ty.path "rustc_hash::FxBuildHasher"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmInventory",
                              "instruction_lookup"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("executors",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmInventory",
                              "executors"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("periphery",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmInventory",
                              "periphery"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("insertion_order",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "openvm_circuit::arch::extensions::ChipId";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmInventory",
                              "insertion_order"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (E P : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self E P)
          (* Instance *) [ ("clone", InstanceField.Method (clone E P)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_E_where_core_clone_Clone_P_for_openvm_circuit_arch_extensions_VmInventory_E_P.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_core_fmt_Debug_P_for_openvm_circuit_arch_extensions_VmInventory_E_P.
      Definition Self (E P : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ].
      
      (* Debug *)
      Definition fmt (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "VmInventory" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "instruction_lookup" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          []
                          [
                            Ty.path "openvm_instructions::VmOpcode";
                            Ty.path "usize";
                            Ty.path "rustc_hash::FxBuildHasher"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "instruction_lookup"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "executors" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ E; Ty.path "alloc::alloc::Global" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "executors"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "periphery" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ P; Ty.path "alloc::alloc::Global" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "periphery"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "insertion_order" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "openvm_circuit::arch::extensions::ChipId";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::extensions::VmInventory",
                                "insertion_order"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (E P : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self E P)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt E P)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_core_fmt_Debug_P_for_openvm_circuit_arch_extensions_VmInventory_E_P.
    
    (* StructRecord
      {
        name := "VmInventoryTraceHeights";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("chips",
              Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                []
                [
                  Ty.path "openvm_circuit::arch::extensions::ChipId";
                  Ty.path "usize";
                  Ty.path "rustc_hash::FxBuildHasher"
                ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "VmInventoryTraceHeights" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "chips" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              []
                              [
                                Ty.path "openvm_circuit::arch::extensions::ChipId";
                                Ty.path "usize";
                                Ty.path "rustc_hash::FxBuildHasher"
                              ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  []
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize";
                                    Ty.path "rustc_hash::FxBuildHasher"
                                  ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                                "chips"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
              []
              []
              [
                ("chips",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        []
                        [
                          Ty.path "openvm_circuit::arch::extensions::ChipId";
                          Ty.path "usize";
                          Ty.path "rustc_hash::FxBuildHasher"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                              "chips"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "VmInventoryTraceHeights" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.cast (Ty.path "usize") (Value.Bool false);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "std::collections::hash::map::HashMap")
                                      []
                                      [
                                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                                        Ty.path "usize";
                                        Ty.path "rustc_hash::FxBuildHasher"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "chips" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                                          "chips"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Module Impl_serde_de_Deserialize_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_circuit::arch::extensions::_'1::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "VmInventoryTraceHeights" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::extensions::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::extensions::_'1::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Module Impl_serde_ser_Serialize_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "VmComplexTraceHeights" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.cast (Ty.path "usize") (Value.Bool false);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "system" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                          "system"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "inventory" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                          "inventory"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Module Impl_serde_de_Deserialize_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_circuit::arch::extensions::_'3::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "VmComplexTraceHeights" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::extensions::_'3::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::extensions::_'3::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Module Impl_serde_ser_Serialize_for_openvm_circuit_arch_extensions_ChipId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ],
                M.deref (| M.read (| self |) |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::arch::extensions::ChipId::Executor",
                          0
                        |) in
                      let __field0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::Serializer",
                          __S,
                          [],
                          [],
                          "serialize_newtype_variant",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.read (| __serializer |);
                          mk_str (| "ChipId" |);
                          Value.Integer IntegerKind.U32 0;
                          mk_str (| "Executor" |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::arch::extensions::ChipId::Periphery",
                          0
                        |) in
                      let __field0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::Serializer",
                          __S,
                          [],
                          [],
                          "serialize_newtype_variant",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.read (| __serializer |);
                          mk_str (| "ChipId" |);
                          Value.Integer IntegerKind.U32 1;
                          mk_str (| "Periphery" |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_circuit_arch_extensions_ChipId.
      Module Impl_serde_de_Deserialize_for_openvm_circuit_arch_extensions_ChipId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_enum",
                  [],
                  [ Ty.path "openvm_circuit::arch::extensions::_'5::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "ChipId" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::extensions::_'5::deserialize::VARIANTS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::extensions::_'5::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_circuit_arch_extensions_ChipId.
    End underscore.
    
    
    Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
    
    Module Impl_core_cmp_PartialEq_openvm_circuit_arch_extensions_VmInventoryTraceHeights_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                other
              |) in
            M.call_closure (|
              Ty.path "bool",
              M.get_trait_method (|
                "core::cmp::PartialEq",
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                    Ty.path "usize";
                    Ty.path "rustc_hash::FxBuildHasher"
                  ],
                [],
                [
                  Ty.apply
                    (Ty.path "std::collections::hash::map::HashMap")
                    []
                    [
                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                      Ty.path "usize";
                      Ty.path "rustc_hash::FxBuildHasher"
                    ]
                ],
                "eq",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                    "chips"
                  |)
                |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| other |) |),
                    "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                    "chips"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_openvm_circuit_arch_extensions_VmInventoryTraceHeights_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
    
    Module Impl_core_cmp_Eq_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
    
    (* StructRecord
      {
        name := "VmComplexTraceHeights";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("system", Ty.path "openvm_circuit::arch::config::SystemTraceHeights");
            ("inventory", Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "VmComplexTraceHeights" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "system" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                            "system"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inventory" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                "inventory"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmComplexTraceHeights"
              []
              []
              [
                ("system",
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                              "system"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("inventory",
                  M.call_closure (|
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                              "inventory"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
    
    
    
    Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
    
    Module Impl_core_cmp_PartialEq_openvm_circuit_arch_extensions_VmComplexTraceHeights_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                other
              |) in
            LogicalOp.and (|
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                  [],
                  [ Ty.path "openvm_circuit::arch::config::SystemTraceHeights" ],
                  "eq",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                      "system"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| other |) |),
                      "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                      "system"
                    |)
                  |)
                ]
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                    [],
                    [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                        "inventory"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                        "inventory"
                      |)
                    |)
                  ]
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_openvm_circuit_arch_extensions_VmComplexTraceHeights_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
    
    Module Impl_core_cmp_Eq_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.tuple [],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_openvm_circuit_arch_extensions_VmComplexTraceHeights.
    
    Module Impl_openvm_circuit_arch_extensions_VmComplexTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights".
      
      (* derive_new::new *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ system; inventory ] =>
          ltac:(M.monadic
            (let system :=
              M.alloc (| Ty.path "openvm_circuit::arch::config::SystemTraceHeights", system |) in
            let inventory :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                inventory
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmComplexTraceHeights"
              []
              []
              [ ("system", M.read (| system |)); ("inventory", M.read (| inventory |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      (*
          pub fn round_to_next_power_of_two(&mut self) {
              self.system.round_to_next_power_of_two();
              self.inventory.round_to_next_power_of_two();
          }
      *)
      Definition round_to_next_power_of_two
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                    "round_to_next_power_of_two",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                        "system"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                    "round_to_next_power_of_two",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                        "inventory"
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_round_to_next_power_of_two :
        M.IsAssociatedFunction.C Self "round_to_next_power_of_two" round_to_next_power_of_two.
      Admitted.
      Global Typeclasses Opaque round_to_next_power_of_two.
      
      (*
          pub fn round_to_next_power_of_two_or_zero(&mut self) {
              self.system.round_to_next_power_of_two_or_zero();
              self.inventory.round_to_next_power_of_two_or_zero();
          }
      *)
      Definition round_to_next_power_of_two_or_zero
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                    "round_to_next_power_of_two_or_zero",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                        "system"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                    "round_to_next_power_of_two_or_zero",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                        "inventory"
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_round_to_next_power_of_two_or_zero :
        M.IsAssociatedFunction.C
          Self
          "round_to_next_power_of_two_or_zero"
          round_to_next_power_of_two_or_zero.
      Admitted.
      Global Typeclasses Opaque round_to_next_power_of_two_or_zero.
    End Impl_openvm_circuit_arch_extensions_VmComplexTraceHeights.
    
    Axiom ExecutorId : (Ty.path "openvm_circuit::arch::extensions::ExecutorId") = (Ty.path "usize").
    
    (*
    Enum ChipId
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Executor";
            item := StructTuple [ Ty.path "usize" ];
          };
          {
            name := "Periphery";
            item := StructTuple [ Ty.path "usize" ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_ChipId_Executor :
      M.IsDiscriminant "openvm_circuit::arch::extensions::ChipId::Executor" 0.
    Axiom IsDiscriminant_ChipId_Periphery :
      M.IsDiscriminant "openvm_circuit::arch::extensions::ChipId::Periphery" 1.
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_circuit::arch::extensions::ChipId",
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_ChipId.
    
    Module Impl_core_marker_Copy_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_circuit_arch_extensions_ChipId.
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::ChipId::Executor",
                        0
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_tuple_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Executor" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::ChipId::Periphery",
                        0
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_tuple_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Periphery" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_ChipId.
    
    Module Impl_core_hash_Hash_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      (* Hash *)
      Definition hash (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ __H ], [ self; state ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                self
              |) in
            let state := M.alloc (| Ty.apply (Ty.path "&mut") [] [ __H ], state |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::hash::Hash",
                    Ty.path "isize",
                    [],
                    [],
                    "hash",
                    [],
                    [ __H ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, __self_discr |) |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                  ]
                |) in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::arch::extensions::ChipId::Executor",
                            0
                          |) in
                        let __self_0 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "usize",
                            [],
                            [],
                            "hash",
                            [],
                            [ __H ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::arch::extensions::ChipId::Periphery",
                            0
                          |) in
                        let __self_0 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "core::hash::Hash",
                            Ty.path "usize",
                            [],
                            [],
                            "hash",
                            [],
                            [ __H ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| state |) |) |)
                          ]
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::hash::Hash"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("hash", InstanceField.Method hash) ].
    End Impl_core_hash_Hash_for_openvm_circuit_arch_extensions_ChipId.
    
    Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_arch_extensions_ChipId.
    
    Module Impl_core_cmp_PartialEq_openvm_circuit_arch_extensions_ChipId_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      (* PartialEq *)
      Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                other
              |) in
            M.read (|
              let~ __self_discr : Ty.path "isize" :=
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ __arg1_discr : Ty.path "isize" :=
                M.call_closure (|
                  Ty.path "isize",
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [],
                    [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                |) in
              M.alloc (|
                Ty.path "bool",
                LogicalOp.and (|
                  M.call_closure (|
                    Ty.path "bool",
                    BinOp.eq,
                    [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                  |),
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "bool",
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::arch::extensions::ChipId" ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                          ],
                        Value.Tuple [ M.read (| self |); M.read (| other |) ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "openvm_circuit::arch::extensions::ChipId::Executor",
                                0
                              |) in
                            let __self_0 :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                            let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "openvm_circuit::arch::extensions::ChipId::Executor",
                                0
                              |) in
                            let __arg1_0 :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                [],
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                "eq",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "openvm_circuit::arch::extensions::ChipId::Periphery",
                                0
                              |) in
                            let __self_0 :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                            let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "openvm_circuit::arch::extensions::ChipId::Periphery",
                                0
                              |) in
                            let __arg1_0 :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ2_0 |) in
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                [],
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                                "eq",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                []
                              |)
                            |)))
                      ]
                    |)))
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
          Self
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_openvm_circuit_arch_extensions_ChipId_for_openvm_circuit_arch_extensions_ChipId.
    
    Module Impl_core_cmp_Eq_for_openvm_circuit_arch_extensions_ChipId.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::ChipId".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                self
              |) in
            M.match_operator (|
              Ty.tuple [],
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_openvm_circuit_arch_extensions_ChipId.
    
    
    
    (*
    Enum VmInventoryError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "ExecutorExists";
            item :=
              StructRecord
                [ ("opcode", Ty.path "openvm_instructions::VmOpcode"); ("id", Ty.path "usize") ];
          };
          {
            name := "PhantomSubExecutorExists";
            item :=
              StructRecord
                [ ("discriminant", Ty.path "openvm_instructions::phantom::PhantomDiscriminant") ];
          };
          {
            name := "ChipNotFound";
            item := StructRecord [ ("name", Ty.path "alloc::string::String") ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_VmInventoryError_ExecutorExists :
      M.IsDiscriminant "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists" 0.
    Axiom IsDiscriminant_VmInventoryError_PhantomSubExecutorExists :
      M.IsDiscriminant
        "openvm_circuit::arch::extensions::VmInventoryError::PhantomSubExecutorExists"
        1.
    Axiom IsDiscriminant_VmInventoryError_ChipNotFound :
      M.IsDiscriminant "openvm_circuit::arch::extensions::VmInventoryError::ChipNotFound" 2.
    
    Module Impl_core_error_Error_for_openvm_circuit_arch_extensions_VmInventoryError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryError".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_error_Error_for_openvm_circuit_arch_extensions_VmInventoryError.
    
    Module Impl_core_fmt_Display_for_openvm_circuit_arch_extensions_VmInventoryError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryError".
      
      (* thiserror::Error *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; __formatter ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
                self
              |) in
            let __formatter :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                __formatter
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists",
                        "opcode"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists",
                        "id"
                      |) in
                    let opcode :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ],
                        γ1_0
                      |) in
                    let id := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 2
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array
                                      [
                                        mk_str (| "Opcode " |);
                                        mk_str (| " already owned by executor id " |)
                                      ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "openvm_instructions::VmOpcode" ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "openvm_instructions::VmOpcode" ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "openvm_instructions::VmOpcode" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "openvm_instructions::VmOpcode"
                                                          ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, opcode |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, id |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::PhantomSubExecutorExists",
                        "discriminant"
                      |) in
                    let discriminant :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_instructions::phantom::PhantomDiscriminant" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array
                                      [
                                        mk_str (| "Phantom discriminant " |);
                                        mk_str (| " already has sub-executor" |)
                                      ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.path "u16" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.deref (| M.read (| discriminant |) |),
                                                    "openvm_instructions::phantom::PhantomDiscriminant",
                                                    0
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::ChipNotFound",
                        "name"
                      |) in
                    let name :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "Chip " |); mk_str (| " not found" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "alloc::string::String" ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "alloc::string::String" ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "alloc::string::String" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "alloc::string::String" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, name |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_circuit_arch_extensions_VmInventoryError.
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_VmInventoryError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists",
                        "opcode"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists",
                        "id"
                      |) in
                    let __self_0 :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ],
                        γ1_0
                      |) in
                    let __self_1 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field2_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "ExecutorExists" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "opcode" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "id" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::PhantomSubExecutorExists",
                        "discriminant"
                      |) in
                    let __self_0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_instructions::phantom::PhantomDiscriminant" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "PhantomSubExecutorExists" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "discriminant" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_instructions::phantom::PhantomDiscriminant" ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::extensions::VmInventoryError::ChipNotFound",
                        "name"
                      |) in
                    let __self_0 :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ChipNotFound" |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "name" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_VmInventoryError.
    
    Module Impl_core_default_Default_for_openvm_circuit_arch_extensions_VmInventory_E_P.
      Definition Self (E P : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ].
      
      (*
          fn default() -> Self {
              Self::new()
          }
      *)
      Definition default (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                "new",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (E P : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self E P)
          (* Instance *) [ ("default", InstanceField.Method (default E P)) ].
    End Impl_core_default_Default_for_openvm_circuit_arch_extensions_VmInventory_E_P.
    
    Module Impl_openvm_circuit_arch_extensions_VmInventory_E_P.
      Definition Self (E P : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ].
      
      (*
          pub fn new() -> Self {
              Self {
                  instruction_lookup: FxHashMap::default(),
                  executors: Vec::new(),
                  periphery: Vec::new(),
                  insertion_order: Vec::new(),
              }
          }
      *)
      Definition new (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventory"
              []
              [ E; P ]
              [
                ("instruction_lookup",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "openvm_instructions::VmOpcode";
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "std::collections::hash::map::HashMap")
                        []
                        [
                          Ty.path "openvm_instructions::VmOpcode";
                          Ty.path "usize";
                          Ty.path "rustc_hash::FxBuildHasher"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("executors",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |));
                ("periphery",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |));
                ("insertion_order",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "openvm_circuit::arch::extensions::ChipId";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "new" (new E P).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn transmute<E2, P2>(self) -> VmInventory<E2, P2>
          where
              E: Into<E2>,
              P: Into<P2>,
          {
              VmInventory {
                  instruction_lookup: self.instruction_lookup,
                  executors: self.executors.into_iter().map(|e| e.into()).collect(),
                  periphery: self.periphery.into_iter().map(|p| p.into()).collect(),
                  insertion_order: self.insertion_order,
              }
          }
      *)
      Definition transmute (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [ E2; P2 ], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventory"
              []
              [ E2; P2 ]
              [
                ("instruction_lookup",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmInventory",
                      "instruction_lookup"
                    |)
                  |));
                ("executors",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E2; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ E; Ty.path "alloc::alloc::Global" ];
                          Ty.function [ E ] E2
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ E2; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ E; Ty.path "alloc::alloc::Global" ];
                            Ty.function [ E ] E2
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ E; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "map",
                          [],
                          [ E2; Ty.function [ E ] E2 ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ E; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ E; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::arch::extensions::VmInventory",
                                  "executors"
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      E2,
                                      M.alloc (| E, α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let e := M.copy (| E, γ |) in
                                            M.call_closure (|
                                              E2,
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                E,
                                                [],
                                                [ E2 ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [ M.read (| e |) ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |));
                ("periphery",
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P2; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ P; Ty.path "alloc::alloc::Global" ];
                          Ty.function [ P ] P2
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ P2; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ P; Ty.path "alloc::alloc::Global" ];
                            Ty.function [ P ] P2
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ P; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "map",
                          [],
                          [ P2; Ty.function [ P ] P2 ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ P; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ P; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::arch::extensions::VmInventory",
                                  "periphery"
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      P2,
                                      M.alloc (| P, α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let p := M.copy (| P, γ |) in
                                            M.call_closure (|
                                              P2,
                                              M.get_trait_method (|
                                                "core::convert::Into",
                                                P,
                                                [],
                                                [ P2 ],
                                                "into",
                                                [],
                                                []
                                              |),
                                              [ M.read (| p |) ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |));
                ("insertion_order",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmInventory",
                      "insertion_order"
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_transmute :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "transmute" (transmute E P).
      Admitted.
      Global Typeclasses Opaque transmute.
      
      (*
          pub fn append(&mut self, mut other: VmInventory<E, P>) -> Result<(), VmInventoryError> {
              let num_executors = self.executors.len();
              let num_periphery = self.periphery.len();
              for (opcode, mut id) in other.instruction_lookup.into_iter() {
                  id += num_executors;
                  if let Some(old_id) = self.instruction_lookup.insert(opcode, id) {
                      return Err(VmInventoryError::ExecutorExists { opcode, id: old_id });
                  }
              }
              for chip_id in other.insertion_order.iter_mut() {
                  match chip_id {
                      ChipId::Executor(id) => *id += num_executors,
                      ChipId::Periphery(id) => *id += num_periphery,
                  }
              }
              self.executors.append(&mut other.executors);
              self.periphery.append(&mut other.periphery);
              self.insertion_order.append(&mut other.insertion_order);
              Ok(())
          }
      *)
      Definition append (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                other
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ num_executors : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ E; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "executors"
                          |)
                        |)
                      ]
                    |) in
                  let~ num_periphery : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ P; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "periphery"
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "std::collections::hash::map::IntoIter")
                                []
                                [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "usize" ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::IntoIter")
                                  []
                                  [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "usize" ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::IntoIter")
                                    []
                                    [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "usize" ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "std::collections::hash::map::IntoIter")
                                      []
                                      [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "usize" ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "std::collections::hash::map::HashMap")
                                        []
                                        [
                                          Ty.path "openvm_instructions::VmOpcode";
                                          Ty.path "usize";
                                          Ty.path "rustc_hash::FxBuildHasher"
                                        ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          other,
                                          "openvm_circuit::arch::extensions::VmInventory",
                                          "instruction_lookup"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "std::collections::hash::map::IntoIter")
                                        []
                                        [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "usize"
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "openvm_instructions::VmOpcode";
                                                      Ty.path "usize"
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "openvm_instructions::VmOpcode";
                                                        Ty.path "usize"
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "std::collections::hash::map::IntoIter")
                                                    []
                                                    [
                                                      Ty.path "openvm_instructions::VmOpcode";
                                                      Ty.path "usize"
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let opcode :=
                                                    M.copy (|
                                                      Ty.path "openvm_instructions::VmOpcode",
                                                      γ1_0
                                                    |) in
                                                  let id := M.copy (| Ty.path "usize", γ1_1 |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      let β := id in
                                                      M.write (|
                                                        β,
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.add,
                                                          [
                                                            M.read (| β |);
                                                            M.read (| num_executors |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [ Ty.path "usize" ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "std::collections::hash::map::HashMap")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "openvm_instructions::VmOpcode";
                                                                          Ty.path "usize";
                                                                          Ty.path
                                                                            "rustc_hash::FxBuildHasher"
                                                                        ],
                                                                      "insert",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "openvm_circuit::arch::extensions::VmInventory",
                                                                          "instruction_lookup"
                                                                        |)
                                                                      |);
                                                                      M.read (| opcode |);
                                                                      M.read (| id |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let old_id :=
                                                                M.copy (|
                                                                  Ty.path "usize",
                                                                  γ0_0
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "openvm_circuit::arch::extensions::VmInventoryError"
                                                                      ]
                                                                      [
                                                                        Value.mkStructRecord
                                                                          "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists"
                                                                          []
                                                                          []
                                                                          [
                                                                            ("opcode",
                                                                              M.read (| opcode |));
                                                                            ("id",
                                                                              M.read (| old_id |))
                                                                          ]
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      []
                                      [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                      "iter_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.path
                                                      "openvm_circuit::arch::extensions::ChipId"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::ChipId";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  other,
                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                  "insertion_order"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::IterMut")
                                        []
                                        [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::ChipId"
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::arch::extensions::ChipId"
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::ChipId"
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let chip_id :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_circuit::arch::extensions::ChipId"
                                                        ],
                                                      γ0_0
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    chip_id,
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ := M.deref (| M.read (| γ |) |) in
                                                          let γ1_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "openvm_circuit::arch::extensions::ChipId::Executor",
                                                              0
                                                            |) in
                                                          let id :=
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ1_0
                                                            |) in
                                                          let β := M.deref (| M.read (| id |) |) in
                                                          M.write (|
                                                            β,
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.add,
                                                              [
                                                                M.read (| β |);
                                                                M.read (| num_executors |)
                                                              ]
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ := M.deref (| M.read (| γ |) |) in
                                                          let γ1_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "openvm_circuit::arch::extensions::ChipId::Periphery",
                                                              0
                                                            |) in
                                                          let id :=
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ1_0
                                                            |) in
                                                          let β := M.deref (| M.read (| id |) |) in
                                                          M.write (|
                                                            β,
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.add,
                                                              [
                                                                M.read (| β |);
                                                                M.read (| num_periphery |)
                                                              ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ E; Ty.path "alloc::alloc::Global" ],
                        "append",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "executors"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                other,
                                "openvm_circuit::arch::extensions::VmInventory",
                                "executors"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ P; Ty.path "alloc::alloc::Global" ],
                        "append",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "periphery"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                other,
                                "openvm_circuit::arch::extensions::VmInventory",
                                "periphery"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                            Ty.path "alloc::alloc::Global"
                          ],
                        "append",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "insertion_order"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                other,
                                "openvm_circuit::arch::extensions::VmInventory",
                                "insertion_order"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ]
                      [ Value.Tuple [] ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_append :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "append" (append E P).
      Admitted.
      Global Typeclasses Opaque append.
      
      (*
          pub fn add_executor(
              &mut self,
              executor: impl Into<E>,
              opcodes: impl IntoIterator<Item = VmOpcode>,
          ) -> Result<(), VmInventoryError> {
              let opcodes: Vec<_> = opcodes.into_iter().collect();
              for opcode in &opcodes {
                  if let Some(id) = self.instruction_lookup.get(opcode) {
                      return Err(VmInventoryError::ExecutorExists {
                          opcode: *opcode,
                          id: *id,
                      });
                  }
              }
              let id = self.executors.len();
              self.executors.push(executor.into());
              self.insertion_order.push(ChipId::Executor(id));
              for opcode in opcodes {
                  self.instruction_lookup.insert(opcode, id);
              }
              Ok(())
          }
      *)
      Definition add_executor
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [ impl_Into_E_; impl_IntoIterator_Item___VmOpcode_ ], [ self; executor; opcodes ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            let executor := M.alloc (| impl_Into_E_, executor |) in
            let opcodes := M.alloc (| impl_IntoIterator_Item___VmOpcode_, opcodes |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ opcodes :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "openvm_instructions::VmOpcode"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.associated_in_trait
                          "core::iter::traits::collect::IntoIterator"
                          []
                          []
                          impl_IntoIterator_Item___VmOpcode_
                          "IntoIter",
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_instructions::VmOpcode";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait
                            "core::iter::traits::collect::IntoIterator"
                            []
                            []
                            impl_IntoIterator_Item___VmOpcode_
                            "IntoIter",
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            impl_IntoIterator_Item___VmOpcode_,
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| opcodes |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.path "openvm_instructions::VmOpcode" ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.path "openvm_instructions::VmOpcode" ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path "openvm_instructions::VmOpcode";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, opcodes |) ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "openvm_instructions::VmOpcode" ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "openvm_instructions::VmOpcode" ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "openvm_instructions::VmOpcode" ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.path "openvm_instructions::VmOpcode" ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let opcode :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "openvm_instructions::VmOpcode" ],
                                                      γ0_0
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "std::collections::hash::map::HashMap")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "openvm_instructions::VmOpcode";
                                                                      Ty.path "usize";
                                                                      Ty.path
                                                                        "rustc_hash::FxBuildHasher"
                                                                    ],
                                                                  "get",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "openvm_instructions::VmOpcode"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "openvm_circuit::arch::extensions::VmInventory",
                                                                      "instruction_lookup"
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| opcode |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::option::Option::Some",
                                                              0
                                                            |) in
                                                          let id :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              γ0_0
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                Value.StructTuple
                                                                  "core::result::Result::Err"
                                                                  []
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "openvm_circuit::arch::extensions::VmInventoryError"
                                                                  ]
                                                                  [
                                                                    Value.mkStructRecord
                                                                      "openvm_circuit::arch::extensions::VmInventoryError::ExecutorExists"
                                                                      []
                                                                      []
                                                                      [
                                                                        ("opcode",
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| opcode |)
                                                                            |)
                                                                          |));
                                                                        ("id",
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| id |)
                                                                            |)
                                                                          |))
                                                                      ]
                                                                  ]
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ id : Ty.path "usize" :=
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ E; Ty.path "alloc::alloc::Global" ],
                        "len",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "executors"
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ E; Ty.path "alloc::alloc::Global" ],
                        "push",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "executors"
                          |)
                        |);
                        M.call_closure (|
                          E,
                          M.get_trait_method (|
                            "core::convert::Into",
                            impl_Into_E_,
                            [],
                            [ E ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| executor |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                            Ty.path "alloc::alloc::Global"
                          ],
                        "push",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "insertion_order"
                          |)
                        |);
                        Value.StructTuple
                          "openvm_circuit::arch::extensions::ChipId::Executor"
                          []
                          []
                          [ M.read (| id |) ]
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.path "openvm_instructions::VmOpcode";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.path "openvm_instructions::VmOpcode";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "openvm_instructions::VmOpcode";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [ M.read (| opcodes |) ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.path "openvm_instructions::VmOpcode";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "openvm_instructions::VmOpcode" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "openvm_instructions::VmOpcode" ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.path "openvm_instructions::VmOpcode";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let opcode :=
                                                    M.copy (|
                                                      Ty.path "openvm_instructions::VmOpcode",
                                                      γ0_0
                                                    |) in
                                                  M.read (|
                                                    let~ _ :
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ] :=
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "std::collections::hash::map::HashMap")
                                                            []
                                                            [
                                                              Ty.path
                                                                "openvm_instructions::VmOpcode";
                                                              Ty.path "usize";
                                                              Ty.path "rustc_hash::FxBuildHasher"
                                                            ],
                                                          "insert",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_circuit::arch::extensions::VmInventory",
                                                              "instruction_lookup"
                                                            |)
                                                          |);
                                                          M.read (| opcode |);
                                                          M.read (| id |)
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ]
                      [ Value.Tuple [] ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_add_executor :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "add_executor" (add_executor E P).
      Admitted.
      Global Typeclasses Opaque add_executor.
      
      (*
          pub fn add_periphery_chip(&mut self, periphery_chip: impl Into<P>) {
              let id = self.periphery.len();
              self.periphery.push(periphery_chip.into());
              self.insertion_order.push(ChipId::Periphery(id));
          }
      *)
      Definition add_periphery_chip
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [ impl_Into_P_ ], [ self; periphery_chip ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            let periphery_chip := M.alloc (| impl_Into_P_, periphery_chip |) in
            M.read (|
              let~ id : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                    "len",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmInventory",
                        "periphery"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmInventory",
                        "periphery"
                      |)
                    |);
                    M.call_closure (|
                      P,
                      M.get_trait_method (|
                        "core::convert::Into",
                        impl_Into_P_,
                        [],
                        [ P ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| periphery_chip |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmInventory",
                        "insertion_order"
                      |)
                    |);
                    Value.StructTuple
                      "openvm_circuit::arch::extensions::ChipId::Periphery"
                      []
                      []
                      [ M.read (| id |) ]
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_add_periphery_chip :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "add_periphery_chip" (add_periphery_chip E P).
      Admitted.
      Global Typeclasses Opaque add_periphery_chip.
      
      (*
          pub fn get_executor(&self, opcode: VmOpcode) -> Option<&E> {
              let id = self.instruction_lookup.get(&opcode)?;
              self.executors.get( *id)
          }
      *)
      Definition get_executor
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "openvm_instructions::VmOpcode", opcode |) in
            M.catch_return
              (Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ E ] ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ id : Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "core::convert::Infallible" ];
                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  []
                                  [
                                    Ty.path "openvm_instructions::VmOpcode";
                                    Ty.path "usize";
                                    Ty.path "rustc_hash::FxBuildHasher"
                                  ],
                                "get",
                                [],
                                [ Ty.path "openvm_instructions::VmOpcode" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::extensions::VmInventory",
                                    "instruction_lookup"
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, opcode |) |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::convert::Infallible" ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ E ] ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ E ] ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ E ] ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ E ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ E ],
                        "get",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ E ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ E; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::extensions::VmInventory",
                                    "executors"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.read (| M.deref (| M.read (| id |) |) |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_executor :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "get_executor" (get_executor E P).
      Admitted.
      Global Typeclasses Opaque get_executor.
      
      (*
          pub fn get_mut_executor(&mut self, opcode: &VmOpcode) -> Option<&mut E> {
              let id = self.instruction_lookup.get(opcode)?;
              self.executors.get_mut( *id)
          }
      *)
      Definition get_mut_executor
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            let opcode :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_instructions::VmOpcode" ],
                opcode
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&mut") [] [ E ] ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ id : Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "core::convert::Infallible" ];
                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::collections::hash::map::HashMap")
                                  []
                                  [
                                    Ty.path "openvm_instructions::VmOpcode";
                                    Ty.path "usize";
                                    Ty.path "rustc_hash::FxBuildHasher"
                                  ],
                                "get",
                                [],
                                [ Ty.path "openvm_instructions::VmOpcode" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::extensions::VmInventory",
                                    "instruction_lookup"
                                  |)
                                |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| opcode |) |) |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::convert::Infallible" ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ E ] ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&mut") [] [ E ] ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&mut") [] [ E ] ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&mut") [] [ E ] ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ E ],
                        "get_mut",
                        [],
                        [ Ty.path "usize" ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ E ] ],
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ E; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::extensions::VmInventory",
                                    "executors"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.read (| M.deref (| M.read (| id |) |) |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_mut_executor :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "get_mut_executor" (get_mut_executor E P).
      Admitted.
      Global Typeclasses Opaque get_mut_executor.
      
      (*
          pub fn executors(&self) -> &[E] {
              &self.executors
          }
      *)
      Definition executors (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ E ] ],
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "deref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "executors"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_executors :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "executors" (executors E P).
      Admitted.
      Global Typeclasses Opaque executors.
      
      (*
          pub fn periphery(&self) -> &[P] {
              &self.periphery
          }
      *)
      Definition periphery (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ P ] ],
                  M.get_trait_method (|
                    "core::ops::deref::Deref",
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "deref",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventory",
                            "periphery"
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_periphery :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "periphery" (periphery E P).
      Admitted.
      Global Typeclasses Opaque periphery.
      
      (*
          pub fn num_airs(&self) -> usize {
              self.executors.len() + self.periphery.len()
          }
      *)
      Definition num_airs (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.add,
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ E; Ty.path "alloc::alloc::Global" ],
                    "len",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmInventory",
                        "executors"
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ P; Ty.path "alloc::alloc::Global" ],
                    "len",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmInventory",
                        "periphery"
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_airs :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "num_airs" (num_airs E P).
      Admitted.
      Global Typeclasses Opaque num_airs.
      
      (*
          pub fn get_trace_heights(&self) -> VmInventoryTraceHeights
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              VmInventoryTraceHeights {
                  chips: self
                      .executors
                      .iter()
                      .enumerate()
                      .map(|(i, chip)| (ChipId::Executor(i), chip.current_trace_height()))
                      .chain(
                          self.periphery
                              .iter()
                              .enumerate()
                              .map(|(i, chip)| (ChipId::Periphery(i), chip.current_trace_height())),
                      )
                      .collect(),
              }
          }
      *)
      Definition get_trace_heights
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
              []
              []
              [
                ("chips",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                (Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ])
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                (Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ])
                            ]
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          []
                          [
                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                            Ty.path "usize";
                            Ty.path "rustc_hash::FxBuildHasher"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                (Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ])
                            ],
                          [],
                          [],
                          "chain",
                          [],
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ],
                              [],
                              [],
                              "map",
                              [],
                              [
                                Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ E ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ E ] ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ E; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                  "executors"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.tuple
                                            [
                                              Ty.path "openvm_circuit::arch::extensions::ChipId";
                                              Ty.path "usize"
                                            ],
                                          M.alloc (|
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ],
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                let chip :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ E ],
                                                    γ0_1
                                                  |) in
                                                Value.Tuple
                                                  [
                                                    Value.StructTuple
                                                      "openvm_circuit::arch::extensions::ChipId::Executor"
                                                      []
                                                      []
                                                      [ M.read (| i |) ];
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "openvm_stark_backend::chip::ChipUsageGetter",
                                                        E,
                                                        [],
                                                        [],
                                                        "current_trace_height",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| chip |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                              [],
                              [],
                              "map",
                              [],
                              [
                                Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ P ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ P ] ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ P; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                  "periphery"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.tuple
                                            [
                                              Ty.path "openvm_circuit::arch::extensions::ChipId";
                                              Ty.path "usize"
                                            ],
                                          M.alloc (|
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ],
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                let chip :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ P ],
                                                    γ0_1
                                                  |) in
                                                Value.Tuple
                                                  [
                                                    Value.StructTuple
                                                      "openvm_circuit::arch::extensions::ChipId::Periphery"
                                                      []
                                                      []
                                                      [ M.read (| i |) ];
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_trait_method (|
                                                        "openvm_stark_backend::chip::ChipUsageGetter",
                                                        P,
                                                        [],
                                                        [],
                                                        "current_trace_height",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| chip |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        ]
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_trace_heights :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "get_trace_heights" (get_trace_heights E P).
      Admitted.
      Global Typeclasses Opaque get_trace_heights.
      
      (*
          pub fn get_dummy_trace_heights(&self) -> VmInventoryTraceHeights
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              VmInventoryTraceHeights {
                  chips: self
                      .executors
                      .iter()
                      .enumerate()
                      .map(|(i, _)| (ChipId::Executor(i), 1))
                      .chain(self.periphery.iter().enumerate().map(|(i, chip)| {
                          (
                              ChipId::Periphery(i),
                              chip.constant_trace_height().unwrap_or(1),
                          )
                      }))
                      .collect(),
              }
          }
      *)
      Definition get_dummy_trace_heights
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
              []
              []
              [
                ("chips",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      []
                      [
                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                        Ty.path "usize";
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                (Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ])
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                (Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ])
                            ]
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          []
                          [
                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                            Ty.path "usize";
                            Ty.path "rustc_hash::FxBuildHasher"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                (Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ])
                            ],
                          [],
                          [],
                          "chain",
                          [],
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ],
                              [],
                              [],
                              "map",
                              [],
                              [
                                Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ E ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ E ] ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ E; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                  "executors"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.tuple
                                            [
                                              Ty.path "openvm_circuit::arch::extensions::ChipId";
                                              Ty.path "usize"
                                            ],
                                          M.alloc (|
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ E ] ],
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                Value.Tuple
                                                  [
                                                    Value.StructTuple
                                                      "openvm_circuit::arch::extensions::ChipId::Executor"
                                                      []
                                                      []
                                                      [ M.read (| i |) ];
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                              [],
                              [],
                              "map",
                              [],
                              [
                                Ty.tuple
                                  [
                                    Ty.path "openvm_circuit::arch::extensions::ChipId";
                                    Ty.path "usize"
                                  ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ] ]
                                  (Ty.tuple
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "usize"
                                    ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ] ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                  [],
                                  [],
                                  "enumerate",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [] [ P ],
                                      "iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ P ] ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ P; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                  "periphery"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.tuple
                                            [
                                              Ty.path "openvm_circuit::arch::extensions::ChipId";
                                              Ty.path "usize"
                                            ],
                                          M.alloc (|
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.apply (Ty.path "&") [] [ P ] ],
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                let chip :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ P ],
                                                    γ0_1
                                                  |) in
                                                Value.Tuple
                                                  [
                                                    Value.StructTuple
                                                      "openvm_circuit::arch::extensions::ChipId::Periphery"
                                                      []
                                                      []
                                                      [ M.read (| i |) ];
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        "unwrap_or",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_trait_method (|
                                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                                            P,
                                                            [],
                                                            [],
                                                            "constant_trace_height",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| chip |) |)
                                                            |)
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  ]))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        ]
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_dummy_trace_heights :
        forall (E P : Ty.t),
        M.IsAssociatedFunction.C (Self E P) "get_dummy_trace_heights" (get_dummy_trace_heights E P).
      Admitted.
      Global Typeclasses Opaque get_dummy_trace_heights.
    End Impl_openvm_circuit_arch_extensions_VmInventory_E_P.
    
    Module Impl_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights".
      
      (*
          pub fn round_to_next_power_of_two(&mut self) {
              self.chips
                  .values_mut()
                  .for_each(|v| *v = v.next_power_of_two());
          }
      *)
      Definition round_to_next_power_of_two
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "std::collections::hash::map::ValuesMut")
                      []
                      [ Ty.path "openvm_circuit::arch::extensions::ChipId"; Ty.path "usize" ],
                    [],
                    [],
                    "for_each",
                    [],
                    [ Ty.function [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ] (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "std::collections::hash::map::ValuesMut")
                        []
                        [ Ty.path "openvm_circuit::arch::extensions::ChipId"; Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          []
                          [
                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                            Ty.path "usize";
                            Ty.path "rustc_hash::FxBuildHasher"
                          ],
                        "values_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                            "chips"
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let v :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                          γ
                                        |) in
                                      M.write (|
                                        M.deref (| M.read (| v |) |),
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.path "usize",
                                            "next_power_of_two",
                                            [],
                                            []
                                          |),
                                          [ M.read (| M.deref (| M.read (| v |) |) |) ]
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_round_to_next_power_of_two :
        M.IsAssociatedFunction.C Self "round_to_next_power_of_two" round_to_next_power_of_two.
      Admitted.
      Global Typeclasses Opaque round_to_next_power_of_two.
      
      (*
          pub fn round_to_next_power_of_two_or_zero(&mut self) {
              self.chips
                  .values_mut()
                  .for_each(|v| *v = next_power_of_two_or_zero( *v));
          }
      *)
      Definition round_to_next_power_of_two_or_zero
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "std::collections::hash::map::ValuesMut")
                      []
                      [ Ty.path "openvm_circuit::arch::extensions::ChipId"; Ty.path "usize" ],
                    [],
                    [],
                    "for_each",
                    [],
                    [ Ty.function [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ] (Ty.tuple [])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "std::collections::hash::map::ValuesMut")
                        []
                        [ Ty.path "openvm_circuit::arch::extensions::ChipId"; Ty.path "usize" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          []
                          [
                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                            Ty.path "usize";
                            Ty.path "rustc_hash::FxBuildHasher"
                          ],
                        "values_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                            "chips"
                          |)
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ], α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let v :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                          γ
                                        |) in
                                      M.write (|
                                        M.deref (| M.read (| v |) |),
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_function (|
                                            "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                                            [],
                                            []
                                          |),
                                          [ M.read (| M.deref (| M.read (| v |) |) |) ]
                                        |)
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_round_to_next_power_of_two_or_zero :
        M.IsAssociatedFunction.C
          Self
          "round_to_next_power_of_two_or_zero"
          round_to_next_power_of_two_or_zero.
      Admitted.
      Global Typeclasses Opaque round_to_next_power_of_two_or_zero.
    End Impl_openvm_circuit_arch_extensions_VmInventoryTraceHeights.
    
    
    (* StructRecord
      {
        name := "VmChipComplex";
        const_params := [];
        ty_params := [ "F"; "E"; "P" ];
        fields :=
          [
            ("config", Ty.path "openvm_circuit::arch::config::SystemConfig");
            ("base", Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ]);
            ("inventory",
              Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ]);
            ("overridden_inventory_heights",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ]);
            ("max_trace_height", Ty.path "usize");
            ("streams",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("bus_idx_mgr", Ty.path "openvm_circuit::arch::extensions::BusIndexManager")
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_extensions_VmChipComplex_F_E_P.
      Definition Self (F E P : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmChipComplex") [] [ F; E; P ].
      
      (* Getters *)
      Definition config (F E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmChipComplex",
                    "config"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_config :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "config" (config F E P).
      Admitted.
      Global Typeclasses Opaque config.
      (*     pub(super) const PV_EXECUTOR_IDX: ExecutorId = 0; *)
      (* Ty.path "usize" *)
      Definition value_PV_EXECUTOR_IDX
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |))).
      
      Global Instance AssociatedConstant_value_PV_EXECUTOR_IDX :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "PV_EXECUTOR_IDX" (value_PV_EXECUTOR_IDX F E P).
      Admitted.
      Global Typeclasses Opaque value_PV_EXECUTOR_IDX.
      
      (*     pub(super) const POSEIDON2_PERIPHERY_IDX: usize = 0; *)
      (* Ty.path "usize" *)
      Definition value_POSEIDON2_PERIPHERY_IDX
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |))).
      
      Global Instance AssociatedConstant_value_POSEIDON2_PERIPHERY_IDX :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "POSEIDON2_PERIPHERY_IDX"
          (value_POSEIDON2_PERIPHERY_IDX F E P).
      Admitted.
      Global Typeclasses Opaque value_POSEIDON2_PERIPHERY_IDX.
      
      (*
          pub fn inventory_builder(&self) -> VmInventoryBuilder<F>
          where
              E: AnyEnum,
              P: AnyEnum,
          {
              let mut builder =
                  VmInventoryBuilder::new(&self.config, &self.base, &self.streams, self.bus_idx_mgr);
              // Add range checker for convenience, the other system base chips aren't included - they can
              // be accessed directly from builder
              builder.add_chip(&self.base.range_checker_chip);
              for chip in self.inventory.executors() {
                  builder.add_chip(chip);
              }
              for chip in self.inventory.periphery() {
                  builder.add_chip(chip);
              }
      
              builder
          }
      *)
      Definition inventory_builder
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.read (|
              let~ builder :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmChipComplex",
                            "config"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmChipComplex",
                            "base"
                          |)
                        |)
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::VmChipComplex",
                            "streams"
                          |)
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "bus_idx_mgr"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                      []
                      [ F ],
                    "add_chip",
                    [],
                    [ Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                    ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, builder |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::VmChipComplex",
                              "base"
                            |),
                            "openvm_circuit::arch::extensions::SystemBase",
                            "range_checker_chip"
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ E ] ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ E ] ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [ E; P ],
                                  "executors",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                      "inventory"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ E ] ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ E ] ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ E ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let chip :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ E ],
                                                  γ0_0
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                        []
                                                        [ F ],
                                                      "add_chip",
                                                      [],
                                                      [ E ]
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, builder |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| chip |) |)
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ P ] ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ P ] ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [ E; P ],
                                  "periphery",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                      "inventory"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ P ] ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&") [] [ P ] ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ P ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let chip :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ P ],
                                                  γ0_0
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::extensions::VmInventoryBuilder")
                                                        []
                                                        [ F ],
                                                      "add_chip",
                                                      [],
                                                      [ P ]
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, builder |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| chip |) |)
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              builder
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_inventory_builder :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "inventory_builder" (inventory_builder F E P).
      Admitted.
      Global Typeclasses Opaque inventory_builder.
      
      (*
          pub fn extend<E3, P3, Ext>(
              mut self,
              config: &Ext,
          ) -> Result<VmChipComplex<F, E3, P3>, VmInventoryError>
          where
              Ext: VmExtension<F>,
              E: Into<E3> + AnyEnum,
              P: Into<P3> + AnyEnum,
              Ext::Executor: Into<E3>,
              Ext::Periphery: Into<P3>,
          {
              let mut builder = self.inventory_builder();
              let inventory_ext = config.build(&mut builder)?;
              self.bus_idx_mgr = builder.bus_idx_mgr;
              let mut ext_complex = self.transmute();
              ext_complex.append(inventory_ext.transmute())?;
              Ok(ext_complex)
          }
      *)
      Definition extend (F E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [ E3; P3; Ext ], [ self; config ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmChipComplex") [] [ F; E; P ],
                self
              |) in
            let config := M.alloc (| Ty.apply (Ty.path "&") [] [ Ext ], config |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                    []
                    [ F; E3; P3 ];
                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ builder :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                        []
                        [ F ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventoryBuilder")
                        []
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [ F; E; P ],
                        "inventory_builder",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, self |) ]
                    |) in
                  let~ inventory_ext :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_circuit::arch::extensions::VmExtension"
                            []
                            [ F ]
                            Ext
                            "Executor";
                          Ty.associated_in_trait
                            "openvm_circuit::arch::extensions::VmExtension"
                            []
                            [ F ]
                            Ext
                            "Periphery"
                        ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_circuit::arch::extensions::VmExtension"
                            []
                            [ F ]
                            Ext
                            "Executor";
                          Ty.associated_in_trait
                            "openvm_circuit::arch::extensions::VmExtension"
                            []
                            [ F ]
                            Ext
                            "Periphery"
                        ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::extensions::VmExtension"
                                  []
                                  [ F ]
                                  Ext
                                  "Executor";
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::extensions::VmExtension"
                                  []
                                  [ F ]
                                  Ext
                                  "Periphery"
                              ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ];
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_circuit::arch::extensions::VmExtension"
                                    []
                                    [ F ]
                                    Ext
                                    "Executor";
                                  Ty.associated_in_trait
                                    "openvm_circuit::arch::extensions::VmExtension"
                                    []
                                    [ F ]
                                    Ext
                                    "Periphery"
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::extensions::VmExtension"
                                      []
                                      [ F ]
                                      Ext
                                      "Executor";
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::extensions::VmExtension"
                                      []
                                      [ F ]
                                      Ext
                                      "Periphery"
                                  ];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::extensions::VmExtension"
                                        []
                                        [ F ]
                                        Ext
                                        "Executor";
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::extensions::VmExtension"
                                        []
                                        [ F ]
                                        Ext
                                        "Periphery"
                                    ];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              M.get_trait_method (|
                                "openvm_circuit::arch::extensions::VmExtension",
                                Ext,
                                [],
                                [ F ],
                                "build",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| config |) |) |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.borrow (| Pointer.Kind.MutRef, builder |) |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E3; P3 ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmChipComplex")
                                            []
                                            [ F; E3; P3 ];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::extensions::VmExtension"
                                      []
                                      [ F ]
                                      Ext
                                      "Executor";
                                    Ty.associated_in_trait
                                      "openvm_circuit::arch::extensions::VmExtension"
                                      []
                                      [ F ]
                                      Ext
                                      "Periphery"
                                  ],
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.write (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "bus_idx_mgr"
                      |),
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          builder,
                          "openvm_circuit::arch::extensions::VmInventoryBuilder",
                          "bus_idx_mgr"
                        |)
                      |)
                    |) in
                  let~ ext_complex :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                        []
                        [ F; E3; P3 ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                        []
                        [ F; E3; P3 ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [ F; E; P ],
                        "transmute",
                        [],
                        [ E3; P3 ]
                      |),
                      [ M.read (| self |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ];
                            Ty.tuple []
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ];
                              Ty.tuple []
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [ F; E3; P3 ],
                                "append",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, ext_complex |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [ E3; P3 ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::extensions::VmExtension"
                                          []
                                          [ F ]
                                          Ext
                                          "Executor";
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::extensions::VmExtension"
                                          []
                                          [ F ]
                                          Ext
                                          "Periphery"
                                      ],
                                    "transmute",
                                    [],
                                    [ E3; P3 ]
                                  |),
                                  [ M.read (| inventory_ext |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E3; P3 ];
                                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmChipComplex")
                                            []
                                            [ F; E3; P3 ];
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmInventoryError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::extensions::VmInventoryError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.tuple [], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [ F; E3; P3 ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [ F; E3; P3 ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ]
                      [ M.read (| ext_complex |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_extend :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "extend" (extend F E P).
      Admitted.
      Global Typeclasses Opaque extend.
      
      (*
          pub fn transmute<E2, P2>(self) -> VmChipComplex<F, E2, P2>
          where
              E: Into<E2>,
              P: Into<P2>,
          {
              VmChipComplex {
                  config: self.config,
                  base: self.base,
                  inventory: self.inventory.transmute(),
                  bus_idx_mgr: self.bus_idx_mgr,
                  streams: self.streams,
                  overridden_inventory_heights: self.overridden_inventory_heights,
                  max_trace_height: self.max_trace_height,
              }
          }
      *)
      Definition transmute
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [ E2; P2 ], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmChipComplex") [] [ F; E; P ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmChipComplex"
              []
              [ F; E2; P2 ]
              [
                ("config",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "config"
                    |)
                  |));
                ("base",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "base"
                    |)
                  |));
                ("inventory",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [ E2; P2 ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                        []
                        [ E; P ],
                      "transmute",
                      [],
                      [ E2; P2 ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_circuit::arch::extensions::VmChipComplex",
                          "inventory"
                        |)
                      |)
                    ]
                  |));
                ("bus_idx_mgr",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "bus_idx_mgr"
                    |)
                  |));
                ("streams",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "streams"
                    |)
                  |));
                ("overridden_inventory_heights",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "overridden_inventory_heights"
                    |)
                  |));
                ("max_trace_height",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "max_trace_height"
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_transmute :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "transmute" (transmute F E P).
      Admitted.
      Global Typeclasses Opaque transmute.
      
      (*
          pub fn append(&mut self, other: VmInventory<E, P>) -> Result<(), VmInventoryError> {
              self.inventory.append(other)
          }
      *)
      Definition append (F E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; other ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let other :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                other
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                "append",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmChipComplex",
                    "inventory"
                  |)
                |);
                M.read (| other |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_append :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "append" (append F E P).
      Admitted.
      Global Typeclasses Opaque append.
      
      (*
          pub fn program_chip(&self) -> &ProgramChip<F> {
              &self.base.program_chip
          }
      *)
      Definition program_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "base"
                    |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "program_chip"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_program_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "program_chip" (program_chip F E P).
      Admitted.
      Global Typeclasses Opaque program_chip.
      
      (*
          pub fn program_chip_mut(&mut self) -> &mut ProgramChip<F> {
              &mut self.base.program_chip
          }
      *)
      Definition program_chip_mut
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::extensions::VmChipComplex",
                          "base"
                        |),
                        "openvm_circuit::arch::extensions::SystemBase",
                        "program_chip"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_program_chip_mut :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "program_chip_mut" (program_chip_mut F E P).
      Admitted.
      Global Typeclasses Opaque program_chip_mut.
      
      (*
          pub fn connector_chip(&self) -> &VmConnectorChip<F> {
              &self.base.connector_chip
          }
      *)
      Definition connector_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "base"
                    |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "connector_chip"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_connector_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "connector_chip" (connector_chip F E P).
      Admitted.
      Global Typeclasses Opaque connector_chip.
      
      (*
          pub fn connector_chip_mut(&mut self) -> &mut VmConnectorChip<F> {
              &mut self.base.connector_chip
          }
      *)
      Definition connector_chip_mut
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::extensions::VmChipComplex",
                          "base"
                        |),
                        "openvm_circuit::arch::extensions::SystemBase",
                        "connector_chip"
                      |)
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_connector_chip_mut :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "connector_chip_mut" (connector_chip_mut F E P).
      Admitted.
      Global Typeclasses Opaque connector_chip_mut.
      
      (*
          pub fn memory_controller(&self) -> &MemoryController<F> {
              &self.base.memory_controller
          }
      *)
      Definition memory_controller
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "base"
                    |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "memory_controller"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_controller :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "memory_controller" (memory_controller F E P).
      Admitted.
      Global Typeclasses Opaque memory_controller.
      
      (*
          pub fn range_checker_chip(&self) -> &SharedVariableRangeCheckerChip {
              &self.base.range_checker_chip
          }
      *)
      Definition range_checker_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "base"
                    |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "range_checker_chip"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_range_checker_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "range_checker_chip" (range_checker_chip F E P).
      Admitted.
      Global Typeclasses Opaque range_checker_chip.
      
      (*
          pub fn public_values_chip(&self) -> Option<&PublicValuesChip<F>>
          where
              E: AnyEnum,
          {
              let chip = self.inventory.executors().get(Self::PV_EXECUTOR_IDX)?;
              chip.as_any_kind().downcast_ref()
          }
      *)
      Definition public_values_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0 ]
                            [ F ];
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                            []
                            [ F ]
                        ]
                    ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ chip : Ty.apply (Ty.path "&") [] [ E ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "&") [] [ E ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.apply (Ty.path "&") [] [ E ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "core::convert::Infallible" ];
                              Ty.apply (Ty.path "&") [] [ E ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ E ] ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ E ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ E ],
                                "get",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ E ] ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                          []
                                          [ E; P ],
                                        "executors",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::extensions::VmChipComplex",
                                            "inventory"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "PV_EXECUTOR_IDX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::convert::Infallible" ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 2;
                                                    Value.Integer IntegerKind.Usize 0
                                                  ]
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::integration_api::VmChipWrapper")
                                                []
                                                [
                                                  F;
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 0
                                                    ]
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.apply (Ty.path "&") [] [ E ], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ]
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 0
                                    ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                    []
                                    [ F ]
                                ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.dyn [ ("core::any::Any::Trait", []) ],
                        "downcast_ref",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 0
                                ]
                                [ F ];
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                []
                                [ F ]
                            ]
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              M.get_trait_method (|
                                "openvm_circuit::arch::extensions::AnyEnum",
                                E,
                                [],
                                [],
                                "as_any_kind",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_public_values_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "public_values_chip" (public_values_chip F E P).
      Admitted.
      Global Typeclasses Opaque public_values_chip.
      
      (*
          pub fn poseidon2_chip(&self) -> Option<&Poseidon2PeripheryChip<F>>
          where
              P: AnyEnum,
          {
              let chip = self
                  .inventory
                  .periphery
                  .get(Self::POSEIDON2_PERIPHERY_IDX)?;
              chip.as_any_kind().downcast_ref()
          }
      *)
      Definition poseidon2_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                        []
                        [ F ]
                    ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ chip : Ty.apply (Ty.path "&") [] [ P ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "&") [] [ P ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.apply (Ty.path "&") [] [ P ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "core::convert::Infallible" ];
                              Ty.apply (Ty.path "&") [] [ P ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&") [] [ P ] ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ P ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ P ],
                                "get",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ P ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ P; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::arch::extensions::VmChipComplex",
                                              "inventory"
                                            |),
                                            "openvm_circuit::arch::extensions::VmInventory",
                                            "periphery"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "POSEIDON2_PERIPHERY_IDX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::convert::Infallible" ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.apply (Ty.path "&") [] [ P ], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [ F ]
                          ]
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                []
                                [ F ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.dyn [ ("core::any::Any::Trait", []) ],
                        "downcast_ref",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                            []
                            [ F ]
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              M.get_trait_method (|
                                "openvm_circuit::arch::extensions::AnyEnum",
                                P,
                                [],
                                [],
                                "as_any_kind",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_poseidon2_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "poseidon2_chip" (poseidon2_chip F E P).
      Admitted.
      Global Typeclasses Opaque poseidon2_chip.
      
      (*
          pub fn poseidon2_chip_mut(&mut self) -> Option<&mut Poseidon2PeripheryChip<F>>
          where
              P: AnyEnum,
          {
              let chip = self
                  .inventory
                  .periphery
                  .get_mut(Self::POSEIDON2_PERIPHERY_IDX)?;
              chip.as_any_kind_mut().downcast_mut()
          }
      *)
      Definition poseidon2_chip_mut
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                        []
                        [ F ]
                    ]
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ chip : Ty.apply (Ty.path "&mut") [] [ P ] :=
                    M.match_operator (|
                      Ty.apply (Ty.path "&mut") [] [ P ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "core::convert::Infallible" ];
                            Ty.apply (Ty.path "&mut") [] [ P ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "core::convert::Infallible" ];
                              Ty.apply (Ty.path "&mut") [] [ P ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "&mut") [] [ P ] ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&mut") [] [ P ] ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ P ],
                                "get_mut",
                                [],
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ P ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ P; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::arch::extensions::VmChipComplex",
                                              "inventory"
                                            |),
                                            "openvm_circuit::arch::extensions::VmInventory",
                                            "periphery"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |);
                                M.read (|
                                  get_associated_constant (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "POSEIDON2_PERIPHERY_IDX",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::convert::Infallible" ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "core::convert::Infallible" ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.apply (Ty.path "&mut") [] [ P ], γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [ F ]
                          ]
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                []
                                [ F ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.dyn [ ("core::any::Any::Trait", []) ],
                        "downcast_mut",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                            []
                            [ F ]
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              M.get_trait_method (|
                                "openvm_circuit::arch::extensions::AnyEnum",
                                P,
                                [],
                                [],
                                "as_any_kind_mut",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| chip |) |) |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_poseidon2_chip_mut :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "poseidon2_chip_mut" (poseidon2_chip_mut F E P).
      Admitted.
      Global Typeclasses Opaque poseidon2_chip_mut.
      
      (*
          pub fn finalize_memory(&mut self)
          where
              P: AnyEnum,
          {
              if self.config.continuation_enabled {
                  let chip = self
                      .inventory
                      .periphery
                      .get_mut(Self::POSEIDON2_PERIPHERY_IDX)
                      .expect("Poseidon2 chip required for persistent memory");
                  let hasher: &mut Poseidon2PeripheryChip<F> = chip
                      .as_any_kind_mut()
                      .downcast_mut()
                      .expect("Poseidon2 chip required for persistent memory");
                  self.base.memory_controller.finalize(Some(hasher))
              } else {
                  self.base
                      .memory_controller
                      .finalize(None::<&mut Poseidon2PeripheryChip<F>>)
              };
          }
      *)
      Definition finalize_memory
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::extensions::VmChipComplex",
                                "config"
                              |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "continuation_enabled"
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ chip : Ty.apply (Ty.path "&mut") [] [ P ] :=
                            M.call_closure (|
                              Ty.apply (Ty.path "&mut") [] [ P ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&mut") [] [ P ] ],
                                "expect",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ P ] ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [] [ P ],
                                    "get_mut",
                                    [],
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [ Ty.apply (Ty.path "slice") [] [ P ] ],
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ P; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            [],
                                            "deref_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::arch::extensions::VmChipComplex",
                                                  "inventory"
                                                |),
                                                "openvm_circuit::arch::extensions::VmInventory",
                                                "periphery"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.read (|
                                      get_associated_constant (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "POSEIDON2_PERIPHERY_IDX",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    mk_str (| "Poseidon2 chip required for persistent memory" |)
                                  |)
                                |)
                              ]
                            |) in
                          let~ hasher :
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                    []
                                    [ F ]
                                ] :=
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                        []
                                        [ F ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    "expect",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.dyn [ ("core::any::Any::Trait", []) ],
                                        "downcast_mut",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                            []
                                            [ F ]
                                        ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                              M.get_trait_method (|
                                                "openvm_circuit::arch::extensions::AnyEnum",
                                                P,
                                                [],
                                                [],
                                                "as_any_kind_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| chip |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        mk_str (| "Poseidon2 chip required for persistent memory" |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          M.alloc (|
                            Ty.tuple [],
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ],
                                "finalize",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                    []
                                    [ F ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                      "base"
                                    |),
                                    "openvm_circuit::arch::extensions::SystemBase",
                                    "memory_controller"
                                  |)
                                |);
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                          []
                                          [ F ]
                                      ]
                                  ]
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| hasher |) |)
                                    |)
                                  ]
                              ]
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.tuple [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "finalize",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                []
                                [ F ]
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::extensions::VmChipComplex",
                                  "base"
                                |),
                                "openvm_circuit::arch::extensions::SystemBase",
                                "memory_controller"
                              |)
                            |);
                            Value.StructTuple
                              "core::option::Option::None"
                              []
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                      []
                                      [ F ]
                                  ]
                              ]
                              []
                          ]
                        |)))
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_finalize_memory :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "finalize_memory" (finalize_memory F E P).
      Admitted.
      Global Typeclasses Opaque finalize_memory.
      
      (*
          pub(crate) fn set_program(&mut self, program: Program<F>) {
              self.base.program_chip.set_program(program);
          }
      *)
      Definition set_program
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; program ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let program :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                program
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ],
                    "set_program",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::extensions::VmChipComplex",
                          "base"
                        |),
                        "openvm_circuit::arch::extensions::SystemBase",
                        "program_chip"
                      |)
                    |);
                    M.read (| program |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_program :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "set_program" (set_program F E P).
      Admitted.
      Global Typeclasses Opaque set_program.
      
      (*
          pub(crate) fn set_initial_memory(&mut self, memory: MemoryImage<F>) {
              self.base.memory_controller.set_initial_memory(memory);
          }
      *)
      Definition set_initial_memory
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; memory ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                      |))
                  ]
                  [ F ],
                memory
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ],
                    "set_initial_memory",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::extensions::VmChipComplex",
                          "base"
                        |),
                        "openvm_circuit::arch::extensions::SystemBase",
                        "memory_controller"
                      |)
                    |);
                    M.read (| memory |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_initial_memory :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "set_initial_memory" (set_initial_memory F E P).
      Admitted.
      Global Typeclasses Opaque set_initial_memory.
      
      (*
          pub(crate) fn set_streams(&mut self, streams: Streams<F>) {
              *self.streams.lock().unwrap() = streams;
          }
      *)
      Definition set_streams
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; streams ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let streams :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                streams
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                      M.get_trait_method (|
                        "core::ops::deref::DerefMut",
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                        [],
                        [],
                        "deref_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              []
                              [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_circuit::arch::vm::Streams")
                                          []
                                          [ F ]
                                      ];
                                    Ty.apply
                                      (Ty.path "std::sync::poison::PoisonError")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_circuit::arch::vm::Streams")
                                              []
                                              [ F ]
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::arch::vm::Streams")
                                            []
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "openvm_circuit::arch::vm::Streams")
                                                []
                                                [ F ]
                                            ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_circuit::arch::vm::Streams")
                                          []
                                          [ F ]
                                      ],
                                    "lock",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::Mutex")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "openvm_circuit::arch::vm::Streams")
                                                    []
                                                    [ F ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::Mutex")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "openvm_circuit::arch::vm::Streams")
                                                      []
                                                      [ F ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::arch::extensions::VmChipComplex",
                                                "streams"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |),
                  M.read (| streams |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_streams :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "set_streams" (set_streams F E P).
      Admitted.
      Global Typeclasses Opaque set_streams.
      
      (*
          pub fn take_streams(&mut self) -> Streams<F> {
              std::mem::take(&mut self.streams.lock().unwrap())
          }
      *)
      Definition take_streams
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
              M.get_function (|
                "core::mem::take",
                [],
                [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                      M.get_trait_method (|
                        "core::ops::deref::DerefMut",
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                        [],
                        [],
                        "deref_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::vm::Streams")
                                        []
                                        [ F ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_circuit::arch::vm::Streams")
                                              []
                                              [ F ]
                                          ];
                                        Ty.apply
                                          (Ty.path "std::sync::poison::PoisonError")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::MutexGuard")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "openvm_circuit::arch::vm::Streams")
                                                  []
                                                  [ F ]
                                              ]
                                          ]
                                      ],
                                    "unwrap",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "openvm_circuit::arch::vm::Streams")
                                                []
                                                [ F ]
                                            ];
                                          Ty.apply
                                            (Ty.path "std::sync::poison::PoisonError")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "openvm_circuit::arch::vm::Streams")
                                                    []
                                                    [ F ]
                                                ]
                                            ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_circuit::arch::vm::Streams")
                                              []
                                              [ F ]
                                          ],
                                        "lock",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::Mutex")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::vm::Streams")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::Mutex")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::vm::Streams")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::arch::extensions::VmChipComplex",
                                                    "streams"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_take_streams :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "take_streams" (take_streams F E P).
      Admitted.
      Global Typeclasses Opaque take_streams.
      
      (*
          pub fn num_airs(&self) -> usize {
              3 + self.memory_controller().num_airs() + self.inventory.num_airs()
          }
      *)
      Definition num_airs
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.add,
              [
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    Value.Integer IntegerKind.Usize 3;
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ],
                        "num_airs",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [ F; E; P ],
                                "memory_controller",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                    "num_airs",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "inventory"
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_num_airs :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "num_airs" (num_airs F E P).
      Admitted.
      Global Typeclasses Opaque num_airs.
      
      (*
          fn public_values_chip_idx(&self) -> Option<ExecutorId> {
              self.config
                  .has_public_values_chip()
                  .then_some(Self::PV_EXECUTOR_IDX)
          }
      *)
      Definition public_values_chip_idx
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              M.get_associated_function (| Ty.path "bool", "then_some", [], [ Ty.path "usize" ] |),
              [
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::config::SystemConfig",
                    "has_public_values_chip",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "config"
                      |)
                    |)
                  ]
                |);
                M.read (|
                  get_associated_constant (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ],
                    "PV_EXECUTOR_IDX",
                    Ty.path "usize"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_public_values_chip_idx :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "public_values_chip_idx"
          (public_values_chip_idx F E P).
      Admitted.
      Global Typeclasses Opaque public_values_chip_idx.
      
      (*
          fn _public_values_chip(&self) -> Option<&E> {
              self.config
                  .has_public_values_chip()
                  .then(|| &self.inventory.executors[Self::PV_EXECUTOR_IDX])
          }
      *)
      Definition _public_values_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ E ] ],
              M.get_associated_function (|
                Ty.path "bool",
                "then",
                [],
                [ Ty.apply (Ty.path "&") [] [ E ]; Ty.function [] (Ty.apply (Ty.path "&") [] [ E ])
                ]
              |),
              [
                M.call_closure (|
                  Ty.path "bool",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::config::SystemConfig",
                    "has_public_values_chip",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "config"
                      |)
                    |)
                  ]
                |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply (Ty.path "&") [] [ E ],
                            M.alloc (| Ty.tuple [], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply (Ty.path "&") [] [ E ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ E; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          [ Ty.path "usize" ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::arch::extensions::VmChipComplex",
                                                "inventory"
                                              |),
                                              "openvm_circuit::arch::extensions::VmInventory",
                                              "executors"
                                            |)
                                          |);
                                          M.read (|
                                            get_associated_constant (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmChipComplex")
                                                []
                                                [ F; E; P ],
                                              "PV_EXECUTOR_IDX",
                                              Ty.path "usize"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction__public_values_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "_public_values_chip" (_public_values_chip F E P).
      Admitted.
      Global Typeclasses Opaque _public_values_chip.
      
      (*
          pub(crate) fn chips_excluding_pv_chip(&self) -> impl Iterator<Item = Either<&'_ E, &'_ P>> {
              let public_values_chip_idx = self.public_values_chip_idx();
              self.inventory
                  .insertion_order
                  .iter()
                  .rev()
                  .flat_map(move |chip_idx| match *chip_idx {
                      // Skip public values chip if it exists.
                      ChipId::Executor(id) => (Some(id) != public_values_chip_idx)
                          .then(|| Either::Executor(&self.inventory.executors[id])),
                      ChipId::Periphery(id) => Some(Either::Periphery(&self.inventory.periphery[id])),
                  })
          }
      *)
      Definition chips_excluding_pv_chip
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.read (|
              let~ public_values_chip_idx :
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ],
                    "public_values_chip_idx",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                      ];
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::Either")
                          []
                          [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                      ];
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                      ]
                      (Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::Either")
                            []
                            [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                        ])
                  ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                        ];
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::Either")
                            []
                            [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::Either")
                              []
                              [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                          ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::rev::Rev")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                      ],
                    [],
                    [],
                    "flat_map",
                    [],
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::Either")
                            []
                            [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                        ]
                        (Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::Either")
                              []
                              [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::rev::Rev")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                        [],
                        [],
                        "rev",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [ Ty.path "openvm_circuit::arch::extensions::ChipId" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.path "openvm_circuit::arch::extensions::ChipId";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::extensions::VmChipComplex",
                                          "inventory"
                                        |),
                                        "openvm_circuit::arch::extensions::VmInventory",
                                        "insertion_order"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::Either")
                                      []
                                      [
                                        Ty.apply (Ty.path "&") [] [ E ];
                                        Ty.apply (Ty.path "&") [] [ P ]
                                      ]
                                  ],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let chip_idx :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_circuit::arch::extensions::Either")
                                              []
                                              [
                                                Ty.apply (Ty.path "&") [] [ E ];
                                                Ty.apply (Ty.path "&") [] [ P ]
                                              ]
                                          ],
                                        M.deref (| M.read (| chip_idx |) |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "openvm_circuit::arch::extensions::ChipId::Executor",
                                                  0
                                                |) in
                                              let id := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::Either")
                                                      []
                                                      [
                                                        Ty.apply (Ty.path "&") [] [ E ];
                                                        Ty.apply (Ty.path "&") [] [ P ]
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.path "bool",
                                                  "then",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::Either")
                                                      []
                                                      [
                                                        Ty.apply (Ty.path "&") [] [ E ];
                                                        Ty.apply (Ty.path "&") [] [ P ]
                                                      ];
                                                    Ty.function
                                                      []
                                                      (Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::extensions::Either")
                                                        []
                                                        [
                                                          Ty.apply (Ty.path "&") [] [ E ];
                                                          Ty.apply (Ty.path "&") [] [ P ]
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                      "ne",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            []
                                                            [ Ty.path "usize" ]
                                                            [ M.read (| id |) ]
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        public_values_chip_idx
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::extensions::Either")
                                                                []
                                                                [
                                                                  Ty.apply (Ty.path "&") [] [ E ];
                                                                  Ty.apply (Ty.path "&") [] [ P ]
                                                                ],
                                                              M.alloc (| Ty.tuple [], α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (Value.StructTuple
                                                                      "openvm_circuit::arch::extensions::Either::Executor"
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ E ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ P ]
                                                                      ]
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ E ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::Index",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  []
                                                                                  [
                                                                                    E;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [ Ty.path "usize" ],
                                                                                "index",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          self
                                                                                        |)
                                                                                      |),
                                                                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                      "inventory"
                                                                                    |),
                                                                                    "openvm_circuit::arch::extensions::VmInventory",
                                                                                    "executors"
                                                                                  |)
                                                                                |);
                                                                                M.read (| id |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "openvm_circuit::arch::extensions::ChipId::Periphery",
                                                  0
                                                |) in
                                              let id := M.copy (| Ty.path "usize", γ0_0 |) in
                                              Value.StructTuple
                                                "core::option::Option::Some"
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::Either")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ]
                                                ]
                                                [
                                                  Value.StructTuple
                                                    "openvm_circuit::arch::extensions::Either::Periphery"
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ]
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply (Ty.path "&") [] [ P ],
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ P; Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| self |) |),
                                                                    "openvm_circuit::arch::extensions::VmChipComplex",
                                                                    "inventory"
                                                                  |),
                                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                                  "periphery"
                                                                |)
                                                              |);
                                                              M.read (| id |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                ]))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_chips_excluding_pv_chip :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "chips_excluding_pv_chip"
          (chips_excluding_pv_chip F E P).
      Admitted.
      Global Typeclasses Opaque chips_excluding_pv_chip.
      
      (*
          pub(crate) fn air_names(&self) -> Vec<String>
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              once(self.program_chip().air_name())
                  .chain([self.connector_chip().air_name()])
                  .chain(self._public_values_chip().map(|c| c.air_name()))
                  .chain(self.memory_controller().air_names())
                  .chain(self.chips_excluding_pv_chip().map(|c| c.air_name()))
                  .chain([self.range_checker_chip().air_name()])
                  .collect()
          }
      *)
      Definition air_names
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::chain::Chain")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "alloc::string::String" ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::option::IntoIter")
                                  []
                                  [ Ty.path "alloc::string::String" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::Either")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ]
                                  ]
                              ]
                              (Ty.path "alloc::string::String")
                          ]
                      ];
                    Ty.apply
                      (Ty.path "core::array::iter::IntoIter")
                      [ Value.Integer IntegerKind.Usize 1 ]
                      [ Ty.path "alloc::string::String" ]
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "alloc::string::String" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    []
                                    [ Ty.path "alloc::string::String" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "alloc::string::String")
                            ]
                        ];
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "alloc::string::String" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "alloc::string::String" ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::option::IntoIter")
                                  []
                                  [ Ty.path "alloc::string::String" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::Either")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ]
                                  ]
                              ]
                              (Ty.path "alloc::string::String")
                          ]
                      ],
                    [],
                    [],
                    "chain",
                    [],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "alloc::string::String" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "alloc::string::String" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    []
                                    [ Ty.path "alloc::string::String" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "alloc::string::String")
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "alloc::string::String" ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::option::IntoIter")
                                  []
                                  [ Ty.path "alloc::string::String" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "alloc::string::String")
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "alloc::string::String" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    []
                                    [ Ty.path "alloc::string::String" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "alloc::string::String" ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::option::IntoIter")
                                  []
                                  [ Ty.path "alloc::string::String" ]
                              ],
                            [],
                            [],
                            "chain",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "alloc::string::String" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    []
                                    [ Ty.path "alloc::string::String" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "alloc::string::String" ]
                                  ],
                                [],
                                [],
                                "chain",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloc::string::String" ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "alloc::string::String" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "alloc::string::String" ],
                                    [],
                                    [],
                                    "chain",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "alloc::string::String" ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "alloc::string::String" ],
                                      M.get_function (|
                                        "core::iter::sources::once::once",
                                        [],
                                        [ Ty.path "alloc::string::String" ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "alloc::string::String",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::program::ProgramChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "air_name",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::program::ProgramChip")
                                                        []
                                                        [ F ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmChipComplex")
                                                      []
                                                      [ F; E; P ],
                                                    "program_chip",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "alloc::string::String",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::connector::VmConnectorChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "air_name",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::connector::VmConnectorChip")
                                                        []
                                                        [ F ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmChipComplex")
                                                      []
                                                      [ F; E; P ],
                                                    "connector_chip",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloc::string::String" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ E ] ],
                                    "map",
                                    [],
                                    [
                                      Ty.path "alloc::string::String";
                                      Ty.function
                                        [ Ty.apply (Ty.path "&") [] [ E ] ]
                                        (Ty.path "alloc::string::String")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ E ] ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "_public_values_chip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.path "alloc::string::String",
                                                M.alloc (| Ty.apply (Ty.path "&") [] [ E ], α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let c :=
                                                        M.copy (|
                                                          Ty.apply (Ty.path "&") [] [ E ],
                                                          γ
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.path "alloc::string::String",
                                                        M.get_trait_method (|
                                                          "openvm_stark_backend::chip::ChipUsageGetter",
                                                          E,
                                                          [],
                                                          [],
                                                          "air_name",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| c |) |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ],
                                "air_names",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "memory_controller",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "alloc::string::String")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.associated_unknown,
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.path "alloc::string::String";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "alloc::string::String")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_unknown,
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [ F; E; P ],
                                "chips_excluding_pv_chip",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "alloc::string::String",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "openvm_circuit::arch::extensions::Either")
                                            []
                                            [
                                              Ty.apply (Ty.path "&") [] [ E ];
                                              Ty.apply (Ty.path "&") [] [ P ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let c :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::Either")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "alloc::string::String",
                                                M.get_trait_method (|
                                                  "openvm_stark_backend::chip::ChipUsageGetter",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::Either")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ],
                                                  [],
                                                  [],
                                                  "air_name",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, c |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |);
                    Value.Array
                      [
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_trait_method (|
                            "openvm_stark_backend::chip::ChipUsageGetter",
                            Ty.path
                              "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                            [],
                            [],
                            "air_name",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "range_checker_chip",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_air_names :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "air_names" (air_names F E P).
      Admitted.
      Global Typeclasses Opaque air_names.
      
      (*
          pub(crate) fn current_trace_heights(&self) -> Vec<usize>
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              once(self.program_chip().current_trace_height())
                  .chain([self.connector_chip().current_trace_height()])
                  .chain(self._public_values_chip().map(|c| c.current_trace_height()))
                  .chain(self.memory_controller().current_trace_heights())
                  .chain(
                      self.chips_excluding_pv_chip()
                          .map(|c| c.current_trace_height()),
                  )
                  .chain([self.range_checker_chip().current_trace_height()])
                  .collect()
          }
      *)
      Definition current_trace_heights
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::chain::Chain")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ]
                                  ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::Either")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                      ];
                    Ty.apply
                      (Ty.path "core::array::iter::IntoIter")
                      [ Value.Integer IntegerKind.Usize 1 ]
                      [ Ty.path "usize" ]
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "usize" ]
                                    ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                        ];
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "usize" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ]
                                  ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::Either")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                      ],
                    [],
                    [],
                    "chain",
                    [],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "usize" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "usize" ]
                                    ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ]
                                  ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "usize" ]
                                    ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ]
                                  ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ],
                            [],
                            [],
                            "chain",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "usize" ]
                                    ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ]
                                  ],
                                [],
                                [],
                                "chain",
                                [],
                                [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::sources::once::Once")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "chain",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "usize" ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::sources::once::Once")
                                        []
                                        [ Ty.path "usize" ],
                                      M.get_function (|
                                        "core::iter::sources::once::once",
                                        [],
                                        [ Ty.path "usize" ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::program::ProgramChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "current_trace_height",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::program::ProgramChip")
                                                        []
                                                        [ F ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmChipComplex")
                                                      []
                                                      [ F; E; P ],
                                                    "program_chip",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::connector::VmConnectorChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "current_trace_height",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::connector::VmConnectorChip")
                                                        []
                                                        [ F ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmChipComplex")
                                                      []
                                                      [ F; E; P ],
                                                    "connector_chip",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ E ] ],
                                    "map",
                                    [],
                                    [
                                      Ty.path "usize";
                                      Ty.function
                                        [ Ty.apply (Ty.path "&") [] [ E ] ]
                                        (Ty.path "usize")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ E ] ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "_public_values_chip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.path "usize",
                                                M.alloc (| Ty.apply (Ty.path "&") [] [ E ], α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let c :=
                                                        M.copy (|
                                                          Ty.apply (Ty.path "&") [] [ E ],
                                                          γ
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_trait_method (|
                                                          "openvm_stark_backend::chip::ChipUsageGetter",
                                                          E,
                                                          [],
                                                          [],
                                                          "current_trace_height",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| c |) |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ],
                                "current_trace_heights",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "memory_controller",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.associated_unknown,
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.path "usize";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_unknown,
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [ F; E; P ],
                                "chips_excluding_pv_chip",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "usize",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "openvm_circuit::arch::extensions::Either")
                                            []
                                            [
                                              Ty.apply (Ty.path "&") [] [ E ];
                                              Ty.apply (Ty.path "&") [] [ P ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let c :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::Either")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_trait_method (|
                                                  "openvm_stark_backend::chip::ChipUsageGetter",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::Either")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ],
                                                  [],
                                                  [],
                                                  "current_trace_height",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, c |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |);
                    Value.Array
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "openvm_stark_backend::chip::ChipUsageGetter",
                            Ty.path
                              "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                            [],
                            [],
                            "current_trace_height",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "range_checker_chip",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_current_trace_heights :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "current_trace_heights" (current_trace_heights F E P).
      Admitted.
      Global Typeclasses Opaque current_trace_heights.
      
      (*
          pub fn get_internal_trace_heights(&self) -> VmComplexTraceHeights
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              VmComplexTraceHeights::new(
                  self.base.get_system_trace_heights(),
                  self.inventory.get_trace_heights(),
              )
          }
      *)
      Definition get_internal_trace_heights
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
              M.get_associated_function (|
                Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                "new",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ],
                    "get_system_trace_heights",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "base"
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                    "get_trace_heights",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "inventory"
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_internal_trace_heights :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "get_internal_trace_heights"
          (get_internal_trace_heights F E P).
      Admitted.
      Global Typeclasses Opaque get_internal_trace_heights.
      
      (*
          pub fn get_dummy_internal_trace_heights(&self) -> VmComplexTraceHeights
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              VmComplexTraceHeights::new(
                  self.base.get_dummy_system_trace_heights(),
                  self.inventory.get_dummy_trace_heights(),
              )
          }
      *)
      Definition get_dummy_internal_trace_heights
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
              M.get_associated_function (|
                Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                "new",
                [],
                []
              |),
              [
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ],
                    "get_dummy_system_trace_heights",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "base"
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmInventory") [] [ E; P ],
                    "get_dummy_trace_heights",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "inventory"
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_dummy_internal_trace_heights :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "get_dummy_internal_trace_heights"
          (get_dummy_internal_trace_heights F E P).
      Admitted.
      Global Typeclasses Opaque get_dummy_internal_trace_heights.
      
      (*
          pub(crate) fn set_override_inventory_trace_heights(
              &mut self,
              overridden_inventory_heights: VmInventoryTraceHeights,
          ) {
              self.overridden_inventory_heights = Some(overridden_inventory_heights);
          }
      *)
      Definition set_override_inventory_trace_heights
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; overridden_inventory_heights ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let overridden_inventory_heights :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                overridden_inventory_heights
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmChipComplex",
                    "overridden_inventory_heights"
                  |),
                  Value.StructTuple
                    "core::option::Option::Some"
                    []
                    [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ]
                    [ M.read (| overridden_inventory_heights |) ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_override_inventory_trace_heights :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "set_override_inventory_trace_heights"
          (set_override_inventory_trace_heights F E P).
      Admitted.
      Global Typeclasses Opaque set_override_inventory_trace_heights.
      
      (*
          pub(crate) fn set_override_system_trace_heights(
              &mut self,
              overridden_system_heights: SystemTraceHeights,
          ) {
              let memory_controller = &mut self.base.memory_controller;
              memory_controller.set_override_trace_heights(overridden_system_heights.memory);
          }
      *)
      Definition set_override_system_trace_heights
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; overridden_system_heights ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let overridden_system_heights :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::config::SystemTraceHeights",
                overridden_system_heights
              |) in
            M.read (|
              let~ memory_controller :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::extensions::VmChipComplex",
                      "base"
                    |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "memory_controller"
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ],
                    "set_override_trace_heights",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (| M.read (| memory_controller |) |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        overridden_system_heights,
                        "openvm_circuit::arch::config::SystemTraceHeights",
                        "memory"
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_override_system_trace_heights :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C
          (Self F E P)
          "set_override_system_trace_heights"
          (set_override_system_trace_heights F E P).
      Admitted.
      Global Typeclasses Opaque set_override_system_trace_heights.
      
      (*
          pub(crate) fn dynamic_trace_heights(&self) -> impl Iterator<Item = usize> + '_
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              // program_chip, connector_chip
              [0, 0]
                  .into_iter()
                  .chain(self._public_values_chip().map(|c| c.current_trace_height()))
                  .chain(self.memory_controller().current_trace_heights())
                  .chain(self.chips_excluding_pv_chip().map(|c| match c {
                      // executor should never be constant height
                      Either::Executor(c) => c.current_trace_height(),
                      Either::Periphery(c) => {
                          if c.constant_trace_height().is_some() {
                              0
                          } else {
                              c.current_trace_height()
                          }
                      }
                  }))
                  .chain([0]) // range_checker_chip
          }
      *)
      Definition dynamic_trace_heights
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::iter::adapters::chain::Chain")
                []
                [
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "usize" ];
                              Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.associated_unknown;
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                []
                                [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                            ]
                            (Ty.path "usize")
                        ]
                    ];
                  Ty.apply
                    (Ty.path "core::array::iter::IntoIter")
                    [ Value.Integer IntegerKind.Usize 1 ]
                    [ Ty.path "usize" ]
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::chain::Chain")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "usize" ];
                            Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.associated_unknown;
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::Either")
                              []
                              [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                          ]
                          (Ty.path "usize")
                      ]
                  ],
                [],
                [],
                "chain",
                [],
                [
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 1 ]
                    [ Ty.path "usize" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "usize" ];
                              Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.associated_unknown;
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                []
                                [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                            ]
                            (Ty.path "usize")
                        ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "usize" ];
                            Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ],
                    [],
                    [],
                    "chain",
                    [],
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.associated_unknown;
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                []
                                [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                            ]
                            (Ty.path "usize")
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "usize" ];
                              Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "usize" ];
                            Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "usize" ];
                              Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "usize" ],
                            [],
                            [],
                            "chain",
                            [],
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::array::iter::IntoIter")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                Value.Array
                                  [
                                    Value.Integer IntegerKind.Usize 0;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ] ],
                                "map",
                                [],
                                [
                                  Ty.path "usize";
                                  Ty.function [ Ty.apply (Ty.path "&") [] [ E ] ] (Ty.path "usize")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.apply (Ty.path "&") [] [ E ] ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "_public_values_chip",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "usize",
                                            M.alloc (| Ty.apply (Ty.path "&") [] [ E ], α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let c :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ E ],
                                                      γ
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_trait_method (|
                                                      "openvm_stark_backend::chip::ChipUsageGetter",
                                                      E,
                                                      [],
                                                      [],
                                                      "current_trace_height",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| c |) |)
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "current_trace_heights",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "memory_controller",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.associated_unknown;
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                []
                                [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                            ]
                            (Ty.path "usize")
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.associated_unknown,
                        [],
                        [],
                        "map",
                        [],
                        [
                          Ty.path "usize";
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                []
                                [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                            ]
                            (Ty.path "usize")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_unknown,
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [ F; E; P ],
                            "chips_excluding_pv_chip",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.path "usize",
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::Either")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ E ];
                                          Ty.apply (Ty.path "&") [] [ P ]
                                        ],
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let c :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                                []
                                                [
                                                  Ty.apply (Ty.path "&") [] [ E ];
                                                  Ty.apply (Ty.path "&") [] [ P ]
                                                ],
                                              γ
                                            |) in
                                          M.match_operator (|
                                            Ty.path "usize",
                                            c,
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "openvm_circuit::arch::extensions::Either::Executor",
                                                      0
                                                    |) in
                                                  let c :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ E ],
                                                      γ0_0
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_trait_method (|
                                                      "openvm_stark_backend::chip::ChipUsageGetter",
                                                      E,
                                                      [],
                                                      [],
                                                      "current_trace_height",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| c |) |)
                                                      |)
                                                    ]
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "openvm_circuit::arch::extensions::Either::Periphery",
                                                      0
                                                    |) in
                                                  let c :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ P ],
                                                      γ0_0
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.path "usize",
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [ Ty.path "usize" ],
                                                                    "is_some",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [ Ty.path "usize" ],
                                                                          M.get_trait_method (|
                                                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                                                            P,
                                                                            [],
                                                                            [],
                                                                            "constant_trace_height",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (| c |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          Value.Integer IntegerKind.Usize 0));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_trait_method (|
                                                              "openvm_stark_backend::chip::ChipUsageGetter",
                                                              P,
                                                              [],
                                                              [],
                                                              "current_trace_height",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| c |) |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)
                  ]
                |);
                Value.Array [ Value.Integer IntegerKind.Usize 0 ]
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_dynamic_trace_heights :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "dynamic_trace_heights" (dynamic_trace_heights F E P).
      Admitted.
      Global Typeclasses Opaque dynamic_trace_heights.
      
      (*
          pub(crate) fn current_trace_cells(&self) -> Vec<usize>
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              // program_chip, connector_chip
              [0, 0]
                  .into_iter()
                  .chain(self._public_values_chip().map(|c| c.current_trace_cells()))
                  .chain(self.memory_controller().current_trace_cells())
                  .chain(self.chips_excluding_pv_chip().map(|c| match c {
                      Either::Executor(c) => c.current_trace_cells(),
                      Either::Periphery(c) => {
                          if c.constant_trace_height().is_some() {
                              0
                          } else {
                              c.current_trace_cells()
                          }
                      }
                  }))
                  .chain([0]) // range_checker_chip
                  .collect()
          }
      *)
      Definition current_trace_cells
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::chain::Chain")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::array::iter::IntoIter")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::Either")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                      ];
                    Ty.apply
                      (Ty.path "core::array::iter::IntoIter")
                      [ Value.Integer IntegerKind.Usize 1 ]
                      [ Ty.path "usize" ]
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                        ];
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "usize" ]
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::array::iter::IntoIter")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.associated_unknown;
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::Either")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ]
                                  ]
                              ]
                              (Ty.path "usize")
                          ]
                      ],
                    [],
                    [],
                    "chain",
                    [],
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "usize" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::array::iter::IntoIter")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::array::iter::IntoIter")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ];
                                Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                              ],
                            [],
                            [],
                            "chain",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [] [ Ty.path "usize" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::array::iter::IntoIter")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ],
                                [],
                                [],
                                "chain",
                                [],
                                [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ] ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [
                                    Value.Array
                                      [
                                        Value.Integer IntegerKind.Usize 0;
                                        Value.Integer IntegerKind.Usize 0
                                      ]
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.apply (Ty.path "&") [] [ E ] ],
                                    "map",
                                    [],
                                    [
                                      Ty.path "usize";
                                      Ty.function
                                        [ Ty.apply (Ty.path "&") [] [ E ] ]
                                        (Ty.path "usize")
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ E ] ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "_public_values_chip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.path "usize",
                                                M.alloc (| Ty.apply (Ty.path "&") [] [ E ], α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let c :=
                                                        M.copy (|
                                                          Ty.apply (Ty.path "&") [] [ E ],
                                                          γ
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_trait_method (|
                                                          "openvm_stark_backend::chip::ChipUsageGetter",
                                                          E,
                                                          [],
                                                          [],
                                                          "current_trace_cells",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| c |) |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ],
                                "current_trace_cells",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "memory_controller",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.associated_unknown,
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.path "usize";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::Either")
                                    []
                                    [
                                      Ty.apply (Ty.path "&") [] [ E ];
                                      Ty.apply (Ty.path "&") [] [ P ]
                                    ]
                                ]
                                (Ty.path "usize")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_unknown,
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [ F; E; P ],
                                "chips_excluding_pv_chip",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "usize",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "openvm_circuit::arch::extensions::Either")
                                            []
                                            [
                                              Ty.apply (Ty.path "&") [] [ E ];
                                              Ty.apply (Ty.path "&") [] [ P ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let c :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::Either")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ E ];
                                                      Ty.apply (Ty.path "&") [] [ P ]
                                                    ],
                                                  γ
                                                |) in
                                              M.match_operator (|
                                                Ty.path "usize",
                                                c,
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "openvm_circuit::arch::extensions::Either::Executor",
                                                          0
                                                        |) in
                                                      let c :=
                                                        M.copy (|
                                                          Ty.apply (Ty.path "&") [] [ E ],
                                                          γ0_0
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_trait_method (|
                                                          "openvm_stark_backend::chip::ChipUsageGetter",
                                                          E,
                                                          [],
                                                          [],
                                                          "current_trace_cells",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| c |) |)
                                                          |)
                                                        ]
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "openvm_circuit::arch::extensions::Either::Periphery",
                                                          0
                                                        |) in
                                                      let c :=
                                                        M.copy (|
                                                          Ty.apply (Ty.path "&") [] [ P ],
                                                          γ0_0
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.path "usize",
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ Ty.path "usize" ],
                                                                        "is_some",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [ Ty.path "usize" ],
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [ Ty.path "usize" ],
                                                                              M.get_trait_method (|
                                                                                "openvm_stark_backend::chip::ChipUsageGetter",
                                                                                P,
                                                                                [],
                                                                                [],
                                                                                "constant_trace_height",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (| c |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              Value.Integer IntegerKind.Usize 0));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_trait_method (|
                                                                  "openvm_stark_backend::chip::ChipUsageGetter",
                                                                  P,
                                                                  [],
                                                                  [],
                                                                  "current_trace_cells",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| c |) |)
                                                                  |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |);
                    Value.Array [ Value.Integer IntegerKind.Usize 0 ]
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_current_trace_cells :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "current_trace_cells" (current_trace_cells F E P).
      Admitted.
      Global Typeclasses Opaque current_trace_cells.
      
      (*
          pub fn airs<SC: StarkGenericConfig>(&self) -> Vec<AirRef<SC>>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
              E: Chip<SC>,
              P: Chip<SC>,
          {
              // ATTENTION: The order of AIR MUST be consistent with `generate_proof_input`.
              let program_rap = Arc::new(self.program_chip().air) as AirRef<SC>;
              let connector_rap = Arc::new(self.connector_chip().air) as AirRef<SC>;
              [program_rap, connector_rap]
                  .into_iter()
                  .chain(self._public_values_chip().map(|chip| chip.air()))
                  .chain(self.memory_controller().airs())
                  .chain(self.chips_excluding_pv_chip().map(|chip| match chip {
                      Either::Executor(chip) => chip.air(),
                      Either::Periphery(chip) => chip.air(),
                  }))
                  .chain(once(self.range_checker_chip().air()))
                  .collect()
          }
      *)
      Definition airs (F E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [ SC ], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            M.read (|
              let~ program_rap :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.path "openvm_circuit::system::program::air::ProgramAir";
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.path "openvm_circuit::system::program::air::ProgramAir";
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.path "openvm_circuit::system::program::air::ProgramAir";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::system::program::ProgramChip")
                                            []
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "program_chip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  "openvm_circuit::system::program::ProgramChip",
                                  "air"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |))
                |) in
              let~ connector_rap :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.path "openvm_circuit::system::connector::VmConnectorAir";
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.path "openvm_circuit::system::connector::VmConnectorAir";
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.path "openvm_circuit::system::connector::VmConnectorAir";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::connector::VmConnectorChip")
                                            []
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "connector_chip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  "openvm_circuit::system::connector::VmConnectorChip",
                                  "air"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    |))
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.associated_unknown;
                                Ty.function
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::Either")
                                      []
                                      [
                                        Ty.apply (Ty.path "&") [] [ E ];
                                        Ty.apply (Ty.path "&") [] [ P ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ])
                              ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::sources::once::Once")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ],
                    [],
                    [],
                    "collect",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.associated_unknown;
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::Either")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ E ];
                                          Ty.apply (Ty.path "&") [] [ P ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::sources::once::Once")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.associated_unknown;
                                Ty.function
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::Either")
                                      []
                                      [
                                        Ty.apply (Ty.path "&") [] [ E ];
                                        Ty.apply (Ty.path "&") [] [ P ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ])
                              ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::iter::sources::once::Once")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.associated_unknown;
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::Either")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ E ];
                                          Ty.apply (Ty.path "&") [] [ P ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            [],
                            "chain",
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.associated_unknown;
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::Either")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ E ];
                                          Ty.apply (Ty.path "&") [] [ P ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ],
                                [],
                                [],
                                "chain",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    [],
                                    "chain",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::array::iter::IntoIter")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.dyn
                                                  [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [
                                        Value.Array
                                          [
                                            M.read (| program_rap |);
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.dyn
                                                    [
                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                        [])
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              M.pointer_coercion
                                                M.PointerCoercion.Unsize
                                                (Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.dyn
                                                      [
                                                        ("openvm_stark_backend::rap::AnyRap::Trait",
                                                          [])
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ])
                                                (Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.dyn
                                                      [
                                                        ("openvm_stark_backend::rap::AnyRap::Trait",
                                                          [])
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]),
                                              [ M.read (| connector_rap |) ]
                                            |)
                                          ]
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ E ] ],
                                        "map",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.function
                                            [ Ty.apply (Ty.path "&") [] [ E ] ]
                                            (Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.dyn
                                                  [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.apply (Ty.path "&") [] [ E ] ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::VmChipComplex")
                                              []
                                              [ F; E; P ],
                                            "_public_values_chip",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      []
                                                      [
                                                        Ty.dyn
                                                          [
                                                            ("openvm_stark_backend::rap::AnyRap::Trait",
                                                              [])
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.alloc (|
                                                      Ty.apply (Ty.path "&") [] [ E ],
                                                      α0
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let chip :=
                                                            M.copy (|
                                                              Ty.apply (Ty.path "&") [] [ E ],
                                                              γ
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                      [])
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_trait_method (|
                                                              "openvm_stark_backend::chip::Chip",
                                                              E,
                                                              [],
                                                              [ SC ],
                                                              "air",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| chip |) |)
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ],
                                    "airs",
                                    [],
                                    [ SC ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::VmChipComplex")
                                              []
                                              [ F; E; P ],
                                            "memory_controller",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.associated_unknown;
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::Either")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ E ];
                                          Ty.apply (Ty.path "&") [] [ P ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.associated_unknown,
                                [],
                                [],
                                "map",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::extensions::Either")
                                        []
                                        [
                                          Ty.apply (Ty.path "&") [] [ E ];
                                          Ty.apply (Ty.path "&") [] [ P ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ])
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_unknown,
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [ F; E; P ],
                                    "chips_excluding_pv_chip",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.dyn
                                                  [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "openvm_circuit::arch::extensions::Either")
                                                []
                                                [
                                                  Ty.apply (Ty.path "&") [] [ E ];
                                                  Ty.apply (Ty.path "&") [] [ P ]
                                                ],
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let chip :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::extensions::Either")
                                                        []
                                                        [
                                                          Ty.apply (Ty.path "&") [] [ E ];
                                                          Ty.apply (Ty.path "&") [] [ P ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      []
                                                      [
                                                        Ty.dyn
                                                          [
                                                            ("openvm_stark_backend::rap::AnyRap::Trait",
                                                              [])
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    chip,
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "openvm_circuit::arch::extensions::Either::Executor",
                                                              0
                                                            |) in
                                                          let chip :=
                                                            M.copy (|
                                                              Ty.apply (Ty.path "&") [] [ E ],
                                                              γ0_0
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                      [])
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_trait_method (|
                                                              "openvm_stark_backend::chip::Chip",
                                                              E,
                                                              [],
                                                              [ SC ],
                                                              "air",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| chip |) |)
                                                              |)
                                                            ]
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "openvm_circuit::arch::extensions::Either::Periphery",
                                                              0
                                                            |) in
                                                          let chip :=
                                                            M.copy (|
                                                              Ty.apply (Ty.path "&") [] [ P ],
                                                              γ0_0
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.dyn
                                                                  [
                                                                    ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                      [])
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.pointer_coercion
                                                              M.PointerCoercion.Unsize
                                                              (Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                        [])
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ])
                                                              (Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                        [])
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  []
                                                                  [
                                                                    Ty.dyn
                                                                      [
                                                                        ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                          [])
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "openvm_stark_backend::chip::Chip",
                                                                  P,
                                                                  [],
                                                                  [ SC ],
                                                                  "air",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| chip |) |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::sources::once::Once")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          M.get_function (|
                            "core::iter::sources::once::once",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "openvm_stark_backend::chip::Chip",
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                [],
                                [ SC ],
                                "air",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [ F; E; P ],
                                        "range_checker_chip",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_airs :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "airs" (airs F E P).
      Admitted.
      Global Typeclasses Opaque airs.
      
      (*
          pub(crate) fn generate_proof_input<SC: StarkGenericConfig>(
              mut self,
              cached_program: Option<CommittedTraceData<SC>>,
              trace_height_constraints: &[LinearConstraint],
              #[cfg(feature = "bench-metrics")] metrics: &mut VmMetrics,
          ) -> Result<ProofInput<SC>, GenerationError>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
              E: Chip<SC>,
              P: AnyEnum + Chip<SC>,
          {
              // System: Finalize memory.
              self.finalize_memory();
      
              let trace_heights = self
                  .current_trace_heights()
                  .iter()
                  .map(|h| next_power_of_two_or_zero( *h))
                  .collect_vec();
              if let Some(index) = trace_heights
                  .iter()
                  .position(|h| *h > self.max_trace_height)
              {
                  tracing::info!(
                      "trace height of air {index} has height {} greater than maximum {}",
                      trace_heights[index],
                      self.max_trace_height
                  );
                  return Err(GenerationError::TraceHeightsLimitExceeded);
              }
              if trace_height_constraints.is_empty() {
                  tracing::warn!("generating proof input without trace height constraints");
              }
              for (i, constraint) in trace_height_constraints.iter().enumerate() {
                  let value = zip_eq(&constraint.coefficients, &trace_heights)
                      .map(|(&c, &h)| c as u64 * h as u64)
                      .sum::<u64>();
      
                  if value >= constraint.threshold as u64 {
                      tracing::info!(
                          "trace heights {:?} violate linear constraint {} ({} >= {})",
                          trace_heights,
                          i,
                          value,
                          constraint.threshold
                      );
                      return Err(GenerationError::TraceHeightsLimitExceeded);
                  }
              }
      
              #[cfg(feature = "bench-metrics")]
              self.finalize_metrics(metrics);
      
              let has_pv_chip = self.public_values_chip_idx().is_some();
              // ATTENTION: The order of AIR proof input generation MUST be consistent with `airs`.
              let mut builder = VmProofInputBuilder::new();
              let SystemBase {
                  range_checker_chip,
                  memory_controller,
                  connector_chip,
                  program_chip,
                  ..
              } = self.base;
      
              // System: Program Chip
              debug_assert_eq!(builder.curr_air_id, PROGRAM_AIR_ID);
              builder.add_air_proof_input(program_chip.generate_air_proof_input(cached_program));
              // System: Connector Chip
              debug_assert_eq!(builder.curr_air_id, CONNECTOR_AIR_ID);
              builder.add_air_proof_input(connector_chip.generate_air_proof_input());
      
              // Go through all chips in inventory in reverse order they were added (to resolve
              // dependencies) Important Note: for air_id ordering reasons, we want to
              // generate_air_proof_input for public values and memory chips **last** but include
              // them into the `builder` **first**.
              let mut public_values_input = None;
              let mut insertion_order = self.inventory.insertion_order;
              insertion_order.reverse();
              let mut non_sys_inputs = Vec::with_capacity(insertion_order.len());
              for chip_id in insertion_order {
                  let mut height = None;
                  if let Some(overridden_heights) = self.overridden_inventory_heights.as_ref() {
                      height = overridden_heights.chips.get(&chip_id).copied();
                  }
                  let air_proof_input = match chip_id {
                      ChipId::Executor(id) => {
                          let chip = self.inventory.executors.pop().unwrap();
                          assert_eq!(id, self.inventory.executors.len());
                          generate_air_proof_input(chip, height)
                      }
                      ChipId::Periphery(id) => {
                          let chip = self.inventory.periphery.pop().unwrap();
                          assert_eq!(id, self.inventory.periphery.len());
                          generate_air_proof_input(chip, height)
                      }
                  };
                  if has_pv_chip && chip_id == ChipId::Executor(Self::PV_EXECUTOR_IDX) {
                      public_values_input = Some(air_proof_input);
                  } else {
                      non_sys_inputs.push(air_proof_input);
                  }
              }
      
              if let Some(input) = public_values_input {
                  debug_assert_eq!(builder.curr_air_id, PUBLIC_VALUES_AIR_ID);
                  builder.add_air_proof_input(input);
              }
              // System: Memory Controller
              {
                  // memory
                  let air_proof_inputs = memory_controller.generate_air_proof_inputs();
                  for air_proof_input in air_proof_inputs {
                      builder.add_air_proof_input(air_proof_input);
                  }
              }
              // Non-system chips
              non_sys_inputs
                  .into_iter()
                  .for_each(|input| builder.add_air_proof_input(input));
              // System: Range Checker Chip
              builder.add_air_proof_input(range_checker_chip.generate_air_proof_input());
      
              Ok(builder.build())
          }
      *)
      Definition generate_proof_input
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [ SC ], [ self; cached_program; trace_height_constraints; metrics ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmChipComplex") [] [ F; E; P ],
                self
              |) in
            let cached_program :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::CommittedTraceData")
                      []
                      [ SC ]
                  ],
                cached_program
              |) in
            let trace_height_constraints :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.path "openvm_stark_backend::keygen::types::LinearConstraint" ]
                  ],
                trace_height_constraints
              |) in
            let metrics :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
                metrics
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::ProofInput") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [ F; E; P ],
                        "finalize_memory",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, self |) ]
                    |) in
                  let~ trace_heights :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "itertools::Itertools",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                            Ty.function
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                              (Ty.path "usize")
                          ],
                        [],
                        [],
                        "collect_vec",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                (Ty.path "usize")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.path "usize";
                              Ty.function
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                (Ty.path "usize")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::extensions::VmChipComplex")
                                                  []
                                                  [ F; E; P ],
                                                "current_trace_heights",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, self |) ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "usize",
                                        M.alloc (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let h :=
                                                M.copy (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_function (|
                                                  "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| M.deref (| M.read (| h |) |) |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "usize" ],
                                    [],
                                    [],
                                    "position",
                                    [],
                                    [
                                      Ty.function
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                        (Ty.path "bool")
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "usize" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "usize" ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [ Ty.path "usize" ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, trace_heights |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.path "bool",
                                                M.alloc (|
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                  α0
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let h :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.gt,
                                                        [
                                                          M.read (| M.deref (| M.read (| h |) |) |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              self,
                                                              "openvm_circuit::arch::extensions::VmChipComplex",
                                                              "max_trace_height"
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let index := M.copy (| Ty.path "usize", γ0_0 |) in
                            M.never_to_any (|
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.read (|
                                    let~ enabled : Ty.path "bool" :=
                                      LogicalOp.and (|
                                        LogicalOp.and (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialOrd",
                                              Ty.path "tracing_core::metadata::Level",
                                              [],
                                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                              "le",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                get_associated_constant (|
                                                  Ty.path "tracing_core::metadata::Level",
                                                  "INFO",
                                                  Ty.path "tracing_core::metadata::Level"
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                get_constant (|
                                                  "tracing::level_filters::STATIC_MAX_LEVEL",
                                                  Ty.path "tracing_core::metadata::LevelFilter"
                                                |)
                                              |)
                                            ]
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "core::cmp::PartialOrd",
                                                Ty.path "tracing_core::metadata::Level",
                                                [],
                                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                                "le",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  get_associated_constant (|
                                                    Ty.path "tracing_core::metadata::Level",
                                                    "INFO",
                                                    Ty.path "tracing_core::metadata::Level"
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "tracing_core::metadata::LevelFilter",
                                                    M.call_closure (|
                                                      Ty.path "tracing_core::metadata::LevelFilter",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "tracing_core::metadata::LevelFilter",
                                                        "current",
                                                        [],
                                                        []
                                                      |),
                                                      []
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)))
                                        |),
                                        ltac:(M.monadic
                                          (M.read (|
                                            let~ interest :
                                                Ty.path "tracing_core::subscriber::Interest" :=
                                              M.call_closure (|
                                                Ty.path "tracing_core::subscriber::Interest",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::callsite::DefaultCallsite",
                                                  "interest",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        get_constant (|
                                                          "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite"
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |) in
                                            M.alloc (|
                                              Ty.path "bool",
                                              LogicalOp.and (|
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::subscriber::Interest",
                                                      "is_never",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                                  |)
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_function (|
                                                      "tracing::__macro_support::__is_enabled",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| interest |)
                                                    ]
                                                  |)))
                                              |)
                                            |)
                                          |)))
                                      |) in
                                    M.alloc (|
                                      Ty.tuple [],
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.use enabled in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "core::ops::function::Fn",
                                                      Ty.function
                                                        [ Ty.path "tracing_core::field::ValueSet" ]
                                                        (Ty.tuple []),
                                                      [],
                                                      [
                                                        Ty.tuple
                                                          [ Ty.path "tracing_core::field::ValueSet"
                                                          ]
                                                      ],
                                                      "call",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.function
                                                            [
                                                              Ty.path
                                                                "tracing_core::field::ValueSet"
                                                            ]
                                                            (Ty.tuple []),
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  ltac:(M.monadic
                                                                    (M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        Ty.path
                                                                          "tracing_core::field::ValueSet",
                                                                        α0
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let value_set :=
                                                                              M.copy (|
                                                                                Ty.path
                                                                                  "tracing_core::field::ValueSet",
                                                                                γ
                                                                              |) in
                                                                            M.read (|
                                                                              let~ meta :
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::Metadata"
                                                                                    ] :=
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::Metadata"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "tracing_core::callsite::Callsite",
                                                                                    Ty.path
                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                    [],
                                                                                    [],
                                                                                    "metadata",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          get_constant (|
                                                                                            "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              let~ _ :
                                                                                  Ty.tuple [] :=
                                                                                M.call_closure (|
                                                                                  Ty.tuple [],
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "tracing_core::event::Event",
                                                                                    "dispatch",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          meta
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          value_set
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                                | _ =>
                                                                  M.impossible
                                                                    "wrong number of arguments"
                                                                end))
                                                        |)
                                                      |);
                                                      Value.Tuple
                                                        [
                                                          M.read (|
                                                            let~ iter :
                                                                Ty.path
                                                                  "tracing_core::field::Iter" :=
                                                              M.call_closure (|
                                                                Ty.path "tracing_core::field::Iter",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::field::FieldSet",
                                                                  "iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::FieldSet"
                                                                          ],
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "tracing_core::metadata::Metadata",
                                                                          "fields",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::Metadata"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "tracing_core::callsite::Callsite",
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                                  [],
                                                                                  [],
                                                                                  "metadata",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                                            ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::field::ValueSet",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::field::FieldSet",
                                                                  "value_set",
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::field::Field"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.dyn
                                                                                      [
                                                                                        ("tracing_core::field::Value::Trait",
                                                                                          [])
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::FieldSet"
                                                                          ],
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "tracing_core::metadata::Metadata",
                                                                          "fields",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::Metadata"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "tracing_core::callsite::Callsite",
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                                  [],
                                                                                  [],
                                                                                  "metadata",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                                            ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field"
                                                                                    ];
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.dyn
                                                                                            [
                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                [])
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              Value.Tuple
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field",
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field",
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field"
                                                                                            ],
                                                                                          "expect",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::option::Option")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::field::Field"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                              Ty.path
                                                                                                "tracing_core::field::Iter",
                                                                                              [],
                                                                                              [],
                                                                                              "next",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.MutRef,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.MutRef,
                                                                                                    iter
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              mk_str (|
                                                                                                "FieldSet corrupted (this is a bug)"
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "core::option::Option::Some"
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.dyn
                                                                                            [
                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                [])
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    [
                                                                                      M.read (|
                                                                                        M.use
                                                                                          (M.alloc (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("tracing_core::field::Value::Trait",
                                                                                                      [])
                                                                                                  ]
                                                                                              ],
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ],
                                                                                              M.pointer_coercion
                                                                                                M.PointerCoercion.Unsize
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "core::fmt::Arguments"
                                                                                                  ])
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.dyn
                                                                                                      [
                                                                                                        ("tracing_core::field::Value::Trait",
                                                                                                          [])
                                                                                                      ]
                                                                                                  ]),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.alloc (|
                                                                                                        Ty.path
                                                                                                          "core::fmt::Arguments",
                                                                                                        M.call_closure (|
                                                                                                          Ty.path
                                                                                                            "core::fmt::Arguments",
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.path
                                                                                                              "core::fmt::Arguments",
                                                                                                            "new_v1",
                                                                                                            [
                                                                                                              Value.Integer
                                                                                                                IntegerKind.Usize
                                                                                                                3;
                                                                                                              Value.Integer
                                                                                                                IntegerKind.Usize
                                                                                                                3
                                                                                                            ],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.alloc (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "array")
                                                                                                                      [
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.Usize
                                                                                                                          3
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "str"
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    Value.Array
                                                                                                                      [
                                                                                                                        mk_str (|
                                                                                                                          "trace height of air "
                                                                                                                        |);
                                                                                                                        mk_str (|
                                                                                                                          " has height "
                                                                                                                        |);
                                                                                                                        mk_str (|
                                                                                                                          " greater than maximum "
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |);
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.alloc (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "array")
                                                                                                                      [
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.Usize
                                                                                                                          3
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "core::fmt::rt::Argument"
                                                                                                                      ],
                                                                                                                    M.match_operator (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "array")
                                                                                                                        [
                                                                                                                          Value.Integer
                                                                                                                            IntegerKind.Usize
                                                                                                                            3
                                                                                                                        ]
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "core::fmt::rt::Argument"
                                                                                                                        ],
                                                                                                                      M.alloc (|
                                                                                                                        Ty.tuple
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "usize"
                                                                                                                              ];
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "usize"
                                                                                                                              ];
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "usize"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        Value.Tuple
                                                                                                                          [
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.deref (|
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ],
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::ops::index::Index",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "alloc::vec::Vec")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "usize";
                                                                                                                                        Ty.path
                                                                                                                                          "alloc::alloc::Global"
                                                                                                                                      ],
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ],
                                                                                                                                    "index",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      trace_heights
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      index
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                self,
                                                                                                                                "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                                                                "max_trace_height"
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              index
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        fun
                                                                                                                            γ =>
                                                                                                                          ltac:(M.monadic
                                                                                                                            (let
                                                                                                                                  args :=
                                                                                                                              M.copy (|
                                                                                                                                Ty.tuple
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "usize"
                                                                                                                                      ];
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "usize"
                                                                                                                                      ];
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "&")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "usize"
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                γ
                                                                                                                              |) in
                                                                                                                            Value.Array
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.path
                                                                                                                                    "core::fmt::rt::Argument",
                                                                                                                                  M.get_associated_function (|
                                                                                                                                    Ty.path
                                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                                    "new_display",
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ]
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.deref (|
                                                                                                                                        M.read (|
                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                            args,
                                                                                                                                            2
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |);
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.path
                                                                                                                                    "core::fmt::rt::Argument",
                                                                                                                                  M.get_associated_function (|
                                                                                                                                    Ty.path
                                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                                    "new_display",
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ]
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.deref (|
                                                                                                                                        M.read (|
                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                            args,
                                                                                                                                            0
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |);
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.path
                                                                                                                                    "core::fmt::rt::Argument",
                                                                                                                                  M.get_associated_function (|
                                                                                                                                    Ty.path
                                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                                    "new_display",
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ]
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.deref (|
                                                                                                                                        M.read (|
                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                            args,
                                                                                                                                            1
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]))
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |))
                                                                                      |)
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)
                                    |)
                                  |) in
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "openvm_circuit::arch::vm::GenerationError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "openvm_circuit::arch::vm::GenerationError::TraceHeightsLimitExceeded"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.path
                                            "openvm_stark_backend::keygen::types::LinearConstraint"
                                        ],
                                      "is_empty",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| trace_height_constraints |) |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  let~ enabled : Ty.path "bool" :=
                                    LogicalOp.and (|
                                      LogicalOp.and (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialOrd",
                                            Ty.path "tracing_core::metadata::Level",
                                            [],
                                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                            "le",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_associated_constant (|
                                                Ty.path "tracing_core::metadata::Level",
                                                "WARN",
                                                Ty.path "tracing_core::metadata::Level"
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                Ty.path "tracing_core::metadata::LevelFilter"
                                              |)
                                            |)
                                          ]
                                        |),
                                        ltac:(M.monadic
                                          (M.call_closure (|
                                            Ty.path "bool",
                                            M.get_trait_method (|
                                              "core::cmp::PartialOrd",
                                              Ty.path "tracing_core::metadata::Level",
                                              [],
                                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                              "le",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                get_associated_constant (|
                                                  Ty.path "tracing_core::metadata::Level",
                                                  "WARN",
                                                  Ty.path "tracing_core::metadata::Level"
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  M.call_closure (|
                                                    Ty.path "tracing_core::metadata::LevelFilter",
                                                    M.get_associated_function (|
                                                      Ty.path "tracing_core::metadata::LevelFilter",
                                                      "current",
                                                      [],
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)))
                                      |),
                                      ltac:(M.monadic
                                        (M.read (|
                                          let~ interest :
                                              Ty.path "tracing_core::subscriber::Interest" :=
                                            M.call_closure (|
                                              Ty.path "tracing_core::subscriber::Interest",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                "interest",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'1",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |) in
                                          M.alloc (|
                                            Ty.path "bool",
                                            LogicalOp.and (|
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::subscriber::Interest",
                                                    "is_never",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                                |)
                                              |),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_function (|
                                                    "tracing::__macro_support::__is_enabled",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::Metadata"
                                                            ],
                                                          M.get_trait_method (|
                                                            "tracing_core::callsite::Callsite",
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite",
                                                            [],
                                                            [],
                                                            "metadata",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  get_constant (|
                                                                    "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'1",
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.read (| interest |)
                                                  ]
                                                |)))
                                            |)
                                          |)
                                        |)))
                                    |) in
                                  M.alloc (|
                                    Ty.tuple [],
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.use enabled in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "core::ops::function::Fn",
                                                    Ty.function
                                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                                      (Ty.tuple []),
                                                    [],
                                                    [
                                                      Ty.tuple
                                                        [ Ty.path "tracing_core::field::ValueSet" ]
                                                    ],
                                                    "call",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.function
                                                          [ Ty.path "tracing_core::field::ValueSet"
                                                          ]
                                                          (Ty.tuple []),
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                ltac:(M.monadic
                                                                  (M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.path
                                                                        "tracing_core::field::ValueSet",
                                                                      α0
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let value_set :=
                                                                            M.copy (|
                                                                              Ty.path
                                                                                "tracing_core::field::ValueSet",
                                                                              γ
                                                                            |) in
                                                                          M.read (|
                                                                            let~ meta :
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::Metadata"
                                                                                  ] :=
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::Metadata"
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "tracing_core::callsite::Callsite",
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                                  [],
                                                                                  [],
                                                                                  "metadata",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        get_constant (|
                                                                                          "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'1",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                                            ]
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.call_closure (|
                                                                                Ty.tuple [],
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "tracing_core::event::Event",
                                                                                  "dispatch",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        meta
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        value_set
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                              | _ =>
                                                                M.impossible
                                                                  "wrong number of arguments"
                                                              end))
                                                      |)
                                                    |);
                                                    Value.Tuple
                                                      [
                                                        M.read (|
                                                          let~ iter :
                                                              Ty.path "tracing_core::field::Iter" :=
                                                            M.call_closure (|
                                                              Ty.path "tracing_core::field::Iter",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "iter",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::metadata::Metadata"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "tracing_core::callsite::Callsite",
                                                                                Ty.path
                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                [],
                                                                                [],
                                                                                "metadata",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      get_constant (|
                                                                                        "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'1",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "value_set",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::metadata::Metadata"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "tracing_core::callsite::Callsite",
                                                                                Ty.path
                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                [],
                                                                                [],
                                                                                "metadata",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      get_constant (|
                                                                                        "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'1",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                          ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field"
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        Value.Array
                                                                          [
                                                                            Value.Tuple
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field",
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field",
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "tracing_core::field::Field"
                                                                                          ],
                                                                                        "expect",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field"
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.path
                                                                                              "tracing_core::field::Iter",
                                                                                            [],
                                                                                            [],
                                                                                            "next",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              M.deref (|
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  iter
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            mk_str (|
                                                                                              "FieldSet corrupted (this is a bug)"
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "core::option::Option::Some"
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.dyn
                                                                                                [
                                                                                                  ("tracing_core::field::Value::Trait",
                                                                                                    [])
                                                                                                ]
                                                                                            ],
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("tracing_core::field::Value::Trait",
                                                                                                      [])
                                                                                                  ]
                                                                                              ],
                                                                                            M.pointer_coercion
                                                                                              M.PointerCoercion.Unsize
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::fmt::Arguments"
                                                                                                ])
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ]),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.alloc (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::Arguments",
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "core::fmt::Arguments",
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.path
                                                                                                            "core::fmt::Arguments",
                                                                                                          "new_const",
                                                                                                          [
                                                                                                            Value.Integer
                                                                                                              IntegerKind.Usize
                                                                                                              1
                                                                                                          ],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.alloc (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "array")
                                                                                                                    [
                                                                                                                      Value.Integer
                                                                                                                        IntegerKind.Usize
                                                                                                                        1
                                                                                                                    ]
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "str"
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                  Value.Array
                                                                                                                    [
                                                                                                                      mk_str (|
                                                                                                                        "generating proof input without trace height constraints"
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)
                                  |)
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.use
                        (M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.path
                                        "openvm_stark_backend::keygen::types::LinearConstraint"
                                    ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.path
                                          "openvm_stark_backend::keygen::types::LinearConstraint"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.path
                                            "openvm_stark_backend::keygen::types::LinearConstraint"
                                        ]
                                    ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.path
                                              "openvm_stark_backend::keygen::types::LinearConstraint"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.path
                                            "openvm_stark_backend::keygen::types::LinearConstraint"
                                        ],
                                      [],
                                      [],
                                      "enumerate",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.path
                                              "openvm_stark_backend::keygen::types::LinearConstraint"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.path
                                                "openvm_stark_backend::keygen::types::LinearConstraint"
                                            ],
                                          "iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| trace_height_constraints |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [
                                              Ty.path
                                                "openvm_stark_backend::keygen::types::LinearConstraint"
                                            ]
                                        ],
                                      γ
                                    |) in
                                  M.read (|
                                    M.loop (|
                                      Ty.tuple [],
                                      ltac:(M.monadic
                                        (let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_stark_backend::keygen::types::LinearConstraint"
                                                        ]
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "openvm_stark_backend::keygen::types::LinearConstraint"
                                                          ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_stark_backend::keygen::types::LinearConstraint"
                                                        ]
                                                    ],
                                                  [],
                                                  [],
                                                  "next",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.borrow (| Pointer.Kind.MutRef, iter |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.is_struct_tuple (|
                                                      γ,
                                                      "core::option::Option::None"
                                                    |) in
                                                  M.never_to_any (| M.read (| M.break (||) |) |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ1_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ1_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                  let constraint :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_stark_backend::keygen::types::LinearConstraint"
                                                        ],
                                                      γ1_1
                                                    |) in
                                                  M.read (|
                                                    let~ value : Ty.path "u64" :=
                                                      M.call_closure (|
                                                        Ty.path "u64",
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "itertools::zip_eq_impl::ZipEq")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "u32" ];
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "usize" ]
                                                                    ]
                                                                ]
                                                                (Ty.path "u64")
                                                            ],
                                                          [],
                                                          [],
                                                          "sum",
                                                          [],
                                                          [ Ty.path "u64" ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::map::Map")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "itertools::zip_eq_impl::ZipEq")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.path "u32" ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u32" ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                      ]
                                                                  ]
                                                                  (Ty.path "u64")
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "itertools::zip_eq_impl::ZipEq")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Ty.path "u32" ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                              [],
                                                              [],
                                                              "map",
                                                              [],
                                                              [
                                                                Ty.path "u64";
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u32" ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "usize" ]
                                                                      ]
                                                                  ]
                                                                  (Ty.path "u64")
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "itertools::zip_eq_impl::ZipEq")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.path "u32" ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                M.get_function (|
                                                                  "itertools::zip_eq_impl::zip_eq",
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          []
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| constraint |)
                                                                      |),
                                                                      "openvm_stark_backend::keygen::types::LinearConstraint",
                                                                      "coefficients"
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    trace_heights
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      ltac:(M.monadic
                                                                        (M.match_operator (|
                                                                          Ty.path "u64",
                                                                          M.alloc (|
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "u32" ];
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "usize"
                                                                                  ]
                                                                              ],
                                                                            α0
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    0
                                                                                  |) in
                                                                                let γ0_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    1
                                                                                  |) in
                                                                                let γ0_0 :=
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      γ0_0
                                                                                    |)
                                                                                  |) in
                                                                                let c :=
                                                                                  M.copy (|
                                                                                    Ty.path "u32",
                                                                                    γ0_0
                                                                                  |) in
                                                                                let γ0_1 :=
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      γ0_1
                                                                                    |)
                                                                                  |) in
                                                                                let h :=
                                                                                  M.copy (|
                                                                                    Ty.path "usize",
                                                                                    γ0_1
                                                                                  |) in
                                                                                M.call_closure (|
                                                                                  Ty.path "u64",
                                                                                  BinOp.Wrap.mul,
                                                                                  [
                                                                                    M.cast
                                                                                      (Ty.path
                                                                                        "u64")
                                                                                      (M.read (|
                                                                                        c
                                                                                      |));
                                                                                    M.cast
                                                                                      (Ty.path
                                                                                        "u64")
                                                                                      (M.read (|
                                                                                        h
                                                                                      |))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                    | _ =>
                                                                      M.impossible
                                                                        "wrong number of arguments"
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |) in
                                                    M.alloc (|
                                                      Ty.tuple [],
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.ge,
                                                                      [
                                                                        M.read (| value |);
                                                                        M.cast
                                                                          (Ty.path "u64")
                                                                          (M.read (|
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  constraint
                                                                                |)
                                                                              |),
                                                                              "openvm_stark_backend::keygen::types::LinearConstraint",
                                                                              "threshold"
                                                                            |)
                                                                          |))
                                                                      ]
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.read (|
                                                                      let~ enabled :
                                                                          Ty.path "bool" :=
                                                                        LogicalOp.and (|
                                                                          LogicalOp.and (|
                                                                            M.call_closure (|
                                                                              Ty.path "bool",
                                                                              M.get_trait_method (|
                                                                                "core::cmp::PartialOrd",
                                                                                Ty.path
                                                                                  "tracing_core::metadata::Level",
                                                                                [],
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::metadata::LevelFilter"
                                                                                ],
                                                                                "le",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  get_associated_constant (|
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::Level",
                                                                                    "INFO",
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::Level"
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  get_constant (|
                                                                                    "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::LevelFilter"
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |),
                                                                            ltac:(M.monadic
                                                                              (M.call_closure (|
                                                                                Ty.path "bool",
                                                                                M.get_trait_method (|
                                                                                  "core::cmp::PartialOrd",
                                                                                  Ty.path
                                                                                    "tracing_core::metadata::Level",
                                                                                  [],
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::metadata::LevelFilter"
                                                                                  ],
                                                                                  "le",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    get_associated_constant (|
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::Level",
                                                                                      "INFO",
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::Level"
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::LevelFilter",
                                                                                      M.call_closure (|
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::LevelFilter",
                                                                                        M.get_associated_function (|
                                                                                          Ty.path
                                                                                            "tracing_core::metadata::LevelFilter",
                                                                                          "current",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        []
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                          |),
                                                                          ltac:(M.monadic
                                                                            (M.read (|
                                                                              let~ interest :
                                                                                  Ty.path
                                                                                    "tracing_core::subscriber::Interest" :=
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "tracing_core::subscriber::Interest",
                                                                                  M.get_associated_function (|
                                                                                    Ty.path
                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                    "interest",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          get_constant (|
                                                                                            "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'2",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Ty.path "bool",
                                                                                LogicalOp.and (|
                                                                                  UnOp.not (|
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      M.get_associated_function (|
                                                                                        Ty.path
                                                                                          "tracing_core::subscriber::Interest",
                                                                                        "is_never",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          interest
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  ltac:(M.monadic
                                                                                    (M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      M.get_function (|
                                                                                        "tracing::__macro_support::__is_enabled",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Metadata"
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "tracing_core::callsite::Callsite",
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                                                [],
                                                                                                [],
                                                                                                "metadata",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      get_constant (|
                                                                                                        "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'2",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                                                          ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |);
                                                                                        M.read (|
                                                                                          interest
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                                |)
                                                                              |)
                                                                            |)))
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        M.match_operator (|
                                                                          Ty.tuple [],
                                                                          M.alloc (|
                                                                            Ty.tuple [],
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use enabled in
                                                                                let _ :=
                                                                                  is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.call_closure (|
                                                                                      Ty.tuple [],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::function::Fn",
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.path
                                                                                              "tracing_core::field::ValueSet"
                                                                                          ]
                                                                                          (Ty.tuple
                                                                                            []),
                                                                                        [],
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::ValueSet"
                                                                                            ]
                                                                                        ],
                                                                                        "call",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::field::ValueSet"
                                                                                              ]
                                                                                              (Ty.tuple
                                                                                                []),
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.match_operator (|
                                                                                                        Ty.tuple
                                                                                                          [],
                                                                                                        M.alloc (|
                                                                                                          Ty.path
                                                                                                            "tracing_core::field::ValueSet",
                                                                                                          α0
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (let
                                                                                                                    value_set :=
                                                                                                                M.copy (|
                                                                                                                  Ty.path
                                                                                                                    "tracing_core::field::ValueSet",
                                                                                                                  γ
                                                                                                                |) in
                                                                                                              M.read (|
                                                                                                                let~
                                                                                                                      meta :
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "tracing_core::metadata::Metadata"
                                                                                                                      ] :=
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "tracing_core::metadata::Metadata"
                                                                                                                      ],
                                                                                                                    M.get_trait_method (|
                                                                                                                      "tracing_core::callsite::Callsite",
                                                                                                                      Ty.path
                                                                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                                                                      [],
                                                                                                                      [],
                                                                                                                      "metadata",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            get_constant (|
                                                                                                                              "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'2",
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                                                                ]
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |) in
                                                                                                                let~
                                                                                                                      _ :
                                                                                                                    Ty.tuple
                                                                                                                      [] :=
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.tuple
                                                                                                                      [],
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.path
                                                                                                                        "tracing_core::event::Event",
                                                                                                                      "dispatch",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            meta
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            value_set
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |) in
                                                                                                                M.alloc (|
                                                                                                                  Ty.tuple
                                                                                                                    [],
                                                                                                                  Value.Tuple
                                                                                                                    []
                                                                                                                |)
                                                                                                              |)))
                                                                                                        ]
                                                                                                      |)))
                                                                                                  | _ =>
                                                                                                    M.impossible
                                                                                                      "wrong number of arguments"
                                                                                                  end))
                                                                                          |)
                                                                                        |);
                                                                                        Value.Tuple
                                                                                          [
                                                                                            M.read (|
                                                                                              let~
                                                                                                    iter :
                                                                                                  Ty.path
                                                                                                    "tracing_core::field::Iter" :=
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::field::Iter",
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::field::FieldSet",
                                                                                                    "iter",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "tracing_core::field::FieldSet"
                                                                                                            ],
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.path
                                                                                                              "tracing_core::metadata::Metadata",
                                                                                                            "fields",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.call_closure (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "tracing_core::metadata::Metadata"
                                                                                                                    ],
                                                                                                                  M.get_trait_method (|
                                                                                                                    "tracing_core::callsite::Callsite",
                                                                                                                    Ty.path
                                                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                                                    [],
                                                                                                                    [],
                                                                                                                    "metadata",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      M.deref (|
                                                                                                                        M.read (|
                                                                                                                          get_constant (|
                                                                                                                            "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'2",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                                                              ]
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Ty.path
                                                                                                  "tracing_core::field::ValueSet",
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::field::ValueSet",
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::field::FieldSet",
                                                                                                    "value_set",
                                                                                                    [],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "array")
                                                                                                        [
                                                                                                          Value.Integer
                                                                                                            IntegerKind.Usize
                                                                                                            1
                                                                                                        ]
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "&")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "tracing_core::field::Field"
                                                                                                                ];
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::option::Option")
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.dyn
                                                                                                                        [
                                                                                                                          ("tracing_core::field::Value::Trait",
                                                                                                                            [])
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.call_closure (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "tracing_core::field::FieldSet"
                                                                                                            ],
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.path
                                                                                                              "tracing_core::metadata::Metadata",
                                                                                                            "fields",
                                                                                                            [],
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.call_closure (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "tracing_core::metadata::Metadata"
                                                                                                                    ],
                                                                                                                  M.get_trait_method (|
                                                                                                                    "tracing_core::callsite::Callsite",
                                                                                                                    Ty.path
                                                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                                                    [],
                                                                                                                    [],
                                                                                                                    "metadata",
                                                                                                                    [],
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      M.deref (|
                                                                                                                        M.read (|
                                                                                                                          get_constant (|
                                                                                                                            "openvm_circuit::arch::extensions::generate_proof_input::__CALLSITE'2",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                                                              ]
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |);
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.alloc (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "array")
                                                                                                              [
                                                                                                                Value.Integer
                                                                                                                  IntegerKind.Usize
                                                                                                                  1
                                                                                                              ]
                                                                                                              [
                                                                                                                Ty.tuple
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "tracing_core::field::Field"
                                                                                                                      ];
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::option::Option")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.dyn
                                                                                                                              [
                                                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                                                  [])
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ],
                                                                                                            Value.Array
                                                                                                              [
                                                                                                                Value.Tuple
                                                                                                                  [
                                                                                                                    M.borrow (|
                                                                                                                      Pointer.Kind.Ref,
                                                                                                                      M.alloc (|
                                                                                                                        Ty.path
                                                                                                                          "tracing_core::field::Field",
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "tracing_core::field::Field",
                                                                                                                          M.get_associated_function (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::option::Option")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "tracing_core::field::Field"
                                                                                                                              ],
                                                                                                                            "expect",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::option::Option")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "tracing_core::field::Field"
                                                                                                                                ],
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                                                Ty.path
                                                                                                                                  "tracing_core::field::Iter",
                                                                                                                                [],
                                                                                                                                [],
                                                                                                                                "next",
                                                                                                                                [],
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.MutRef,
                                                                                                                                  M.deref (|
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.MutRef,
                                                                                                                                      iter
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |);
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.deref (|
                                                                                                                                mk_str (|
                                                                                                                                  "FieldSet corrupted (this is a bug)"
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |);
                                                                                                                    Value.StructTuple
                                                                                                                      "core::option::Option::Some"
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.dyn
                                                                                                                              [
                                                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                                                  [])
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          M.use
                                                                                                                            (M.alloc (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.dyn
                                                                                                                                    [
                                                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                                                        [])
                                                                                                                                    ]
                                                                                                                                ],
                                                                                                                              M.call_closure (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.dyn
                                                                                                                                      [
                                                                                                                                        ("tracing_core::field::Value::Trait",
                                                                                                                                          [])
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                M.pointer_coercion
                                                                                                                                  M.PointerCoercion.Unsize
                                                                                                                                  (Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "core::fmt::Arguments"
                                                                                                                                    ])
                                                                                                                                  (Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.dyn
                                                                                                                                        [
                                                                                                                                          ("tracing_core::field::Value::Trait",
                                                                                                                                            [])
                                                                                                                                        ]
                                                                                                                                    ]),
                                                                                                                                [
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.deref (|
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.alloc (|
                                                                                                                                          Ty.path
                                                                                                                                            "core::fmt::Arguments",
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "core::fmt::Arguments",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.path
                                                                                                                                                "core::fmt::Arguments",
                                                                                                                                              "new_v1",
                                                                                                                                              [
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  5;
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  4
                                                                                                                                              ],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "array")
                                                                                                                                                        [
                                                                                                                                                          Value.Integer
                                                                                                                                                            IntegerKind.Usize
                                                                                                                                                            5
                                                                                                                                                        ]
                                                                                                                                                        [
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "&")
                                                                                                                                                            []
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "str"
                                                                                                                                                            ]
                                                                                                                                                        ],
                                                                                                                                                      Value.Array
                                                                                                                                                        [
                                                                                                                                                          mk_str (|
                                                                                                                                                            "trace heights "
                                                                                                                                                          |);
                                                                                                                                                          mk_str (|
                                                                                                                                                            " violate linear constraint "
                                                                                                                                                          |);
                                                                                                                                                          mk_str (|
                                                                                                                                                            " ("
                                                                                                                                                          |);
                                                                                                                                                          mk_str (|
                                                                                                                                                            " >= "
                                                                                                                                                          |);
                                                                                                                                                          mk_str (|
                                                                                                                                                            ")"
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |);
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.borrow (|
                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                    M.alloc (|
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "array")
                                                                                                                                                        [
                                                                                                                                                          Value.Integer
                                                                                                                                                            IntegerKind.Usize
                                                                                                                                                            4
                                                                                                                                                        ]
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "core::fmt::rt::Argument"
                                                                                                                                                        ],
                                                                                                                                                      Value.Array
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.path
                                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.path
                                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                                              "new_debug",
                                                                                                                                                              [],
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                  []
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "usize";
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                  ]
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                M.deref (|
                                                                                                                                                                  M.borrow (|
                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                    trace_heights
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |);
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.path
                                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.path
                                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                                              "new_display",
                                                                                                                                                              [],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "usize"
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                M.deref (|
                                                                                                                                                                  M.borrow (|
                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                    i
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |);
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.path
                                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.path
                                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                                              "new_display",
                                                                                                                                                              [],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "u64"
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                M.deref (|
                                                                                                                                                                  M.borrow (|
                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                    value
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |);
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            Ty.path
                                                                                                                                                              "core::fmt::rt::Argument",
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.path
                                                                                                                                                                "core::fmt::rt::Argument",
                                                                                                                                                              "new_display",
                                                                                                                                                              [],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "u32"
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.borrow (|
                                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                                M.deref (|
                                                                                                                                                                  M.borrow (|
                                                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                                                      M.deref (|
                                                                                                                                                                        M.read (|
                                                                                                                                                                          constraint
                                                                                                                                                                        |)
                                                                                                                                                                      |),
                                                                                                                                                                      "openvm_stark_backend::keygen::types::LinearConstraint",
                                                                                                                                                                      "threshold"
                                                                                                                                                                    |)
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            |))
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                      ]
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Ty.tuple [],
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (Value.Tuple []))
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |) in
                                                                  M.return_ (|
                                                                    Value.StructTuple
                                                                      "core::result::Result::Err"
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::prover::types::ProofInput")
                                                                          []
                                                                          [ SC ];
                                                                        Ty.path
                                                                          "openvm_circuit::arch::vm::GenerationError"
                                                                      ]
                                                                      [
                                                                        Value.StructTuple
                                                                          "openvm_circuit::arch::vm::GenerationError::TraceHeightsLimitExceeded"
                                                                          []
                                                                          []
                                                                          []
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)
                                                    |)
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                    |)
                                  |)))
                            ]
                          |)
                        |))
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [ F; E; P ],
                        "finalize_metrics",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, self |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| metrics |) |) |)
                      ]
                    |) in
                  let~ has_pv_chip : Ty.path "bool" :=
                    M.call_closure (|
                      Ty.path "bool",
                      M.get_associated_function (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        "is_some",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                            M.call_closure (|
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                  []
                                  [ F; E; P ],
                                "public_values_chip_idx",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, self |) ]
                            |)
                          |)
                        |)
                      ]
                    |) in
                  let~ builder :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmProofInputBuilder")
                        []
                        [ SC ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::VmProofInputBuilder")
                        []
                        [ SC ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmProofInputBuilder")
                          []
                          [ SC ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                          []
                          [ SC ];
                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                            []
                            [ SC ];
                          Ty.path "openvm_circuit::arch::vm::GenerationError"
                        ],
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::extensions::VmChipComplex",
                        "base"
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemBase",
                                "range_checker_chip"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemBase",
                                "memory_controller"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemBase",
                                "connector_chip"
                              |) in
                            let γ0_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemBase",
                                "program_chip"
                              |) in
                            let range_checker_chip :=
                              M.copy (|
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                γ0_0
                              |) in
                            let memory_controller :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ],
                                γ0_1
                              |) in
                            let connector_chip :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::connector::VmConnectorChip")
                                  []
                                  [ F ],
                                γ0_2
                              |) in
                            let program_chip :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::program::ProgramChip")
                                  []
                                  [ F ],
                                γ0_3
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        builder,
                                                        "openvm_circuit::arch::extensions::VmProofInputBuilder",
                                                        "curr_air_id"
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      get_constant (|
                                                        "openvm_circuit::arch::extensions::PROGRAM_AIR_ID",
                                                        Ty.path "usize"
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                      []
                                      [ SC ],
                                    "add_air_proof_input",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, builder |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "openvm_circuit::system::program::ProgramChip")
                                          []
                                          [ F ],
                                        "generate_air_proof_input",
                                        [],
                                        [ SC ]
                                      |),
                                      [ M.read (| program_chip |); M.read (| cached_program |) ]
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        builder,
                                                        "openvm_circuit::arch::extensions::VmProofInputBuilder",
                                                        "curr_air_id"
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      get_constant (|
                                                        "openvm_circuit::arch::extensions::CONNECTOR_AIR_ID",
                                                        Ty.path "usize"
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                      []
                                      [ SC ],
                                    "add_air_proof_input",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, builder |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ],
                                      M.get_trait_method (|
                                        "openvm_stark_backend::chip::Chip",
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::connector::VmConnectorChip")
                                          []
                                          [ F ],
                                        [],
                                        [ SC ],
                                        "generate_air_proof_input",
                                        [],
                                        []
                                      |),
                                      [ M.read (| connector_chip |) ]
                                    |)
                                  ]
                                |) in
                              let~ public_values_input :
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ]
                                    ] :=
                                Value.StructTuple
                                  "core::option::Option::None"
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                      []
                                      [ SC ]
                                  ]
                                  [] in
                              let~ insertion_order :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "openvm_circuit::arch::extensions::ChipId";
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                      "inventory"
                                    |),
                                    "openvm_circuit::arch::extensions::VmInventory",
                                    "insertion_order"
                                  |)
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.path "openvm_circuit::arch::extensions::ChipId" ],
                                    "reverse",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [ Ty.path "openvm_circuit::arch::extensions::ChipId"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path "openvm_circuit::arch::extensions::ChipId";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref_mut",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.MutRef, insertion_order |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |) in
                              let~ non_sys_inputs :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "with_capacity",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.path "openvm_circuit::arch::extensions::ChipId";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, insertion_order |) ]
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.use
                                    (M.alloc (|
                                      Ty.tuple [],
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.path "openvm_circuit::arch::extensions::ChipId";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.path "openvm_circuit::arch::extensions::ChipId";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_circuit::arch::extensions::ChipId";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| insertion_order |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_circuit::arch::extensions::ChipId";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  γ
                                                |) in
                                              M.read (|
                                                M.loop (|
                                                  Ty.tuple [],
                                                  ltac:(M.monadic
                                                    (let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.path
                                                                "openvm_circuit::arch::extensions::ChipId"
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "openvm_circuit::arch::extensions::ChipId"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "openvm_circuit::arch::extensions::ChipId";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "next",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    iter
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.is_struct_tuple (|
                                                                  γ,
                                                                  "core::option::Option::None"
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let chip_id :=
                                                                M.copy (|
                                                                  Ty.path
                                                                    "openvm_circuit::arch::extensions::ChipId",
                                                                  γ0_0
                                                                |) in
                                                              M.read (|
                                                                let~ height :
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [ Ty.path "usize" ] :=
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                    [] in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
                                                                                    ]
                                                                                ],
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
                                                                                      ]
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
                                                                                    ],
                                                                                  "as_ref",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      self,
                                                                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                      "overridden_inventory_heights"
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let overridden_heights :=
                                                                            M.copy (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "openvm_circuit::arch::extensions::VmInventoryTraceHeights"
                                                                                ],
                                                                              γ0_0
                                                                            |) in
                                                                          M.read (|
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.write (|
                                                                                height,
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ]
                                                                                      ],
                                                                                    "copied",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "std::collections::hash::map::HashMap")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "openvm_circuit::arch::extensions::ChipId";
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.path
                                                                                              "rustc_hash::FxBuildHasher"
                                                                                          ],
                                                                                        "get",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_circuit::arch::extensions::ChipId"
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                overridden_heights
                                                                                              |)
                                                                                            |),
                                                                                            "openvm_circuit::arch::extensions::VmInventoryTraceHeights",
                                                                                            "chips"
                                                                                          |)
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              chip_id
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (Value.Tuple []))
                                                                    ]
                                                                  |) in
                                                                let~ air_proof_input :
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::prover::types::AirProofInput")
                                                                      []
                                                                      [ SC ] :=
                                                                  M.match_operator (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::prover::types::AirProofInput")
                                                                      []
                                                                      [ SC ],
                                                                    chip_id,
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "openvm_circuit::arch::extensions::ChipId::Executor",
                                                                              0
                                                                            |) in
                                                                          let id :=
                                                                            M.copy (|
                                                                              Ty.path "usize",
                                                                              γ0_0
                                                                            |) in
                                                                          M.read (|
                                                                            let~ chip : E :=
                                                                              M.call_closure (|
                                                                                E,
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [ E ],
                                                                                  "unwrap",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [ E ],
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          E;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "pop",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            self,
                                                                                            "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                            "inventory"
                                                                                          |),
                                                                                          "openvm_circuit::arch::extensions::VmInventory",
                                                                                          "executors"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ],
                                                                                  Value.Tuple
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        id
                                                                                      |);
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.alloc (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  E;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              "len",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    self,
                                                                                                    "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                                    "inventory"
                                                                                                  |),
                                                                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                                                                  "executors"
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          0
                                                                                        |) in
                                                                                      let γ0_1 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          1
                                                                                        |) in
                                                                                      let
                                                                                            left_val :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                          γ0_0
                                                                                        |) in
                                                                                      let
                                                                                            right_val :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                          γ0_1
                                                                                        |) in
                                                                                      M.match_operator (|
                                                                                        Ty.tuple [],
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ :=
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    UnOp.not (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "bool",
                                                                                                        BinOp.eq,
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                left_val
                                                                                                              |)
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                right_val
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)) in
                                                                                              let
                                                                                                    _ :=
                                                                                                is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              M.never_to_any (|
                                                                                                M.read (|
                                                                                                  let~
                                                                                                        kind :
                                                                                                      Ty.path
                                                                                                        "core::panicking::AssertKind" :=
                                                                                                    Value.StructTuple
                                                                                                      "core::panicking::AssertKind::Eq"
                                                                                                      []
                                                                                                      []
                                                                                                      [] in
                                                                                                  M.alloc (|
                                                                                                    Ty.path
                                                                                                      "never",
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "never",
                                                                                                      M.get_function (|
                                                                                                        "core::panicking::assert_failed",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          kind
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  left_val
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  right_val
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        Value.StructTuple
                                                                                                          "core::option::Option::None"
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "core::fmt::Arguments"
                                                                                                          ]
                                                                                                          []
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (Value.Tuple
                                                                                                []))
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::prover::types::AirProofInput")
                                                                                []
                                                                                [ SC ],
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                                                  []
                                                                                  [ SC ],
                                                                                M.get_function (|
                                                                                  "openvm_circuit::arch::extensions::generate_air_proof_input",
                                                                                  [],
                                                                                  [ SC; E ]
                                                                                |),
                                                                                [
                                                                                  M.read (| chip |);
                                                                                  M.read (|
                                                                                    height
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "openvm_circuit::arch::extensions::ChipId::Periphery",
                                                                              0
                                                                            |) in
                                                                          let id :=
                                                                            M.copy (|
                                                                              Ty.path "usize",
                                                                              γ0_0
                                                                            |) in
                                                                          M.read (|
                                                                            let~ chip : P :=
                                                                              M.call_closure (|
                                                                                P,
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::option::Option")
                                                                                    []
                                                                                    [ P ],
                                                                                  "unwrap",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [ P ],
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        []
                                                                                        [
                                                                                          P;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "pop",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            self,
                                                                                            "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                            "inventory"
                                                                                          |),
                                                                                          "openvm_circuit::arch::extensions::VmInventory",
                                                                                          "periphery"
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.match_operator (|
                                                                                Ty.tuple [],
                                                                                M.alloc (|
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ]
                                                                                    ],
                                                                                  Value.Tuple
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        id
                                                                                      |);
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.alloc (|
                                                                                          Ty.path
                                                                                            "usize",
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "usize",
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  P;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              "len",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    self,
                                                                                                    "openvm_circuit::arch::extensions::VmChipComplex",
                                                                                                    "inventory"
                                                                                                  |),
                                                                                                  "openvm_circuit::arch::extensions::VmInventory",
                                                                                                  "periphery"
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ0_0 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          0
                                                                                        |) in
                                                                                      let γ0_1 :=
                                                                                        M.SubPointer.get_tuple_field (|
                                                                                          γ,
                                                                                          1
                                                                                        |) in
                                                                                      let
                                                                                            left_val :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                          γ0_0
                                                                                        |) in
                                                                                      let
                                                                                            right_val :=
                                                                                        M.copy (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                          γ0_1
                                                                                        |) in
                                                                                      M.match_operator (|
                                                                                        Ty.tuple [],
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ :=
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    UnOp.not (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "bool",
                                                                                                        BinOp.eq,
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                left_val
                                                                                                              |)
                                                                                                            |)
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                right_val
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)) in
                                                                                              let
                                                                                                    _ :=
                                                                                                is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              M.never_to_any (|
                                                                                                M.read (|
                                                                                                  let~
                                                                                                        kind :
                                                                                                      Ty.path
                                                                                                        "core::panicking::AssertKind" :=
                                                                                                    Value.StructTuple
                                                                                                      "core::panicking::AssertKind::Eq"
                                                                                                      []
                                                                                                      []
                                                                                                      [] in
                                                                                                  M.alloc (|
                                                                                                    Ty.path
                                                                                                      "never",
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "never",
                                                                                                      M.get_function (|
                                                                                                        "core::panicking::assert_failed",
                                                                                                        [],
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.path
                                                                                                            "usize"
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          kind
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  left_val
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              M.deref (|
                                                                                                                M.read (|
                                                                                                                  right_val
                                                                                                                |)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |);
                                                                                                        Value.StructTuple
                                                                                                          "core::option::Option::None"
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "core::fmt::Arguments"
                                                                                                          ]
                                                                                                          []
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (Value.Tuple
                                                                                                []))
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_stark_backend::prover::types::AirProofInput")
                                                                                []
                                                                                [ SC ],
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                                                  []
                                                                                  [ SC ],
                                                                                M.get_function (|
                                                                                  "openvm_circuit::arch::extensions::generate_air_proof_input",
                                                                                  [],
                                                                                  [ SC; P ]
                                                                                |),
                                                                                [
                                                                                  M.read (| chip |);
                                                                                  M.read (|
                                                                                    height
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  M.match_operator (|
                                                                    Ty.tuple [],
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      Value.Tuple []
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ :=
                                                                            M.use
                                                                              (M.alloc (|
                                                                                Ty.path "bool",
                                                                                LogicalOp.and (|
                                                                                  M.read (|
                                                                                    has_pv_chip
                                                                                  |),
                                                                                  ltac:(M.monadic
                                                                                    (M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      M.get_trait_method (|
                                                                                        "core::cmp::PartialEq",
                                                                                        Ty.path
                                                                                          "openvm_circuit::arch::extensions::ChipId",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_circuit::arch::extensions::ChipId"
                                                                                        ],
                                                                                        "eq",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          chip_id
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Ty.path
                                                                                              "openvm_circuit::arch::extensions::ChipId",
                                                                                            Value.StructTuple
                                                                                              "openvm_circuit::arch::extensions::ChipId::Executor"
                                                                                              []
                                                                                              []
                                                                                              [
                                                                                                M.read (|
                                                                                                  get_associated_constant (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "openvm_circuit::arch::extensions::VmChipComplex")
                                                                                                      []
                                                                                                      [
                                                                                                        F;
                                                                                                        E;
                                                                                                        P
                                                                                                      ],
                                                                                                    "PV_EXECUTOR_IDX",
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                                |)
                                                                              |)) in
                                                                          let _ :=
                                                                            is_constant_or_break_match (|
                                                                              M.read (| γ |),
                                                                              Value.Bool true
                                                                            |) in
                                                                          M.read (|
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.write (|
                                                                                public_values_input,
                                                                                Value.StructTuple
                                                                                  "core::option::Option::Some"
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::prover::types::AirProofInput")
                                                                                      []
                                                                                      [ SC ]
                                                                                  ]
                                                                                  [
                                                                                    M.read (|
                                                                                      air_proof_input
                                                                                    |)
                                                                                  ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.read (|
                                                                            let~ _ : Ty.tuple [] :=
                                                                              M.call_closure (|
                                                                                Ty.tuple [],
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::prover::types::AirProofInput")
                                                                                        []
                                                                                        [ SC ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  "push",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    non_sys_inputs
                                                                                  |);
                                                                                  M.read (|
                                                                                    air_proof_input
                                                                                  |)
                                                                                ]
                                                                              |) in
                                                                            M.alloc (|
                                                                              Ty.tuple [],
                                                                              Value.Tuple []
                                                                            |)
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := public_values_input in
                                        let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let input :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::prover::types::AirProofInput")
                                              []
                                              [ SC ],
                                            γ0_0
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          Value.Bool true
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.read (|
                                                      let~ _ : Ty.tuple [] :=
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (|
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ];
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                            Value.Tuple
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    builder,
                                                                    "openvm_circuit::arch::extensions::VmProofInputBuilder",
                                                                    "curr_air_id"
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  get_constant (|
                                                                    "openvm_circuit::arch::extensions::PUBLIC_VALUES_AIR_ID",
                                                                    Ty.path "usize"
                                                                  |)
                                                                |)
                                                              ]
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ0_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let left_val :=
                                                                  M.copy (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "usize" ],
                                                                    γ0_0
                                                                  |) in
                                                                let right_val :=
                                                                  M.copy (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "usize" ],
                                                                    γ0_1
                                                                  |) in
                                                                M.match_operator (|
                                                                  Ty.tuple [],
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.use
                                                                            (M.alloc (|
                                                                              Ty.path "bool",
                                                                              UnOp.not (|
                                                                                M.call_closure (|
                                                                                  Ty.path "bool",
                                                                                  BinOp.eq,
                                                                                  [
                                                                                    M.read (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          left_val
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    M.read (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          right_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)) in
                                                                        let _ :=
                                                                          is_constant_or_break_match (|
                                                                            M.read (| γ |),
                                                                            Value.Bool true
                                                                          |) in
                                                                        M.never_to_any (|
                                                                          M.read (|
                                                                            let~ kind :
                                                                                Ty.path
                                                                                  "core::panicking::AssertKind" :=
                                                                              Value.StructTuple
                                                                                "core::panicking::AssertKind::Eq"
                                                                                []
                                                                                []
                                                                                [] in
                                                                            M.alloc (|
                                                                              Ty.path "never",
                                                                              M.call_closure (|
                                                                                Ty.path "never",
                                                                                M.get_function (|
                                                                                  "core::panicking::assert_failed",
                                                                                  [],
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path "usize"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.read (| kind |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            left_val
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            right_val
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  Value.StructTuple
                                                                                    "core::option::Option::None"
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments"
                                                                                    ]
                                                                                    []
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (Value.Tuple []))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                                  []
                                                  [ SC ],
                                                "add_air_proof_input",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.MutRef, builder |);
                                                M.read (| input |)
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  let~ air_proof_inputs :
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::AirProofInput")
                                            []
                                            [ SC ];
                                          Ty.path "alloc::alloc::Global"
                                        ] :=
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::AirProofInput")
                                            []
                                            [ SC ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ],
                                        "generate_air_proof_inputs",
                                        [],
                                        [ SC ]
                                      |),
                                      [ M.read (| memory_controller |) ]
                                    |) in
                                  M.use
                                    (M.alloc (|
                                      Ty.tuple [],
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_stark_backend::prover::types::AirProofInput")
                                                []
                                                [ SC ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                  []
                                                  [ SC ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| air_proof_inputs |) ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::prover::types::AirProofInput")
                                                        []
                                                        [ SC ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  γ
                                                |) in
                                              M.read (|
                                                M.loop (|
                                                  Ty.tuple [],
                                                  ltac:(M.monadic
                                                    (let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::prover::types::AirProofInput")
                                                                []
                                                                [ SC ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                                  []
                                                                  [ SC ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::vec::into_iter::IntoIter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                                    []
                                                                    [ SC ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "next",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    iter
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.is_struct_tuple (|
                                                                  γ,
                                                                  "core::option::Option::None"
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let air_proof_input :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                                    []
                                                                    [ SC ],
                                                                  γ0_0
                                                                |) in
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                                                        []
                                                                        [ SC ],
                                                                      "add_air_proof_input",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.MutRef,
                                                                        builder
                                                                      |);
                                                                      M.read (| air_proof_input |)
                                                                    ]
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "for_each",
                                    [],
                                    [
                                      Ty.function
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::AirProofInput")
                                            []
                                            [ SC ]
                                        ]
                                        (Ty.tuple [])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::AirProofInput")
                                            []
                                            [ SC ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::prover::types::AirProofInput")
                                              []
                                              [ SC ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [ M.read (| non_sys_inputs |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ],
                                                  α0
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let input :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::prover::types::AirProofInput")
                                                            []
                                                            [ SC ],
                                                          γ
                                                        |) in
                                                      M.call_closure (|
                                                        Ty.tuple [],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                                            []
                                                            [ SC ],
                                                          "add_air_proof_input",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            builder
                                                          |);
                                                          M.read (| input |)
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                      []
                                      [ SC ],
                                    "add_air_proof_input",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, builder |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ],
                                      M.get_trait_method (|
                                        "openvm_stark_backend::chip::Chip",
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        [],
                                        [ SC ],
                                        "generate_air_proof_input",
                                        [],
                                        []
                                      |),
                                      [ M.read (| range_checker_chip |) ]
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                      []
                                      [ SC ];
                                    Ty.path "openvm_circuit::arch::vm::GenerationError"
                                  ],
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                      []
                                      [ SC ];
                                    Ty.path "openvm_circuit::arch::vm::GenerationError"
                                  ]
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                        []
                                        [ SC ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmProofInputBuilder")
                                          []
                                          [ SC ],
                                        "build",
                                        [],
                                        []
                                      |),
                                      [ M.read (| builder |) ]
                                    |)
                                  ]
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_generate_proof_input :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "generate_proof_input" (generate_proof_input F E P).
      Admitted.
      Global Typeclasses Opaque generate_proof_input.
      
      (*
          fn finalize_metrics(&self, metrics: &mut VmMetrics)
          where
              E: ChipUsageGetter,
              P: ChipUsageGetter,
          {
              tracing::info!(metrics.cycle_count);
              counter!("total_cycles").absolute(metrics.cycle_count as u64);
              counter!("main_cells_used")
                  .absolute(self.current_trace_cells().into_iter().sum::<usize>() as u64);
      
              if self.config.profiling {
                  metrics.chip_heights =
                      itertools::izip!(self.air_names(), self.current_trace_heights()).collect();
                  metrics.emit();
              }
          }
      *)
      Definition finalize_metrics
          (F E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F E P in
        match ε, τ, α with
        | [], [], [ self; metrics ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                      []
                      [ F; E; P ]
                  ],
                self
              |) in
            let metrics :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
                metrics
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.read (|
                  let~ enabled : Ty.path "bool" :=
                    LogicalOp.and (|
                      LogicalOp.and (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "tracing_core::metadata::Level",
                            [],
                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                            "le",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_associated_constant (|
                                Ty.path "tracing_core::metadata::Level",
                                "INFO",
                                Ty.path "tracing_core::metadata::Level"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_constant (|
                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                Ty.path "tracing_core::metadata::LevelFilter"
                              |)
                            |)
                          ]
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "tracing_core::metadata::Level",
                              [],
                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                              "le",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                get_associated_constant (|
                                  Ty.path "tracing_core::metadata::Level",
                                  "INFO",
                                  Ty.path "tracing_core::metadata::Level"
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.path "tracing_core::metadata::LevelFilter",
                                  M.call_closure (|
                                    Ty.path "tracing_core::metadata::LevelFilter",
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::metadata::LevelFilter",
                                      "current",
                                      [],
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              |)
                            ]
                          |)))
                      |),
                      ltac:(M.monadic
                        (M.read (|
                          let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                            M.call_closure (|
                              Ty.path "tracing_core::subscriber::Interest",
                              M.get_associated_function (|
                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                "interest",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::arch::extensions::finalize_metrics::__CALLSITE",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "tracing_core::callsite::DefaultCallsite" ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |) in
                          M.alloc (|
                            Ty.path "bool",
                            LogicalOp.and (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::subscriber::Interest",
                                    "is_never",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                |)
                              |),
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "bool",
                                  M.get_function (|
                                    "tracing::__macro_support::__is_enabled",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "tracing_core::metadata::Metadata" ],
                                          M.get_trait_method (|
                                            "tracing_core::callsite::Callsite",
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            [],
                                            [],
                                            "metadata",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.read (|
                                                  get_constant (|
                                                    "openvm_circuit::arch::extensions::finalize_metrics::__CALLSITE",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite"
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.read (| interest |)
                                  ]
                                |)))
                            |)
                          |)
                        |)))
                    |) in
                  M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use enabled in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    Ty.function
                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                      (Ty.tuple []),
                                    [],
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                    "call",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.function
                                          [ Ty.path "tracing_core::field::ValueSet" ]
                                          (Ty.tuple []),
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.path "tracing_core::field::ValueSet",
                                                      α0
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let value_set :=
                                                            M.copy (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            let~ meta :
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ] :=
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_circuit::arch::extensions::finalize_metrics::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |) in
                                                            let~ _ : Ty.tuple [] :=
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::event::Event",
                                                                  "dispatch",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        value_set
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      |)
                                    |);
                                    Value.Tuple
                                      [
                                        M.read (|
                                          let~ iter : Ty.path "tracing_core::field::Iter" :=
                                            M.call_closure (|
                                              Ty.path "tracing_core::field::Iter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::field::FieldSet" ],
                                                      M.get_associated_function (|
                                                        Ty.path "tracing_core::metadata::Metadata",
                                                        "fields",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_circuit::arch::extensions::finalize_metrics::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |) in
                                          M.alloc (|
                                            Ty.path "tracing_core::field::ValueSet",
                                            M.call_closure (|
                                              Ty.path "tracing_core::field::ValueSet",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "value_set",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "tracing_core::field::Field"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("tracing_core::field::Value::Trait",
                                                                        [])
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::field::FieldSet" ],
                                                      M.get_associated_function (|
                                                        Ty.path "tracing_core::metadata::Metadata",
                                                        "fields",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_circuit::arch::extensions::finalize_metrics::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::Field"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("tracing_core::field::Value::Trait",
                                                                              [])
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            Value.Tuple
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.path
                                                                      "tracing_core::field::Field",
                                                                    M.call_closure (|
                                                                      Ty.path
                                                                        "tracing_core::field::Field",
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ],
                                                                        "expect",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.path
                                                                              "tracing_core::field::Iter",
                                                                            [],
                                                                            [],
                                                                            "next",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  iter
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            mk_str (|
                                                                              "FieldSet corrupted (this is a bug)"
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("tracing_core::field::Value::Trait",
                                                                              [])
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  [
                                                                    M.read (|
                                                                      M.use
                                                                        (M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "usize" ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          metrics
                                                                                        |)
                                                                                      |),
                                                                                      "openvm_circuit::metrics::VmMetrics",
                                                                                      "cycle_count"
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |))
                                                                    |)
                                                                  ]
                                                              ]
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "metrics::handles::Counter",
                    "absolute",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      let~ metric_key : Ty.apply (Ty.path "&") [] [ Ty.path "metrics::key::Key" ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "openvm_circuit::arch::extensions::finalize_metrics::METRIC_KEY",
                                Ty.apply (Ty.path "&") [] [ Ty.path "metrics::key::Key" ]
                              |)
                            |)
                          |)
                        |) in
                      let~ metadata :
                          Ty.apply (Ty.path "&") [] [ Ty.path "metrics::metadata::Metadata" ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "openvm_circuit::arch::extensions::finalize_metrics::METADATA",
                                Ty.apply (Ty.path "&") [] [ Ty.path "metrics::metadata::Metadata" ]
                              |)
                            |)
                          |)
                        |) in
                      M.alloc (|
                        Ty.path "metrics::handles::Counter",
                        M.call_closure (|
                          Ty.path "metrics::handles::Counter",
                          M.get_function (|
                            "metrics::recorder::with_recorder",
                            [],
                            [
                              Ty.path "metrics::handles::Counter";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("metrics::recorder::Recorder::Trait", []) ] ]
                                ]
                                (Ty.path "metrics::handles::Counter")
                            ]
                          |),
                          [
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "metrics::handles::Counter",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.dyn [ ("metrics::recorder::Recorder::Trait", []) ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let recorder :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [ ("metrics::recorder::Recorder::Trait", [])
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "metrics::handles::Counter",
                                                M.get_trait_method (|
                                                  "metrics::recorder::Recorder",
                                                  Ty.dyn
                                                    [ ("metrics::recorder::Recorder::Trait", []) ],
                                                  [],
                                                  [],
                                                  "register_counter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| recorder |) |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            metric_key
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| metadata |) |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |)
                    |);
                    M.cast
                      (Ty.path "u64")
                      (M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| metrics |) |),
                          "openvm_circuit::metrics::VmMetrics",
                          "cycle_count"
                        |)
                      |))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "metrics::handles::Counter",
                    "absolute",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      let~ metric_key : Ty.apply (Ty.path "&") [] [ Ty.path "metrics::key::Key" ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "openvm_circuit::arch::extensions::finalize_metrics::METRIC_KEY'1",
                                Ty.apply (Ty.path "&") [] [ Ty.path "metrics::key::Key" ]
                              |)
                            |)
                          |)
                        |) in
                      let~ metadata :
                          Ty.apply (Ty.path "&") [] [ Ty.path "metrics::metadata::Metadata" ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.read (|
                              get_constant (|
                                "openvm_circuit::arch::extensions::finalize_metrics::METADATA'1",
                                Ty.apply (Ty.path "&") [] [ Ty.path "metrics::metadata::Metadata" ]
                              |)
                            |)
                          |)
                        |) in
                      M.alloc (|
                        Ty.path "metrics::handles::Counter",
                        M.call_closure (|
                          Ty.path "metrics::handles::Counter",
                          M.get_function (|
                            "metrics::recorder::with_recorder",
                            [],
                            [
                              Ty.path "metrics::handles::Counter";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("metrics::recorder::Recorder::Trait", []) ] ]
                                ]
                                (Ty.path "metrics::handles::Counter")
                            ]
                          |),
                          [
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "metrics::handles::Counter",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.dyn [ ("metrics::recorder::Recorder::Trait", []) ]
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let recorder :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [ ("metrics::recorder::Recorder::Trait", [])
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.path "metrics::handles::Counter",
                                                M.get_trait_method (|
                                                  "metrics::recorder::Recorder",
                                                  Ty.dyn
                                                    [ ("metrics::recorder::Recorder::Trait", []) ],
                                                  [],
                                                  [],
                                                  "register_counter",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| recorder |) |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.read (|
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            metric_key
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| metadata |) |)
                                                  |)
                                                ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      |)
                    |);
                    M.cast
                      (Ty.path "u64")
                      (M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "sum",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                    []
                                    [ F; E; P ],
                                  "current_trace_cells",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            ]
                          |)
                        ]
                      |))
                  ]
                |) in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::extensions::VmChipComplex",
                                "config"
                              |),
                              "openvm_circuit::arch::config::SystemConfig",
                              "profiling"
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| metrics |) |),
                                "openvm_circuit::metrics::VmMetrics",
                                "chip_heights"
                              |),
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  [],
                                  [],
                                  "collect",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.tuple
                                          [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.path "alloc::string::String";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "zip",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.path "alloc::string::String";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.path "alloc::string::String";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "into_iter",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.path "alloc::string::String";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::extensions::VmChipComplex")
                                                []
                                                [ F; E; P ],
                                              "air_names",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::extensions::VmChipComplex")
                                            []
                                            [ F; E; P ],
                                          "current_trace_heights",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| self |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.path "openvm_circuit::metrics::VmMetrics",
                                "emit",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| metrics |) |) |)
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_finalize_metrics :
        forall (F E P : Ty.t),
        M.IsAssociatedFunction.C (Self F E P) "finalize_metrics" (finalize_metrics F E P).
      Admitted.
      Global Typeclasses Opaque finalize_metrics.
    End Impl_openvm_circuit_arch_extensions_VmChipComplex_F_E_P.
    
    (* StructRecord
      {
        name := "BusIndexManager";
        const_params := [];
        ty_params := [];
        fields := [ ("bus_idx_max", Ty.path "u16") ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_BusIndexManager.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::BusIndexManager".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::BusIndexManager" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_circuit_arch_extensions_BusIndexManager.
    
    Module Impl_core_marker_Copy_for_openvm_circuit_arch_extensions_BusIndexManager.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::BusIndexManager".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_circuit_arch_extensions_BusIndexManager.
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_BusIndexManager.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::BusIndexManager".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::BusIndexManager" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BusIndexManager" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus_idx_max" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u16" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "u16" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::extensions::BusIndexManager",
                                "bus_idx_max"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_extensions_BusIndexManager.
    
    Module Impl_core_default_Default_for_openvm_circuit_arch_extensions_BusIndexManager.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::BusIndexManager".
      
      (* Default *)
      Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_circuit::arch::extensions::BusIndexManager"
              []
              []
              [
                ("bus_idx_max",
                  M.call_closure (|
                    Ty.path "u16",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "u16",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("default", InstanceField.Method default) ].
    End Impl_core_default_Default_for_openvm_circuit_arch_extensions_BusIndexManager.
    
    Module Impl_openvm_circuit_arch_extensions_BusIndexManager.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::extensions::BusIndexManager".
      
      (*
          pub fn new() -> Self {
              Self { bus_idx_max: 0 }
          }
      *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_circuit::arch::extensions::BusIndexManager"
              []
              []
              [ ("bus_idx_max", Value.Integer IntegerKind.U16 0) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn new_bus_idx(&mut self) -> BusIndex {
              let idx = self.bus_idx_max;
              self.bus_idx_max = self.bus_idx_max.checked_add(1).unwrap();
              idx
          }
      *)
      Definition new_bus_idx (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::BusIndexManager" ],
                self
              |) in
            M.read (|
              let~ idx : Ty.path "u16" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::BusIndexManager",
                    "bus_idx_max"
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::BusIndexManager",
                    "bus_idx_max"
                  |),
                  M.call_closure (|
                    Ty.path "u16",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                      "unwrap",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u16" ],
                        M.get_associated_function (| Ty.path "u16", "checked_add", [], [] |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::extensions::BusIndexManager",
                              "bus_idx_max"
                            |)
                          |);
                          Value.Integer IntegerKind.U16 1
                        ]
                      |)
                    ]
                  |)
                |) in
              idx
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_bus_idx :
        M.IsAssociatedFunction.C Self "new_bus_idx" new_bus_idx.
      Admitted.
      Global Typeclasses Opaque new_bus_idx.
    End Impl_openvm_circuit_arch_extensions_BusIndexManager.
    
    Axiom SystemComplex :
      forall (F : Ty.t),
      (Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemComplex") [] [ F ]) =
        (Ty.apply
          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
          []
          [
            F;
            Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ];
            Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
          ]).
    
    (* StructRecord
      {
        name := "SystemBase";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("range_checker_chip",
              Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip");
            ("memory_controller",
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                []
                [ F ]);
            ("connector_chip",
              Ty.apply (Ty.path "openvm_circuit::system::connector::VmConnectorChip") [] [ F ]);
            ("program_chip",
              Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ])
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_extensions_SystemBase_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ].
      
      (*
          pub fn range_checker_bus(&self) -> VariableRangeCheckerBus {
              self.range_checker_chip.bus()
          }
      *)
      Definition range_checker_bus
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            M.call_closure (|
              Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
              M.get_associated_function (|
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                "bus",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "range_checker_chip"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_range_checker_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "range_checker_bus" (range_checker_bus F).
      Admitted.
      Global Typeclasses Opaque range_checker_bus.
      
      (*
          pub fn memory_bus(&self) -> MemoryBus {
              self.memory_controller.memory_bus
          }
      *)
      Definition memory_bus (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::arch::extensions::SystemBase",
                  "memory_controller"
                |),
                "openvm_circuit::system::memory::controller::MemoryController",
                "memory_bus"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "memory_bus" (memory_bus F).
      Admitted.
      Global Typeclasses Opaque memory_bus.
      
      (*
          pub fn program_bus(&self) -> ProgramBus {
              self.program_chip.air.bus
          }
      *)
      Definition program_bus (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "program_chip"
                  |),
                  "openvm_circuit::system::program::ProgramChip",
                  "air"
                |),
                "openvm_circuit::system::program::air::ProgramAir",
                "bus"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_program_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "program_bus" (program_bus F).
      Admitted.
      Global Typeclasses Opaque program_bus.
      
      (*
          pub fn memory_bridge(&self) -> MemoryBridge {
              self.memory_controller.memory_bridge()
          }
      *)
      Definition memory_bridge
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            M.call_closure (|
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                  []
                  [ F ],
                "memory_bridge",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "memory_controller"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_bridge :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "memory_bridge" (memory_bridge F).
      Admitted.
      Global Typeclasses Opaque memory_bridge.
      
      (*
          pub fn offline_memory(&self) -> Arc<Mutex<OfflineMemory<F>>> {
              self.memory_controller.offline_memory().clone()
          }
      *)
      Definition offline_memory
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::sync::mutex::Mutex")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [ F ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ],
                        "offline_memory",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::extensions::SystemBase",
                            "memory_controller"
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_offline_memory :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "offline_memory" (offline_memory F).
      Admitted.
      Global Typeclasses Opaque offline_memory.
      
      (*
          pub fn execution_bus(&self) -> ExecutionBus {
              self.connector_chip.air.execution_bus
          }
      *)
      Definition execution_bus
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::SystemBase",
                    "connector_chip"
                  |),
                  "openvm_circuit::system::connector::VmConnectorChip",
                  "air"
                |),
                "openvm_circuit::system::connector::VmConnectorAir",
                "execution_bus"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execution_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "execution_bus" (execution_bus F).
      Admitted.
      Global Typeclasses Opaque execution_bus.
      
      (*
          pub fn get_system_trace_heights(&self) -> SystemTraceHeights {
              SystemTraceHeights {
                  memory: self.memory_controller.get_memory_trace_heights(),
              }
          }
      *)
      Definition get_system_trace_heights
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::config::SystemTraceHeights"
              []
              []
              [
                ("memory",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ],
                      "get_memory_trace_heights",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::extensions::SystemBase",
                          "memory_controller"
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_system_trace_heights :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "get_system_trace_heights" (get_system_trace_heights F).
      Admitted.
      Global Typeclasses Opaque get_system_trace_heights.
      
      (*
          pub fn get_dummy_system_trace_heights(&self) -> SystemTraceHeights {
              SystemTraceHeights {
                  memory: self.memory_controller.get_dummy_memory_trace_heights(),
              }
          }
      *)
      Definition get_dummy_system_trace_heights
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::config::SystemTraceHeights"
              []
              []
              [
                ("memory",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ],
                      "get_dummy_memory_trace_heights",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::extensions::SystemBase",
                          "memory_controller"
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_dummy_system_trace_heights :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C
          (Self F)
          "get_dummy_system_trace_heights"
          (get_dummy_system_trace_heights F).
      Admitted.
      Global Typeclasses Opaque get_dummy_system_trace_heights.
    End Impl_openvm_circuit_arch_extensions_SystemBase_F.
    
    (*
    Enum SystemExecutor
    {
      const_params := [];
      ty_params := [ "F" ];
      variants :=
        [
          {
            name := "PublicValues";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0 ]
                        [ F ];
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ]
                ];
          };
          {
            name := "Phantom";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "core::cell::RefCell")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ]
                ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_SystemExecutor_PublicValues :
      M.IsDiscriminant "openvm_circuit::arch::extensions::SystemExecutor::PublicValues" 0.
    Axiom IsDiscriminant_SystemExecutor_Phantom :
      M.IsDiscriminant "openvm_circuit::arch::extensions::SystemExecutor::Phantom" 1.
    
    Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (* ChipUsageGetter *)
      Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "alloc::string::String",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* ChipUsageGetter *)
      Definition constant_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "constant_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "constant_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* ChipUsageGetter *)
      Definition current_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* ChipUsageGetter *)
      Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::ChipUsageGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("air_name", InstanceField.Method (air_name F));
            ("constant_trace_height", InstanceField.Method (constant_trace_height F));
            ("current_trace_height", InstanceField.Method (current_trace_height F));
            ("trace_width", InstanceField.Method (trace_width F))
          ].
    End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
    
    Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_circuit_arch_extensions_SystemExecutor_F.
      Definition Self (F SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (* Chip *)
      Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ])
                (Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ]),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ])
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ]),
                  [
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.deref (| M.read (| γ |) |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                                0
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::VmChipWrapper")
                                      []
                                      [
                                        F;
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 0
                                          ]
                                          [ F ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ])
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ]),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "openvm_stark_backend::chip::Chip",
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::VmChipWrapper")
                                      []
                                      [
                                        F;
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 0
                                          ]
                                          [ F ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                          []
                                          [ F ]
                                      ],
                                    [],
                                    [ SC ],
                                    "air",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                                |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.deref (| M.read (| γ |) |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                                0
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "openvm_stark_backend::chip::Chip",
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                      []
                                      [ F ]
                                  ],
                                [],
                                [ SC ],
                                "air",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                            |)))
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* Chip *)
      Definition generate_air_proof_input
          (F SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ],
                self
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.copy (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ SC ],
                        "generate_air_proof_input",
                        [],
                        []
                      |),
                      [ M.read (| x |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.copy (|
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ SC ],
                        "generate_air_proof_input",
                        [],
                        []
                      |),
                      [ M.read (| x |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* Chip *)
      Definition generate_air_proof_input_with_id
          (F SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC in
        match ε, τ, α with
        | [], [], [ self; air_id ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ],
                self
              |) in
            let air_id := M.alloc (| Ty.path "usize", air_id |) in
            M.match_operator (|
              Ty.tuple
                [
                  Ty.path "usize";
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.copy (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ]
                        ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ SC ],
                        "generate_air_proof_input_with_id",
                        [],
                        []
                      |),
                      [ M.read (| x |); M.read (| air_id |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.copy (|
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ]
                        ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ SC ],
                        "generate_air_proof_input_with_id",
                        [],
                        []
                      |),
                      [ M.read (| x |); M.read (| air_id |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F SC : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::Chip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ SC ]
          (Self F SC)
          (* Instance *)
          [
            ("air", InstanceField.Method (air F SC));
            ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
            ("generate_air_proof_input_with_id",
              InstanceField.Method (generate_air_proof_input_with_id F SC))
          ].
    End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_circuit_arch_extensions_SystemExecutor_F.
    
    Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (* AnyEnum *)
      Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              self,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.deref (| M.read (| γ |) |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                                        0
                                      |) in
                                    let x :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 2;
                                                    Value.Integer IntegerKind.Usize 0
                                                  ]
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ],
                                        γ1_0
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 2;
                                                    Value.Integer IntegerKind.Usize 0
                                                  ]
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.deref (| M.read (| γ |) |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                                        0
                                      |) in
                                    let x :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::phantom::PhantomChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ],
                                        γ1_0
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::phantom::PhantomChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* AnyEnum *)
      Definition as_any_kind_mut
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                        (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              self,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.deref (| M.read (| γ |) |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                                        0
                                      |) in
                                    let x :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 2;
                                                    Value.Integer IntegerKind.Usize 0
                                                  ]
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ],
                                        γ1_0
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::VmChipWrapper")
                                              []
                                              [
                                                F;
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                  [
                                                    Value.Integer IntegerKind.Usize 2;
                                                    Value.Integer IntegerKind.Usize 0
                                                  ]
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.deref (| M.read (| γ |) |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                                        0
                                      |) in
                                    let x :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::phantom::PhantomChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ],
                                        γ1_0
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::phantom::PhantomChip")
                                                  []
                                                  [ F ]
                                              ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::extensions::AnyEnum"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("as_any_kind", InstanceField.Method (as_any_kind F));
            ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
          ].
    End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
    
    Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_circuit_system_native_adapter_NativeAdapterChip_Usize_2_Usize_0_F_openvm_circuit_system_public_values_core_PublicValuesCoreChip_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (* From *)
      Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                  []
                  [
                    F;
                    Ty.apply
                      (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                      [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0 ]
                      [ F ];
                    Ty.apply
                      (Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                      []
                      [ F ]
                  ],
                value
              |) in
            Value.StructTuple
              "openvm_circuit::arch::extensions::SystemExecutor::PublicValues"
              []
              [ F ]
              [ M.read (| value |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
              []
              [
                F;
                Ty.apply
                  (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                  [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0 ]
                  [ F ];
                Ty.apply
                  (Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                  []
                  [ F ]
              ]
          ]
          (Self F)
          (* Instance *) [ ("from", InstanceField.Method (from F)) ].
    End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_arch_integration_api_VmChipWrapper_F_openvm_circuit_system_native_adapter_NativeAdapterChip_Usize_2_Usize_0_F_openvm_circuit_system_public_values_core_PublicValuesCoreChip_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
    
    Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_core_cell_RefCell_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (* From *)
      Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::cell::RefCell")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ],
                value
              |) in
            Value.StructTuple
              "openvm_circuit::arch::extensions::SystemExecutor::Phantom"
              []
              [ F ]
              [ M.read (| value |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "core::cell::RefCell")
              []
              [ Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] ]
          ]
          (Self F)
          (* Instance *) [ ("from", InstanceField.Method (from F)) ].
    End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_core_cell_RefCell_openvm_circuit_system_phantom_PhantomChip_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
    
    Module Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ].
      
      (* InstructionExecutor *)
      Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction; from_state ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_state :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ],
                from_state
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                    []
                    [ Ty.path "u32" ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                            []
                            [ Ty.path "u32" ];
                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                        ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::execution::InstructionExecutor",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ F ],
                        "execute",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                        M.read (| from_state |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                            []
                            [ Ty.path "u32" ];
                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                        ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::execution::InstructionExecutor",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ F ],
                        "execute",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| x |) |) |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                        M.read (| from_state |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* InstructionExecutor *)
      Definition get_opcode_name
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ]
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.match_operator (|
              Ty.path "alloc::string::String",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::PublicValues",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0
                                  ]
                                  [ F ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_circuit::arch::execution::InstructionExecutor",
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "openvm_circuit::system::native_adapter::NativeAdapterChip")
                              [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 0
                              ]
                              [ F ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ F ],
                        "get_opcode_name",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                        M.read (| opcode |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemExecutor::Phantom",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_circuit::arch::execution::InstructionExecutor",
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                              []
                              [ F ]
                          ],
                        [],
                        [ F ],
                        "get_opcode_name",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |);
                        M.read (| opcode |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::execution::InstructionExecutor"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("execute", InstanceField.Method (execute F));
            ("get_opcode_name", InstanceField.Method (get_opcode_name F))
          ].
    End Impl_openvm_circuit_arch_execution_InstructionExecutor_where_p3_field_field_PrimeField32_F_F_for_openvm_circuit_arch_extensions_SystemExecutor_F.
    
    (*
    Enum SystemPeriphery
    {
      const_params := [];
      ty_params := [ "F" ];
      variants :=
        [
          {
            name := "Poseidon2";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                    []
                    [ F ]
                ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_SystemPeriphery_Poseidon2 :
      M.IsDiscriminant "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2" 0.
    
    Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ].
      
      (* ChipUsageGetter *)
      Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "alloc::string::String",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* ChipUsageGetter *)
      Definition constant_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        [],
                        [],
                        "constant_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* ChipUsageGetter *)
      Definition current_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* ChipUsageGetter *)
      Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                        0
                      |) in
                    let x :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::ChipUsageGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("air_name", InstanceField.Method (air_name F));
            ("constant_trace_height", InstanceField.Method (constant_trace_height F));
            ("current_trace_height", InstanceField.Method (current_trace_height F));
            ("trace_width", InstanceField.Method (trace_width F))
          ].
    End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
    
    Module Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
      Definition Self (F SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ].
      
      (* Chip *)
      Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ])
                (Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ]),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ])
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ]),
                  [
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.deref (| M.read (| γ |) |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                                0
                              |) in
                            let x :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                      []
                                      [ F ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ])
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ]),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "openvm_stark_backend::chip::Chip",
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                      []
                                      [ F ],
                                    [],
                                    [ SC ],
                                    "air",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                                |)
                              ]
                            |)))
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* Chip *)
      Definition generate_air_proof_input
          (F SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ],
                self
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                        0
                      |) in
                    let x :=
                      M.copy (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        [],
                        [ SC ],
                        "generate_air_proof_input",
                        [],
                        []
                      |),
                      [ M.read (| x |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* Chip *)
      Definition generate_air_proof_input_with_id
          (F SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC in
        match ε, τ, α with
        | [], [], [ self; air_id ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ],
                self
              |) in
            let air_id := M.alloc (| Ty.path "usize", air_id |) in
            M.match_operator (|
              Ty.tuple
                [
                  Ty.path "usize";
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ]
                ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                        0
                      |) in
                    let x :=
                      M.copy (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ]
                        ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ],
                        [],
                        [ SC ],
                        "generate_air_proof_input_with_id",
                        [],
                        []
                      |),
                      [ M.read (| x |); M.read (| air_id |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F SC : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::Chip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ SC ]
          (Self F SC)
          (* Instance *)
          [
            ("air", InstanceField.Method (air F SC));
            ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
            ("generate_air_proof_input_with_id",
              InstanceField.Method (generate_air_proof_input_with_id F SC))
          ].
    End Impl_openvm_stark_backend_chip_Chip_where_p3_field_field_PrimeField32_F_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_SC_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
    
    Module Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ].
      
      (* AnyEnum *)
      Definition as_any_kind (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              self,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.deref (| M.read (| γ |) |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                                        0
                                      |) in
                                    let x :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ],
                                        γ1_0
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (* AnyEnum *)
      Definition as_any_kind_mut
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                        (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                              self,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := M.deref (| M.read (| γ |) |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2",
                                        0
                                      |) in
                                    let x :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ],
                                        γ1_0
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&mut")
                                        []
                                        [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                              []
                                              [ F ]
                                          ])
                                        (Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| x |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::extensions::AnyEnum"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("as_any_kind", InstanceField.Method (as_any_kind F));
            ("as_any_kind_mut", InstanceField.Method (as_any_kind_mut F))
          ].
    End Impl_openvm_circuit_arch_extensions_AnyEnum_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
    
    Module Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ].
      
      (* From *)
      Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                  []
                  [ F ],
                value
              |) in
            Value.StructTuple
              "openvm_circuit::arch::extensions::SystemPeriphery::Poseidon2"
              []
              [ F ]
              [ M.read (| value |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip") [] [ F ]
          ]
          (Self F)
          (* Instance *) [ ("from", InstanceField.Method (from F)) ].
    End Impl_core_convert_From_where_p3_field_field_PrimeField32_F_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F_for_openvm_circuit_arch_extensions_SystemPeriphery_F.
    
    Module Impl_openvm_circuit_arch_extensions_VmChipComplex_F_openvm_circuit_arch_extensions_SystemExecutor_F_openvm_circuit_arch_extensions_SystemPeriphery_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
          []
          [
            F;
            Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ];
            Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
          ].
      
      (*
          pub fn new(config: SystemConfig) -> Self {
              let mut bus_idx_mgr = BusIndexManager::new();
              let execution_bus = ExecutionBus::new(bus_idx_mgr.new_bus_idx());
              let memory_bus = MemoryBus::new(bus_idx_mgr.new_bus_idx());
              let program_bus = ProgramBus::new(bus_idx_mgr.new_bus_idx());
              let range_bus =
                  VariableRangeCheckerBus::new(bus_idx_mgr.new_bus_idx(), config.memory_config.decomp);
      
              let range_checker = SharedVariableRangeCheckerChip::new(range_bus);
              let memory_controller = if config.continuation_enabled {
                  MemoryController::with_persistent_memory(
                      memory_bus,
                      config.memory_config,
                      range_checker.clone(),
                      PermutationCheckBus::new(bus_idx_mgr.new_bus_idx()),
                      PermutationCheckBus::new(bus_idx_mgr.new_bus_idx()),
                  )
              } else {
                  MemoryController::with_volatile_memory(
                      memory_bus,
                      config.memory_config,
                      range_checker.clone(),
                  )
              };
              let memory_bridge = memory_controller.memory_bridge();
              let offline_memory = memory_controller.offline_memory();
              let program_chip = ProgramChip::new(program_bus);
              let connector_chip = VmConnectorChip::new(
                  execution_bus,
                  program_bus,
                  range_checker.clone(),
                  config.memory_config.clk_max_bits,
              );
      
              let mut inventory = VmInventory::new();
              // PublicValuesChip is required when num_public_values > 0 in single segment mode.
              if config.has_public_values_chip() {
                  assert_eq!(inventory.executors().len(), Self::PV_EXECUTOR_IDX);
                  let chip = PublicValuesChip::new(
                      NativeAdapterChip::new(execution_bus, program_bus, memory_bridge),
                      PublicValuesCoreChip::new(
                          config.num_public_values,
                          config.max_constraint_degree as u32 - 1,
                      ),
                      offline_memory,
                  );
                  inventory
                      .add_executor(chip, [PublishOpcode::PUBLISH.global_opcode()])
                      .unwrap();
              }
              if config.continuation_enabled {
                  assert_eq!(inventory.periphery().len(), Self::POSEIDON2_PERIPHERY_IDX);
                  // Add direct poseidon2 chip for persistent memory.
                  // This is **not** an instruction executor.
                  // Currently we never use poseidon2 opcodes when continuations is enabled: we will need
                  // special handling when that happens
                  let direct_bus_idx = memory_controller
                      .interface_chip
                      .compression_bus()
                      .unwrap()
                      .index;
                  let chip = Poseidon2PeripheryChip::new(
                      vm_poseidon2_config(),
                      direct_bus_idx,
                      config.max_constraint_degree,
                  );
                  inventory.add_periphery_chip(chip);
              }
              let streams = Arc::new(Mutex::new(Streams::default()));
              let phantom_opcode = SystemOpcode::PHANTOM.global_opcode();
              let mut phantom_chip =
                  PhantomChip::new(execution_bus, program_bus, SystemOpcode::CLASS_OFFSET);
              phantom_chip.set_streams(streams.clone());
              inventory
                  .add_executor(RefCell::new(phantom_chip), [phantom_opcode])
                  .unwrap();
      
              let base = SystemBase {
                  program_chip,
                  connector_chip,
                  memory_controller,
                  range_checker_chip: range_checker,
              };
      
              let max_trace_height = if TypeId::of::<F>() == TypeId::of::<BabyBear>() {
                  let min_log_blowup = log2_ceil_usize(config.max_constraint_degree - 1);
                  1 << (BabyBear::TWO_ADICITY - min_log_blowup)
              } else {
                  tracing::warn!(
                      "constructing SystemComplex for unrecognized field; using max_trace_height = 2^30"
                  );
                  1 << 30
              };
      
              Self {
                  config,
                  base,
                  inventory,
                  bus_idx_mgr,
                  streams,
                  overridden_inventory_heights: None,
                  max_trace_height,
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ config ] =>
          ltac:(M.monadic
            (let config :=
              M.alloc (| Ty.path "openvm_circuit::arch::config::SystemConfig", config |) in
            M.read (|
              let~ bus_idx_mgr : Ty.path "openvm_circuit::arch::extensions::BusIndexManager" :=
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                    "new",
                    [],
                    []
                  |),
                  []
                |) in
              let~ execution_bus : Ty.path "openvm_circuit::arch::execution::ExecutionBus" :=
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "u16",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                        "new_bus_idx",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, bus_idx_mgr |) ]
                    |)
                  ]
                |) in
              let~ memory_bus :
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" :=
                M.call_closure (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "u16",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                        "new_bus_idx",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, bus_idx_mgr |) ]
                    |)
                  ]
                |) in
              let~ program_bus : Ty.path "openvm_circuit::system::program::bus::ProgramBus" :=
                M.call_closure (|
                  Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "u16",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                        "new_bus_idx",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, bus_idx_mgr |) ]
                    |)
                  ]
                |) in
              let~ range_bus :
                  Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus" :=
                M.call_closure (|
                  Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "u16",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                        "new_bus_idx",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, bus_idx_mgr |) ]
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          config,
                          "openvm_circuit::arch::config::SystemConfig",
                          "memory_config"
                        |),
                        "openvm_circuit::arch::config::MemoryConfig",
                        "decomp"
                      |)
                    |)
                  ]
                |) in
              let~ range_checker :
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip" :=
                M.call_closure (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| range_bus |) ]
                |) in
              let~ memory_controller :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ] :=
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.SubPointer.get_struct_record_field (|
                              config,
                              "openvm_circuit::arch::config::SystemConfig",
                              "continuation_enabled"
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "with_persistent_memory",
                            [],
                            []
                          |),
                          [
                            M.read (| memory_bus |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                config,
                                "openvm_circuit::arch::config::SystemConfig",
                                "memory_config"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                            |);
                            M.call_closure (|
                              Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                              M.get_associated_function (|
                                Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "u16",
                                  M.get_associated_function (|
                                    Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                                    "new_bus_idx",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.MutRef, bus_idx_mgr |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                              M.get_associated_function (|
                                Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.path "u16",
                                  M.get_associated_function (|
                                    Ty.path "openvm_circuit::arch::extensions::BusIndexManager",
                                    "new_bus_idx",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.MutRef, bus_idx_mgr |) ]
                                |)
                              ]
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "with_volatile_memory",
                            [],
                            []
                          |),
                          [
                            M.read (| memory_bus |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                config,
                                "openvm_circuit::arch::config::SystemConfig",
                                "memory_config"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                            |)
                          ]
                        |)))
                  ]
                |) in
              let~ memory_bridge :
                  Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge" :=
                M.call_closure (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ],
                    "memory_bridge",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, memory_controller |) ]
                |) in
              let~ offline_memory :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ],
                    "offline_memory",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, memory_controller |) ]
                |) in
              let~ program_chip :
                  Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| program_bus |) ]
                |) in
              let~ connector_chip :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::connector::VmConnectorChip")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::system::connector::VmConnectorChip") [] [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::connector::VmConnectorChip")
                      []
                      [ F ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.read (| execution_bus |);
                    M.read (| program_bus |);
                    M.call_closure (|
                      Ty.path
                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path
                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          config,
                          "openvm_circuit::arch::config::SystemConfig",
                          "memory_config"
                        |),
                        "openvm_circuit::arch::config::MemoryConfig",
                        "clk_max_bits"
                      |)
                    |)
                  ]
                |) in
              let~ inventory :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                        []
                        [ F ];
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                          []
                          [ F ];
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                          []
                          [ F ]
                      ],
                    "new",
                    [],
                    []
                  |),
                  []
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_associated_function (|
                                  Ty.path "openvm_circuit::arch::config::SystemConfig",
                                  "has_public_values_chip",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, config |) ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::extensions::SystemExecutor")
                                                  []
                                                  [ F ]
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::arch::extensions::SystemExecutor")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::extensions::SystemExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::extensions::SystemPeriphery")
                                                          []
                                                          [ F ]
                                                      ],
                                                    "executors",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, inventory |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_associated_constant (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemPeriphery")
                                              []
                                              [ F ]
                                          ],
                                        "PV_EXECUTOR_IDX",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          let~ chip :
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 0
                                    ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                    []
                                    [ F ]
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                []
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 0
                                    ]
                                    [ F ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::integration_api::VmChipWrapper")
                                  []
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 0
                                      ]
                                      [ F ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                      []
                                      [ F ]
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 0
                                    ]
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 0
                                      ]
                                      [ F ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| execution_bus |);
                                    M.read (| program_bus |);
                                    M.read (| memory_bridge |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                    []
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                      []
                                      [ F ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        config,
                                        "openvm_circuit::arch::config::SystemConfig",
                                        "num_public_values"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.sub,
                                      [
                                        M.cast
                                          (Ty.path "u32")
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              config,
                                              "openvm_circuit::arch::config::SystemConfig",
                                              "max_constraint_degree"
                                            |)
                                          |));
                                        Value.Integer IntegerKind.U32 1
                                      ]
                                    |)
                                  ]
                                |);
                                M.read (| offline_memory |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                  ],
                                "unwrap",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::SystemExecutor")
                                          []
                                          [ F ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::SystemPeriphery")
                                          []
                                          [ F ]
                                      ],
                                    "add_executor",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::VmChipWrapper")
                                        []
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 0
                                            ]
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                            []
                                            [ F ]
                                        ];
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "openvm_instructions::VmOpcode" ]
                                    ]
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, inventory |);
                                    M.read (| chip |);
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "openvm_instructions::VmOpcode",
                                          M.get_trait_method (|
                                            "openvm_instructions::LocalOpcode",
                                            Ty.path "openvm_instructions::PublishOpcode",
                                            [],
                                            [],
                                            "global_opcode",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "openvm_instructions::PublishOpcode",
                                                Value.StructTuple
                                                  "openvm_instructions::PublishOpcode::PUBLISH"
                                                  []
                                                  []
                                                  []
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  ]
                                |)
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.SubPointer.get_struct_record_field (|
                              config,
                              "openvm_circuit::arch::config::SystemConfig",
                              "continuation_enabled"
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::extensions::SystemPeriphery")
                                                  []
                                                  [ F ]
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::arch::extensions::SystemPeriphery")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::extensions::VmInventory")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::extensions::SystemExecutor")
                                                          []
                                                          [ F ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::extensions::SystemPeriphery")
                                                          []
                                                          [ F ]
                                                      ],
                                                    "periphery",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, inventory |) ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_associated_constant (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::extensions::VmChipComplex")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemExecutor")
                                              []
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::extensions::SystemPeriphery")
                                              []
                                              [ F ]
                                          ],
                                        "POSEIDON2_PERIPHERY_IDX",
                                        Ty.path "usize"
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          let~ direct_bus_idx : Ty.path "u16" :=
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.alloc (|
                                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                                  M.call_closure (|
                                    Ty.path
                                      "openvm_stark_backend::interaction::PermutationCheckBus",
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.path
                                            "openvm_stark_backend::interaction::PermutationCheckBus"
                                        ],
                                      "unwrap",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.path
                                              "openvm_stark_backend::interaction::PermutationCheckBus"
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                                            []
                                            [ F ],
                                          "compression_bus",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              memory_controller,
                                              "openvm_circuit::system::memory::controller::MemoryController",
                                              "interface_chip"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                "openvm_stark_backend::interaction::PermutationCheckBus",
                                "index"
                              |)
                            |) in
                          let~ chip :
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                []
                                [ F ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                []
                                [ F ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                  []
                                  [ F ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "openvm_poseidon2_air::config::Poseidon2Config")
                                    []
                                    [ F ],
                                  M.get_function (|
                                    "openvm_circuit::arch::config::vm_poseidon2_config",
                                    [],
                                    [ F ]
                                  |),
                                  []
                                |);
                                M.read (| direct_bus_idx |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    config,
                                    "openvm_circuit::arch::config::SystemConfig",
                                    "max_constraint_degree"
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                                      []
                                      [ F ]
                                  ],
                                "add_periphery_chip",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                                    []
                                    [ F ]
                                ]
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, inventory |); M.read (| chip |) ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ streams :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                            [],
                            [],
                            "default",
                            [],
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ phantom_opcode : Ty.path "openvm_instructions::VmOpcode" :=
                M.call_closure (|
                  Ty.path "openvm_instructions::VmOpcode",
                  M.get_trait_method (|
                    "openvm_instructions::LocalOpcode",
                    Ty.path "openvm_instructions::SystemOpcode",
                    [],
                    [],
                    "global_opcode",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.path "openvm_instructions::SystemOpcode",
                        Value.StructTuple "openvm_instructions::SystemOpcode::PHANTOM" [] [] []
                      |)
                    |)
                  ]
                |) in
              let~ phantom_chip :
                  Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.read (| execution_bus |);
                    M.read (| program_bus |);
                    M.read (|
                      get_constant (|
                        "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                        Ty.path "usize"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::system::phantom::PhantomChip") [] [ F ],
                    "set_streams",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, phantom_chip |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            []
                            [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::Mutex")
                              []
                              [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, streams |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError" ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::SystemExecutor")
                              []
                              [ F ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery")
                              []
                              [ F ]
                          ],
                        "add_executor",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::cell::RefCell")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                []
                                [ F ]
                            ];
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [ Ty.path "openvm_instructions::VmOpcode" ]
                        ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, inventory |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::cell::RefCell")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                []
                                [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::cell::RefCell")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::phantom::PhantomChip")
                                  []
                                  [ F ]
                              ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| phantom_chip |) ]
                        |);
                        Value.Array [ M.read (| phantom_opcode |) ]
                      ]
                    |)
                  ]
                |) in
              let~ base :
                  Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemBase") [] [ F ] :=
                Value.mkStructRecord
                  "openvm_circuit::arch::extensions::SystemBase"
                  []
                  [ F ]
                  [
                    ("program_chip", M.read (| program_chip |));
                    ("connector_chip", M.read (| connector_chip |));
                    ("memory_controller", M.read (| memory_controller |));
                    ("range_checker_chip", M.read (| range_checker |))
                  ] in
              let~ max_trace_height : Ty.path "usize" :=
                M.match_operator (|
                  Ty.path "usize",
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.path "core::any::TypeId",
                                  [],
                                  [ Ty.path "core::any::TypeId" ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "core::any::TypeId",
                                      M.call_closure (|
                                        Ty.path "core::any::TypeId",
                                        M.get_associated_function (|
                                          Ty.path "core::any::TypeId",
                                          "of",
                                          [],
                                          [ F ]
                                        |),
                                        []
                                      |)
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "core::any::TypeId",
                                      M.call_closure (|
                                        Ty.path "core::any::TypeId",
                                        M.get_associated_function (|
                                          Ty.path "core::any::TypeId",
                                          "of",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ]
                                          ]
                                        |),
                                        []
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ min_log_blowup : Ty.path "usize" :=
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_function (| "p3_util::log2_ceil_usize", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        config,
                                        "openvm_circuit::arch::config::SystemConfig",
                                        "max_constraint_degree"
                                      |)
                                    |);
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                |)
                              ]
                            |) in
                          M.alloc (|
                            Ty.path "usize",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.shl,
                              [
                                Value.Integer IntegerKind.Usize 1;
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.sub,
                                  [
                                    M.read (|
                                      get_constant (|
                                        "p3_field::field::TwoAdicField::TWO_ADICITY",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    M.read (| min_log_blowup |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              let~ enabled : Ty.path "bool" :=
                                LogicalOp.and (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "WARN",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "WARN",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic
                                    (M.read (|
                                      let~ interest :
                                          Ty.path "tracing_core::subscriber::Interest" :=
                                        M.call_closure (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          M.get_associated_function (|
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            "interest",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.read (|
                                                  get_constant (|
                                                    "openvm_circuit::arch::extensions::new::__CALLSITE",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite"
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |) in
                                      M.alloc (|
                                        Ty.path "bool",
                                        LogicalOp.and (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::subscriber::Interest",
                                                "is_never",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                            |)
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              M.get_function (|
                                                "tracing::__macro_support::__is_enabled",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_circuit::arch::extensions::new::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.read (| interest |)
                                              ]
                                            |)))
                                        |)
                                      |)
                                    |)))
                                |) in
                              M.alloc (|
                                Ty.tuple [],
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use enabled in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [ Ty.path "tracing_core::field::ValueSet" ]
                                                  (Ty.tuple []),
                                                [],
                                                [
                                                  Ty.tuple
                                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                                ],
                                                "call",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.function
                                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                                      (Ty.tuple []),
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::field::ValueSet",
                                                                  α0
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let value_set :=
                                                                        M.copy (|
                                                                          Ty.path
                                                                            "tracing_core::field::ValueSet",
                                                                          γ
                                                                        |) in
                                                                      M.read (|
                                                                        let~ meta :
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::metadata::Metadata"
                                                                              ] :=
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::metadata::Metadata"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "tracing_core::callsite::Callsite",
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite",
                                                                              [],
                                                                              [],
                                                                              "metadata",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "openvm_circuit::arch::extensions::new::__CALLSITE",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "tracing_core::event::Event",
                                                                              "dispatch",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (| meta |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    value_set
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Ty.tuple [],
                                                                          Value.Tuple []
                                                                        |)
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  |)
                                                |);
                                                Value.Tuple
                                                  [
                                                    M.read (|
                                                      let~ iter :
                                                          Ty.path "tracing_core::field::Iter" :=
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::Iter",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_circuit::arch::extensions::new::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |) in
                                                      M.alloc (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_circuit::arch::extensions::new::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::field::Field"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.dyn
                                                                                      [
                                                                                        ("tracing_core::field::Value::Trait",
                                                                                          [])
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    Value.Array
                                                                      [
                                                                        Value.Tuple
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                Ty.path
                                                                                  "tracing_core::field::Field",
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field",
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    "expect",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::Field"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.path
                                                                                          "tracing_core::field::Iter",
                                                                                        [],
                                                                                        [],
                                                                                        "next",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              iter
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        mk_str (|
                                                                                          "FieldSet corrupted (this is a bug)"
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.dyn
                                                                                      [
                                                                                        ("tracing_core::field::Value::Trait",
                                                                                          [])
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.dyn
                                                                                            [
                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                [])
                                                                                            ]
                                                                                        ],
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ],
                                                                                        M.pointer_coercion
                                                                                          M.PointerCoercion.Unsize
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::fmt::Arguments"
                                                                                            ])
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.dyn
                                                                                                [
                                                                                                  ("tracing_core::field::Value::Trait",
                                                                                                    [])
                                                                                                ]
                                                                                            ]),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.alloc (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::Arguments",
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::Arguments",
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::Arguments",
                                                                                                      "new_const",
                                                                                                      [
                                                                                                        Value.Integer
                                                                                                          IntegerKind.Usize
                                                                                                          1
                                                                                                      ],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.alloc (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "array")
                                                                                                                [
                                                                                                                  Value.Integer
                                                                                                                    IntegerKind.Usize
                                                                                                                    1
                                                                                                                ]
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "str"
                                                                                                                    ]
                                                                                                                ],
                                                                                                              Value.Array
                                                                                                                [
                                                                                                                  mk_str (|
                                                                                                                    "constructing SystemComplex for unrecognized field; using max_trace_height = 2^30"
                                                                                                                  |)
                                                                                                                ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |)
                              |)
                            |) in
                          M.alloc (|
                            Ty.path "usize",
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.shl,
                              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.I32 30
                              ]
                            |)
                          |)
                        |)))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                  []
                  [
                    F;
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ];
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ],
                Value.mkStructRecord
                  "openvm_circuit::arch::extensions::VmChipComplex"
                  []
                  [
                    F;
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemExecutor") [] [ F ];
                    Ty.apply (Ty.path "openvm_circuit::arch::extensions::SystemPeriphery") [] [ F ]
                  ]
                  [
                    ("config", M.read (| config |));
                    ("base", M.read (| base |));
                    ("inventory", M.read (| inventory |));
                    ("bus_idx_mgr", M.read (| bus_idx_mgr |));
                    ("streams", M.read (| streams |));
                    ("overridden_inventory_heights",
                      Value.StructTuple
                        "core::option::Option::None"
                        []
                        [ Ty.path "openvm_circuit::arch::extensions::VmInventoryTraceHeights" ]
                        []);
                    ("max_trace_height", M.read (| max_trace_height |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_circuit_arch_extensions_VmChipComplex_F_openvm_circuit_arch_extensions_SystemExecutor_F_openvm_circuit_arch_extensions_SystemPeriphery_F.
    
    
    (* StructRecord
      {
        name := "VmProofInputBuilder";
        const_params := [];
        ty_params := [ "SC" ];
        fields :=
          [
            ("curr_air_id", Ty.path "usize");
            ("proof_input_per_air",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.tuple
                    [
                      Ty.path "usize";
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_extensions_VmProofInputBuilder_SC.
      Definition Self (SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::extensions::VmProofInputBuilder") [] [ SC ].
      
      (*
          fn new() -> Self {
              Self {
                  curr_air_id: 0,
                  proof_input_per_air: vec![],
              }
          }
      *)
      Definition new (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_circuit::arch::extensions::VmProofInputBuilder"
              []
              [ SC ]
              [
                ("curr_air_id", Value.Integer IntegerKind.Usize 0);
                ("proof_input_per_air",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.path "usize";
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                []
                                [ SC ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "new" (new SC).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          fn add_air_proof_input(&mut self, air_proof_input: AirProofInput<SC>) {
              let h = if !air_proof_input.raw.cached_mains.is_empty() {
                  air_proof_input.raw.cached_mains[0].height()
              } else {
                  air_proof_input
                      .raw
                      .common_main
                      .as_ref()
                      .map(|trace| trace.height())
                      .unwrap()
              };
              if h > 0 {
                  self.proof_input_per_air
                      .push((self.curr_air_id, air_proof_input));
              }
              self.curr_air_id += 1;
          }
      *)
      Definition add_air_proof_input
          (SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self; air_proof_input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::VmProofInputBuilder")
                      []
                      [ SC ]
                  ],
                self
              |) in
            let air_proof_input :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                air_proof_input
              |) in
            M.read (|
              let~ h : Ty.path "usize" :=
                M.match_operator (|
                  Ty.path "usize",
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_matrix::dense::DenseMatrix")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "is_empty",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          air_proof_input,
                                          "openvm_stark_backend::prover::types::AirProofInput",
                                          "raw"
                                        |),
                                        "openvm_stark_backend::prover::types::AirProofRawInput",
                                        "cached_mains"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_matrix::Matrix",
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ],
                            "height",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::index::Index",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val";
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val";
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [ Ty.path "usize" ],
                                            "index",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  air_proof_input,
                                                  "openvm_stark_backend::prover::types::AirProofInput",
                                                  "raw"
                                                |),
                                                "openvm_stark_backend::prover::types::AirProofRawInput",
                                                "cached_mains"
                                              |)
                                            |);
                                            Value.Integer IntegerKind.Usize 0
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                            "unwrap",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                  ],
                                "map",
                                [],
                                [
                                  Ty.path "usize";
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.path "usize")
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_matrix::dense::DenseMatrix")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    "as_ref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          air_proof_input,
                                          "openvm_stark_backend::prover::types::AirProofInput",
                                          "raw"
                                        |),
                                        "openvm_stark_backend::prover::types::AirProofRawInput",
                                        "common_main"
                                      |)
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "usize",
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let trace :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "p3_matrix::dense::DenseMatrix")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val";
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_trait_method (|
                                                      "p3_matrix::Matrix",
                                                      Ty.apply
                                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val";
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ],
                                                      "height",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| trace |) |)
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [ M.read (| h |); Value.Integer IntegerKind.Usize 0 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::extensions::VmProofInputBuilder",
                                    "proof_input_per_air"
                                  |)
                                |);
                                Value.Tuple
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::arch::extensions::VmProofInputBuilder",
                                        "curr_air_id"
                                      |)
                                    |);
                                    M.read (| air_proof_input |)
                                  ]
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                let β :=
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::extensions::VmProofInputBuilder",
                    "curr_air_id"
                  |) in
                M.write (|
                  β,
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_add_air_proof_input :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "add_air_proof_input" (add_air_proof_input SC).
      Admitted.
      Global Typeclasses Opaque add_air_proof_input.
      
      (*
          fn build(self) -> ProofInput<SC> {
              ProofInput {
                  per_air: self.proof_input_per_air,
              }
          }
      *)
      Definition build (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::extensions::VmProofInputBuilder")
                  []
                  [ SC ],
                self
              |) in
            Value.mkStructRecord
              "openvm_stark_backend::prover::types::ProofInput"
              []
              [ SC ]
              [
                ("per_air",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "openvm_circuit::arch::extensions::VmProofInputBuilder",
                      "proof_input_per_air"
                    |)
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_build :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "build" (build SC).
      Admitted.
      Global Typeclasses Opaque build.
    End Impl_openvm_circuit_arch_extensions_VmProofInputBuilder_SC.
    
    (*
    pub fn generate_air_proof_input<SC: StarkGenericConfig, C: Chip<SC>>(
        chip: C,
        height: Option<usize>,
    ) -> AirProofInput<SC> {
        let mut proof_input = chip.generate_air_proof_input();
        if let Some(height) = height {
            let height = height.next_power_of_two();
            let main = proof_input.raw.common_main.as_mut().unwrap();
            assert!(
                height >= main.height(),
                "Overridden height must be greater than or equal to the used height"
            );
            main.pad_to_height(height, FieldAlgebra::ZERO);
        }
        proof_input
    }
    *)
    Definition generate_air_proof_input (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ SC; C ], [ chip; height ] =>
        ltac:(M.monadic
          (let chip := M.alloc (| C, chip |) in
          let height :=
            M.alloc (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
              height
            |) in
          M.read (|
            let~ proof_input :
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ] :=
              M.call_closure (|
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                M.get_trait_method (|
                  "openvm_stark_backend::chip::Chip",
                  C,
                  [],
                  [ SC ],
                  "generate_air_proof_input",
                  [],
                  []
                |),
                [ M.read (| chip |) ]
              |) in
            let~ _ : Ty.tuple [] :=
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := height in
                      let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let height := M.copy (| Ty.path "usize", γ0_0 |) in
                      M.read (|
                        let~ height : Ty.path "usize" :=
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.path "usize",
                              "next_power_of_two",
                              [],
                              []
                            |),
                            [ M.read (| height |) ]
                          |) in
                        let~ main :
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ] :=
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_matrix::dense::DenseMatrix")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ]
                                ],
                              "unwrap",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_matrix::dense::DenseMatrix")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val";
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_matrix::dense::DenseMatrix")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ],
                                  "as_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        proof_input,
                                        "openvm_stark_backend::prover::types::AirProofInput",
                                        "raw"
                                      |),
                                      "openvm_stark_backend::prover::types::AirProofRawInput",
                                      "common_main"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.ge,
                                            [
                                              M.read (| height |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_trait_method (|
                                                  "p3_matrix::Matrix",
                                                  Ty.apply
                                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val";
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ],
                                                  "height",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| main |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.call_closure (|
                                      Ty.path "never",
                                      M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::Arguments",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::Arguments",
                                            "new_const",
                                            [ Value.Integer IntegerKind.Usize 1 ],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                                      ],
                                                    Value.Array
                                                      [
                                                        mk_str (|
                                                          "Overridden height must be greater than or equal to the used height"
                                                        |)
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "pad_to_height",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| main |) |) |);
                              M.read (| height |);
                              M.read (|
                                get_constant (|
                                  "p3_field::field::FieldAlgebra::ZERO",
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                |)
                              |)
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |) in
            proof_input
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_generate_air_proof_input :
      M.IsFunction.C
        "openvm_circuit::arch::extensions::generate_air_proof_input"
        generate_air_proof_input.
    Admitted.
    Global Typeclasses Opaque generate_air_proof_input.
    
    (* Trait *)
    (* Empty module 'AnyEnum' *)
    
    Module Impl_openvm_circuit_arch_extensions_AnyEnum_for_Tuple_.
      Definition Self : Ty.t := Ty.tuple [].
      
      (*
          fn as_any_kind(&self) -> &dyn Any {
              self
          }
      *)
      Definition as_any_kind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.tuple [] ], self |) in
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.tuple [] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn as_any_kind_mut(&mut self) -> &mut dyn Any {
              self
          }
      *)
      Definition as_any_kind_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.tuple [] ], self |) in
            M.call_closure (|
              Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&mut") [] [ Ty.tuple [] ])
                        (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "openvm_circuit::arch::extensions::AnyEnum"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("as_any_kind", InstanceField.Method as_any_kind);
            ("as_any_kind_mut", InstanceField.Method as_any_kind_mut)
          ].
    End Impl_openvm_circuit_arch_extensions_AnyEnum_for_Tuple_.
    
    Module Impl_openvm_circuit_arch_extensions_AnyEnum_for_openvm_circuit_primitives_var_range_SharedVariableRangeCheckerChip.
      Definition Self : Ty.t :=
        Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip".
      
      (*
          fn as_any_kind(&self) -> &dyn Any {
              self
          }
      *)
      Definition as_any_kind (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn as_any_kind_mut(&mut self) -> &mut dyn Any {
              self
          }
      *)
      Definition as_any_kind_mut (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ])
                (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.path
                              "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                          ])
                        (Ty.apply (Ty.path "&mut") [] [ Ty.dyn [ ("core::any::Any::Trait", []) ] ]),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "openvm_circuit::arch::extensions::AnyEnum"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *)
          [
            ("as_any_kind", InstanceField.Method as_any_kind);
            ("as_any_kind_mut", InstanceField.Method as_any_kind_mut)
          ].
    End Impl_openvm_circuit_arch_extensions_AnyEnum_for_openvm_circuit_primitives_var_range_SharedVariableRangeCheckerChip.
    
    (*
    Enum Either
    {
      const_params := [];
      ty_params := [ "E"; "P" ];
      variants :=
        [
          {
            name := "Executor";
            item := StructTuple [ E ];
          };
          {
            name := "Periphery";
            item := StructTuple [ P ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_Either_Executor :
      M.IsDiscriminant "openvm_circuit::arch::extensions::Either::Executor" 0.
    Axiom IsDiscriminant_Either_Periphery :
      M.IsDiscriminant "openvm_circuit::arch::extensions::Either::Periphery" 1.
    
    Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_openvm_stark_backend_chip_ChipUsageGetter_E_where_openvm_stark_backend_chip_ChipUsageGetter_P_for_openvm_circuit_arch_extensions_Either_ref__E_ref__P.
      Definition Self (E P : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::extensions::Either")
          []
          [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ].
      
      (*
          fn air_name(&self) -> String {
              match self {
                  Either::Executor(chip) => chip.air_name(),
                  Either::Periphery(chip) => chip.air_name(),
              }
          }
      *)
      Definition air_name (E P : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::Either")
                      []
                      [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "alloc::string::String",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Executor",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ E ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        E,
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Periphery",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ P ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        P,
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn current_trace_height(&self) -> usize {
              match self {
                  Either::Executor(chip) => chip.current_trace_height(),
                  Either::Periphery(chip) => chip.current_trace_height(),
              }
          }
      *)
      Definition current_trace_height
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::Either")
                      []
                      [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Executor",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ E ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        E,
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Periphery",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ P ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        P,
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn trace_width(&self) -> usize {
              match self {
                  Either::Executor(chip) => chip.trace_width(),
                  Either::Periphery(chip) => chip.trace_width(),
              }
          }
      *)
      Definition trace_width
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::Either")
                      []
                      [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Executor",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ E ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        E,
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Periphery",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ P ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        P,
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn current_trace_cells(&self) -> usize {
              match self {
                  Either::Executor(chip) => chip.current_trace_cells(),
                  Either::Periphery(chip) => chip.current_trace_cells(),
              }
          }
      *)
      Definition current_trace_cells
          (E P : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self E P in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::extensions::Either")
                      []
                      [ Ty.apply (Ty.path "&") [] [ E ]; Ty.apply (Ty.path "&") [] [ P ] ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Executor",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ E ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        E,
                        [],
                        [],
                        "current_trace_cells",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::extensions::Either::Periphery",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ P ] ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        P,
                        [],
                        [],
                        "current_trace_cells",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.read (| M.deref (| M.read (| chip |) |) |) |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (E P : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::ChipUsageGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self E P)
          (* Instance *)
          [
            ("air_name", InstanceField.Method (air_name E P));
            ("current_trace_height", InstanceField.Method (current_trace_height E P));
            ("trace_width", InstanceField.Method (trace_width E P));
            ("current_trace_cells", InstanceField.Method (current_trace_cells E P))
          ].
    End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_openvm_stark_backend_chip_ChipUsageGetter_E_where_openvm_stark_backend_chip_ChipUsageGetter_P_for_openvm_circuit_arch_extensions_Either_ref__E_ref__P.
  End extensions.
End arch.
