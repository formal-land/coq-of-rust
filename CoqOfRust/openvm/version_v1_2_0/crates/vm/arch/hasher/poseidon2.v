(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module hasher.
    Module poseidon2.
      (*
      pub fn vm_poseidon2_hasher<F: PrimeField32>() -> Poseidon2Hasher<F> {
          assert_eq!(F::ORDER_U32, BabyBear::ORDER_U32, "F must be BabyBear");
          let config = vm_poseidon2_config::<BabyBear>();
          let (external_constants, internal_constants) =
              config.constants.to_external_internal_constants();
          Poseidon2Hasher {
              poseidon2: Poseidon2BabyBear::new(external_constants, internal_constants),
              _marker: PhantomData,
          }
      }
      *)
      Definition vm_poseidon2_hasher (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ F ], [] =>
          ltac:(M.monadic
            (M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                      ],
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          get_constant (|
                            "p3_field::field::PrimeField32::ORDER_U32",
                            Ty.path "u32"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          get_constant (|
                            "p3_field::field::PrimeField32::ORDER_U32",
                            Ty.path "u32"
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val :=
                          M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_0 |) in
                        let right_val :=
                          M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_1 |) in
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.eq,
                                          [
                                            M.read (| M.deref (| M.read (| left_val |) |) |);
                                            M.read (| M.deref (| M.read (| right_val |) |) |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      Value.StructTuple
                                        "core::panicking::AssertKind::Eq"
                                        []
                                        []
                                        [] in
                                    M.alloc (|
                                      Ty.path "never",
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [ Ty.path "u32"; Ty.path "u32" ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            []
                                            [ Ty.path "core::fmt::Arguments" ]
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_const",
                                                  [ Value.Integer IntegerKind.Usize 1 ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ]
                                                            ],
                                                          Value.Array
                                                            [ mk_str (| "F must be BabyBear" |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |)))
                  ]
                |) in
              let~ config :
                  Ty.apply
                    (Ty.path "openvm_poseidon2_air::config::Poseidon2Config")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                        []
                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_poseidon2_air::config::Poseidon2Config")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                        []
                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                    ],
                  M.get_function (|
                    "openvm_circuit::arch::config::vm_poseidon2_config",
                    [],
                    [
                      Ty.apply
                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                        []
                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                    ]
                  |),
                  []
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher")
                  []
                  [ F ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher")
                    []
                    [ F ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                          [ Value.Integer IntegerKind.Usize 16 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_poseidon2_air::config::Poseidon2Constants")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ],
                        "to_external_internal_constants",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            config,
                            "openvm_poseidon2_air::config::Poseidon2Config",
                            "constants"
                          |)
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let external_constants :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "p3_poseidon2::external::ExternalLayerConstants")
                              [ Value.Integer IntegerKind.Usize 16 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ],
                            γ0_0
                          |) in
                        let internal_constants :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            γ0_1
                          |) in
                        Value.mkStructRecord
                          "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher"
                          []
                          [ F ]
                          [
                            ("poseidon2",
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| external_constants |); M.read (| internal_constants |) ]
                              |));
                            ("_marker", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
                          ]))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_vm_poseidon2_hasher :
        M.IsFunction.C
          "openvm_circuit::arch::hasher::poseidon2::vm_poseidon2_hasher"
          vm_poseidon2_hasher.
      Admitted.
      Global Typeclasses Opaque vm_poseidon2_hasher.
      
      (* StructRecord
        {
          name := "Poseidon2Hasher";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("poseidon2",
                Ty.apply
                  (Ty.path "p3_poseidon2::Poseidon2")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_arch_hasher_poseidon2_Poseidon2Hasher_discriminant"
                      |));
                    M.unevaluated_const
                      (mk_str (| "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant" |))
                  ]
                  [
                    Ty.associated_in_trait
                      "p3_field::field::Field"
                      []
                      []
                      (Ty.apply
                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                        []
                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                      "Packing";
                    Ty.apply
                      (Ty.path "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_arch_hasher_poseidon2_Poseidon2Hasher_discriminant"
                          |))
                      ]
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_arch_hasher_poseidon2_Poseidon2Hasher_discriminant"
                          |))
                      ]
                      [
                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                        Ty.path "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                      ]
                  ]);
              ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
            ];
        } *)
      
      Module Impl_openvm_circuit_arch_hasher_Hasher_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_arch_hasher_poseidon2_Poseidon2Hasher_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher") [] [ F ].
        
        (*
            fn compress(&self, lhs: &[F; CHUNK], rhs: &[F; CHUNK]) -> [F; CHUNK] {
                let mut state = from_fn(|i| {
                    if i < CHUNK {
                        BabyBear::from_canonical_u32(lhs[i].as_canonical_u32())
                    } else {
                        BabyBear::from_canonical_u32(rhs[i - CHUNK].as_canonical_u32())
                    }
                });
                self.poseidon2.permute_mut(&mut state);
                array::from_fn(|i| F::from_canonical_u32(state[i].as_canonical_u32()))
            }
        *)
        Definition compress (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; lhs; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let lhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_arch_hasher_poseidon2_compress_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  lhs
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_arch_hasher_poseidon2_compress_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  rhs
                |) in
              M.read (|
                let~ state :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ Value.Integer IntegerKind.Usize 16 ],
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                      ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ],
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.match_operator (|
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.lt,
                                                        [
                                                          M.read (| i |);
                                                          M.read (|
                                                            get_constant (|
                                                              "openvm_circuit::system::memory::controller::CHUNK",
                                                              Ty.path "usize"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_field::field::FieldAlgebra",
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ],
                                                    [],
                                                    [],
                                                    "from_canonical_u32",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeField32",
                                                        F,
                                                        [],
                                                        [],
                                                        "as_canonical_u32",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_array_field (|
                                                            M.deref (| M.read (| lhs |) |),
                                                            M.read (| i |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ],
                                                  M.get_trait_method (|
                                                    "p3_field::field::FieldAlgebra",
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ],
                                                    [],
                                                    [],
                                                    "from_canonical_u32",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      M.get_trait_method (|
                                                        "p3_field::field::PrimeField32",
                                                        F,
                                                        [],
                                                        [],
                                                        "as_canonical_u32",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_array_field (|
                                                            M.deref (| M.read (| rhs |) |),
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (| i |);
                                                                M.read (|
                                                                  get_constant (|
                                                                    "openvm_circuit::system::memory::controller::CHUNK",
                                                                    Ty.path "usize"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_symmetric::permutation::Permutation",
                      Ty.apply
                        (Ty.path "p3_poseidon2::Poseidon2")
                        [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.U64 7 ]
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                          Ty.apply
                            (Ty.path
                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                          Ty.apply
                            (Ty.path
                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [
                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                              Ty.path "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                            ]
                        ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 16 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ]
                      ],
                      "permute_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher",
                          "poseidon2"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (| M.borrow (| Pointer.Kind.MutRef, state |) |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ Value.Integer IntegerKind.Usize 8 ],
                      [ F; Ty.function [ Ty.path "usize" ] F ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.call_closure (|
                                          F,
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            F,
                                            [],
                                            [],
                                            "from_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "u32",
                                              M.get_trait_method (|
                                                "p3_field::field::PrimeField32",
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ],
                                                [],
                                                [],
                                                "as_canonical_u32",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_array_field (|
                                                    state,
                                                    M.read (| i |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::hasher::Hasher"
            (* Trait polymorphic consts *)
            [ M.unevaluated_const (mk_str (| "openvm_circuit_arch_hasher_poseidon2_discriminant" |))
            ]
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("compress", InstanceField.Method (compress F)) ].
      End Impl_openvm_circuit_arch_hasher_Hasher_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_arch_hasher_poseidon2_Poseidon2Hasher_F.
    End poseidon2.
  End hasher.
End arch.
