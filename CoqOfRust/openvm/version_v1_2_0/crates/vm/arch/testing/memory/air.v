(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module testing.
    Module memory.
      Module air.
        (* StructRecord
          {
            name := "DummyMemoryInteractionCols";
            const_params := [ "BLOCK_SIZE" ];
            ty_params := [ "T" ];
            fields :=
              [
                ("address",
                  Ty.apply (Ty.path "openvm_circuit::system::memory::MemoryAddress") [] [ T; T ]);
                ("data", Ty.apply (Ty.path "array") [ BLOCK_SIZE ] [ T ]);
                ("timestamp", T);
                ("count", T)
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
          Definition Self (BLOCK_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
              [ BLOCK_SIZE ]
              [ T ].
          
          (* Clone *)
          Definition clone
              (BLOCK_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                          [ BLOCK_SIZE ]
                          [ T ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols"
                  [ BLOCK_SIZE ]
                  [ T ]
                  [
                    ("address",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [ T; T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [ T; T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                  "address"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("data",
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ BLOCK_SIZE ] [ T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply (Ty.path "array") [ BLOCK_SIZE ] [ T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                  "data"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                  "timestamp"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("count",
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                  "count"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self BLOCK_SIZE T)
              (* Instance *) [ ("clone", InstanceField.Method (clone BLOCK_SIZE T)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
        
        Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
          Definition Self (BLOCK_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
              [ BLOCK_SIZE ]
              [ T ].
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self BLOCK_SIZE T)
              (* Instance *) [].
        End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
          Definition Self (BLOCK_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
              [ BLOCK_SIZE ]
              [ T ].
          
          (* Debug *)
          Definition fmt
              (BLOCK_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE T in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                          [ BLOCK_SIZE ]
                          [ T ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field4_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "DummyMemoryInteractionCols" |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "address" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [ T; T ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                "address"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "array") [ BLOCK_SIZE ] [ T ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                "data"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ T ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                "timestamp"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "count" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "&") [] [ T ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                    "count"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self BLOCK_SIZE T)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt BLOCK_SIZE T)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
        
        Module Impl_core_borrow_Borrow_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T_for_slice_T.
          Definition Self (BLOCK_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow
              (BLOCK_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                  [ BLOCK_SIZE ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                          [ BLOCK_SIZE ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                            [ BLOCK_SIZE ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                      [ BLOCK_SIZE ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                        [ BLOCK_SIZE ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                [ BLOCK_SIZE ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                          [ BLOCK_SIZE ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                  [ BLOCK_SIZE ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                      [ BLOCK_SIZE ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::Borrow"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                  [ BLOCK_SIZE ]
                  [ T ]
              ]
              (Self BLOCK_SIZE T)
              (* Instance *) [ ("borrow", InstanceField.Method (borrow BLOCK_SIZE T)) ].
        End Impl_core_borrow_Borrow_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T_for_slice_T.
        
        Module Impl_core_borrow_BorrowMut_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T_for_slice_T.
          Definition Self (BLOCK_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow_mut
              (BLOCK_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                      [ BLOCK_SIZE ]
                                                      [ T ],
                                                    "width",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "usize"; Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                              [ BLOCK_SIZE ]
                              [ T ]
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                [ BLOCK_SIZE ]
                                [ T ]
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                          [ BLOCK_SIZE ]
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                            [ BLOCK_SIZE ]
                                            [ T ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ T ],
                                "align_to_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                    [ BLOCK_SIZE ]
                                    [ T ]
                                ]
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let prefix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_0
                                  |) in
                                let shorts :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                              [ BLOCK_SIZE ]
                                              [ T ]
                                          ]
                                      ],
                                    γ0_1
                                  |) in
                                let _suffix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_2
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ T ],
                                                                    "is_empty",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| prefix |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic_fmt",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::Arguments",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "str" ]
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              mk_str (|
                                                                                "Alignment should match"
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    Value.Tuple
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                      [ BLOCK_SIZE ]
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| shorts |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            Value.Integer IntegerKind.Usize 1
                                                          |)
                                                        |)
                                                      ]
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let left_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_0
                                                          |) in
                                                        let right_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_1
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ kind :
                                                                        Ty.path
                                                                          "core::panicking::AssertKind" :=
                                                                      Value.StructTuple
                                                                        "core::panicking::AssertKind::Eq"
                                                                        []
                                                                        []
                                                                        [] in
                                                                    M.alloc (|
                                                                      Ty.path "never",
                                                                      M.call_closure (|
                                                                        Ty.path "never",
                                                                        M.get_function (|
                                                                          "core::panicking::assert_failed",
                                                                          [],
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (| kind |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::None"
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::fmt::Arguments"
                                                                            ]
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic (Value.Tuple []))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                          [ BLOCK_SIZE ]
                                          [ T ]
                                      ],
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| shorts |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::BorrowMut"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                  [ BLOCK_SIZE ]
                  [ T ]
              ]
              (Self BLOCK_SIZE T)
              (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut BLOCK_SIZE T)) ].
        End Impl_core_borrow_BorrowMut_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T_for_slice_T.
        
        Module Impl_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
          Definition Self (BLOCK_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
              [ BLOCK_SIZE ]
              [ T ].
          
          (* AlignedBorrow *)
          Definition width
              (BLOCK_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE T in
            match ε, τ, α with
            | [], [], [] =>
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                        [ BLOCK_SIZE ]
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_width :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self BLOCK_SIZE T) "width" (width BLOCK_SIZE T).
          Admitted.
          Global Typeclasses Opaque width.
          (* derive_new::new *)
          Definition new
              (BLOCK_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE T in
            match ε, τ, α with
            | [], [], [ address; data; timestamp; count ] =>
              ltac:(M.monadic
                (let address :=
                  M.alloc (|
                    Ty.apply (Ty.path "openvm_circuit::system::memory::MemoryAddress") [] [ T; T ],
                    address
                  |) in
                let data := M.alloc (| Ty.apply (Ty.path "array") [ BLOCK_SIZE ] [ T ], data |) in
                let timestamp := M.alloc (| T, timestamp |) in
                let count := M.alloc (| T, count |) in
                Value.mkStructRecord
                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols"
                  [ BLOCK_SIZE ]
                  [ T ]
                  [
                    ("address", M.read (| address |));
                    ("data", M.read (| data |));
                    ("timestamp", M.read (| timestamp |));
                    ("count", M.read (| count |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new :
            forall (BLOCK_SIZE : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self BLOCK_SIZE T) "new" (new BLOCK_SIZE T).
          Admitted.
          Global Typeclasses Opaque new.
        End Impl_openvm_circuit_arch_testing_memory_air_DummyMemoryInteractionCols_BLOCK_SIZE_T.
        
        
        (* StructRecord
          {
            name := "MemoryDummyAir";
            const_params := [ "BLOCK_SIZE" ];
            ty_params := [];
            fields :=
              [ ("bus", Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus")
              ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          (* Clone *)
          Definition clone
              (BLOCK_SIZE : Value.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                          [ BLOCK_SIZE ]
                          []
                      ],
                    self
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                    [ BLOCK_SIZE ]
                    [],
                  Value.DeclaredButUndefined,
                  [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self BLOCK_SIZE)
              (* Instance *) [ ("clone", InstanceField.Method (clone BLOCK_SIZE)) ].
        End Impl_core_clone_Clone_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_core_marker_Copy_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t),
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self BLOCK_SIZE)
              (* Instance *) [].
        End Impl_core_marker_Copy_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          (* Debug *)
          Definition fmt
              (BLOCK_SIZE : Value.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                          [ BLOCK_SIZE ]
                          []
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field1_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryDummyAir" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                              ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::testing::memory::air::MemoryDummyAir",
                                    "bus"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self BLOCK_SIZE)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt BLOCK_SIZE)) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          (* derive_new::new *)
          Definition new
              (BLOCK_SIZE : Value.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE in
            match ε, τ, α with
            | [], [], [ bus ] =>
              ltac:(M.monadic
                (let bus :=
                  M.alloc (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                    bus
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::arch::testing::memory::air::MemoryDummyAir"
                  [ BLOCK_SIZE ]
                  []
                  [ ("bus", M.read (| bus |)) ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new :
            forall (BLOCK_SIZE : Value.t),
            M.IsAssociatedFunction.C (Self BLOCK_SIZE) "new" (new BLOCK_SIZE).
          Admitted.
          Global Typeclasses Opaque new.
        End Impl_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_F_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::rap::BaseAirWithPublicValues"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ F ]
              (Self BLOCK_SIZE F)
              (* Instance *) [].
        End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_F_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_F_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::rap::PartitionedBaseAir"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ F ]
              (Self BLOCK_SIZE F)
              (* Instance *) [].
        End Impl_openvm_stark_backend_rap_PartitionedBaseAir_F_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_p3_air_air_BaseAir_F_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          (*
              fn width(&self) -> usize {
                  size_of::<DummyMemoryInteractionCols<u8, BLOCK_SIZE>>()
              }
          *)
          Definition width
              (BLOCK_SIZE : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                          [ BLOCK_SIZE ]
                          []
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                        [ BLOCK_SIZE ]
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "p3_air::air::BaseAir"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ F ]
              (Self BLOCK_SIZE F)
              (* Instance *) [ ("width", InstanceField.Method (width BLOCK_SIZE F)) ].
        End Impl_p3_air_air_BaseAir_F_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
        
        Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
          Definition Self (BLOCK_SIZE : Value.t) (AB : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
              [ BLOCK_SIZE ]
              [].
          
          (*
              fn eval(&self, builder: &mut AB) {
                  let main = builder.main();
                  let local = main.row_slice(0);
                  let local: &DummyMemoryInteractionCols<AB::Var, BLOCK_SIZE> = ( *local).borrow();
          
                  self.bus
                      .send(local.address, local.data.to_vec(), local.timestamp)
                      .eval(builder, local.count);
              }
          *)
          Definition eval
              (BLOCK_SIZE : Value.t)
              (AB : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self BLOCK_SIZE AB in
            match ε, τ, α with
            | [], [], [ self; builder ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                          [ BLOCK_SIZE ]
                          []
                      ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                M.read (|
                  let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        AB,
                        [],
                        [],
                        "main",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                    |) in
                  let~ local :
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2" :=
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "row_slice",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                    |) in
                  let~ local :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                            [ BLOCK_SIZE ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ] :=
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                [ BLOCK_SIZE ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.get_trait_method (|
                            "core::borrow::Borrow",
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                [ BLOCK_SIZE ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                            "borrow",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "M")
                                      "{{synthetic}}'2",
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "eval",
                        [],
                        [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                            "send",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::testing::memory::air::MemoryDummyAir",
                                "bus"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                "address"
                              |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ BLOCK_SIZE ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| local |) |),
                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                        "data"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                "timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                            "count"
                          |)
                        |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (BLOCK_SIZE : Value.t) (AB : Ty.t),
            M.IsTraitInstance
              "p3_air::air::Air"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ AB ]
              (Self BLOCK_SIZE AB)
              (* Instance *) [ ("eval", InstanceField.Method (eval BLOCK_SIZE AB)) ].
        End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_arch_testing_memory_air_MemoryDummyAir_BLOCK_SIZE.
      End air.
    End memory.
  End testing.
End arch.
