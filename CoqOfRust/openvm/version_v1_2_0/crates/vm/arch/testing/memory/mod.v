(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module testing.
    Module memory.
      Definition value_WORD_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |))).
      
      Global Instance Instance_IsConstant_value_WORD_SIZE :
        M.IsFunction.C "openvm_circuit::arch::testing::memory::WORD_SIZE" value_WORD_SIZE.
      Admitted.
      Global Typeclasses Opaque value_WORD_SIZE.
      
      (* StructRecord
        {
          name := "MemoryTester";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("bus", Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus");
              ("controller",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("records",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_circuit::system::memory::controller::RecordId";
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_openvm_circuit_arch_testing_memory_MemoryTester_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester") [] [ F ].
        
        (*
            pub fn new(controller: Rc<RefCell<MemoryController<F>>>) -> Self {
                let bus = controller.borrow().memory_bus;
                Self {
                    bus,
                    controller,
                    records: Vec::new(),
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ controller ] =>
            ltac:(M.monadic
              (let controller :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::rc::Rc")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::cell::RefCell")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  controller
                |) in
              M.read (|
                let~ bus :
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryController")
                                []
                                [ F ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.apply
                              (Ty.path "core::cell::Ref")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ]
                              ],
                            [],
                            [],
                            "deref",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::cell::Ref")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::cell::Ref")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ]
                                      ],
                                    "borrow",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [ F ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::rc::Rc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [ F ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, controller |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "memory_bus"
                    |)
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester") [] [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::arch::testing::memory::MemoryTester"
                    []
                    [ F ]
                    [
                      ("bus", M.read (| bus |));
                      ("controller", M.read (| controller |));
                      ("records",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "openvm_circuit::system::memory::controller::RecordId";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn read_cell(&mut self, address_space: usize, pointer: usize) -> F {
                let [addr_space, pointer] = [address_space, pointer].map(F::from_canonical_usize);
                // core::BorrowMut confuses compiler
                let (record_id, value) =
                    RefCell::borrow_mut(&self.controller).read_cell(addr_space, pointer);
                self.records.push(record_id);
                value
            }
        *)
        Definition read_cell (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "usize", address_space |) in
              let pointer := M.alloc (| Ty.path "usize", pointer |) in
              M.match_operator (|
                F,
                M.alloc (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "usize" ],
                      "map",
                      [],
                      [ Ty.function [ Ty.path "usize" ] F; F ]
                    |),
                    [
                      Value.Array [ M.read (| address_space |); M.read (| pointer |) ];
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_usize",
                        [],
                        []
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                      let addr_space := M.copy (| F, γ0_0 |) in
                      let pointer := M.copy (| F, γ0_1 |) in
                      M.match_operator (|
                        F,
                        M.alloc (|
                          Ty.tuple
                            [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; F ],
                          M.call_closure (|
                            Ty.tuple
                              [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; F ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryController")
                                []
                                [ F ],
                              "read_cell",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::DerefMut",
                                      Ty.apply
                                        (Ty.path "core::cell::RefMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      [],
                                      [],
                                      "deref_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::cell::RefMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::cell::RefMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [ F ]
                                                ],
                                              "borrow_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::controller::MemoryController")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::rc::Rc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                                []
                                                                [ F ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_circuit::arch::testing::memory::MemoryTester",
                                                              "controller"
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.read (| addr_space |);
                              M.read (| pointer |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let record_id :=
                                M.copy (|
                                  Ty.path "openvm_circuit::system::memory::controller::RecordId",
                                  γ0_0
                                |) in
                              let value := M.copy (| F, γ0_1 |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "push",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::testing::memory::MemoryTester",
                                          "records"
                                        |)
                                      |);
                                      M.read (| record_id |)
                                    ]
                                  |) in
                                value
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_read_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "read_cell" (read_cell F).
        Admitted.
        Global Typeclasses Opaque read_cell.
        
        (*
            pub fn write_cell(&mut self, address_space: usize, pointer: usize, value: F) {
                let [addr_space, pointer] = [address_space, pointer].map(F::from_canonical_usize);
                let (record_id, _) =
                    RefCell::borrow_mut(&self.controller).write_cell(addr_space, pointer, value);
                self.records.push(record_id);
            }
        *)
        Definition write_cell
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; address_space; pointer; value ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "usize", address_space |) in
              let pointer := M.alloc (| Ty.path "usize", pointer |) in
              let value := M.alloc (| F, value |) in
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "usize" ],
                      "map",
                      [],
                      [ Ty.function [ Ty.path "usize" ] F; F ]
                    |),
                    [
                      Value.Array [ M.read (| address_space |); M.read (| pointer |) ];
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_usize",
                        [],
                        []
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                      let addr_space := M.copy (| F, γ0_0 |) in
                      let pointer := M.copy (| F, γ0_1 |) in
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.tuple
                            [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; F ],
                          M.call_closure (|
                            Ty.tuple
                              [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; F ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryController")
                                []
                                [ F ],
                              "write_cell",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::DerefMut",
                                      Ty.apply
                                        (Ty.path "core::cell::RefMut")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      [],
                                      [],
                                      "deref_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::cell::RefMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::cell::RefMut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [ F ]
                                                ],
                                              "borrow_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::controller::MemoryController")
                                                              []
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::rc::Rc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                                []
                                                                [ F ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_circuit::arch::testing::memory::MemoryTester",
                                                              "controller"
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.read (| addr_space |);
                              M.read (| pointer |);
                              M.read (| value |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let record_id :=
                                M.copy (|
                                  Ty.path "openvm_circuit::system::memory::controller::RecordId",
                                  γ0_0
                                |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "push",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::testing::memory::MemoryTester",
                                          "records"
                                        |)
                                      |);
                                      M.read (| record_id |)
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_write_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "write_cell" (write_cell F).
        Admitted.
        Global Typeclasses Opaque write_cell.
        
        (*
            pub fn read<const N: usize>(&mut self, address_space: usize, pointer: usize) -> [F; N] {
                from_fn(|i| self.read_cell(address_space, pointer + i))
            }
        *)
        Definition read (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "usize", address_space |) in
              let pointer := M.alloc (| Ty.path "usize", pointer |) in
              M.call_closure (|
                Ty.apply (Ty.path "array") [ N ] [ F ],
                M.get_function (|
                  "core::array::from_fn",
                  [ N ],
                  [ F; Ty.function [ Ty.path "usize" ] F ]
                |),
                [
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              F,
                              M.alloc (| Ty.path "usize", α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let i := M.copy (| Ty.path "usize", γ |) in
                                    M.call_closure (|
                                      F,
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::testing::memory::MemoryTester")
                                          []
                                          [ F ],
                                        "read_cell",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| self |) |)
                                        |);
                                        M.read (| address_space |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [ M.read (| pointer |); M.read (| i |) ]
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_read :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "read" (read F).
        Admitted.
        Global Typeclasses Opaque read.
        
        (*
            pub fn write<const N: usize>(
                &mut self,
                address_space: usize,
                mut pointer: usize,
                cells: [F; N],
            ) {
                for cell in cells {
                    self.write_cell(address_space, pointer, cell);
                    pointer += 1;
                }
            }
        *)
        Definition write (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer; cells ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "usize", address_space |) in
              let pointer := M.alloc (| Ty.path "usize", pointer |) in
              let cells := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ F ], cells |) in
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
                        M.call_closure (|
                          Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "array") [ N ] [ F ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| cells |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply (Ty.path "core::array::iter::IntoIter") [ N ] [ F ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::array::iter::IntoIter")
                                              [ N ]
                                              [ F ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let cell := M.copy (| F, γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::arch::testing::memory::MemoryTester")
                                                      []
                                                      [ F ],
                                                    "write_cell",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| self |) |)
                                                    |);
                                                    M.read (| address_space |);
                                                    M.read (| pointer |);
                                                    M.read (| cell |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] :=
                                                let β := pointer in
                                                M.write (|
                                                  β,
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| β |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_write :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "write" (write F).
        Admitted.
        Global Typeclasses Opaque write.
      End Impl_openvm_circuit_arch_testing_memory_MemoryTester_F.
      
      Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_arch_testing_memory_MemoryTester_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
        Definition Self (SC : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
            []
            [
              Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Domain")
                "Val"
            ].
        
        (*
            fn air(&self) -> AirRef<SC> {
                Arc::new(MemoryDummyAir::<WORD_SIZE>::new(self.bus))
            }
        *)
        Definition air (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [];
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::memory::air::MemoryDummyAir")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::memory::MemoryTester",
                                  "bus"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_air_proof_input(self) -> AirProofInput<SC> {
                let offline_memory = self.controller.borrow().offline_memory();
                let offline_memory = offline_memory.lock().unwrap();
        
                let height = self.records.len().next_power_of_two();
                let width = self.trace_width();
                let mut values = Val::<SC>::zero_vec(2 * height * width);
                // This zip only goes through records. The padding rows between records.len()..height
                // are filled with zeros - in particular count = 0 so nothing is added to bus.
                for (row, id) in values.chunks_mut(2 * width).zip(self.records) {
                    let (first, second) = row.split_at_mut(width);
                    let row: &mut DummyMemoryInteractionCols<Val<SC>, WORD_SIZE> = first.borrow_mut();
                    let record = offline_memory.record_by_id(id);
                    row.address = MemoryAddress {
                        address_space: record.address_space,
                        pointer: record.pointer,
                    };
                    row.data
                        .copy_from_slice(record.prev_data_slice().unwrap_or(record.data_slice()));
                    row.timestamp = Val::<SC>::from_canonical_u32(record.prev_timestamp);
                    row.count = -Val::<SC>::ONE;
        
                    let row: &mut DummyMemoryInteractionCols<Val<SC>, WORD_SIZE> = second.borrow_mut();
                    row.address = MemoryAddress {
                        address_space: record.address_space,
                        pointer: record.pointer,
                    };
                    row.data.copy_from_slice(record.data_slice());
                    row.timestamp = Val::<SC>::from_canonical_u32(record.timestamp);
                    row.count = Val::<SC>::ONE;
                }
                AirProofInput::simple_no_pis(RowMajorMatrix::new(values, width))
            }
        *)
        Definition generate_air_proof_input
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  self
                |) in
              M.read (|
                let~ offline_memory :
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                      "offline_memory",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "core::cell::Ref")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ]
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::cell::Ref")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::cell::Ref")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ],
                                      "borrow",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::rc::Rc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "openvm_circuit::arch::testing::memory::MemoryTester",
                                                  "controller"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |) in
                let~ offline_memory :
                    Ty.apply
                      (Ty.path "std::sync::mutex::MutexGuard")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::sync::mutex::MutexGuard")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::MutexGuard")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ]
                            ];
                          Ty.apply
                            (Ty.path "std::sync::poison::PoisonError")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ]
                                ]
                            ]
                        ],
                      "unwrap",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "std::sync::poison::PoisonError")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ]
                            ],
                          "lock",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline::OfflineMemory")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, offline_memory |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ height : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::arch::testing::memory::MemoryTester",
                              "records"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ width : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                  |) in
                let~ values :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val",
                      [],
                      [],
                      "zero_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [ Value.Integer IntegerKind.Usize 2; M.read (| height |) ]
                          |);
                          M.read (| width |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::ChunksMut")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.path "openvm_circuit::system::memory::controller::RecordId";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::ChunksMut")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::RecordId";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::ChunksMut")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId";
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::ChunksMut")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::ChunksMut")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    [],
                                    [],
                                    "zip",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::ChunksMut")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ],
                                        "chunks_mut",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::deref::DerefMut",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "deref_mut",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.MutRef, values |) ]
                                            |)
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.mul,
                                          [ Value.Integer IntegerKind.Usize 2; M.read (| width |) ]
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_circuit::arch::testing::memory::MemoryTester",
                                        "records"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::ChunksMut")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          []
                                          [
                                            Ty.path
                                              "openvm_circuit::system::memory::controller::RecordId";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ];
                                                    Ty.path
                                                      "openvm_circuit::system::memory::controller::RecordId"
                                                  ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ];
                                                      Ty.path
                                                        "openvm_circuit::system::memory::controller::RecordId"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::ChunksMut")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::system::memory::controller::RecordId";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let row :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ],
                                                    γ1_0
                                                  |) in
                                                let id :=
                                                  M.copy (|
                                                    Ty.path
                                                      "openvm_circuit::system::memory::controller::RecordId",
                                                    γ1_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val"
                                                              ]
                                                          ]
                                                      ],
                                                    M.call_closure (|
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ]
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ],
                                                        "split_at_mut",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (| M.read (| row |) |)
                                                        |);
                                                        M.read (| width |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let first :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ],
                                                            γ0_0
                                                          |) in
                                                        let second :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ],
                                                            γ0_1
                                                          |) in
                                                        M.read (|
                                                          let~ row :
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ] :=
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::borrow::BorrowMut",
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val"
                                                                      ],
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                    "borrow_mut",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| first |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          let~ record :
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ] :=
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ],
                                                                "record_by_id",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val"
                                                                            ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "std::sync::mutex::MutexGuard")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "deref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          offline_memory
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.read (| id |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| row |) |),
                                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                "address"
                                                              |),
                                                              Value.mkStructRecord
                                                                "openvm_circuit::system::memory::MemoryAddress"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val";
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                                [
                                                                  ("address_space",
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| record |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::offline::MemoryRecord",
                                                                        "address_space"
                                                                      |)
                                                                    |));
                                                                  ("pointer",
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| record |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::offline::MemoryRecord",
                                                                        "pointer"
                                                                      |)
                                                                    |))
                                                                ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ],
                                                                "copy_from_slice",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                  M.pointer_coercion
                                                                    M.PointerCoercion.Unsize
                                                                    (Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          ]
                                                                      ])
                                                                    (Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          ]
                                                                      ]),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| row |)
                                                                        |),
                                                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                        "data"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val"
                                                                            ]
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                      []
                                                                                      []
                                                                                      (Ty.associated_in_trait
                                                                                        "p3_commit::pcs::Pcs"
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Challenge";
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Challenger"
                                                                                        ]
                                                                                        (Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Pcs")
                                                                                        "Domain")
                                                                                      "Val"
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        "unwrap_or",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                        []
                                                                                        []
                                                                                        (Ty.associated_in_trait
                                                                                          "p3_commit::pcs::Pcs"
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Pcs")
                                                                                          "Domain")
                                                                                        "Val"
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::memory::offline::MemoryRecord")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val"
                                                                              ],
                                                                            "prev_data_slice",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (| record |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                        []
                                                                                        []
                                                                                        (Ty.associated_in_trait
                                                                                          "p3_commit::pcs::Pcs"
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Pcs")
                                                                                          "Domain")
                                                                                        "Val"
                                                                                    ]
                                                                                ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::system::memory::offline::MemoryRecord")
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                      []
                                                                                      []
                                                                                      (Ty.associated_in_trait
                                                                                        "p3_commit::pcs::Pcs"
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Challenge";
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Challenger"
                                                                                        ]
                                                                                        (Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Pcs")
                                                                                        "Domain")
                                                                                      "Val"
                                                                                  ],
                                                                                "data_slice",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      record
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| row |) |),
                                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                "timestamp"
                                                              |),
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val",
                                                                M.get_trait_method (|
                                                                  "p3_field::field::FieldAlgebra",
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  [],
                                                                  [],
                                                                  "from_canonical_u32",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| record |)
                                                                      |),
                                                                      "openvm_circuit::system::memory::offline::MemoryRecord",
                                                                      "prev_timestamp"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| row |) |),
                                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                "count"
                                                              |),
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Neg",
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  [],
                                                                  [],
                                                                  "neg",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "p3_field::field::FieldAlgebra::ONE",
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let~ row :
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ] :=
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "core::borrow::BorrowMut",
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val"
                                                                      ],
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                    "borrow_mut",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| second |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| row |) |),
                                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                "address"
                                                              |),
                                                              Value.mkStructRecord
                                                                "openvm_circuit::system::memory::MemoryAddress"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val";
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                                [
                                                                  ("address_space",
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| record |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::offline::MemoryRecord",
                                                                        "address_space"
                                                                      |)
                                                                    |));
                                                                  ("pointer",
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| record |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::offline::MemoryRecord",
                                                                        "pointer"
                                                                      |)
                                                                    |))
                                                                ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ],
                                                                "copy_from_slice",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                  M.pointer_coercion
                                                                    M.PointerCoercion.Unsize
                                                                    (Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          ]
                                                                      ])
                                                                    (Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          ]
                                                                      ]),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| row |)
                                                                        |),
                                                                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                        "data"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val"
                                                                            ]
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_circuit::system::memory::offline::MemoryRecord")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          ],
                                                                        "data_slice",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| record |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| row |) |),
                                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                "timestamp"
                                                              |),
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val",
                                                                M.get_trait_method (|
                                                                  "p3_field::field::FieldAlgebra",
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  [],
                                                                  [],
                                                                  "from_canonical_u32",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| record |)
                                                                      |),
                                                                      "openvm_circuit::system::memory::offline::MemoryRecord",
                                                                      "timestamp"
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| row |) |),
                                                                "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols",
                                                                "count"
                                                              |),
                                                              M.read (|
                                                                get_constant (|
                                                                  "p3_field::field::FieldAlgebra::ONE",
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                |)
                                                              |)
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      "simple_no_pis",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| values |); M.read (| width |) ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SC : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::Chip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ SC ]
            (Self SC)
            (* Instance *)
            [
              ("air", InstanceField.Method (air SC));
              ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input SC))
            ].
      End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_arch_testing_memory_MemoryTester_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
      
      Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_testing_memory_MemoryTester_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester") [] [ F ].
        
        (*
            fn air_name(&self) -> String {
                "MemoryDummyAir".to_string()
            }
        *)
        Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_trait_method (|
                  "alloc::string::ToString",
                  Ty.path "str",
                  [],
                  [],
                  "to_string",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryDummyAir" |) |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn current_trace_height(&self) -> usize {
                self.records.len()
            }
        *)
        Definition current_trace_height
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.path "alloc::alloc::Global"
                    ],
                  "len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::testing::memory::MemoryTester",
                      "records"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn trace_width(&self) -> usize {
                size_of::<DummyMemoryInteractionCols<u8, WORD_SIZE>>()
            }
        *)
        Definition trace_width
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_function (|
                  "core::mem::size_of",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::arch::testing::memory::air::DummyMemoryInteractionCols")
                      [ Value.Integer IntegerKind.Usize 1 ]
                      [ Ty.path "u8" ]
                  ]
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::ChipUsageGetter"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [
              ("air_name", InstanceField.Method (air_name F));
              ("current_trace_height", InstanceField.Method (current_trace_height F));
              ("trace_width", InstanceField.Method (trace_width F))
            ].
      End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_testing_memory_MemoryTester_F.
      
      (*
      pub fn gen_address_space<R>(rng: &mut R) -> usize
      where
          R: Rng + ?Sized,
      {
          *[1, 2].choose(rng).unwrap()
      }
      *)
      Definition gen_address_space (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ R ], [ rng ] =>
          ltac:(M.monadic
            (let rng := M.alloc (| Ty.apply (Ty.path "&mut") [] [ R ], rng |) in
            M.read (|
              M.deref (|
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ],
                      M.get_trait_method (|
                        "rand::seq::SliceRandom",
                        Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                        [],
                        [],
                        "choose",
                        [],
                        [ R ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.path "usize" ],
                                Value.Array
                                  [
                                    Value.Integer IntegerKind.Usize 1;
                                    Value.Integer IntegerKind.Usize 2
                                  ]
                              |)
                            |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |)
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_gen_address_space :
        M.IsFunction.C "openvm_circuit::arch::testing::memory::gen_address_space" gen_address_space.
      Admitted.
      Global Typeclasses Opaque gen_address_space.
      
      (*
      pub fn gen_pointer<R>(rng: &mut R, len: usize) -> usize
      where
          R: Rng + ?Sized,
      {
          const MAX_MEMORY: usize = 1 << 29;
          rng.gen_range(0..MAX_MEMORY - len) / len * len
      }
      *)
      Definition gen_pointer (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ R ], [ rng; len ] =>
          ltac:(M.monadic
            (let rng := M.alloc (| Ty.apply (Ty.path "&mut") [] [ R ], rng |) in
            let len := M.alloc (| Ty.path "usize", len |) in
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.mul,
              [
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.div,
                  [
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "rand::rng::Rng",
                        R,
                        [],
                        [],
                        "gen_range",
                        [],
                        [
                          Ty.path "usize";
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ]
                        ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| rng |) |) |);
                        Value.mkStructRecord
                          "core::ops::range::Range"
                          []
                          [ Ty.path "usize" ]
                          [
                            ("start", Value.Integer IntegerKind.Usize 0);
                            ("end_",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [
                                  M.read (|
                                    get_constant (|
                                      "openvm_circuit::arch::testing::memory::gen_pointer::MAX_MEMORY",
                                      Ty.path "usize"
                                    |)
                                  |);
                                  M.read (| len |)
                                ]
                              |))
                          ]
                      ]
                    |);
                    M.read (| len |)
                  ]
                |);
                M.read (| len |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_gen_pointer :
        M.IsFunction.C "openvm_circuit::arch::testing::memory::gen_pointer" gen_pointer.
      Admitted.
      Global Typeclasses Opaque gen_pointer.
      
      Module gen_pointer.
        Definition value_MAX_MEMORY (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic
            (M.alloc (|
              Ty.path "usize",
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.shl,
                [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.I32 29 ]
              |)
            |))).
        
        Global Instance Instance_IsConstant_value_MAX_MEMORY :
          M.IsFunction.C
            "openvm_circuit::arch::testing::memory::gen_pointer::MAX_MEMORY"
            value_MAX_MEMORY.
        Admitted.
        Global Typeclasses Opaque value_MAX_MEMORY.
      End gen_pointer.
    End memory.
  End testing.
End arch.
