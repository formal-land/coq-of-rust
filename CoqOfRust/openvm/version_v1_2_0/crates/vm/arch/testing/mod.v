(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module testing.
    Definition value_EXECUTION_BUS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 0 |))).
    
    Global Instance Instance_IsConstant_value_EXECUTION_BUS :
      M.IsFunction.C "openvm_circuit::arch::testing::EXECUTION_BUS" value_EXECUTION_BUS.
    Admitted.
    Global Typeclasses Opaque value_EXECUTION_BUS.
    
    Definition value_MEMORY_BUS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 1 |))).
    
    Global Instance Instance_IsConstant_value_MEMORY_BUS :
      M.IsFunction.C "openvm_circuit::arch::testing::MEMORY_BUS" value_MEMORY_BUS.
    Admitted.
    Global Typeclasses Opaque value_MEMORY_BUS.
    
    Definition value_POSEIDON2_DIRECT_BUS
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 6 |))).
    
    Global Instance Instance_IsConstant_value_POSEIDON2_DIRECT_BUS :
      M.IsFunction.C
        "openvm_circuit::arch::testing::POSEIDON2_DIRECT_BUS"
        value_POSEIDON2_DIRECT_BUS.
    Admitted.
    Global Typeclasses Opaque value_POSEIDON2_DIRECT_BUS.
    
    Definition value_READ_INSTRUCTION_BUS
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 8 |))).
    
    Global Instance Instance_IsConstant_value_READ_INSTRUCTION_BUS :
      M.IsFunction.C
        "openvm_circuit::arch::testing::READ_INSTRUCTION_BUS"
        value_READ_INSTRUCTION_BUS.
    Admitted.
    Global Typeclasses Opaque value_READ_INSTRUCTION_BUS.
    
    Definition value_BITWISE_OP_LOOKUP_BUS
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 9 |))).
    
    Global Instance Instance_IsConstant_value_BITWISE_OP_LOOKUP_BUS :
      M.IsFunction.C
        "openvm_circuit::arch::testing::BITWISE_OP_LOOKUP_BUS"
        value_BITWISE_OP_LOOKUP_BUS.
    Admitted.
    Global Typeclasses Opaque value_BITWISE_OP_LOOKUP_BUS.
    
    Definition value_BYTE_XOR_BUS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 10 |))).
    
    Global Instance Instance_IsConstant_value_BYTE_XOR_BUS :
      M.IsFunction.C "openvm_circuit::arch::testing::BYTE_XOR_BUS" value_BYTE_XOR_BUS.
    Admitted.
    Global Typeclasses Opaque value_BYTE_XOR_BUS.
    
    Definition value_RANGE_TUPLE_CHECKER_BUS
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 11 |))).
    
    Global Instance Instance_IsConstant_value_RANGE_TUPLE_CHECKER_BUS :
      M.IsFunction.C
        "openvm_circuit::arch::testing::RANGE_TUPLE_CHECKER_BUS"
        value_RANGE_TUPLE_CHECKER_BUS.
    Admitted.
    Global Typeclasses Opaque value_RANGE_TUPLE_CHECKER_BUS.
    
    Definition value_MEMORY_MERKLE_BUS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 12 |))).
    
    Global Instance Instance_IsConstant_value_MEMORY_MERKLE_BUS :
      M.IsFunction.C "openvm_circuit::arch::testing::MEMORY_MERKLE_BUS" value_MEMORY_MERKLE_BUS.
    Admitted.
    Global Typeclasses Opaque value_MEMORY_MERKLE_BUS.
    
    Definition value_RANGE_CHECKER_BUS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "u16", Value.Integer IntegerKind.U16 4 |))).
    
    Global Instance Instance_IsConstant_value_RANGE_CHECKER_BUS :
      M.IsFunction.C "openvm_circuit::arch::testing::RANGE_CHECKER_BUS" value_RANGE_CHECKER_BUS.
    Admitted.
    Global Typeclasses Opaque value_RANGE_CHECKER_BUS.
    
    (* StructRecord
      {
        name := "VmChipTestBuilder";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("memory",
              Ty.apply (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester") [] [ F ]);
            ("execution",
              Ty.apply
                (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                []
                [ F ]);
            ("program",
              Ty.apply (Ty.path "openvm_circuit::arch::testing::program::ProgramTester") [] [ F ]);
            ("rng", Ty.path "rand::rngs::std::StdRng");
            ("default_register", Ty.path "usize");
            ("default_pointer", Ty.path "usize")
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_testing_VmChipTestBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ].
      
      (*
          pub fn new(
              memory_controller: Rc<RefCell<MemoryController<F>>>,
              execution_bus: ExecutionBus,
              program_bus: ProgramBus,
              rng: StdRng,
          ) -> Self {
              setup_tracing_with_log_level(Level::WARN);
              Self {
                  memory: MemoryTester::new(memory_controller),
                  execution: ExecutionTester::new(execution_bus),
                  program: ProgramTester::new(program_bus),
                  rng,
                  default_register: 0,
                  default_pointer: 0,
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ memory_controller; execution_bus; program_bus; rng ] =>
          ltac:(M.monadic
            (let memory_controller :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                memory_controller
              |) in
            let execution_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                execution_bus
              |) in
            let program_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                program_bus
              |) in
            let rng := M.alloc (| Ty.path "rand::rngs::std::StdRng", rng |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_function (|
                    "openvm_stark_sdk::config::setup_tracing_with_log_level",
                    [],
                    []
                  |),
                  [
                    M.read (|
                      get_associated_constant (|
                        Ty.path "tracing_core::metadata::Level",
                        "WARN",
                        Ty.path "tracing_core::metadata::Level"
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                Value.mkStructRecord
                  "openvm_circuit::arch::testing::VmChipTestBuilder"
                  []
                  [ F ]
                  [
                    ("memory",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                          []
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                            []
                            [ F ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| memory_controller |) ]
                      |));
                    ("execution",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                          []
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                            []
                            [ F ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| execution_bus |) ]
                      |));
                    ("program",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                          []
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                            []
                            [ F ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| program_bus |) ]
                      |));
                    ("rng", M.read (| rng |));
                    ("default_register", Value.Integer IntegerKind.Usize 0);
                    ("default_pointer", Value.Integer IntegerKind.Usize 0)
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn execute<E: InstructionExecutor<F>>(
              &mut self,
              executor: &mut E,
              instruction: &Instruction<F>,
          ) {
              let initial_pc = self.next_elem_size_u32();
              self.execute_with_pc(executor, instruction, initial_pc);
          }
      *)
      Definition execute (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ E ], [ self; executor; instruction ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let executor := M.alloc (| Ty.apply (Ty.path "&mut") [] [ E ], executor |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            M.read (|
              let~ initial_pc : Ty.path "u32" :=
                M.call_closure (|
                  Ty.path "u32",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "next_elem_size_u32",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "execute_with_pc",
                    [],
                    [ E ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| executor |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                    M.read (| initial_pc |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "execute" (execute F).
      Admitted.
      Global Typeclasses Opaque execute.
      
      (*
          pub fn execute_with_pc<E: InstructionExecutor<F>>(
              &mut self,
              executor: &mut E,
              instruction: &Instruction<F>,
              initial_pc: u32,
          ) {
              let initial_state = ExecutionState {
                  pc: initial_pc,
                  timestamp: self.memory.controller.borrow().timestamp(),
              };
              tracing::debug!(?initial_state.timestamp);
      
              let final_state = executor
                  .execute(
                      &mut *self.memory.controller.borrow_mut(),
                      instruction,
                      initial_state,
                  )
                  .expect("Expected the execution not to fail");
      
              self.program.execute(instruction, &initial_state);
              self.execution.execute(initial_state, final_state);
          }
      *)
      Definition execute_with_pc
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ E ], [ self; executor; instruction; initial_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let executor := M.alloc (| Ty.apply (Ty.path "&mut") [] [ E ], executor |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let initial_pc := M.alloc (| Ty.path "u32", initial_pc |) in
            M.read (|
              let~ initial_state :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                    []
                    [ Ty.path "u32" ] :=
                Value.mkStructRecord
                  "openvm_circuit::arch::execution::ExecutionState"
                  []
                  [ Ty.path "u32" ]
                  [
                    ("pc", M.read (| initial_pc |));
                    ("timestamp",
                      M.call_closure (|
                        Ty.path "u32",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ],
                          "timestamp",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "core::cell::Ref")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::cell::Ref")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::cell::Ref")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::MemoryController")
                                              []
                                              [ F ]
                                          ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::cell::RefCell")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ],
                                          "borrow",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [ F ]
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::rc::Rc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::controller::MemoryController")
                                                            []
                                                            [ F ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [],
                                                  "deref",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                                                        "memory"
                                                      |),
                                                      "openvm_circuit::arch::testing::memory::MemoryTester",
                                                      "controller"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |))
                  ] in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  let~ enabled : Ty.path "bool" :=
                    LogicalOp.and (|
                      LogicalOp.and (|
                        M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "tracing_core::metadata::Level",
                            [],
                            [ Ty.path "tracing_core::metadata::LevelFilter" ],
                            "le",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_associated_constant (|
                                Ty.path "tracing_core::metadata::Level",
                                "DEBUG",
                                Ty.path "tracing_core::metadata::Level"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              get_constant (|
                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                Ty.path "tracing_core::metadata::LevelFilter"
                              |)
                            |)
                          ]
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "bool",
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "tracing_core::metadata::Level",
                              [],
                              [ Ty.path "tracing_core::metadata::LevelFilter" ],
                              "le",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                get_associated_constant (|
                                  Ty.path "tracing_core::metadata::Level",
                                  "DEBUG",
                                  Ty.path "tracing_core::metadata::Level"
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.path "tracing_core::metadata::LevelFilter",
                                  M.call_closure (|
                                    Ty.path "tracing_core::metadata::LevelFilter",
                                    M.get_associated_function (|
                                      Ty.path "tracing_core::metadata::LevelFilter",
                                      "current",
                                      [],
                                      []
                                    |),
                                    []
                                  |)
                                |)
                              |)
                            ]
                          |)))
                      |),
                      ltac:(M.monadic
                        (M.read (|
                          let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                            M.call_closure (|
                              Ty.path "tracing_core::subscriber::Interest",
                              M.get_associated_function (|
                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                "interest",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::arch::testing::execute_with_pc::__CALLSITE",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "tracing_core::callsite::DefaultCallsite" ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |) in
                          M.alloc (|
                            Ty.path "bool",
                            LogicalOp.and (|
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::subscriber::Interest",
                                    "is_never",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                |)
                              |),
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "bool",
                                  M.get_function (|
                                    "tracing::__macro_support::__is_enabled",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "tracing_core::metadata::Metadata" ],
                                          M.get_trait_method (|
                                            "tracing_core::callsite::Callsite",
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            [],
                                            [],
                                            "metadata",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.read (|
                                                  get_constant (|
                                                    "openvm_circuit::arch::testing::execute_with_pc::__CALLSITE",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite"
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.read (| interest |)
                                  ]
                                |)))
                            |)
                          |)
                        |)))
                    |) in
                  M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use enabled in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    Ty.function
                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                      (Ty.tuple []),
                                    [],
                                    [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                    "call",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.function
                                          [ Ty.path "tracing_core::field::ValueSet" ]
                                          (Ty.tuple []),
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (|
                                                      Ty.path "tracing_core::field::ValueSet",
                                                      α0
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let value_set :=
                                                            M.copy (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            let~ meta :
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ] :=
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_circuit::arch::testing::execute_with_pc::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |) in
                                                            let~ _ : Ty.tuple [] :=
                                                              M.call_closure (|
                                                                Ty.tuple [],
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::event::Event",
                                                                  "dispatch",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| meta |) |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        value_set
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      |)
                                    |);
                                    Value.Tuple
                                      [
                                        M.read (|
                                          let~ iter : Ty.path "tracing_core::field::Iter" :=
                                            M.call_closure (|
                                              Ty.path "tracing_core::field::Iter",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::field::FieldSet" ],
                                                      M.get_associated_function (|
                                                        Ty.path "tracing_core::metadata::Metadata",
                                                        "fields",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_circuit::arch::testing::execute_with_pc::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |) in
                                          M.alloc (|
                                            Ty.path "tracing_core::field::ValueSet",
                                            M.call_closure (|
                                              Ty.path "tracing_core::field::ValueSet",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::field::FieldSet",
                                                "value_set",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "tracing_core::field::Field"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("tracing_core::field::Value::Trait",
                                                                        [])
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::field::FieldSet" ],
                                                      M.get_associated_function (|
                                                        Ty.path "tracing_core::metadata::Metadata",
                                                        "fields",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_circuit::arch::testing::execute_with_pc::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::field::Field"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("tracing_core::field::Value::Trait",
                                                                              [])
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            Value.Tuple
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.path
                                                                      "tracing_core::field::Field",
                                                                    M.call_closure (|
                                                                      Ty.path
                                                                        "tracing_core::field::Field",
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::field::Field"
                                                                          ],
                                                                        "expect",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.path
                                                                              "tracing_core::field::Iter",
                                                                            [],
                                                                            [],
                                                                            "next",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              M.deref (|
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  iter
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            mk_str (|
                                                                              "FieldSet corrupted (this is a bug)"
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.dyn
                                                                          [
                                                                            ("tracing_core::field::Value::Trait",
                                                                              [])
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  [
                                                                    M.read (|
                                                                      M.use
                                                                        (M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("tracing_core::field::Value::Trait",
                                                                                      [])
                                                                                  ]
                                                                              ],
                                                                            M.pointer_coercion
                                                                              M.PointerCoercion.Unsize
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "tracing_core::field::DebugValue")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ]
                                                                                    ]
                                                                                ])
                                                                              (Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "tracing_core::field::DebugValue")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "u32"
                                                                                            ]
                                                                                        ],
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "tracing_core::field::DebugValue")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u32"
                                                                                              ]
                                                                                          ],
                                                                                        M.get_function (|
                                                                                          "tracing_core::field::debug",
                                                                                          [],
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u32"
                                                                                              ]
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              initial_state,
                                                                                              "openvm_circuit::arch::execution::ExecutionState",
                                                                                              "timestamp"
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |))
                                                                    |)
                                                                  ]
                                                              ]
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |)
                  |)
                |) in
              let~ final_state :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                    []
                    [ Ty.path "u32" ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                    []
                    [ Ty.path "u32" ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    "expect",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                            []
                            [ Ty.path "u32" ];
                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                        ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::execution::InstructionExecutor",
                        E,
                        [],
                        [ F ],
                        "execute",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| executor |) |) |);
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "core::cell::RefMut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ]
                                      ],
                                    [],
                                    [],
                                    "deref_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::cell::RefMut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::MemoryController")
                                              []
                                              [ F ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::cell::RefMut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [ F ]
                                              ],
                                            "borrow_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::controller::MemoryController")
                                                            []
                                                            [ F ]
                                                        ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::rc::Rc")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::controller::MemoryController")
                                                              []
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    [],
                                                    "deref",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::arch::testing::VmChipTestBuilder",
                                                          "memory"
                                                        |),
                                                        "openvm_circuit::arch::testing::memory::MemoryTester",
                                                        "controller"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                        M.read (| initial_state |)
                      ]
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "Expected the execution not to fail" |) |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                      []
                      [ F ],
                    "execute",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "program"
                      |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| M.borrow (| Pointer.Kind.Ref, initial_state |) |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                      []
                      [ F ],
                    "execute",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "execution"
                      |)
                    |);
                    M.read (| initial_state |);
                    M.read (| final_state |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_with_pc :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "execute_with_pc" (execute_with_pc F).
      Admitted.
      Global Typeclasses Opaque execute_with_pc.
      
      (*
          fn next_elem_size_u32(&mut self) -> u32 {
              self.rng.next_u32() % (1 << (F::bits() - 2))
          }
      *)
      Definition next_elem_size_u32
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "u32",
              BinOp.Wrap.rem,
              [
                M.call_closure (|
                  Ty.path "u32",
                  M.get_trait_method (|
                    "rand_core::RngCore",
                    Ty.path "rand::rngs::std::StdRng",
                    [],
                    [],
                    "next_u32",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "rng"
                      |)
                    |)
                  ]
                |);
                M.call_closure (|
                  Ty.path "u32",
                  BinOp.Wrap.shl,
                  [
                    Value.Integer IntegerKind.U32 1;
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.sub,
                      [
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_trait_method (|
                            "p3_field::field::Field",
                            F,
                            [],
                            [],
                            "bits",
                            [],
                            []
                          |),
                          []
                        |);
                        Value.Integer IntegerKind.Usize 2
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_next_elem_size_u32 :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "next_elem_size_u32" (next_elem_size_u32 F).
      Admitted.
      Global Typeclasses Opaque next_elem_size_u32.
      
      (*
          pub fn read_cell(&mut self, address_space: usize, pointer: usize) -> F {
              self.memory.read_cell(address_space, pointer)
          }
      *)
      Definition read_cell (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; address_space; pointer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let address_space := M.alloc (| Ty.path "usize", address_space |) in
            let pointer := M.alloc (| Ty.path "usize", pointer |) in
            M.call_closure (|
              F,
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester") [] [ F ],
                "read_cell",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::testing::VmChipTestBuilder",
                    "memory"
                  |)
                |);
                M.read (| address_space |);
                M.read (| pointer |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_read_cell :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "read_cell" (read_cell F).
      Admitted.
      Global Typeclasses Opaque read_cell.
      
      (*
          pub fn write_cell(&mut self, address_space: usize, pointer: usize, value: F) {
              self.memory.write_cell(address_space, pointer, value);
          }
      *)
      Definition write_cell (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; address_space; pointer; value ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let address_space := M.alloc (| Ty.path "usize", address_space |) in
            let pointer := M.alloc (| Ty.path "usize", pointer |) in
            let value := M.alloc (| F, value |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                      []
                      [ F ],
                    "write_cell",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "memory"
                      |)
                    |);
                    M.read (| address_space |);
                    M.read (| pointer |);
                    M.read (| value |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write_cell :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "write_cell" (write_cell F).
      Admitted.
      Global Typeclasses Opaque write_cell.
      
      (*
          pub fn read<const N: usize>(&mut self, address_space: usize, pointer: usize) -> [F; N] {
              self.memory.read(address_space, pointer)
          }
      *)
      Definition read (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [ N ], [], [ self; address_space; pointer ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let address_space := M.alloc (| Ty.path "usize", address_space |) in
            let pointer := M.alloc (| Ty.path "usize", pointer |) in
            M.call_closure (|
              Ty.apply (Ty.path "array") [ N ] [ F ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester") [] [ F ],
                "read",
                [ N ],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::testing::VmChipTestBuilder",
                    "memory"
                  |)
                |);
                M.read (| address_space |);
                M.read (| pointer |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_read :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "read" (read F).
      Admitted.
      Global Typeclasses Opaque read.
      
      (*
          pub fn write<const N: usize>(&mut self, address_space: usize, pointer: usize, value: [F; N]) {
              self.memory.write(address_space, pointer, value);
          }
      *)
      Definition write (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [ N ], [], [ self; address_space; pointer; value ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let address_space := M.alloc (| Ty.path "usize", address_space |) in
            let pointer := M.alloc (| Ty.path "usize", pointer |) in
            let value := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ F ], value |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                      []
                      [ F ],
                    "write",
                    [ N ],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "memory"
                      |)
                    |);
                    M.read (| address_space |);
                    M.read (| pointer |);
                    M.read (| value |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "write" (write F).
      Admitted.
      Global Typeclasses Opaque write.
      
      (*
          pub fn write_usize<const N: usize>(
              &mut self,
              address_space: usize,
              pointer: usize,
              value: [usize; N],
          ) {
              self.memory
                  .write(address_space, pointer, value.map(F::from_canonical_usize));
          }
      *)
      Definition write_usize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [ N ], [], [ self; address_space; pointer; value ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let address_space := M.alloc (| Ty.path "usize", address_space |) in
            let pointer := M.alloc (| Ty.path "usize", pointer |) in
            let value :=
              M.alloc (| Ty.apply (Ty.path "array") [ N ] [ Ty.path "usize" ], value |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                      []
                      [ F ],
                    "write",
                    [ N ],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "memory"
                      |)
                    |);
                    M.read (| address_space |);
                    M.read (| pointer |);
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ N ] [ F ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "array") [ N ] [ Ty.path "usize" ],
                        "map",
                        [],
                        [ Ty.function [ Ty.path "usize" ] F; F ]
                      |),
                      [
                        M.read (| value |);
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          F,
                          [],
                          [],
                          "from_canonical_usize",
                          [],
                          []
                        |)
                      ]
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write_usize :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "write_usize" (write_usize F).
      Admitted.
      Global Typeclasses Opaque write_usize.
      
      (*
          pub fn write_heap<const NUM_LIMBS: usize>(
              &mut self,
              register: usize,
              pointer: usize,
              writes: Vec<[F; NUM_LIMBS]>,
          ) {
              self.write(1usize, register, [F::from_canonical_usize(pointer)]);
              for (i, &write) in writes.iter().enumerate() {
                  self.write(2usize, pointer + i * NUM_LIMBS, write);
              }
          }
      *)
      Definition write_heap (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [ NUM_LIMBS ], [], [ self; register; pointer; writes ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let register := M.alloc (| Ty.path "usize", register |) in
            let pointer := M.alloc (| Ty.path "usize", pointer |) in
            let writes :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ]; Ty.path "alloc::alloc::Global"
                  ],
                writes
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "write",
                    [ Value.Integer IntegerKind.Usize 1 ],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    Value.Integer IntegerKind.Usize 1;
                    M.read (| register |);
                    Value.Array
                      [
                        M.call_closure (|
                          F,
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            F,
                            [],
                            [],
                            "from_canonical_usize",
                            [],
                            []
                          |),
                          [ M.read (| pointer |) ]
                        |)
                      ]
                  ]
                |) in
              M.use
                (M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                              [],
                              [],
                              "enumerate",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                                  "iter",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, writes |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                ],
                              γ
                            |) in
                          M.read (|
                            M.loop (|
                              Ty.tuple [],
                              ltac:(M.monadic
                                (let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                            ]
                                        ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                                            ],
                                          [],
                                          [],
                                          "next",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.is_struct_tuple (|
                                              γ,
                                              "core::option::Option::None"
                                            |) in
                                          M.never_to_any (| M.read (| M.break (||) |) |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                          let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                          let γ1_1 := M.deref (| M.read (| γ1_1 |) |) in
                                          let write :=
                                            M.copy (|
                                              Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                                              γ1_1
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.call_closure (|
                                                Ty.tuple [],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::testing::VmChipTestBuilder")
                                                    []
                                                    [ F ],
                                                  "write",
                                                  [ NUM_LIMBS ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (| M.read (| self |) |)
                                                  |);
                                                  Value.Integer IntegerKind.Usize 2;
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.read (| pointer |);
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.mul,
                                                        [ M.read (| i |); NUM_LIMBS ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| write |)
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                            |)
                          |)))
                    ]
                  |)
                |))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write_heap :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "write_heap" (write_heap F).
      Admitted.
      Global Typeclasses Opaque write_heap.
      
      (*
          pub fn system_port(&self) -> SystemPort {
              SystemPort {
                  execution_bus: self.execution.bus,
                  program_bus: self.program.bus,
                  memory_bridge: self.memory_bridge(),
              }
          }
      *)
      Definition system_port (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::extensions::SystemPort"
              []
              []
              [
                ("execution_bus",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "execution"
                      |),
                      "openvm_circuit::arch::testing::execution::ExecutionTester",
                      "bus"
                    |)
                  |));
                ("program_bus",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "program"
                      |),
                      "openvm_circuit::arch::testing::program::ProgramTester",
                      "bus"
                    |)
                  |));
                ("memory_bridge",
                  M.call_closure (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder")
                        []
                        [ F ],
                      "memory_bridge",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_system_port :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "system_port" (system_port F).
      Admitted.
      Global Typeclasses Opaque system_port.
      
      (*
          pub fn execution_bus(&self) -> ExecutionBus {
              self.execution.bus
          }
      *)
      Definition execution_bus
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::arch::testing::VmChipTestBuilder",
                  "execution"
                |),
                "openvm_circuit::arch::testing::execution::ExecutionTester",
                "bus"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execution_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "execution_bus" (execution_bus F).
      Admitted.
      Global Typeclasses Opaque execution_bus.
      
      (*
          pub fn program_bus(&self) -> ProgramBus {
              self.program.bus
          }
      *)
      Definition program_bus (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::arch::testing::VmChipTestBuilder",
                  "program"
                |),
                "openvm_circuit::arch::testing::program::ProgramTester",
                "bus"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_program_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "program_bus" (program_bus F).
      Admitted.
      Global Typeclasses Opaque program_bus.
      
      (*
          pub fn memory_bus(&self) -> MemoryBus {
              self.memory.bus
          }
      *)
      Definition memory_bus (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::arch::testing::VmChipTestBuilder",
                  "memory"
                |),
                "openvm_circuit::arch::testing::memory::MemoryTester",
                "bus"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_bus :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "memory_bus" (memory_bus F).
      Admitted.
      Global Typeclasses Opaque memory_bus.
      
      (*
          pub fn memory_controller(&self) -> Rc<RefCell<MemoryController<F>>> {
              self.memory.controller.clone()
          }
      *)
      Definition memory_controller
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::rc::Rc")
                []
                [
                  Ty.apply
                    (Ty.path "core::cell::RefCell")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply
                  (Ty.path "alloc::rc::Rc")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::cell::RefCell")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::testing::VmChipTestBuilder",
                      "memory"
                    |),
                    "openvm_circuit::arch::testing::memory::MemoryTester",
                    "controller"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_controller :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "memory_controller" (memory_controller F).
      Admitted.
      Global Typeclasses Opaque memory_controller.
      
      (*
          pub fn range_checker(&self) -> SharedVariableRangeCheckerChip {
              self.memory.controller.borrow().range_checker.clone()
          }
      *)
      Definition range_checker
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "core::cell::Ref")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryController")
                                []
                                [ F ]
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::cell::Ref")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [ F ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::cell::Ref")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::cell::RefCell")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ],
                                  "borrow",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [ F ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::rc::Rc")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [ F ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::arch::testing::VmChipTestBuilder",
                                                "memory"
                                              |),
                                              "openvm_circuit::arch::testing::memory::MemoryTester",
                                              "controller"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |),
                    "openvm_circuit::system::memory::controller::MemoryController",
                    "range_checker"
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_range_checker :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "range_checker" (range_checker F).
      Admitted.
      Global Typeclasses Opaque range_checker.
      
      (*
          pub fn memory_bridge(&self) -> MemoryBridge {
              self.memory.controller.borrow().memory_bridge()
          }
      *)
      Definition memory_bridge
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                  []
                  [ F ],
                "memory_bridge",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "core::cell::Ref")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::cell::Ref")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::cell::Ref")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                "borrow",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::cell::RefCell")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::arch::testing::VmChipTestBuilder",
                                              "memory"
                                            |),
                                            "openvm_circuit::arch::testing::memory::MemoryTester",
                                            "controller"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_memory_bridge :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "memory_bridge" (memory_bridge F).
      Admitted.
      Global Typeclasses Opaque memory_bridge.
      
      (*
          pub fn address_bits(&self) -> usize {
              self.memory.controller.borrow().mem_config.pointer_max_bits
          }
      *)
      Definition address_bits
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "core::cell::Ref")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ]
                          ],
                        [],
                        [],
                        "deref",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::cell::Ref")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [ F ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::cell::Ref")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                "borrow",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::cell::RefCell")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [ F ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::arch::testing::VmChipTestBuilder",
                                              "memory"
                                            |),
                                            "openvm_circuit::arch::testing::memory::MemoryTester",
                                            "controller"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |),
                  "openvm_circuit::system::memory::controller::MemoryController",
                  "mem_config"
                |),
                "openvm_circuit::arch::config::MemoryConfig",
                "pointer_max_bits"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_address_bits :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "address_bits" (address_bits F).
      Admitted.
      Global Typeclasses Opaque address_bits.
      
      (*
          pub fn offline_memory_mutex_arc(&self) -> Arc<Mutex<OfflineMemory<F>>> {
              self.memory_controller().borrow().offline_memory().clone()
          }
      *)
      Definition offline_memory_mutex_arc
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                        []
                        [ F ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::sync::mutex::Mutex")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                [],
                [],
                "clone",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.alloc (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [ F ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ],
                        "offline_memory",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::MemoryController")
                                    []
                                    [ F ]
                                ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "core::cell::Ref")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::cell::Ref")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ]
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::cell::Ref")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::cell::RefCell")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::MemoryController")
                                              []
                                              [ F ]
                                          ],
                                        "borrow",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [ F ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [ F ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "alloc::rc::Rc")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::controller::MemoryController")
                                                              []
                                                              [ F ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::rc::Rc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                                []
                                                                [ F ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::arch::testing::VmChipTestBuilder")
                                                          []
                                                          [ F ],
                                                        "memory_controller",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| self |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  |)
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_offline_memory_mutex_arc :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "offline_memory_mutex_arc" (offline_memory_mutex_arc F).
      Admitted.
      Global Typeclasses Opaque offline_memory_mutex_arc.
      
      (*
          pub fn get_default_register(&mut self, increment: usize) -> usize {
              self.default_register += increment;
              self.default_register - increment
          }
      *)
      Definition get_default_register
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; increment ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let increment := M.alloc (| Ty.path "usize", increment |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                let β :=
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::testing::VmChipTestBuilder",
                    "default_register"
                  |) in
                M.write (|
                  β,
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [ M.read (| β |); M.read (| increment |) ]
                  |)
                |) in
              M.alloc (|
                Ty.path "usize",
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.sub,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "default_register"
                      |)
                    |);
                    M.read (| increment |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_default_register :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "get_default_register" (get_default_register F).
      Admitted.
      Global Typeclasses Opaque get_default_register.
      
      (*
          pub fn get_default_pointer(&mut self, increment: usize) -> usize {
              self.default_pointer += increment;
              self.default_pointer - increment
          }
      *)
      Definition get_default_pointer
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; increment ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let increment := M.alloc (| Ty.path "usize", increment |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                let β :=
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::testing::VmChipTestBuilder",
                    "default_pointer"
                  |) in
                M.write (|
                  β,
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.add,
                    [ M.read (| β |); M.read (| increment |) ]
                  |)
                |) in
              M.alloc (|
                Ty.path "usize",
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.sub,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "default_pointer"
                      |)
                    |);
                    M.read (| increment |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_default_pointer :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "get_default_pointer" (get_default_pointer F).
      Admitted.
      Global Typeclasses Opaque get_default_pointer.
      
      (*
          pub fn write_heap_pointer_default(
              &mut self,
              reg_increment: usize,
              pointer_increment: usize,
          ) -> (usize, usize) {
              let register = self.get_default_register(reg_increment);
              let pointer = self.get_default_pointer(pointer_increment);
              self.write(1, register, pointer.to_le_bytes().map(F::from_canonical_u8));
              (register, pointer)
          }
      *)
      Definition write_heap_pointer_default
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; reg_increment; pointer_increment ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let reg_increment := M.alloc (| Ty.path "usize", reg_increment |) in
            let pointer_increment := M.alloc (| Ty.path "usize", pointer_increment |) in
            M.read (|
              let~ register : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "get_default_register",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| reg_increment |)
                  ]
                |) in
              let~ pointer : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "get_default_pointer",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| pointer_increment |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "write",
                    [ Value.Integer IntegerKind.Usize 8 ],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    Value.Integer IntegerKind.Usize 1;
                    M.read (| register |);
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [ Ty.path "u8" ],
                        "map",
                        [],
                        [ Ty.function [ Ty.path "u8" ] F; F ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ Ty.path "u8" ],
                          M.get_associated_function (| Ty.path "usize", "to_le_bytes", [], [] |),
                          [ M.read (| pointer |) ]
                        |);
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          F,
                          [],
                          [],
                          "from_canonical_u8",
                          [],
                          []
                        |)
                      ]
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                Value.Tuple [ M.read (| register |); M.read (| pointer |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write_heap_pointer_default :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C
          (Self F)
          "write_heap_pointer_default"
          (write_heap_pointer_default F).
      Admitted.
      Global Typeclasses Opaque write_heap_pointer_default.
      
      (*
          pub fn write_heap_default<const NUM_LIMBS: usize>(
              &mut self,
              reg_increment: usize,
              pointer_increment: usize,
              writes: Vec<[F; NUM_LIMBS]>,
          ) -> (usize, usize) {
              let register = self.get_default_register(reg_increment);
              let pointer = self.get_default_pointer(pointer_increment);
              self.write_heap(register, pointer, writes);
              (register, pointer)
          }
      *)
      Definition write_heap_default
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [ NUM_LIMBS ], [], [ self; reg_increment; pointer_increment; writes ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ]
                  ],
                self
              |) in
            let reg_increment := M.alloc (| Ty.path "usize", reg_increment |) in
            let pointer_increment := M.alloc (| Ty.path "usize", pointer_increment |) in
            let writes :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ]; Ty.path "alloc::alloc::Global"
                  ],
                writes
              |) in
            M.read (|
              let~ register : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "get_default_register",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| reg_increment |)
                  ]
                |) in
              let~ pointer : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "get_default_pointer",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| pointer_increment |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                    "write_heap",
                    [ NUM_LIMBS ],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                    M.read (| register |);
                    M.read (| pointer |);
                    M.read (| writes |)
                  ]
                |) in
              M.alloc (|
                Ty.tuple [ Ty.path "usize"; Ty.path "usize" ],
                Value.Tuple [ M.read (| register |); M.read (| pointer |) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_write_heap_default :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "write_heap_default" (write_heap_default F).
      Admitted.
      Global Typeclasses Opaque write_heap_default.
    End Impl_openvm_circuit_arch_testing_VmChipTestBuilder_F.
    
    Axiom TestSC :
      (Ty.path "openvm_circuit::arch::testing::TestSC") =
        (Ty.apply
          (Ty.path "openvm_stark_backend::config::StarkConfig")
          []
          [
            Ty.apply
              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
              []
              [
                Ty.apply
                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                  []
                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                Ty.apply
                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                  ];
                Ty.apply
                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.path "u8";
                    Ty.apply
                      (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32")
                      []
                      [ Ty.path "p3_blake3::Blake3" ];
                    Ty.apply
                      (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                      [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "p3_blake3::Blake3" ]
                  ];
                Ty.apply
                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.path "u8";
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32")
                          []
                          [ Ty.path "p3_blake3::Blake3" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "p3_blake3::Blake3" ]
                      ]
                  ]
              ];
            Ty.apply
              (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
              []
              [
                Ty.apply
                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                  []
                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                  ];
                Ty.apply
                  (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                  ]
              ];
            Ty.apply
              (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
              [ Value.Integer IntegerKind.Usize 4 ]
              [
                Ty.apply
                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                  []
                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
              ];
            Ty.apply
              (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
              []
              [
                Ty.apply
                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                  []
                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                Ty.apply
                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                  [ Value.Integer IntegerKind.Usize 32 ]
                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
              ]
          ]).
    
    Module Impl_openvm_circuit_arch_testing_VmChipTestBuilder_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder")
          []
          [
            Ty.apply
              (Ty.path "p3_monty_31::monty_31::MontyField31")
              []
              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
          ].
      
      (*
          pub fn build(self) -> VmChipTester<TestSC> {
              self.memory
                  .controller
                  .borrow_mut()
                  .finalize(None::<&mut Poseidon2PeripheryChip<BabyBear>>);
              let tester = VmChipTester {
                  memory: Some(self.memory),
                  ..Default::default()
              };
              let tester = tester.load(self.execution);
              tester.load(self.program)
          }
      *)
      Definition build (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                  ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ],
                    "finalize",
                    [],
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                        ]
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryController")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "core::cell::RefMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ]
                              ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::cell::RefMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::cell::RefMut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ]
                                          ]
                                      ],
                                    "borrow_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [
                                                          Ty.path
                                                            "p3_baby_bear::baby_bear::BabyBearParameters"
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::rc::Rc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "openvm_circuit::arch::testing::VmChipTestBuilder",
                                                  "memory"
                                                |),
                                                "openvm_circuit::arch::testing::memory::MemoryTester",
                                                "controller"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ]
                          ]
                      ]
                      []
                  ]
                |) in
              let~ tester :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.path "u8";
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32")
                                    []
                                    [ Ty.path "p3_blake3::Blake3" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 32
                                    ]
                                    [ Ty.path "p3_blake3::Blake3" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                            ]
                        ]
                    ] :=
                M.struct_record_update
                  (M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                          []
                                          [ Ty.path "p3_blake3::Blake3" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 32
                                          ]
                                          [ Ty.path "p3_blake3::Blake3" ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::config::StarkConfig")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_field::extension::binomial_extension::BinomialExtensionField")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.path "u8";
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::serializing_hasher::SerializingHasher32")
                                            []
                                            [ Ty.path "p3_blake3::Blake3" ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::compression::CompressionFunctionFromHasher")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 32
                                            ]
                                            [ Ty.path "p3_blake3::Blake3" ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_challenger::serializing_challenger::SerializingChallenger32")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ]
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
                  [
                    ("memory",
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ]
                        ]
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::arch::testing::VmChipTestBuilder",
                              "memory"
                            |)
                          |)
                        ])
                  ] in
              let~ tester :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.path "u8";
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32")
                                    []
                                    [ Ty.path "p3_blake3::Blake3" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 32
                                    ]
                                    [ Ty.path "p3_blake3::Blake3" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                            ]
                        ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.path "u8";
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32")
                                    []
                                    [ Ty.path "p3_blake3::Blake3" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 32
                                    ]
                                    [ Ty.path "p3_blake3::Blake3" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                            ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                          []
                                          [ Ty.path "p3_blake3::Blake3" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 32
                                          ]
                                          [ Ty.path "p3_blake3::Blake3" ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ]
                      ],
                    "load",
                    [],
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                        ]
                    ]
                  |),
                  [
                    M.read (| tester |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "execution"
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.path "u8";
                                Ty.apply
                                  (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32")
                                  []
                                  [ Ty.path "p3_blake3::Blake3" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 32
                                  ]
                                  [ Ty.path "p3_blake3::Blake3" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                          ]
                      ]
                  ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.path "u8";
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32")
                                    []
                                    [ Ty.path "p3_blake3::Blake3" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 32
                                    ]
                                    [ Ty.path "p3_blake3::Blake3" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                            ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                          []
                                          [ Ty.path "p3_blake3::Blake3" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 32
                                          ]
                                          [ Ty.path "p3_blake3::Blake3" ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ]
                      ],
                    "load",
                    [],
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                        ]
                    ]
                  |),
                  [
                    M.read (| tester |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "program"
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_build : M.IsAssociatedFunction.C Self "build" build.
      Admitted.
      Global Typeclasses Opaque build.
      
      (*
          pub fn build_babybear_poseidon2(self) -> VmChipTester<BabyBearPoseidon2Config> {
              self.memory
                  .controller
                  .borrow_mut()
                  .finalize(None::<&mut Poseidon2PeripheryChip<BabyBear>>);
              let tester = VmChipTester {
                  memory: Some(self.memory),
                  ..Default::default()
              };
              let tester = tester.load(self.execution);
              tester.load(self.program)
          }
      *)
      Definition build_babybear_poseidon2
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                  ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ],
                    "finalize",
                    [],
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                        ]
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::MemoryController")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "core::cell::RefMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryController")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ]
                              ],
                            [],
                            [],
                            "deref_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::cell::RefMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::cell::RefMut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ]
                                          ]
                                      ],
                                    "borrow_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "p3_monty_31::monty_31::MontyField31")
                                                        []
                                                        [
                                                          Ty.path
                                                            "p3_baby_bear::baby_bear::BabyBearParameters"
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::rc::Rc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "openvm_circuit::arch::testing::VmChipTestBuilder",
                                                  "memory"
                                                |),
                                                "openvm_circuit::arch::testing::memory::MemoryTester",
                                                "controller"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |);
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ]
                          ]
                      ]
                      []
                  ]
                |) in
              let~ tester :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8
                            ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_poseidon2::Poseidon2")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.U64 7
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [
                                      Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                      Ty.path
                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                    ]
                                ]
                            ]
                        ]
                    ] :=
                M.struct_record_update
                  (M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.Usize 8;
                                            Value.Integer IntegerKind.Usize 8
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.U64 7
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::TruncatedPermutation")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 8;
                                            Value.Integer IntegerKind.Usize 16
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.U64 7
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::config::StarkConfig")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_field::extension::binomial_extension::BinomialExtensionField")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.Usize 8;
                                              Value.Integer IntegerKind.Usize 8
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_poseidon2::Poseidon2")
                                                [
                                                  Value.Integer IntegerKind.Usize 16;
                                                  Value.Integer IntegerKind.U64 7
                                                ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters";
                                                      Ty.path
                                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                    ]
                                                ]
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::compression::TruncatedPermutation")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 8;
                                              Value.Integer IntegerKind.Usize 16
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_poseidon2::Poseidon2")
                                                [
                                                  Value.Integer IntegerKind.Usize 16;
                                                  Value.Integer IntegerKind.U64 7
                                                ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters";
                                                      Ty.path
                                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ]
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
                  [
                    ("memory",
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ]
                        ]
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::arch::testing::VmChipTestBuilder",
                              "memory"
                            |)
                          |)
                        ])
                  ] in
              let~ tester :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8
                            ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_poseidon2::Poseidon2")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.U64 7
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [
                                      Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                      Ty.path
                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                    ]
                                ]
                            ]
                        ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8
                            ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_poseidon2::Poseidon2")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.U64 7
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [
                                      Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                      Ty.path
                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                    ]
                                ]
                            ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.Usize 8;
                                            Value.Integer IntegerKind.Usize 8
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.U64 7
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::TruncatedPermutation")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 8;
                                            Value.Integer IntegerKind.Usize 16
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.U64 7
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ],
                    "load",
                    [],
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                        ]
                    ]
                  |),
                  [
                    M.read (| tester |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "execution"
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_poseidon2::Poseidon2")
                              [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.U64 7
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [
                                    Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                    Ty.path
                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                  ]
                              ]
                          ]
                      ]
                  ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8
                            ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_poseidon2::Poseidon2")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.U64 7
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [
                                      Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                      Ty.path
                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                    ]
                                ]
                            ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.Usize 8;
                                            Value.Integer IntegerKind.Usize 8
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.U64 7
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::TruncatedPermutation")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 8;
                                            Value.Integer IntegerKind.Usize 16
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.U64 7
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [ Value.Integer IntegerKind.Usize 16 ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ],
                    "load",
                    [],
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                        ]
                    ]
                  |),
                  [
                    M.read (| tester |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTestBuilder",
                        "program"
                      |)
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_build_babybear_poseidon2 :
        M.IsAssociatedFunction.C Self "build_babybear_poseidon2" build_babybear_poseidon2.
      Admitted.
      Global Typeclasses Opaque build_babybear_poseidon2.
    End Impl_openvm_circuit_arch_testing_VmChipTestBuilder_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters.
    
    Module Impl_core_default_Default_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_testing_VmChipTestBuilder_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ].
      
      (*
          fn default() -> Self {
              let mem_config = MemoryConfig::default();
              let range_checker = SharedVariableRangeCheckerChip::new(VariableRangeCheckerBus::new(
                  RANGE_CHECKER_BUS,
                  mem_config.decomp,
              ));
              let memory_controller = MemoryController::with_volatile_memory(
                  MemoryBus::new(MEMORY_BUS),
                  mem_config,
                  range_checker,
              );
              Self {
                  memory: MemoryTester::new(Rc::new(RefCell::new(memory_controller))),
                  execution: ExecutionTester::new(ExecutionBus::new(EXECUTION_BUS)),
                  program: ProgramTester::new(ProgramBus::new(READ_INSTRUCTION_BUS)),
                  rng: StdRng::seed_from_u64(0),
                  default_register: 0,
                  default_pointer: 0,
              }
          }
      *)
      Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.read (|
              let~ mem_config : Ty.path "openvm_circuit::arch::config::MemoryConfig" :=
                M.call_closure (|
                  Ty.path "openvm_circuit::arch::config::MemoryConfig",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_circuit::arch::config::MemoryConfig",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |) in
              let~ range_checker :
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip" :=
                M.call_closure (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                        "new",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          get_constant (|
                            "openvm_circuit::arch::testing::RANGE_CHECKER_BUS",
                            Ty.path "u16"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mem_config,
                            "openvm_circuit::arch::config::MemoryConfig",
                            "decomp"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ memory_controller :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ],
                    "with_volatile_memory",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                        "new",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          get_constant (|
                            "openvm_circuit::arch::testing::MEMORY_BUS",
                            Ty.path "u16"
                          |)
                        |)
                      ]
                    |);
                    M.read (| mem_config |);
                    M.read (| range_checker |)
                  ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTestBuilder") [] [ F ],
                Value.mkStructRecord
                  "openvm_circuit::arch::testing::VmChipTestBuilder"
                  []
                  [ F ]
                  [
                    ("memory",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                          []
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                            []
                            [ F ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::cell::RefCell")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::cell::RefCell")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [ F ]
                                    ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| memory_controller |) ]
                              |)
                            ]
                          |)
                        ]
                      |));
                    ("execution",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                          []
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::execution::ExecutionTester")
                            []
                            [ F ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                            M.get_associated_function (|
                              Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                              "new",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_circuit::arch::testing::EXECUTION_BUS",
                                  Ty.path "u16"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |));
                    ("program",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                          []
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                            []
                            [ F ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                            M.get_associated_function (|
                              Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                              "new",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_circuit::arch::testing::READ_INSTRUCTION_BUS",
                                  Ty.path "u16"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |));
                    ("rng",
                      M.call_closure (|
                        Ty.path "rand::rngs::std::StdRng",
                        M.get_trait_method (|
                          "rand_core::SeedableRng",
                          Ty.path "rand::rngs::std::StdRng",
                          [],
                          [],
                          "seed_from_u64",
                          [],
                          []
                        |),
                        [ Value.Integer IntegerKind.U64 0 ]
                      |));
                    ("default_register", Value.Integer IntegerKind.Usize 0);
                    ("default_pointer", Value.Integer IntegerKind.Usize 0)
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("default", InstanceField.Method (default F)) ].
    End Impl_core_default_Default_where_p3_field_field_PrimeField32_F_for_openvm_circuit_arch_testing_VmChipTestBuilder_F.
    
    (* StructRecord
      {
        name := "VmChipTester";
        const_params := [];
        ty_params := [ "SC" ];
        fields :=
          [
            ("memory",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ]
                ]);
            ("air_proof_inputs",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_default_Default_where_openvm_stark_backend_config_StarkGenericConfig_SC_for_openvm_circuit_arch_testing_VmChipTester_SC.
      Definition Self (SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ].
      
      (*
          fn default() -> Self {
              Self {
                  memory: None,
                  air_proof_inputs: vec![],
              }
          }
      *)
      Definition default (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_circuit::arch::testing::VmChipTester"
              []
              [ SC ]
              [
                ("memory",
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ]
                    []);
                ("air_proof_inputs",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                []
                                [ SC ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (SC : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self SC)
          (* Instance *) [ ("default", InstanceField.Method (default SC)) ].
    End Impl_core_default_Default_where_openvm_stark_backend_config_StarkGenericConfig_SC_for_openvm_circuit_arch_testing_VmChipTester_SC.
    
    Module Impl_openvm_circuit_arch_testing_VmChipTester_SC.
      Definition Self (SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ].
      
      (*
          pub fn load<C: Chip<SC>>(mut self, chip: C) -> Self {
              if chip.current_trace_height() > 0 {
                  let air = chip.air();
                  let air_proof_input = chip.generate_air_proof_input();
                  tracing::debug!("Generated air proof input for {}", air.name());
                  self.air_proof_inputs.push((air, air_proof_input));
              }
      
              self
          }
      *)
      Definition load (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [ C ], [ self; chip ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ],
                self
              |) in
            let chip := M.alloc (| C, chip |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.gt,
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "openvm_stark_backend::chip::ChipUsageGetter",
                                      C,
                                      [],
                                      [],
                                      "current_trace_height",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                                  |);
                                  Value.Integer IntegerKind.Usize 0
                                ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ air :
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "openvm_stark_backend::chip::Chip",
                                C,
                                [],
                                [ SC ],
                                "air",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                            |) in
                          let~ air_proof_input :
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                []
                                [ SC ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                []
                                [ SC ],
                              M.get_trait_method (|
                                "openvm_stark_backend::chip::Chip",
                                C,
                                [],
                                [ SC ],
                                "generate_air_proof_input",
                                [],
                                []
                              |),
                              [ M.read (| chip |) ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              let~ enabled : Ty.path "bool" :=
                                LogicalOp.and (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialOrd",
                                        Ty.path "tracing_core::metadata::Level",
                                        [],
                                        [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                        "le",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_associated_constant (|
                                            Ty.path "tracing_core::metadata::Level",
                                            "DEBUG",
                                            Ty.path "tracing_core::metadata::Level"
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "tracing::level_filters::STATIC_MAX_LEVEL",
                                            Ty.path "tracing_core::metadata::LevelFilter"
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialOrd",
                                          Ty.path "tracing_core::metadata::Level",
                                          [],
                                          [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                          "le",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_associated_constant (|
                                              Ty.path "tracing_core::metadata::Level",
                                              "DEBUG",
                                              Ty.path "tracing_core::metadata::Level"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "tracing_core::metadata::LevelFilter",
                                              M.call_closure (|
                                                Ty.path "tracing_core::metadata::LevelFilter",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::metadata::LevelFilter",
                                                  "current",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)))
                                  |),
                                  ltac:(M.monadic
                                    (M.read (|
                                      let~ interest :
                                          Ty.path "tracing_core::subscriber::Interest" :=
                                        M.call_closure (|
                                          Ty.path "tracing_core::subscriber::Interest",
                                          M.get_associated_function (|
                                            Ty.path "tracing_core::callsite::DefaultCallsite",
                                            "interest",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.read (|
                                                  get_constant (|
                                                    "openvm_circuit::arch::testing::load::__CALLSITE",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite"
                                                      ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |) in
                                      M.alloc (|
                                        Ty.path "bool",
                                        LogicalOp.and (|
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "tracing_core::subscriber::Interest",
                                                "is_never",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                            |)
                                          |),
                                          ltac:(M.monadic
                                            (M.call_closure (|
                                              Ty.path "bool",
                                              M.get_function (|
                                                "tracing::__macro_support::__is_enabled",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "tracing_core::metadata::Metadata"
                                                        ],
                                                      M.get_trait_method (|
                                                        "tracing_core::callsite::Callsite",
                                                        Ty.path
                                                          "tracing_core::callsite::DefaultCallsite",
                                                        [],
                                                        [],
                                                        "metadata",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_circuit::arch::testing::load::__CALLSITE",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.read (| interest |)
                                              ]
                                            |)))
                                        |)
                                      |)
                                    |)))
                                |) in
                              M.alloc (|
                                Ty.tuple [],
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ := M.use enabled in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [ Ty.path "tracing_core::field::ValueSet" ]
                                                  (Ty.tuple []),
                                                [],
                                                [
                                                  Ty.tuple
                                                    [ Ty.path "tracing_core::field::ValueSet" ]
                                                ],
                                                "call",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.function
                                                      [ Ty.path "tracing_core::field::ValueSet" ]
                                                      (Ty.tuple []),
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::field::ValueSet",
                                                                  α0
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let value_set :=
                                                                        M.copy (|
                                                                          Ty.path
                                                                            "tracing_core::field::ValueSet",
                                                                          γ
                                                                        |) in
                                                                      M.read (|
                                                                        let~ meta :
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::metadata::Metadata"
                                                                              ] :=
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::metadata::Metadata"
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "tracing_core::callsite::Callsite",
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite",
                                                                              [],
                                                                              [],
                                                                              "metadata",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "openvm_circuit::arch::testing::load::__CALLSITE",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                                        ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        let~ _ : Ty.tuple [] :=
                                                                          M.call_closure (|
                                                                            Ty.tuple [],
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "tracing_core::event::Event",
                                                                              "dispatch",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (| meta |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    value_set
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Ty.tuple [],
                                                                          Value.Tuple []
                                                                        |)
                                                                      |)))
                                                                ]
                                                              |)))
                                                          | _ =>
                                                            M.impossible "wrong number of arguments"
                                                          end))
                                                  |)
                                                |);
                                                Value.Tuple
                                                  [
                                                    M.read (|
                                                      let~ iter :
                                                          Ty.path "tracing_core::field::Iter" :=
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::Iter",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "iter",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_circuit::arch::testing::load::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |) in
                                                      M.alloc (|
                                                        Ty.path "tracing_core::field::ValueSet",
                                                        M.call_closure (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          M.get_associated_function (|
                                                            Ty.path "tracing_core::field::FieldSet",
                                                            "value_set",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::Field"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("tracing_core::field::Value::Trait",
                                                                                    [])
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::field::FieldSet"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata",
                                                                    "fields",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_circuit::arch::testing::load::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::field::Field"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.dyn
                                                                                      [
                                                                                        ("tracing_core::field::Value::Trait",
                                                                                          [])
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    Value.Array
                                                                      [
                                                                        Value.Tuple
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                Ty.path
                                                                                  "tracing_core::field::Field",
                                                                                M.call_closure (|
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field",
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ],
                                                                                    "expect",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "tracing_core::field::Field"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.path
                                                                                          "tracing_core::field::Iter",
                                                                                        [],
                                                                                        [],
                                                                                        "next",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.deref (|
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              iter
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        mk_str (|
                                                                                          "FieldSet corrupted (this is a bug)"
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            Value.StructTuple
                                                                              "core::option::Option::Some"
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.dyn
                                                                                      [
                                                                                        ("tracing_core::field::Value::Trait",
                                                                                          [])
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              [
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.dyn
                                                                                            [
                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                [])
                                                                                            ]
                                                                                        ],
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ],
                                                                                        M.pointer_coercion
                                                                                          M.PointerCoercion.Unsize
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::fmt::Arguments"
                                                                                            ])
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.dyn
                                                                                                [
                                                                                                  ("tracing_core::field::Value::Trait",
                                                                                                    [])
                                                                                                ]
                                                                                            ]),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.alloc (|
                                                                                                  Ty.path
                                                                                                    "core::fmt::Arguments",
                                                                                                  M.call_closure (|
                                                                                                    Ty.path
                                                                                                      "core::fmt::Arguments",
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "core::fmt::Arguments",
                                                                                                      "new_v1",
                                                                                                      [
                                                                                                        Value.Integer
                                                                                                          IntegerKind.Usize
                                                                                                          1;
                                                                                                        Value.Integer
                                                                                                          IntegerKind.Usize
                                                                                                          1
                                                                                                      ],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.alloc (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "array")
                                                                                                                [
                                                                                                                  Value.Integer
                                                                                                                    IntegerKind.Usize
                                                                                                                    1
                                                                                                                ]
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "str"
                                                                                                                    ]
                                                                                                                ],
                                                                                                              Value.Array
                                                                                                                [
                                                                                                                  mk_str (|
                                                                                                                    "Generated air proof input for "
                                                                                                                  |)
                                                                                                                ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |);
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.alloc (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "array")
                                                                                                                [
                                                                                                                  Value.Integer
                                                                                                                    IntegerKind.Usize
                                                                                                                    1
                                                                                                                ]
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::rt::Argument"
                                                                                                                ],
                                                                                                              Value.Array
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "core::fmt::rt::Argument",
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.path
                                                                                                                        "core::fmt::rt::Argument",
                                                                                                                      "new_display",
                                                                                                                      [],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "alloc::string::String"
                                                                                                                      ]
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.alloc (|
                                                                                                                              Ty.path
                                                                                                                                "alloc::string::String",
                                                                                                                              M.call_closure (|
                                                                                                                                Ty.path
                                                                                                                                  "alloc::string::String",
                                                                                                                                M.get_trait_method (|
                                                                                                                                  "openvm_stark_backend::rap::AnyRap",
                                                                                                                                  Ty.dyn
                                                                                                                                    [
                                                                                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                                                                                        [])
                                                                                                                                    ],
                                                                                                                                  [],
                                                                                                                                  [
                                                                                                                                    SC
                                                                                                                                  ],
                                                                                                                                  "name",
                                                                                                                                  [],
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.deref (|
                                                                                                                                      M.call_closure (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.dyn
                                                                                                                                              [
                                                                                                                                                ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                                                                                                  [])
                                                                                                                                              ]
                                                                                                                                          ],
                                                                                                                                        M.get_trait_method (|
                                                                                                                                          "core::ops::deref::Deref",
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "alloc::sync::Arc")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.dyn
                                                                                                                                                [
                                                                                                                                                  ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                                                                                                    [])
                                                                                                                                                ];
                                                                                                                                              Ty.path
                                                                                                                                                "alloc::alloc::Global"
                                                                                                                                            ],
                                                                                                                                          [],
                                                                                                                                          [],
                                                                                                                                          "deref",
                                                                                                                                          [],
                                                                                                                                          []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            air
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |))
                                                                                |)
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "openvm_circuit::arch::testing::VmChipTester",
                                    "air_proof_inputs"
                                  |)
                                |);
                                Value.Tuple
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.pointer_coercion
                                        M.PointerCoercion.Unsize
                                        (Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                        (Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ]),
                                      [ M.read (| air |) ]
                                    |);
                                    M.read (| air_proof_input |)
                                  ]
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_load :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "load" (load SC).
      Admitted.
      Global Typeclasses Opaque load.
      
      (*
          pub fn finalize(mut self) -> Self {
              if let Some(memory_tester) = self.memory.take() {
                  let memory_controller = memory_tester.controller.clone();
                  let range_checker = memory_controller.borrow().range_checker.clone();
                  self = self.load(memory_tester); // dummy memory interactions
                  {
                      let airs = memory_controller.borrow().airs();
                      let air_proof_inputs = Rc::try_unwrap(memory_controller)
                          .unwrap_or_else(|_| panic!("Memory controller was not dropped"))
                          .into_inner()
                          .generate_air_proof_inputs();
                      self.air_proof_inputs.extend(
                          zip(airs, air_proof_inputs).filter(|(_, input)| input.main_trace_height() > 0),
                      );
                  }
                  self = self.load(range_checker); // this must be last because other trace generation
                                                   // mutates its state
              }
              self
          }
      *)
      Definition finalize (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::testing::memory::MemoryTester")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                "take",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "openvm_circuit::arch::testing::VmChipTester",
                                    "memory"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let memory_tester :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::testing::memory::MemoryTester")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ],
                            γ0_0
                          |) in
                        M.read (|
                          let~ memory_controller :
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::cell::RefCell")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::rc::Rc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::cell::RefCell")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    memory_tester,
                                    "openvm_circuit::arch::testing::memory::MemoryTester",
                                    "controller"
                                  |)
                                |)
                              ]
                            |) in
                          let~ range_checker :
                              Ty.path
                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip" :=
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::MemoryController")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "core::cell::Ref")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "core::cell::Ref")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ]
                                                ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::cell::Ref")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                    ],
                                                  "borrow",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::cell::RefCell")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::rc::Rc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::cell::RefCell")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          [],
                                                          "deref",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            memory_controller
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    |),
                                    "openvm_circuit::system::memory::controller::MemoryController",
                                    "range_checker"
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              self,
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                                  []
                                  [ SC ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                                    []
                                    [ SC ],
                                  "load",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::testing::memory::MemoryTester")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                                |),
                                [ M.read (| self |); M.read (| memory_tester |) ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.read (|
                              let~ airs :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    "airs",
                                    [],
                                    [ SC ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "core::cell::Ref")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::MemoryController")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "core::cell::Ref")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ],
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::cell::Ref")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ],
                                                    "borrow",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::cell::RefCell")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::rc::Rc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefCell")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              memory_controller
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |) in
                              let~ air_proof_inputs :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    "generate_air_proof_inputs",
                                    [],
                                    [ SC ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::MemoryController")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::cell::RefCell")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::MemoryController")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        "into_inner",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::cell::RefCell")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            "unwrap_or_else",
                                            [],
                                            [
                                              Ty.function
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::rc::Rc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::controller::MemoryController")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::MemoryController")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::controller::MemoryController")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "alloc::rc::Rc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::controller::MemoryController")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "try_unwrap",
                                                [],
                                                []
                                              |),
                                              [ M.read (| memory_controller |) ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.apply
                                                          (Ty.path "core::cell::RefCell")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::controller::MemoryController")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val"
                                                              ]
                                                          ],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "alloc::rc::Rc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::cell::RefCell")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          α0
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.never_to_any (|
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::panic_fmt",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.path
                                                                        "core::fmt::Arguments",
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "core::fmt::Arguments",
                                                                        "new_const",
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [
                                                                                    Value.Integer
                                                                                      IntegerKind.Usize
                                                                                      1
                                                                                  ]
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "str"
                                                                                      ]
                                                                                  ],
                                                                                Value.Array
                                                                                  [
                                                                                    mk_str (|
                                                                                      "Memory controller was not dropped"
                                                                                    |)
                                                                                  ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::Extend",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.dyn
                                                  [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::prover::types::AirProofInput")
                                              []
                                              [ SC ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::AirProofInput")
                                            []
                                            [ SC ]
                                        ]
                                    ],
                                    "extend",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::filter::Filter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.function
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                [])
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::prover::types::AirProofInput")
                                                        []
                                                        [ SC ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_circuit::arch::testing::VmChipTester",
                                        "air_proof_inputs"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::filter::Filter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.function
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                [])
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::prover::types::AirProofInput")
                                                        []
                                                        [ SC ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.dyn
                                                      [
                                                        ("openvm_stark_backend::rap::AnyRap::Trait",
                                                          [])
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                  []
                                                  [ SC ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "filter",
                                        [],
                                        [
                                          Ty.function
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                [])
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::prover::types::AirProofInput")
                                                        []
                                                        [ SC ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.get_function (|
                                            "core::iter::adapters::zip::zip",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [ M.read (| airs |); M.read (| air_proof_inputs |) ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.path "bool",
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                        [])
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::prover::types::AirProofInput")
                                                                []
                                                                [ SC ]
                                                            ]
                                                        ],
                                                      α0
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ := M.deref (| M.read (| γ |) |) in
                                                          let γ1_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ1_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let input :=
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                                    []
                                                                    [ SC ]
                                                                ],
                                                              γ1_1
                                                            |) in
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.gt,
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                                    []
                                                                    [ SC ],
                                                                  "main_trace_height",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (| M.read (| input |) |)
                                                                  |)
                                                                ]
                                                              |);
                                                              Value.Integer IntegerKind.Usize 0
                                                            ]
                                                          |)))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              self,
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                                  []
                                  [ SC ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                                    []
                                    [ SC ],
                                  "load",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip"
                                  ]
                                |),
                                [ M.read (| self |); M.read (| range_checker |) ]
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_finalize :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "finalize" (finalize SC).
      Admitted.
      Global Typeclasses Opaque finalize.
      
      (*
          pub fn load_air_proof_input(
              mut self,
              air_proof_input: (AirRef<SC>, AirProofInput<SC>),
          ) -> Self {
              self.air_proof_inputs.push(air_proof_input);
              self
          }
      *)
      Definition load_air_proof_input
          (SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self; air_proof_input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ],
                self
              |) in
            let air_proof_input :=
              M.alloc (|
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ]
                  ],
                air_proof_input
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTester",
                        "air_proof_inputs"
                      |)
                    |);
                    M.read (| air_proof_input |)
                  ]
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_load_air_proof_input :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "load_air_proof_input" (load_air_proof_input SC).
      Admitted.
      Global Typeclasses Opaque load_air_proof_input.
      
      (*
          pub fn load_with_custom_trace<C: Chip<SC>>(
              mut self,
              chip: C,
              trace: RowMajorMatrix<Val<SC>>,
          ) -> Self {
              let air = chip.air();
              let mut air_proof_input = chip.generate_air_proof_input();
              air_proof_input.raw.common_main = Some(trace);
              self.air_proof_inputs.push((air, air_proof_input));
              self
          }
      *)
      Definition load_with_custom_trace
          (SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [ C ], [ self; chip; trace ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ],
                self
              |) in
            let chip := M.alloc (| C, chip |) in
            let trace :=
              M.alloc (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val";
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ]
                  ],
                trace
              |) in
            M.read (|
              let~ air :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "openvm_stark_backend::chip::Chip",
                    C,
                    [],
                    [ SC ],
                    "air",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                |) in
              let~ air_proof_input :
                  Ty.apply
                    (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                    []
                    [ SC ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                  M.get_trait_method (|
                    "openvm_stark_backend::chip::Chip",
                    C,
                    [],
                    [ SC ],
                    "generate_air_proof_input",
                    [],
                    []
                  |),
                  [ M.read (| chip |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      air_proof_input,
                      "openvm_stark_backend::prover::types::AirProofInput",
                      "raw"
                    |),
                    "openvm_stark_backend::prover::types::AirProofRawInput",
                    "common_main"
                  |),
                  Value.StructTuple
                    "core::option::Option::Some"
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ]
                    [ M.read (| trace |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTester",
                        "air_proof_inputs"
                      |)
                    |);
                    Value.Tuple
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ])
                            (Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ]),
                          [ M.read (| air |) ]
                        |);
                        M.read (| air_proof_input |)
                      ]
                  ]
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_load_with_custom_trace :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "load_with_custom_trace" (load_with_custom_trace SC).
      Admitted.
      Global Typeclasses Opaque load_with_custom_trace.
      
      (*
          pub fn load_and_prank_trace<C: Chip<SC>, P>(mut self, chip: C, modify_trace: P) -> Self
          where
              P: Fn(&mut DenseMatrix<Val<SC>>),
          {
              let air = chip.air();
              let mut air_proof_input = chip.generate_air_proof_input();
              let trace = air_proof_input.raw.common_main.as_mut().unwrap();
              modify_trace(trace);
              self.air_proof_inputs.push((air, air_proof_input));
              self
          }
      *)
      Definition load_and_prank_trace
          (SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [ C; P ], [ self; chip; modify_trace ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ],
                self
              |) in
            let chip := M.alloc (| C, chip |) in
            let modify_trace := M.alloc (| P, modify_trace |) in
            M.read (|
              let~ air :
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "openvm_stark_backend::chip::Chip",
                    C,
                    [],
                    [ SC ],
                    "air",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, chip |) ]
                |) in
              let~ air_proof_input :
                  Ty.apply
                    (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                    []
                    [ SC ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                  M.get_trait_method (|
                    "openvm_stark_backend::chip::Chip",
                    C,
                    [],
                    [ SC ],
                    "generate_air_proof_input",
                    [],
                    []
                  |),
                  [ M.read (| chip |) ]
                |) in
              let~ trace :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ]
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_matrix::dense::DenseMatrix")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val";
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        "as_mut",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              air_proof_input,
                              "openvm_stark_backend::prover::types::AirProofInput",
                              "raw"
                            |),
                            "openvm_stark_backend::prover::types::AirProofRawInput",
                            "common_main"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "core::ops::function::Fn",
                    P,
                    [],
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_matrix::dense::DenseMatrix")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                        ]
                    ],
                    "call",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, modify_trace |);
                    Value.Tuple
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| trace |) |) |) ]
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "push",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "openvm_circuit::arch::testing::VmChipTester",
                        "air_proof_inputs"
                      |)
                    |);
                    Value.Tuple
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ])
                            (Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ]),
                          [ M.read (| air |) ]
                        |);
                        M.read (| air_proof_input |)
                      ]
                  ]
                |) in
              self
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_load_and_prank_trace :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "load_and_prank_trace" (load_and_prank_trace SC).
      Admitted.
      Global Typeclasses Opaque load_and_prank_trace.
      
      (*
          pub fn test<E: StarkEngine<SC>, P: Fn() -> E>(
              &self, // do no take ownership so it's easier to prank
              engine_provider: P,
          ) -> Result<VerificationData<SC>, VerificationError> {
              assert!(self.memory.is_none(), "Memory must be finalized");
              let (airs, air_proof_inputs) = self.air_proof_inputs.iter().cloned().unzip();
              engine_provider().run_test_impl(airs, air_proof_inputs)
          }
      *)
      Definition test (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [ E; P ], [ self; engine_provider ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::testing::VmChipTester") [] [ SC ] ],
                self
              |) in
            let engine_provider := M.alloc (| P, engine_provider |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              UnOp.not (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::testing::memory::MemoryTester")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    "is_none",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::arch::testing::VmChipTester",
                                        "memory"
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic_fmt", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                          Value.Array [ mk_str (| "Memory must be finalized" |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply (Ty.path "openvm_stark_backend::engine::VerificationData") [] [ SC ];
                    Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::engine::VerificationData") [] [ SC ];
                      Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::cloned::Cloned")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                      []
                                      [ SC ]
                                  ]
                              ]
                          ],
                        [],
                        [],
                        "unzip",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::cloned::Cloned")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ]
                                    ]
                                ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                      []
                                      [ SC ]
                                  ]
                              ],
                            [],
                            [],
                            "cloned",
                            [],
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                    []
                                    [ SC ]
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ]
                                    ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ]
                                      ]
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ]
                                                ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.dyn
                                                      [
                                                        ("openvm_stark_backend::rap::AnyRap::Trait",
                                                          [])
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                  []
                                                  [ SC ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::testing::VmChipTester",
                                            "air_proof_inputs"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let airs :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            γ0_0
                          |) in
                        let air_proof_inputs :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                  []
                                  [ SC ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            γ0_1
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::engine::VerificationData")
                                []
                                [ SC ];
                              Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                            ],
                          M.get_trait_method (|
                            "openvm_stark_backend::engine::StarkEngine",
                            E,
                            [],
                            [ SC ],
                            "run_test_impl",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                E,
                                M.call_closure (|
                                  E,
                                  M.get_trait_method (|
                                    "core::ops::function::Fn",
                                    P,
                                    [],
                                    [ Ty.tuple [] ],
                                    "call",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, engine_provider |); Value.Tuple []
                                  ]
                                |)
                              |)
                            |);
                            M.read (| airs |);
                            M.read (| air_proof_inputs |)
                          ]
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_test :
        forall (SC : Ty.t),
        M.IsAssociatedFunction.C (Self SC) "test" (test SC).
      Admitted.
      Global Typeclasses Opaque test.
    End Impl_openvm_circuit_arch_testing_VmChipTester_SC.
    
    Module Impl_openvm_circuit_arch_testing_VmChipTester_openvm_stark_backend_config_StarkConfig_p3_fri_two_adic_pcs_TwoAdicFriPcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_dft_radix_2_dit_parallel_Radix2DitParallel_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_symmetric_sponge_PaddingFreeSponge_expr_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_symmetric_compression_TruncatedPermutation_Usize_2_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_commit_adapters_extension_mmcs_ExtensionMmcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_symmetric_sponge_PaddingFreeSponge_expr_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_symmetric_compression_TruncatedPermutation_Usize_2_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_duplex_challenger_DuplexChallenger_expr_expr_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_duplex_challenger_DuplexChallenger_expr_expr_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::testing::VmChipTester")
          []
          [
            Ty.apply
              (Ty.path "openvm_stark_backend::config::StarkConfig")
              []
              [
                Ty.apply
                  (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                          |))
                      ]
                      [
                        Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                          "Packing";
                        Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                          "Packing";
                        Ty.apply
                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                              |));
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                              |));
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                              |))
                          ]
                          [
                            Ty.apply
                              (Ty.path "p3_poseidon2::Poseidon2")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                  |))
                              ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::field::Field"
                                  []
                                  []
                                  (Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                  "Packing";
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |))
                                  ]
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                    Ty.path
                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                          [
                            Value.Integer IntegerKind.Usize 2;
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                              |));
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                              |))
                          ]
                          [
                            Ty.apply
                              (Ty.path "p3_poseidon2::Poseidon2")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                  |))
                              ]
                              [
                                Ty.associated_in_trait
                                  "p3_field::field::Field"
                                  []
                                  []
                                  (Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                  "Packing";
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |))
                                  ]
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                    Ty.path
                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                  ]
                              ]
                          ]
                      ];
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                              |))
                          ]
                          [
                            Ty.associated_in_trait
                              "p3_field::field::Field"
                              []
                              []
                              (Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                              "Packing";
                            Ty.associated_in_trait
                              "p3_field::field::Field"
                              []
                              []
                              (Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                              "Packing";
                            Ty.apply
                              (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                  |))
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                  |))
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ]
                  ];
                Ty.apply
                  (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                          |))
                      ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.apply
                          (Ty.path "p3_poseidon2::Poseidon2")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                              |));
                            M.unevaluated_const
                              (mk_str (| "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant" |))
                          ]
                          [
                            Ty.associated_in_trait
                              "p3_field::field::Field"
                              []
                              []
                              (Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                              "Packing";
                            Ty.apply
                              (Ty.path
                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                  |))
                              ]
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                  |))
                              ]
                              [
                                Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                Ty.path "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                              ]
                          ]
                      ]
                  ];
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                  ];
                Ty.apply
                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                      |));
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                      |))
                  ]
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_poseidon2::Poseidon2")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                          |));
                        M.unevaluated_const
                          (mk_str (| "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant" |))
                      ]
                      [
                        Ty.associated_in_trait
                          "p3_field::field::Field"
                          []
                          []
                          (Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                          "Packing";
                        Ty.apply
                          (Ty.path
                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                              |))
                          ]
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.apply
                          (Ty.path
                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                              |))
                          ]
                          [
                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                            Ty.path "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                          ]
                      ]
                  ]
              ]
          ].
      
      (*
          pub fn simple_test(
              &self,
          ) -> Result<VerificationData<BabyBearPoseidon2Config>, VerificationError> {
              self.test(|| BabyBearPoseidon2Engine::new(FriParameters::new_for_testing(1)))
          }
      *)
      Definition simple_test (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              (Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ])
                                              "Packing";
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              (Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ])
                                              "Packing";
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |));
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ])
                                                  "Packing";
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::TruncatedPermutation")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |));
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ])
                                                  "Packing";
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |))
                                          ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                  |))
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::engine::VerificationData")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 8;
                                      Value.Integer IntegerKind.Usize 16
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                            [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8
                            ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_poseidon2::Poseidon2")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.U64 7
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [
                                      Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                      Ty.path
                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                    ]
                                ]
                            ]
                        ]
                    ];
                  Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 8
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 8;
                                    Value.Integer IntegerKind.Usize 16
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.U64 7
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [ Value.Integer IntegerKind.Usize 16 ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        Value.Integer IntegerKind.Usize 16;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 8
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 8;
                                        Value.Integer IntegerKind.Usize 16
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                Value.Integer IntegerKind.Usize 16;
                                Value.Integer IntegerKind.Usize 8
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                          [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_poseidon2::Poseidon2")
                              [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.U64 7
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [
                                    Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                    Ty.path
                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                  ]
                              ]
                          ]
                      ]
                  ],
                "test",
                [],
                [
                  Ty.apply
                    (Ty.path
                      "openvm_stark_sdk::config::baby_bear_poseidon2::BabyBearPermutationEngine")
                    []
                    [
                      Ty.apply
                        (Ty.path "p3_poseidon2::Poseidon2")
                        [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.U64 7 ]
                        [
                          Ty.apply
                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                            []
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                          Ty.apply
                            (Ty.path
                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                          Ty.apply
                            (Ty.path
                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [
                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                              Ty.path "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                            ]
                        ]
                    ];
                  Ty.function
                    []
                    (Ty.apply
                      (Ty.path
                        "openvm_stark_sdk::config::baby_bear_poseidon2::BabyBearPermutationEngine")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_poseidon2::Poseidon2")
                          [ Value.Integer IntegerKind.Usize 16; Value.Integer IntegerKind.U64 7 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                              [ Value.Integer IntegerKind.Usize 16 ]
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                              [ Value.Integer IntegerKind.Usize 16 ]
                              [
                                Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                Ty.path "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                              ]
                          ]
                      ])
                ]
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path
                                "openvm_stark_sdk::config::baby_bear_poseidon2::BabyBearPermutationEngine")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    Value.Integer IntegerKind.Usize 16;
                                    Value.Integer IntegerKind.U64 7
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [ Value.Integer IntegerKind.Usize 16 ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ],
                            M.alloc (| Ty.tuple [], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_sdk::config::baby_bear_poseidon2::BabyBearPermutationEngine")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            Value.Integer IntegerKind.Usize 16;
                                            Value.Integer IntegerKind.U64 7
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                                              []
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [ Value.Integer IntegerKind.Usize 16 ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "openvm_stark_sdk::engine::StarkFriEngine",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_sdk::config::baby_bear_poseidon2::BabyBearPermutationEngine")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::sponge::PaddingFreeSponge")
                                                      [
                                                        Value.Integer IntegerKind.Usize 16;
                                                        Value.Integer IntegerKind.Usize 8;
                                                        Value.Integer IntegerKind.Usize 8
                                                      ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_poseidon2::Poseidon2")
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            Value.Integer IntegerKind.U64 7
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                Ty.path
                                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::compression::TruncatedPermutation")
                                                      [
                                                        Value.Integer IntegerKind.Usize 2;
                                                        Value.Integer IntegerKind.Usize 8;
                                                        Value.Integer IntegerKind.Usize 16
                                                      ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_poseidon2::Poseidon2")
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            Value.Integer IntegerKind.U64 7
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                Ty.path
                                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                              ]
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                      [ Value.Integer IntegerKind.Usize 8 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::sponge::PaddingFreeSponge")
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            Value.Integer IntegerKind.Usize 8;
                                                            Value.Integer IntegerKind.Usize 8
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "p3_poseidon2::Poseidon2")
                                                              [
                                                                Value.Integer IntegerKind.Usize 16;
                                                                Value.Integer IntegerKind.U64 7
                                                              ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                    Ty.path
                                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::compression::TruncatedPermutation")
                                                          [
                                                            Value.Integer IntegerKind.Usize 2;
                                                            Value.Integer IntegerKind.Usize 8;
                                                            Value.Integer IntegerKind.Usize 16
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "p3_poseidon2::Poseidon2")
                                                              [
                                                                Value.Integer IntegerKind.Usize 16;
                                                                Value.Integer IntegerKind.U64 7
                                                              ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                    Ty.path
                                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_challenger::duplex_challenger::DuplexChallenger")
                                                  [
                                                    Value.Integer IntegerKind.Usize 16;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "p3_poseidon2::Poseidon2")
                                                      [
                                                        Value.Integer IntegerKind.Usize 16;
                                                        Value.Integer IntegerKind.U64 7
                                                      ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                          [ Value.Integer IntegerKind.Usize 16 ]
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                          [ Value.Integer IntegerKind.Usize 16 ]
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters";
                                                            Ty.path
                                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                          ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_challenger::duplex_challenger::DuplexChallenger")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.Usize 8
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_poseidon2::Poseidon2")
                                                  [
                                                    Value.Integer IntegerKind.Usize 16;
                                                    Value.Integer IntegerKind.U64 7
                                                  ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                      [ Value.Integer IntegerKind.Usize 16 ]
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                      [ Value.Integer IntegerKind.Usize 16 ]
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters";
                                                        Ty.path
                                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_stark_sdk::config::fri_params::FriParameters",
                                        M.get_associated_function (|
                                          Ty.path
                                            "openvm_stark_sdk::config::fri_params::FriParameters",
                                          "new_for_testing",
                                          [],
                                          []
                                        |),
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_simple_test :
        M.IsAssociatedFunction.C Self "simple_test" simple_test.
      Admitted.
      Global Typeclasses Opaque simple_test.
      
      (*
          pub fn simple_test_with_expected_error(&self, expected_error: VerificationError) {
              let msg = format!(
                  "Expected verification to fail with {:?}, but it didn't",
                  &expected_error
              );
              let result = self.simple_test();
              assert_eq!(result.err(), Some(expected_error), "{}", msg);
          }
      *)
      Definition simple_test_with_expected_error
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; expected_error ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              (Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ])
                                              "Packing";
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              (Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ])
                                              "Packing";
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |));
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ])
                                                  "Packing";
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::TruncatedPermutation")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |));
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ])
                                                  "Packing";
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |))
                                          ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                  |))
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ]
                  ],
                self
              |) in
            let expected_error :=
              M.alloc (|
                Ty.path "openvm_stark_backend::verifier::error::VerificationError",
                expected_error
              |) in
            M.read (|
              let~ msg : Ty.path "alloc::string::String" :=
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_function (|
                    "core::hint::must_use",
                    [],
                    [ Ty.path "alloc::string::String" ]
                  |),
                  [
                    M.read (|
                      let~ res : Ty.path "alloc::string::String" :=
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_function (| "alloc::fmt::format", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 1
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array
                                          [
                                            mk_str (| "Expected verification to fail with " |);
                                            mk_str (| ", but it didn't" |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ Ty.path "core::fmt::rt::Argument" ],
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_stark_backend::verifier::error::VerificationError"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "openvm_stark_backend::verifier::error::VerificationError"
                                                          ],
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          expected_error
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      res
                    |)
                  ]
                |) in
              let~ result :
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::engine::VerificationData")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::config::StarkConfig")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_field::extension::binomial_extension::BinomialExtensionField")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.Usize 8;
                                              Value.Integer IntegerKind.Usize 8
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_poseidon2::Poseidon2")
                                                [
                                                  Value.Integer IntegerKind.Usize 16;
                                                  Value.Integer IntegerKind.U64 7
                                                ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters";
                                                      Ty.path
                                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                    ]
                                                ]
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::compression::TruncatedPermutation")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 8;
                                              Value.Integer IntegerKind.Usize 16
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_poseidon2::Poseidon2")
                                                [
                                                  Value.Integer IntegerKind.Usize 16;
                                                  Value.Integer IntegerKind.U64 7
                                                ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters";
                                                      Ty.path
                                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ]
                        ];
                      Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::engine::VerificationData")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::config::StarkConfig")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 8
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 8;
                                          Value.Integer IntegerKind.Usize 16
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_poseidon2::Poseidon2")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.U64 7
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ];
                                              Ty.apply
                                                (Ty.path
                                                  "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                [ Value.Integer IntegerKind.Usize 16 ]
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters";
                                                  Ty.path
                                                    "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_field::extension::binomial_extension::BinomialExtensionField")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                            [
                                              Value.Integer IntegerKind.Usize 16;
                                              Value.Integer IntegerKind.Usize 8;
                                              Value.Integer IntegerKind.Usize 8
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_poseidon2::Poseidon2")
                                                [
                                                  Value.Integer IntegerKind.Usize 16;
                                                  Value.Integer IntegerKind.U64 7
                                                ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters";
                                                      Ty.path
                                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                    ]
                                                ]
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::compression::TruncatedPermutation")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 8;
                                              Value.Integer IntegerKind.Usize 16
                                            ]
                                            [
                                              Ty.apply
                                                (Ty.path "p3_poseidon2::Poseidon2")
                                                [
                                                  Value.Integer IntegerKind.Usize 16;
                                                  Value.Integer IntegerKind.U64 7
                                                ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                    [ Value.Integer IntegerKind.Usize 16 ]
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters";
                                                      Ty.path
                                                        "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.Usize 8
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_poseidon2::Poseidon2")
                                        [
                                          Value.Integer IntegerKind.Usize 16;
                                          Value.Integer IntegerKind.U64 7
                                        ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                            [ Value.Integer IntegerKind.Usize 16 ]
                                            [
                                              Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                              Ty.path
                                                "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                            ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                [
                                  Value.Integer IntegerKind.Usize 16;
                                  Value.Integer IntegerKind.Usize 8
                                ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_poseidon2::Poseidon2")
                                    [
                                      Value.Integer IntegerKind.Usize 16;
                                      Value.Integer IntegerKind.U64 7
                                    ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [
                                          Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                          Ty.path
                                            "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                        ]
                                    ]
                                ]
                            ]
                        ];
                      Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              (Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ])
                                              "Packing";
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_symmetric::compression::TruncatedPermutation")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_poseidon2::Poseidon2")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_field::field::Field"
                                              []
                                              []
                                              (Ty.apply
                                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                []
                                                [
                                                  Ty.path
                                                    "p3_baby_bear::baby_bear::BabyBearParameters"
                                                ])
                                              "Packing";
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.path
                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                Ty.path
                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_ValMmcs_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.apply
                                          (Ty.path "p3_symmetric::sponge::PaddingFreeSponge")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Hash_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |));
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ])
                                                  "Packing";
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::TruncatedPermutation")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                              |));
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Compress_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.apply
                                              (Ty.path "p3_poseidon2::Poseidon2")
                                              [
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                  |));
                                                M.unevaluated_const
                                                  (mk_str (|
                                                    "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                                  |))
                                              ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_field::field::Field"
                                                  []
                                                  []
                                                  (Ty.apply
                                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                    []
                                                    [
                                                      Ty.path
                                                        "p3_baby_bear::baby_bear::BabyBearParameters"
                                                    ])
                                                  "Packing";
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                  [
                                                    M.unevaluated_const
                                                      (mk_str (|
                                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                                      |))
                                                  ]
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                    Ty.path
                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_poseidon2::Poseidon2")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |));
                                        M.unevaluated_const
                                          (mk_str (|
                                            "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_field::field::Field"
                                          []
                                          []
                                          (Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ])
                                          "Packing";
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |))
                                          ]
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                          [
                                            M.unevaluated_const
                                              (mk_str (|
                                                "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                              |))
                                          ]
                                          [
                                            Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                            Ty.path
                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_challenger::duplex_challenger::DuplexChallenger")
                              [
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                  |));
                                M.unevaluated_const
                                  (mk_str (|
                                    "openvm_stark_sdk_config_baby_bear_poseidon2_Challenger_discriminant"
                                  |))
                              ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_poseidon2::Poseidon2")
                                  [
                                    M.unevaluated_const
                                      (mk_str (|
                                        "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                      |));
                                    M.unevaluated_const
                                      (mk_str (|
                                        "p3_baby_bear_poseidon2_Poseidon2BabyBear_discriminant"
                                      |))
                                  ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_field::field::Field"
                                      []
                                      []
                                      (Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ])
                                      "Packing";
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                      [
                                        M.unevaluated_const
                                          (mk_str (|
                                            "openvm_stark_sdk_config_baby_bear_poseidon2_Perm_discriminant"
                                          |))
                                      ]
                                      [
                                        Ty.path "p3_baby_bear::baby_bear::BabyBearParameters";
                                        Ty.path
                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                      ]
                                  ]
                              ]
                          ]
                      ],
                    "simple_test",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
                          ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
                          ]
                      ],
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::engine::VerificationData")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::sponge::PaddingFreeSponge")
                                                      [
                                                        Value.Integer IntegerKind.Usize 16;
                                                        Value.Integer IntegerKind.Usize 8;
                                                        Value.Integer IntegerKind.Usize 8
                                                      ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_poseidon2::Poseidon2")
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            Value.Integer IntegerKind.U64 7
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                Ty.path
                                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::compression::TruncatedPermutation")
                                                      [
                                                        Value.Integer IntegerKind.Usize 2;
                                                        Value.Integer IntegerKind.Usize 8;
                                                        Value.Integer IntegerKind.Usize 16
                                                      ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path "p3_poseidon2::Poseidon2")
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            Value.Integer IntegerKind.U64 7
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::monty_31::MontyField31")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                              [ Value.Integer IntegerKind.Usize 16 ]
                                                              [
                                                                Ty.path
                                                                  "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                Ty.path
                                                                  "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                              ]
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                      [ Value.Integer IntegerKind.Usize 8 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::sponge::PaddingFreeSponge")
                                                          [
                                                            Value.Integer IntegerKind.Usize 16;
                                                            Value.Integer IntegerKind.Usize 8;
                                                            Value.Integer IntegerKind.Usize 8
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "p3_poseidon2::Poseidon2")
                                                              [
                                                                Value.Integer IntegerKind.Usize 16;
                                                                Value.Integer IntegerKind.U64 7
                                                              ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                    Ty.path
                                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::compression::TruncatedPermutation")
                                                          [
                                                            Value.Integer IntegerKind.Usize 2;
                                                            Value.Integer IntegerKind.Usize 8;
                                                            Value.Integer IntegerKind.Usize 16
                                                          ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "p3_poseidon2::Poseidon2")
                                                              [
                                                                Value.Integer IntegerKind.Usize 16;
                                                                Value.Integer IntegerKind.U64 7
                                                              ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::monty_31::MontyField31")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      16
                                                                  ]
                                                                  [
                                                                    Ty.path
                                                                      "p3_baby_bear::baby_bear::BabyBearParameters";
                                                                    Ty.path
                                                                      "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_challenger::duplex_challenger::DuplexChallenger")
                                                  [
                                                    Value.Integer IntegerKind.Usize 16;
                                                    Value.Integer IntegerKind.Usize 8
                                                  ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "p3_poseidon2::Poseidon2")
                                                      [
                                                        Value.Integer IntegerKind.Usize 16;
                                                        Value.Integer IntegerKind.U64 7
                                                      ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                          [ Value.Integer IntegerKind.Usize 16 ]
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                          [ Value.Integer IntegerKind.Usize 16 ]
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters";
                                                            Ty.path
                                                              "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                          ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_challenger::duplex_challenger::DuplexChallenger")
                                              [
                                                Value.Integer IntegerKind.Usize 16;
                                                Value.Integer IntegerKind.Usize 8
                                              ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_poseidon2::Poseidon2")
                                                  [
                                                    Value.Integer IntegerKind.Usize 16;
                                                    Value.Integer IntegerKind.U64 7
                                                  ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::no_packing::poseidon2::Poseidon2ExternalLayerMonty31")
                                                      [ Value.Integer IntegerKind.Usize 16 ]
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::no_packing::poseidon2::Poseidon2InternalLayerMonty31")
                                                      [ Value.Integer IntegerKind.Usize 16 ]
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters";
                                                        Ty.path
                                                          "p3_baby_bear::poseidon2::BabyBearInternalLayerParameters"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ];
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ],
                                "err",
                                [],
                                []
                              |),
                              [ M.read (| result |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                              ],
                            Value.StructTuple
                              "core::option::Option::Some"
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
                              [ M.read (| expected_error |) ]
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ]
                              ],
                            γ0_0
                          |) in
                        let right_val :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ]
                              ],
                            γ0_1
                          |) in
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::verifier::error::VerificationError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_stark_backend::verifier::error::VerificationError"
                                                ]
                                            ],
                                            "eq",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      Value.StructTuple
                                        "core::panicking::AssertKind::Eq"
                                        []
                                        []
                                        [] in
                                    M.alloc (|
                                      Ty.path "never",
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::verifier::error::VerificationError"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::verifier::error::VerificationError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            []
                                            [ Ty.path "core::fmt::Arguments" ]
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_v1",
                                                  [
                                                    Value.Integer IntegerKind.Usize 1;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ]
                                                            ],
                                                          Value.Array [ mk_str (| "" |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [ Ty.path "core::fmt::rt::Argument" ],
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "alloc::string::String"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        msg
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |)))
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_simple_test_with_expected_error :
        M.IsAssociatedFunction.C
          Self
          "simple_test_with_expected_error"
          simple_test_with_expected_error.
      Admitted.
      Global Typeclasses Opaque simple_test_with_expected_error.
    End Impl_openvm_circuit_arch_testing_VmChipTester_openvm_stark_backend_config_StarkConfig_p3_fri_two_adic_pcs_TwoAdicFriPcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_dft_radix_2_dit_parallel_Radix2DitParallel_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_symmetric_sponge_PaddingFreeSponge_expr_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_symmetric_compression_TruncatedPermutation_Usize_2_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_commit_adapters_extension_mmcs_ExtensionMmcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_symmetric_sponge_PaddingFreeSponge_expr_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_symmetric_compression_TruncatedPermutation_Usize_2_expr_expr_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_duplex_challenger_DuplexChallenger_expr_expr_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_duplex_challenger_DuplexChallenger_expr_expr_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_poseidon2_Poseidon2_expr_expr_associated_in_trait_p3_field_field_Field___p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_Packing_p3_monty_31_no_packing_poseidon2_Poseidon2ExternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_monty_31_no_packing_poseidon2_Poseidon2InternalLayerMonty31_expr_p3_baby_bear_baby_bear_BabyBearParameters_p3_baby_bear_poseidon2_BabyBearInternalLayerParameters.
    
    Module Impl_openvm_circuit_arch_testing_VmChipTester_openvm_stark_backend_config_StarkConfig_p3_fri_two_adic_pcs_TwoAdicFriPcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_dft_radix_2_dit_parallel_Radix2DitParallel_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_Usize_32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_u8_p3_symmetric_serializing_hasher_SerializingHasher32_p3_blake3_Blake3_p3_symmetric_compression_CompressionFunctionFromHasher_Usize_2_Usize_32_p3_blake3_Blake3_p3_commit_adapters_extension_mmcs_ExtensionMmcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_Usize_32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_u8_p3_symmetric_serializing_hasher_SerializingHasher32_p3_blake3_Blake3_p3_symmetric_compression_CompressionFunctionFromHasher_Usize_2_Usize_32_p3_blake3_Blake3_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_serializing_challenger_SerializingChallenger32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_p3_blake3_Blake3_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_serializing_challenger_SerializingChallenger32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_p3_blake3_Blake3.
      Definition Self : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::testing::VmChipTester")
          []
          [
            Ty.apply
              (Ty.path "openvm_stark_backend::config::StarkConfig")
              []
              [
                Ty.apply
                  (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.path "u8";
                        Ty.apply
                          (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32")
                          []
                          [ Ty.path "p3_blake3::Blake3" ];
                        Ty.apply
                          (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "p3_blake3::Blake3" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.path "u8";
                            Ty.apply
                              (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32")
                              []
                              [ Ty.path "p3_blake3::Blake3" ];
                            Ty.apply
                              (Ty.path "p3_symmetric::compression::CompressionFunctionFromHasher")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 32
                              ]
                              [ Ty.path "p3_blake3::Blake3" ]
                          ]
                      ]
                  ];
                Ty.apply
                  (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                      ];
                    Ty.apply
                      (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                          []
                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                        Ty.apply
                          (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                          [ Value.Integer IntegerKind.Usize 32 ]
                          [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                      ]
                  ];
                Ty.apply
                  (Ty.path "p3_field::extension::binomial_extension::BinomialExtensionField")
                  [ Value.Integer IntegerKind.Usize 4 ]
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                  ];
                Ty.apply
                  (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                  []
                  [
                    Ty.apply
                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                      []
                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                    Ty.apply
                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                  ]
              ]
          ].
      
      (*
          pub fn simple_test(&self) -> Result<VerificationData<BabyBearBlake3Config>, VerificationError> {
              self.test(|| BabyBearBlake3Engine::new(FriParameters::new_for_testing(1)))
          }
      *)
      Definition simple_test (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                          []
                                          [ Ty.path "p3_blake3::Blake3" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 32
                                          ]
                                          [ Ty.path "p3_blake3::Blake3" ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ]
                      ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::engine::VerificationData")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::config::StarkConfig")
                        []
                        [
                          Ty.apply
                            (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.path "u8";
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::serializing_hasher::SerializingHasher32")
                                    []
                                    [ Ty.path "p3_blake3::Blake3" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_symmetric::compression::CompressionFunctionFromHasher")
                                    [
                                      Value.Integer IntegerKind.Usize 2;
                                      Value.Integer IntegerKind.Usize 32
                                    ]
                                    [ Ty.path "p3_blake3::Blake3" ]
                                ];
                              Ty.apply
                                (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_field::extension::binomial_extension::BinomialExtensionField")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                            ];
                          Ty.apply
                            (Ty.path
                              "p3_challenger::serializing_challenger::SerializingChallenger32")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_monty_31::monty_31::MontyField31")
                                []
                                [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                              Ty.apply
                                (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                            ]
                        ]
                    ];
                  Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                ],
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::config::StarkConfig")
                      []
                      [
                        Ty.apply
                          (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.path "u8";
                                Ty.apply
                                  (Ty.path "p3_symmetric::serializing_hasher::SerializingHasher32")
                                  []
                                  [ Ty.path "p3_blake3::Blake3" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_symmetric::compression::CompressionFunctionFromHasher")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 32
                                  ]
                                  [ Ty.path "p3_blake3::Blake3" ]
                              ];
                            Ty.apply
                              (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "p3_field::extension::binomial_extension::BinomialExtensionField")
                          [ Value.Integer IntegerKind.Usize 4 ]
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                          ];
                        Ty.apply
                          (Ty.path "p3_challenger::serializing_challenger::SerializingChallenger32")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_monty_31::monty_31::MontyField31")
                              []
                              [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                            Ty.apply
                              (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                              [ Value.Integer IntegerKind.Usize 32 ]
                              [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                          ]
                      ]
                  ],
                "test",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_stark_sdk::config::baby_bear_bytehash::BabyBearByteHashEngine")
                    []
                    [ Ty.path "p3_blake3::Blake3" ];
                  Ty.function
                    []
                    (Ty.apply
                      (Ty.path
                        "openvm_stark_sdk::config::baby_bear_bytehash::BabyBearByteHashEngine")
                      []
                      [ Ty.path "p3_blake3::Blake3" ])
                ]
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path
                                "openvm_stark_sdk::config::baby_bear_bytehash::BabyBearByteHashEngine")
                              []
                              [ Ty.path "p3_blake3::Blake3" ],
                            M.alloc (| Ty.tuple [], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_stark_sdk::config::baby_bear_bytehash::BabyBearByteHashEngine")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ],
                                    M.get_trait_method (|
                                      "openvm_stark_sdk::engine::StarkFriEngine",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_sdk::config::baby_bear_bytehash::BabyBearByteHashEngine")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.path "u8";
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                                      []
                                                      [ Ty.path "p3_blake3::Blake3" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                                      [
                                                        Value.Integer IntegerKind.Usize 2;
                                                        Value.Integer IntegerKind.Usize 32
                                                      ]
                                                      [ Ty.path "p3_blake3::Blake3" ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.path "u8";
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                                          []
                                                          [ Ty.path "p3_blake3::Blake3" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                                          [
                                                            Value.Integer IntegerKind.Usize 2;
                                                            Value.Integer IntegerKind.Usize 32
                                                          ]
                                                          [ Ty.path "p3_blake3::Blake3" ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_challenger::hash_challenger::HashChallenger")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_challenger::hash_challenger::HashChallenger")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                              ]
                                          ]
                                      ],
                                      "new",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_stark_sdk::config::fri_params::FriParameters",
                                        M.get_associated_function (|
                                          Ty.path
                                            "openvm_stark_sdk::config::fri_params::FriParameters",
                                          "new_for_testing",
                                          [],
                                          []
                                        |),
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                      |)
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_simple_test :
        M.IsAssociatedFunction.C Self "simple_test" simple_test.
      Admitted.
      Global Typeclasses Opaque simple_test.
      
      (*
          pub fn simple_test_with_expected_error(&self, expected_error: VerificationError) {
              let msg = format!(
                  "Expected verification to fail with {:?}, but it didn't",
                  &expected_error
              );
              let result = self.simple_test();
              assert_eq!(result.err(), Some(expected_error), "{}", msg);
          }
      *)
      Definition simple_test_with_expected_error
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        match ε, τ, α with
        | [], [], [ self; expected_error ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                          []
                                          [ Ty.path "p3_blake3::Blake3" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 32
                                          ]
                                          [ Ty.path "p3_blake3::Blake3" ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ]
                      ]
                  ],
                self
              |) in
            let expected_error :=
              M.alloc (|
                Ty.path "openvm_stark_backend::verifier::error::VerificationError",
                expected_error
              |) in
            M.read (|
              let~ msg : Ty.path "alloc::string::String" :=
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_function (|
                    "core::hint::must_use",
                    [],
                    [ Ty.path "alloc::string::String" ]
                  |),
                  [
                    M.read (|
                      let~ res : Ty.path "alloc::string::String" :=
                        M.call_closure (|
                          Ty.path "alloc::string::String",
                          M.get_function (| "alloc::fmt::format", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 1
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array
                                          [
                                            mk_str (| "Expected verification to fail with " |);
                                            mk_str (| ", but it didn't" |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ Ty.path "core::fmt::rt::Argument" ],
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_debug",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_stark_backend::verifier::error::VerificationError"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "openvm_stark_backend::verifier::error::VerificationError"
                                                          ],
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          expected_error
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      res
                    |)
                  ]
                |) in
              let~ result :
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::engine::VerificationData")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::config::StarkConfig")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_field::extension::binomial_extension::BinomialExtensionField")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.path "u8";
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::serializing_hasher::SerializingHasher32")
                                            []
                                            [ Ty.path "p3_blake3::Blake3" ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::compression::CompressionFunctionFromHasher")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 32
                                            ]
                                            [ Ty.path "p3_blake3::Blake3" ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_challenger::serializing_challenger::SerializingChallenger32")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ]
                        ];
                      Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::engine::VerificationData")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::config::StarkConfig")
                            []
                            [
                              Ty.apply
                                (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.path "u8";
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::serializing_hasher::SerializingHasher32")
                                        []
                                        [ Ty.path "p3_blake3::Blake3" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_symmetric::compression::CompressionFunctionFromHasher")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 32
                                        ]
                                        [ Ty.path "p3_blake3::Blake3" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path
                                          "p3_field::extension::binomial_extension::BinomialExtensionField")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [
                                          Ty.apply
                                            (Ty.path "p3_monty_31::monty_31::MontyField31")
                                            []
                                            [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters"
                                            ];
                                          Ty.path "u8";
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::serializing_hasher::SerializingHasher32")
                                            []
                                            [ Ty.path "p3_blake3::Blake3" ];
                                          Ty.apply
                                            (Ty.path
                                              "p3_symmetric::compression::CompressionFunctionFromHasher")
                                            [
                                              Value.Integer IntegerKind.Usize 2;
                                              Value.Integer IntegerKind.Usize 32
                                            ]
                                            [ Ty.path "p3_blake3::Blake3" ]
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_field::extension::binomial_extension::BinomialExtensionField")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "p3_challenger::serializing_challenger::SerializingChallenger32")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "p3_monty_31::monty_31::MontyField31")
                                        []
                                        [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                      Ty.apply
                                        (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_field::extension::binomial_extension::BinomialExtensionField")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                ];
                              Ty.apply
                                (Ty.path
                                  "p3_challenger::serializing_challenger::SerializingChallenger32")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "p3_monty_31::monty_31::MontyField31")
                                    []
                                    [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                  Ty.apply
                                    (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                ]
                            ]
                        ];
                      Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::VmChipTester")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                          []
                          [
                            Ty.apply
                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.path "u8";
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                      []
                                      [ Ty.path "p3_blake3::Blake3" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                      [
                                        Value.Integer IntegerKind.Usize 2;
                                        Value.Integer IntegerKind.Usize 32
                                      ]
                                      [ Ty.path "p3_blake3::Blake3" ]
                                  ];
                                Ty.apply
                                  (Ty.path "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path
                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [
                                        Ty.apply
                                          (Ty.path "p3_monty_31::monty_31::MontyField31")
                                          []
                                          [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                        Ty.path "u8";
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                          []
                                          [ Ty.path "p3_blake3::Blake3" ];
                                        Ty.apply
                                          (Ty.path
                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 32
                                          ]
                                          [ Ty.path "p3_blake3::Blake3" ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path
                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                                  ];
                                Ty.apply
                                  (Ty.path
                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "p3_monty_31::monty_31::MontyField31")
                                      []
                                      [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                    Ty.apply
                                      (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                      [ Value.Integer IntegerKind.Usize 32 ]
                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ]
                              ];
                            Ty.apply
                              (Ty.path
                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                              []
                              [
                                Ty.apply
                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                  []
                                  [ Ty.path "p3_baby_bear::baby_bear::BabyBearParameters" ];
                                Ty.apply
                                  (Ty.path "p3_challenger::hash_challenger::HashChallenger")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                              ]
                          ]
                      ],
                    "simple_test",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
                          ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
                          ]
                      ],
                    Value.Tuple
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::engine::VerificationData")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::config::StarkConfig")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "p3_fri::two_adic_pcs::TwoAdicFriPcs")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_dft::radix_2_dit_parallel::Radix2DitParallel")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.path "u8";
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::serializing_hasher::SerializingHasher32")
                                                      []
                                                      [ Ty.path "p3_blake3::Blake3" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_symmetric::compression::CompressionFunctionFromHasher")
                                                      [
                                                        Value.Integer IntegerKind.Usize 2;
                                                        Value.Integer IntegerKind.Usize 32
                                                      ]
                                                      [ Ty.path "p3_blake3::Blake3" ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_commit::adapters::extension_mmcs::ExtensionMmcs")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                      [ Value.Integer IntegerKind.Usize 4 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_merkle_tree::mmcs::MerkleTreeMmcs")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_monty_31::monty_31::MontyField31")
                                                          []
                                                          [
                                                            Ty.path
                                                              "p3_baby_bear::baby_bear::BabyBearParameters"
                                                          ];
                                                        Ty.path "u8";
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::serializing_hasher::SerializingHasher32")
                                                          []
                                                          [ Ty.path "p3_blake3::Blake3" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "p3_symmetric::compression::CompressionFunctionFromHasher")
                                                          [
                                                            Value.Integer IntegerKind.Usize 2;
                                                            Value.Integer IntegerKind.Usize 32
                                                          ]
                                                          [ Ty.path "p3_blake3::Blake3" ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_stark_backend::interaction::fri_log_up::FriLogUpPhase")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_field::extension::binomial_extension::BinomialExtensionField")
                                                  [ Value.Integer IntegerKind.Usize 4 ]
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_challenger::serializing_challenger::SerializingChallenger32")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_monty_31::monty_31::MontyField31")
                                                      []
                                                      [
                                                        Ty.path
                                                          "p3_baby_bear::baby_bear::BabyBearParameters"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "p3_challenger::hash_challenger::HashChallenger")
                                                      [ Value.Integer IntegerKind.Usize 32 ]
                                                      [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_field::extension::binomial_extension::BinomialExtensionField")
                                              [ Value.Integer IntegerKind.Usize 4 ]
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "p3_challenger::serializing_challenger::SerializingChallenger32")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "p3_monty_31::monty_31::MontyField31")
                                                  []
                                                  [
                                                    Ty.path
                                                      "p3_baby_bear::baby_bear::BabyBearParameters"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "p3_challenger::hash_challenger::HashChallenger")
                                                  [ Value.Integer IntegerKind.Usize 32 ]
                                                  [ Ty.path "u8"; Ty.path "p3_blake3::Blake3" ]
                                              ]
                                          ]
                                      ];
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ],
                                "err",
                                [],
                                []
                              |),
                              [ M.read (| result |) ]
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                              ],
                            Value.StructTuple
                              "core::option::Option::Some"
                              []
                              [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
                              [ M.read (| expected_error |) ]
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ]
                              ],
                            γ0_0
                          |) in
                        let right_val :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ]
                              ],
                            γ0_1
                          |) in
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::verifier::error::VerificationError"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_stark_backend::verifier::error::VerificationError"
                                                ]
                                            ],
                                            "eq",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    let~ kind : Ty.path "core::panicking::AssertKind" :=
                                      Value.StructTuple
                                        "core::panicking::AssertKind::Eq"
                                        []
                                        []
                                        [] in
                                    M.alloc (|
                                      Ty.path "never",
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (|
                                          "core::panicking::assert_failed",
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::verifier::error::VerificationError"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_stark_backend::verifier::error::VerificationError"
                                              ]
                                          ]
                                        |),
                                        [
                                          M.read (| kind |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| left_val |) |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| right_val |) |)
                                              |)
                                            |)
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            []
                                            [ Ty.path "core::fmt::Arguments" ]
                                            [
                                              M.call_closure (|
                                                Ty.path "core::fmt::Arguments",
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::Arguments",
                                                  "new_v1",
                                                  [
                                                    Value.Integer IntegerKind.Usize 1;
                                                    Value.Integer IntegerKind.Usize 1
                                                  ],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ]
                                                            ],
                                                          Value.Array [ mk_str (| "" |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [ Ty.path "core::fmt::rt::Argument" ],
                                                          Value.Array
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  "new_display",
                                                                  [],
                                                                  [ Ty.path "alloc::string::String"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        msg
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |)))
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_simple_test_with_expected_error :
        M.IsAssociatedFunction.C
          Self
          "simple_test_with_expected_error"
          simple_test_with_expected_error.
      Admitted.
      Global Typeclasses Opaque simple_test_with_expected_error.
    End Impl_openvm_circuit_arch_testing_VmChipTester_openvm_stark_backend_config_StarkConfig_p3_fri_two_adic_pcs_TwoAdicFriPcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_dft_radix_2_dit_parallel_Radix2DitParallel_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_Usize_32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_u8_p3_symmetric_serializing_hasher_SerializingHasher32_p3_blake3_Blake3_p3_symmetric_compression_CompressionFunctionFromHasher_Usize_2_Usize_32_p3_blake3_Blake3_p3_commit_adapters_extension_mmcs_ExtensionMmcs_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_merkle_tree_mmcs_MerkleTreeMmcs_Usize_32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_u8_p3_symmetric_serializing_hasher_SerializingHasher32_p3_blake3_Blake3_p3_symmetric_compression_CompressionFunctionFromHasher_Usize_2_Usize_32_p3_blake3_Blake3_openvm_stark_backend_interaction_fri_log_up_FriLogUpPhase_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_serializing_challenger_SerializingChallenger32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_p3_blake3_Blake3_p3_field_extension_binomial_extension_BinomialExtensionField_Usize_4_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_serializing_challenger_SerializingChallenger32_p3_monty_31_monty_31_MontyField31_p3_baby_bear_baby_bear_BabyBearParameters_p3_challenger_hash_challenger_HashChallenger_Usize_32_u8_p3_blake3_Blake3.
  End testing.
End arch.
