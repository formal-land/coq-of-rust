(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module testing.
    Module program.
      Module air.
        (* StructRecord
          {
            name := "ProgramDummyAir";
            const_params := [];
            ty_params := [];
            fields := [ ("bus", Ty.path "openvm_circuit::system::program::bus::ProgramBus") ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          (* Clone *)
          Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir" ],
                    self
                  |) in
                M.match_operator (|
                  Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir",
                  Value.DeclaredButUndefined,
                  [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("clone", InstanceField.Method clone) ].
        End Impl_core_clone_Clone_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_core_marker_Copy_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_marker_Copy_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          (* Debug *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir" ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field1_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ProgramDummyAir" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::system::program::bus::ProgramBus" ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_circuit::system::program::bus::ProgramBus" ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::testing::program::air::ProgramDummyAir",
                                    "bus"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          (* derive_new::new *)
          Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ bus ] =>
              ltac:(M.monadic
                (let bus :=
                  M.alloc (| Ty.path "openvm_circuit::system::program::bus::ProgramBus", bus |) in
                Value.mkStructRecord
                  "openvm_circuit::arch::testing::program::air::ProgramDummyAir"
                  []
                  []
                  [ ("bus", M.read (| bus |)) ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
          Admitted.
          Global Typeclasses Opaque new.
        End Impl_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::rap::BaseAirWithPublicValues"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ F ]
              (Self F)
              (* Instance *) [].
        End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::rap::PartitionedBaseAir"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ F ]
              (Self F)
              (* Instance *) [].
        End Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          (*
              fn width(&self) -> usize {
                  ProgramTester::<F>::width()
              }
          *)
          Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir" ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::program::ProgramTester")
                      []
                      [ F ],
                    "width",
                    [],
                    []
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "p3_air::air::BaseAir"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ F ]
              (Self F)
              (* Instance *) [ ("width", InstanceField.Method (width F)) ].
        End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
        
        Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
          Definition Self (AB : Ty.t) : Ty.t :=
            Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir".
          
          (*
              fn eval(&self, builder: &mut AB) {
                  let main = builder.main();
                  let local = main.row_slice(0);
                  let local = local.iter().map(|x| ( *x).into()).collect::<Vec<AB::Expr>>();
                  self.bus.inner.add_key_with_lookups(
                      builder,
                      local[..local.len() - 1].iter().cloned(),
                      local[local.len() - 1].clone(),
                  );
              }
          *)
          Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self AB in
            match ε, τ, α with
            | [], [], [ self; builder ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::testing::program::air::ProgramDummyAir" ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                M.read (|
                  let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        AB,
                        [],
                        [],
                        "main",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                    |) in
                  let~ local :
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2" :=
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "row_slice",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                    |) in
                  let~ local :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                          ],
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [],
                            "map",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.associated_in_trait
                                          "p3_matrix::Matrix"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "M")
                                          "{{synthetic}}'2",
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α0
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ],
                                                  γ
                                                |) in
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr",
                                                M.get_trait_method (|
                                                  "core::convert::Into",
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var",
                                                  [],
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr"
                                                  ],
                                                  "into",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| M.deref (| M.read (| x |) |) |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path "openvm_stark_backend::interaction::LookupBus",
                        "add_key_with_lookups",
                        [],
                        [
                          AB;
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "core::iter::adapters::cloned::Cloned")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ];
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::testing::program::air::ProgramDummyAir",
                              "bus"
                            |),
                            "openvm_circuit::system::program::bus::ProgramBus",
                            "inner"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::cloned::Cloned")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            [],
                            [],
                            "cloned",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeTo")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, local |);
                                        Value.mkStructRecord
                                          "core::ops::range::RangeTo"
                                          []
                                          [ Ty.path "usize" ]
                                          [
                                            ("end_",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.sub,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |))
                                          ]
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr";
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [ Ty.path "usize" ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, local |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (AB : Ty.t),
            M.IsTraitInstance
              "p3_air::air::Air"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ AB ]
              (Self AB)
              (* Instance *) [ ("eval", InstanceField.Method (eval AB)) ].
        End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_arch_testing_program_air_ProgramDummyAir.
      End air.
    End program.
  End testing.
End arch.
